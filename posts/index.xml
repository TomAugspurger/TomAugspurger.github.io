<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Tom's Blog</title><link>https://tomaugspurger.github.io/posts/</link><description>Recent content in Posts on Tom's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Feb 2023 15:11:37 -0600</lastBuildDate><atom:link href="https://tomaugspurger.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>py-spy in Azure Batch</title><link>https://tomaugspurger.github.io/posts/azure-batch-pyspy/</link><pubDate>Wed, 22 Feb 2023 15:11:37 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/azure-batch-pyspy/</guid><description>Today, I was debugging a hanging task in Azure Batch. This short post records how I used py-spy to investigate the problem.
Background Azure Batch is a compute service that we use to run container workloads. In this case, we start up a container that processes a bunch of GOES-GLM data to create STAC items for the Planetary Computer . The workflow is essentially a big
for url in urls: local_file = download_url(url) stac.</description><content:encoded><![CDATA[<p>Today, I was debugging a hanging task in <a href="https://learn.microsoft.com/en-us/azure/batch/batch-technical-overview">Azure Batch</a>.
This short post records how I used <a href="https://github.com/benfred/py-spy">py-spy</a> to investigate the problem.</p>
<h2 id="background">Background</h2>
<p>Azure Batch is a compute service that we use to run <a href="https://learn.microsoft.com/en-us/azure/batch/batch-docker-container-workloads">container
workloads</a>.
In this case, we start up a container that processes a bunch of GOES-GLM data to
create <a href="https://stacspec.org/en">STAC items</a> for the <a href="http://planetarycomputer.microsoft.com/">Planetary
Computer</a> . The workflow is essentially
a big</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> url <span style="color:#f92672">in</span> urls:
</span></span><span style="display:flex;"><span>    local_file <span style="color:#f92672">=</span> download_url(url)
</span></span><span style="display:flex;"><span>    stac<span style="color:#f92672">.</span>create_item(local_file)
</span></span></code></pre></div><p>We noticed that some Azure Batch tasks were hanging. Based on our logs, we knew
it was somewhere in that for loop, but couldn&rsquo;t determine exactly where things
were hanging. The <a href="https://github.com/stactools-packages/goes-glm">goes-glm</a> stactools package we used does read a NetCDF file,
and my experience with Dask biased me towards thinking the <code>netcdf</code> library (or
the HDF5 reader it uses) was hanging. But I wanted to confirm that before trying
to implement a fix.</p>
<h2 id="debugging">Debugging</h2>
<p>I wasn&rsquo;t able to reproduce the hanging locally, so I needed some way to debug
the actual hanging process itself. My go-to tool for this type of task is
<a href="https://github.com/benfred/py-spy">py-spy</a>. It does a lot, but in this case we&rsquo;ll use <code>py-spy dump</code> to get
something like a traceback for what&rsquo;s currently running (and hanging) in the
process.</p>
<p>Azure Batch has a handy feature for SSH-ing into the running task nodes. With an
auto-generated user and password, I had a shell on the node with the hanging
process.</p>
<p>The only wrinkle here is that we&rsquo;re using containerized workloads, so the actual
process was in a Docker container and not in the host&rsquo;s process list (I&rsquo;ll try
to follow Jacob Tomlinson&rsquo;s lead and be <a href="https://jacobtomlinson.dev/posts/2023/being-intentional-with-container-terminology/">intentional</a> about
container terminology). The <code>py-spy</code> documentation has some details on how to
use <code>py-spy</code> with docker. This <a href="https://github.com/benfred/py-spy/issues/49">comment</a> in particular has some more
details on how to run py-spy on the host to detect a process running in a
container. The upshot is a command like this, run on the Azure Batch node:</p>
<pre tabindex="0"><code>$ root@...:/home/yqjjaq/# docker run -it --pid=container:244fdfc65349 --rm --privileged --cap-add SYS_PTRACE python /bin/bash
</code></pre><p>where <code>244fdfc65349</code> is the ID of the container with the hanging process. I used
the <code>python</code> image and then <code>pip install</code>ed <code>py-spy</code> in that debugging container
(you could also use some container image with <code>py-spy</code> already installed).
Finally, I was able to run <code>py-spy dump</code> inside that running container to get
the trace:</p>
<pre tabindex="0"><code>root@306ad36c7ae3:/# py-spy dump --pid 1
Process 1: /opt/conda/bin/python /opt/conda/bin/pctasks task run blob://pctaskscommon/taskio/run/827e3fa4-be68-49c9-b8c3-3d63b31962ba/process-chunk/3/create-items/input --sas-token ... --account-url https://pctaskscommon.blob.core.windows.net/
Python v3.8.16 (/opt/conda/bin/python3.8)

Thread 0x7F8C69A78740 (active): &#34;MainThread&#34;
    read (ssl.py:1099)
    recv_into (ssl.py:1241)
    readinto (socket.py:669)
    _read_status (http/client.py:277)
    begin (http/client.py:316)
    getresponse (http/client.py:1348)
    _make_request (urllib3/connectionpool.py:444)
    urlopen (urllib3/connectionpool.py:703)
    send (requests/adapters.py:489)
    send (requests/sessions.py:701)
    request (requests/sessions.py:587)
    send (core/pipeline/transport/_requests_basic.py:338)
    send (blob/_shared/base_client.py:333)
    send (blob/_shared/base_client.py:333)
    send (core/pipeline/_base.py:100)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (blob/_shared/policies.py:290)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (blob/_shared/policies.py:489)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/policies/_redirect.py:160)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    send (core/pipeline/_base.py:69)
    run (core/pipeline/_base.py:205)
    download (blob/_generated/operations/_blob_operations.py:180)
    _initial_request (blob/_download.py:386)
    __init__ (blob/_download.py:349)
    download_blob (blob/_blob_client.py:848)
    wrapper_use_tracer (core/tracing/decorator.py:78)
    &lt;lambda&gt; (core/storage/blob.py:514)
    with_backoff (core/utils/backoff.py:136)
    download_file (core/storage/blob.py:513)
    create_item (goes_glm.py:32)
    create_items (dataset/items/task.py:117)
    run (dataset/items/task.py:153)
    parse_and_run (task/task.py:53)
    run_task (task/run.py:138)
    run_cmd (task/_cli.py:32)
    run_cmd (task/cli.py:50)
    new_func (click/decorators.py:26)
    invoke (click/core.py:760)
    invoke (click/core.py:1404)
    invoke (click/core.py:1657)
    invoke (click/core.py:1657)
    main (click/core.py:1055)
    __call__ (click/core.py:1130)
    cli (cli/cli.py:140)
    &lt;module&gt; (pctasks:8)
Thread 0x7F8C4A84F700 (idle): &#34;fsspecIO&#34;
    select (selectors.py:468)
    _run_once (asyncio/base_events.py:1823)
    run_forever (asyncio/base_events.py:570)
    run (threading.py:870)
    _bootstrap_inner (threading.py:932)
    _bootstrap (threading.py:890)
Thread 0x7F8C4A00E700 (active): &#34;ThreadPoolExecutor-0_0&#34;
    _worker (concurrent/futures/thread.py:78)
    run (threading.py:870)
    _bootstrap_inner (threading.py:932)
    _bootstrap (threading.py:890)
</code></pre><p>And we&rsquo;ve found our culprit! The line</p>
<pre tabindex="0"><code>download_file (core/storage/blob.py:513)
</code></pre><p>and everything above it indicates that the process is hanging in the <em>download</em>
stage, not the NetCDF reading stage!</p>
<h2 id="this-fix">This fix</h2>
<p>&ldquo;Fixing&rdquo; this is pretty easy. The Python SDK for Azure Blob Storage includes the
option to set a timeout. Now if the download hangs it should raise a
<code>TimeoutError</code>. Then our handler will automatically catch and retry it, and
hopefully succeed. It doesn&rsquo;t address the actual cause of something deep inside
the networking stack hanging, but it&rsquo;s good enough for our purposes.</p>
]]></content:encoded></item><item><title>Dask-GeoPandas Spatial Partitioning Performance</title><link>https://tomaugspurger.github.io/posts/dask-geopandas-partitions/</link><pubDate>Thu, 09 Feb 2023 08:10:59 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/dask-geopandas-partitions/</guid><description>A college reached out yesterday about a performance issue they were hitting when working with the Microsoft Building Footprints dataset we host on the Planetary Computer. They wanted to get the building footprints for a small section of Turkey, but noticed that the performance was relatively slow and it seemed like a lot of data was being read.
This post details how we debugged what was going on, and the steps we took to fix it.</description><content:encoded><![CDATA[<p>A college reached out yesterday about a performance issue they were hitting when
working with the <a href="https://planetarycomputer.microsoft.com/dataset/ms-buildings">Microsoft Building Footprints</a> dataset we host
on the Planetary Computer. They wanted to get the building footprints for a
small section of Turkey, but noticed that the performance was relatively slow
and it seemed like a lot of data was being read.</p>
<p>This post details how we debugged what was going on, and the steps we took to
fix it.</p>
<h2 id="the-problem">The problem</h2>
<p>First, my college sent a <a href="https://matthewrocklin.com/minimal-bug-reports">minimal, complete, and verifiable example</a> of
the problem. This let me very easily reproduce it. From his report, the first
thing I suspected was an issue with the spatial partitioning. The files were
<em>supposed</em> to be partitioned by <a href="https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system">quadkey</a>, so that all the building
footprints in a single area are in the same partition. Then spatial queries will
be very fast: you only need to load a small subset of the data.</p>
<p>When I benchmarked things, it took about:</p>
<ol>
<li>16 seconds to read the metadata with <code>dask_geopandas.read_parquet</code></li>
<li>60 seconds to read the data and clip it to the area of interest</li>
</ol>
<p>Looking at the spatial partitions of the data showed that it was clearly not
spatially partitioned:</p>
<p><img loading="lazy" src="/images/dask-geopandas-spatial-partitions-bad.png" alt="non-partitioned"  />
</p>
<p>It&rsquo;s clearer zoomed in, but the box is a bit fuzzy because it&rsquo;s actually
a bunch of boxes with very slightly different extents.</p>
<p>Turns out we dropped a few of the newer ms-buildings STAC items, which were
spatially partitioned, during our last release. Oops.
(Don&rsquo;t worry, we&rsquo;re working on a better system for this.)</p>
<p>Once I got those items re-ingested, things did look better.</p>
<p><img loading="lazy" src="/images/dask-geopandas-spatial-partitions-good.png" alt="partitioned"  />
</p>
<p>It wasn&rsquo;t all good news, though. Our timings went to</p>
<ol>
<li>56 seconds to read the metadata with <code>dask_geopandas.read_parquet</code> (ouch)</li>
<li>0.5 seconds to read the data and clip it to the area of interest (yay!)</li>
</ol>
<p>The speedup from 60 seconds to 0.5 seconds is exactly why we want to spatially
partition the data. When you&rsquo;re querying for a small area of interest,
the spatially partitioned data means you can ignore most of the data and speed
things up a lot. But what&rsquo;s going on with the slowdown for the first stage
(reading metadata)?</p>
<p>The spatially partitioned dataset also had many more partitions in the Parquet
dataset, i.e. many more individual files in Blob Storage (a few hundred instead of 5-6).
At the moment, <code>dask-geopandas</code> needs to open each individual file to read its spatial bounds. That was fine
when we only had a few files, but when you have a few hundred the small amount of time it takes to read
each file adds up. In this case, it added up to about 56 seconds of waiting just to read the metadata.</p>
<h2 id="speeding-up-the-metadata-reading">Speeding up the metadata reading</h2>
<p>To speed up the metadata reading, we use the tried-and-true method of parallelizing it
with Dask (yes, we&rsquo;re using Dask to speed up Dask). Instead of doing a <code>dask_geopandas.read_parquet</code>
on the client (which in turn executes some <code>pyarrow.parquet</code> stuff to read the fragments and get
the metadata from each file) in serial, we&rsquo;ll run a bunch of <code>dask_geopandas.read_parquet</code>
calls on the cluster in parallel (I&rsquo;m just using a <code>LocalCluster</code> in this example).</p>
<p>The snippet below re-uses <code>dask_geopandas.read_parquet</code>, but applies it in
parallel using <code>client.map</code>. We&rsquo;ll make a bunch of Dask DataFrames on the
cluster (one per file) and then we use <code>client.gather</code> to bring back the Dask
DataFrames (just the <em>metadata</em>, not the data!) to the client and concat them
together into one big Dask DataFrame.</p>
<p>There&rsquo;s a <a href="https://github.com/geopandas/dask-geopandas/issues/237">small bug</a> in dask-geopandas around serializing the spatial
partitions on a Dask GeoDataFrame. Once <a href="https://github.com/geopandas/dask-geopandas/pull/238">my fix</a> is merged then this will
be a bit cleaner: everything to do with <code>spatial_partitions</code> can be deleted
and you&rsquo;re just left with reading the metadata on the cluster, bringing it
back to the client, and concatenating at the end.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> distributed
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dask_geopandas
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.dataframe <span style="color:#66d9ef">as</span> dd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> fsspec
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_parquet</span>(paths, storage_options):
</span></span><span style="display:flex;"><span>    client <span style="color:#f92672">=</span> distributed<span style="color:#f92672">.</span>get_client()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Read each partition&#39;s metadata on the cluster</span>
</span></span><span style="display:flex;"><span>    df_futures <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>map(
</span></span><span style="display:flex;"><span>        dask_geopandas<span style="color:#f92672">.</span>read_parquet, paths, storage_options<span style="color:#f92672">=</span>storage_options
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># workaround https://github.com/geopandas/dask-geopandas/issues/237</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_spatial_partitions</span>(x):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x<span style="color:#f92672">.</span>spatial_partitions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    spatial_partitions_futures <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>map(get_spatial_partitions, df_futures)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Pull back locally. This takes the most time, waiting for computation</span>
</span></span><span style="display:flex;"><span>    dfs, spatial_partitions <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>gather([df_futures, spatial_partitions_futures])
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> df, sp <span style="color:#f92672">in</span> zip(dfs, spatial_partitions):
</span></span><span style="display:flex;"><span>        df<span style="color:#f92672">.</span>spatial_partitions <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    full_country <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>concat(dfs)
</span></span><span style="display:flex;"><span>    full_country<span style="color:#f92672">.</span>spatial_partitions <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat(spatial_partitions, ignore_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> full_country
</span></span></code></pre></div><p>We get the paths with something like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> fs, token, [root] <span style="color:#f92672">=</span> fsspec<span style="color:#f92672">.</span>get_fs_token_paths(asset<span style="color:#f92672">.</span>href, storage_options<span style="color:#f92672">=</span>asset<span style="color:#f92672">.</span>extra_fields[<span style="color:#e6db74">&#34;table:storage_options&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the raw paths (fast enough to do this locally. Could be done on the cluster too)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> paths <span style="color:#f92672">=</span> [<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;az://</span><span style="color:#e6db74">{</span>p<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> fs<span style="color:#f92672">.</span>ls(root)]
</span></span></code></pre></div><p>Note that there&rsquo;s an <a href="https://github.com/dask/dask/issues/5380">open issue</a> on Dask to do this kind of thing by default.</p>
<p>Overall, we brought the metadata read time down the 30 seconds (which would be
faster with more workers). Still not great, but an improvement. At some point
we&rsquo;ll need to embrace a broader solution to this metadata access issue using
something like <a href="https://iceberg.apache.org/">Apache Iceberg</a>.</p>
<p>See <a href="https://notebooksharing.space/view/88055f29ae1c26b22f61a1ef5f673cf971f434f2e513933d8de2001d7f49162a#displayOptions=">this example notebook</a> for the full thing.</p>
]]></content:encoded></item><item><title>Planetary Computer Release: January 2023</title><link>https://tomaugspurger.github.io/posts/pc-january-2023/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pc-january-2023/</guid><description>The Planetary Computer made its January 2023 release a couple weeks back.
The flagship new feature is a really cool new ability to visualize the Microsoft AI-detected Buildings Footprints dataset. Here&amp;rsquo;s a little demo made by my teammate, Rob:
Your browser doesn't support HTML video. Here is a link to the video instead. Currently, enabling this feature required converting the data from its native geoparquet to a lot of protobuf files with Tippecanoe.</description><content:encoded><![CDATA[<p>The Planetary Computer made its <a href="https://planetarycomputer.microsoft.com/docs/overview/changelog/">January 2023 release</a> a couple weeks back.</p>
<p>The flagship new feature is a <em>really</em> cool new ability to visualize the <a href="https://planetarycomputer.microsoft.com/dataset/ms-buildings">Microsoft AI-detected Buildings Footprints</a> dataset. Here&rsquo;s a little demo made by my teammate, Rob:</p>
<video controls style="height: 400px;">
  <source src="https://ai4edatasetspublicassets.azureedge.net/assets/pc_video/vector-tile-ms-buildings-feature.mp4" type="video/mp4" />
  <p>
    Your browser doesn't support HTML video. Here is a
    <a href="https://ai4edatasetspublicassets.azureedge.net/assets/pc_video/vector-tile-ms-buildings-feature.mp4">link to the video</a> instead.
  </p>
</video>
<p>Currently, enabling this feature required converting the data from its native <a href="http://github.com/opengeospatial/geoparquet">geoparquet</a> to a <em>lot</em> of protobuf files with <a href="https://github.com/felt/tippecanoe">Tippecanoe</a>. I&rsquo;m very excited about projects to visualize the geoparquet data directly (see <a href="https://kylebarron.dev/blog/geoarrow-and-geoparquet-in-deck-gl">Kyle Barron&rsquo;s demo</a>) but for now we needed to do the conversion.</p>
<p>Hats off to Matt McFarland, who did the work on the data conversion and the frontend to support the rendering.</p>
<h2 id="new-datasets">New Datasets</h2>
<p>As usual, we have a handful of new datasets hosted on the Planetary Computer. Follow the link on each of these to find out more.</p>
<p><a href="https://planetarycomputer.microsoft.com/dataset/group/esa-cci-lc"><strong>Climate Change Initiative Land Cover</strong></a></p>
<img src="https://ai4edatasetspublicassets.azureedge.net/assets/pc_video/docs-esa-cci-lc-1992-2020-brazil.gif" width="500px"/>
<p><a href="https://planetarycomputer.microsoft.com/dataset/group/noaa-climate-normals"><strong>NOAA Climate Normals</strong></a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<img src="https://ai4edatasetspublicassets.azureedge.net/assets/pc_thumbnails/noaa-climate-normals-gridded-thumb.png" width="500px">
<p><a href="https://planetarycomputer.microsoft.com/dataset/usda-cdl"><strong>USDA Cropland Data Layer</strong></a></p>
<img src="https://planetarycomputer.microsoft.com/_images/changelog-usda-cdl.png" width="500px">
<p><a href="https://planetarycomputer.microsoft.com/dataset/group/usgs-lcmap"><strong>USGS Land Change Monitoring, Assessment, and Projection</strong></a></p>
<img src="https://ai4edatasetspublicassets.blob.core.windows.net/assets/pc_video/docs-usgs-lcmap-cali-1985-2021.gif" width="500px">
<p><a href="https://planetarycomputer.microsoft.com/dataset/fws-nwi"><strong>National Wetlands Inventory</strong></a></p>
<img src="https://planetarycomputer.microsoft.com/_images/changelog-fws-nwi.png" width="500px">
<h2 id="other-stuff">Other stuff</h2>
<p>We&rsquo;ve also been doing a lot of work around the edges that doesn&rsquo;t show up in visual things like new features or datasets. That work should show up
in the next release and I&rsquo;ll be blogging more about it then.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>NOAA Climate Normals is our first cataloged dataset that lives in a different Azure region. It&rsquo;s in East US while all our other datasets are in West Europe. I&rsquo;m hopefully this will rekindle interest in some multi-cloud (or at least multi-region) stuff we explored in <a href="https://github.com/pangeo-data/multicloud-demo">pangeo-multicloud-demo</a>. See <a href="https://discourse.pangeo.io/t/go-multi-regional-with-dask-aws/3037">https://discourse.pangeo.io/t/go-multi-regional-with-dask-aws/3037</a> for a more recent example. Azure actually has a whole <a href="https://azure.microsoft.com/en-us/products/azure-arc/#overview">Azure Arc</a> product that helps with multi-cloud stuff.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Cloud Optimized Vibes</title><link>https://tomaugspurger.github.io/posts/cloud-optimized-quandary/</link><pubDate>Sat, 14 Jan 2023 16:16:11 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/cloud-optimized-quandary/</guid><description>Over on the Planetary Computer team, we get to have a lot of fun discussions about doing geospatial data analysis on the cloud. This post summarizes some work we did, and the (I think) interesting conversations that came out of it.
Background: GOES-GLM The instigator in this case was onboarding a new dataset to the Planetary Computer, GOES-GLM. GOES is a set of geostationary weather satellites operated by NOAA, and GLM is the Geostationary Lightning Mapper, an instrument on the satellites that&amp;rsquo;s used to monitor lightning.</description><content:encoded><![CDATA[<p>Over on the <a href="http://planetarycomputer.microsoft.com/">Planetary Computer</a> team, we get to have a lot of fun discussions about doing geospatial data analysis on the cloud. This post summarizes some work we did, and the (I think) interesting conversations that came out of it.</p>
<h2 id="background-goes-glm">Background: GOES-GLM</h2>
<p>The instigator in this case was onboarding a new dataset to the Planetary Computer, <a href="https://planetarycomputer.microsoft.com/dataset/goes-glm">GOES-GLM</a>. GOES is a set of geostationary weather satellites operated by NOAA, and GLM is the Geostationary Lightning Mapper, an instrument on the satellites that&rsquo;s used to monitor lightning. It produces some really neat (and valuable) data.</p>
<p>The data makes its way to Azure via the <a href="https://www.noaa.gov/information-technology/open-data-dissemination">NOAA Open Data Dissemination program</a> (NODD) as a bunch of NetCDF files. Lightning is fast <code>[citation needed]</code>, so the GOES-GLM team does some clever things to build up a hierarchy of &ldquo;events&rdquo;, &ldquo;groups&rdquo;, and &ldquo;flashes&rdquo; that can all be grouped in a file. This happens very quickly after the data is captured, and it&rsquo;s delivered to Azure soon after that. All the details are at <a href="https://www.star.nesdis.noaa.gov/goesr/documents/ATBDs/Baseline/ATBD_GOES-R_GLM_v3.0_Jul2012.pdf">https://www.star.nesdis.noaa.gov/goesr/documents/ATBDs/Baseline/ATBD_GOES-R_GLM_v3.0_Jul2012.pdf</a> for the curious.</p>
<h2 id="cloud-native-netcdf">Cloud-native NetCDF?</h2>
<p>The raw data are delivered as a bunch of NetCDF4 files, which <a href="https://matthewrocklin.com/blog/work/2018/02/06/hdf-in-the-cloud">famously isn&rsquo;t cloud-native</a>. The metadata tends to be spread out across the file, requiring many (small) reads to load the metadata. If you only care about a small subset of the data, those metadata reads can dominate your processing time. Remember: reading a new chunk of metadata typically requires another HTTP call. Even when your compute is in the same region as the data, an HTTP call is much slower than seeking to a new spot in an open file on disk.</p>
<p>But what if I told you that you could read <em>all</em> the metadata in a single HTTP request? Well, that&rsquo;s possible with these NetCDF files. Not because of anything special about how the metadata is written, just that these files are relatively small. They&rsquo;re only about 100-300 KB in total. So we can read all the metadata (and data) in a single HTTP call.</p>
<p>That gets to a point made by Paul Ramsey in his <a href="http://blog.cleverelephant.ca/2022/04/coshp.html">Cloud Optimized Shape File</a> article:</p>
<blockquote>
<p>One of the quiet secrets of the “cloud optimized” geospatial world is that, while all the attention is placed on the formats, the actual really really hard part is writing the clients that can efficiently make use of the carefully organized bytes.</p>
</blockquote>
<p>So yes, the file formats do (often) matter. And yes, we need clients that can make efficient use of those carefully organized bytes. <em>But</em> when the files are this small, it doesn&rsquo;t really matter how the bytes or organized. You&rsquo;re still making a single HTTP call, whether you want all the data or just some of it.</p>
<p>This was a fun conversation amongst the team. We like to say we host &ldquo;cloud-optimized data&rdquo; on the Planetary Computer, and we do. But what really matters is the user experience. It&rsquo;s all about the cloud-optimized <em>vibes</em>.</p>
<h2 id="build-with-users-not-just-with-users-in-mind">Build with users, not just with users in mind</h2>
<p>A last, small point is the importance of getting user feedback <em>before</em> you go off doing something. We looked at the data and noticed the <em>obviously</em> tabular nature of the data and decided to split these single NetCDF file into three geoparquet files. In the abstract this make sense: these are naturally tabular, and parquet is the natural file format for them. We figured our users would appreciate the conversion. <em>However</em> we suddenly tripled the number of objects in Blob Storage. With this many objects and with new objects arriving so frequently, the sheer number of small files became a challenge to work with. This is, I think, still the right format for the data. But we&rsquo;ll need to do more with our users to confirm that that&rsquo;s the case before committing to maintain this challenging data pipeline to do the conversion at scale.</p>
]]></content:encoded></item><item><title>Queues in the News</title><link>https://tomaugspurger.github.io/posts/queues/</link><pubDate>Mon, 26 Dec 2022 13:35:24 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/queues/</guid><description>I came across a couple of new (to me) uses of queues recently. When I came up with the title to this article I knew I had to write them up together.
Queues in Dask Over at the Coiled Blog, Gabe Joseph has a nice post summarizing a huge amount of effort addressing a problem that&amp;rsquo;s been vexing demanding Dask users for years. The main symptom of the problem was unexpectedly high memory usage on workers, leading to crashing workers (which in turn caused even more network communication, and so more memory usage, and more crashing workers).</description><content:encoded><![CDATA[<p>I came across a couple of new (to me) uses of queues recently. When I came up with the title to this article I knew I had to write them up together.</p>
<h2 id="queues-in-dask">Queues in Dask</h2>
<p>Over at the <a href="https://www.coiled.io/blog/reducing-dask-memory-usage">Coiled Blog</a>, Gabe Joseph has a nice post summarizing a huge amount of effort addressing a problem that&rsquo;s been vexing demanding Dask users for years. The main symptom of the problem was unexpectedly high memory usage on workers, leading to crashing workers (which in turn caused even more network communication, and so more memory usage, and more crashing workers). This is actually a problem I worked on a bit back in 2019, and I made very little progress.</p>
<p>A common source of this problem was having many (mostly) independent &ldquo;chains&rdquo; of computation. Dask would start on too many of the &ldquo;root&rdquo; tasks simultaneously, before finishing up some of the chains. The root tasks are typically memory increasing (e.g. load data from file system) while the later tasks are typically memory decreasing (take the mean of a large array).</p>
<p>In <code>dask/distributed</code>, Dask actually has two places where it determines which order to run things in. First, there&rsquo;s a &ldquo;static&rdquo; ordering (implemented in <code>dask/order.py</code>, which has some truly great docstrings, check out <a href="https://github.com/dask/dask/blob/main/dask/order.py">the source</a>.) Dask was actually doing really well here. Consider this task graph from <a href="https://github.com/dask/distributed/issues/2602#issuecomment-496634172">the issue</a>:</p>
<p><img loading="lazy" src="https://user-images.githubusercontent.com/1312546/58502338-f2599c00-814b-11e9-989a-5bfd2c3785a8.png" alt=""  />
</p>
<p>The &ldquo;root&rdquo; tasks are on the left (marked 0, 3, 11, 14). Dask&rsquo;s typical depth-first algorithm works well here: we execute the first two root tasks (0 and 3) to finish up the first &ldquo;chain&rdquo; of computation (the box <code>(0, 0)</code> on the right) before moving onto the other two root nodes, 11 and 14.</p>
<p>The second time Dask (specifically, the distributed scheduler) considers what order to run things is at runtime. It gets this &ldquo;static&rdquo; ordering from <code>dask.order</code> which says what order you <em>should</em> run things in, but the distributed runtime has <em>way</em> more information available to it that it can use to influence its scheduling decisions. In this case, the distributed scheduler looked around and saw that it had some idle cores. It thought &ldquo;hey, I have a bunch of these root tasks ready to run&rdquo;, and scheduled those. Those tend to increase memory usage, leading to our memory problems.</p>
<p>The solution was a queue. From <a href="https://www.coiled.io/blog/reducing-dask-memory-usage">Gabe&rsquo;s blog post</a>:</p>
<blockquote>
<p>We&rsquo;re calling this mode of scheduling <a href="https://distributed.dask.org/en/stable/scheduling-policies.html#queuing">&ldquo;queuing&rdquo;</a>, or &ldquo;root task withholding&rdquo;. The scheduler puts data-loading tasks in an internal queue, and only drips one out to a worker once it&rsquo;s finished its current work and there&rsquo;s nothing more useful to run instead that utilizes the work it just completed.</p>
</blockquote>
<h2 id="queue-for-data-pipelines">Queue for Data Pipelines</h2>
<p><a href="http://planetarycomputer.microsoft.com/">At work</a>, we&rsquo;re taking on more responsibility for the data pipeline responsible for getting various datasets to Azure Blob Storage. I&rsquo;m dipping my toes into the whole &ldquo;event-driven&rdquo; architecture thing, and have become <em>paranoid</em> about dropping work. The <a href="https://learn.microsoft.com/en-us/azure/architecture/">Azure Architecture Center</a> has a bunch of useful articles here. <a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/competing-consumers">This article</a> gives some names to some of the concepts I was bumbling through (e.g. &ldquo;at least once processing&rdquo;).</p>
<p>In our case, we&rsquo;re using <a href="https://learn.microsoft.com/en-us/azure/storage/queues/storage-queues-introduction">Azure Queue Storage</a> as a simple way to <em>reliably</em> parallelize work across some machines. We somehow discover some assets to be copied (perhaps by querying an API on a schedule, or by listening to some events on a webhook), store those as messages on the queue.</p>
<p>Then our workers can start processing those messages from the queue in parallel. The really neat thing about Azure&rsquo;s Storage Queues (and, I gather, many queue systems) is the concept of &ldquo;locking&rdquo; a message. When the worker is ready, it receives a message from the queue and begins processing it. To prevent dropping messages (if, e.g. the worker dies mid-processing) the message isn&rsquo;t actually deleted until the worker tells the queue service &ldquo;OK, I&rsquo;m doing processing this message&rdquo;. If for whatever reason the worker doesn&rsquo;t phone home saying it&rsquo;s processed the message, the message reappears on the queue for some other worker to process.</p>
<p>The <a href="https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview">Azure SDK for Python</a> actually does a really good job integrating language features into the clients for these services. In this case, we can just treat the Queue service as an iterator.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue_client <span style="color:#f92672">=</span> azure<span style="color:#f92672">.</span>storage<span style="color:#f92672">.</span>blob<span style="color:#f92672">.</span>QueueClient(<span style="color:#e6db74">&#34;https://queue-endpoint.queue.core.windows.net/queue-name&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> message <span style="color:#f92672">in</span> queue_client<span style="color:#f92672">.</span>receive_messages():
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    <span style="color:#66d9ef">yield</span> message
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    <span style="color:#75715e"># The caller finishes processing the message.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    queue_client<span style="color:#f92672">.</span>delete_message(message)
</span></span></code></pre></div><p>I briefly went down a dead-end solution that added a &ldquo;processing&rdquo; state to our state database. Workers were responsible for updating the items state to &ldquo;processing&rdquo; as soon as they started, and &ldquo;copied&rdquo; or &ldquo;failed&rdquo; when they finished. But I quickly ran into issues where items were marked as &ldquo;processing&rdquo; but weren&rsquo;t actually. Maybe the node was preempted; maybe (just maybe) there was a bug in my code. But for whatever reason I couldn&rsquo;t trust the item&rsquo;s state anymore. Queues were an elegant way to ensure that we processed these messages at least once, and now I can sleep comfortably at night knowing that we aren&rsquo;t dropping messages on the floor.</p>
]]></content:encoded></item><item><title>My 2022 Year in Books</title><link>https://tomaugspurger.github.io/posts/books-2022/</link><pubDate>Wed, 21 Dec 2022 07:25:47 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/books-2022/</guid><description>It&amp;rsquo;s &amp;ldquo;Year in X&amp;rdquo; time, and here&amp;rsquo;s my 2022 Year in Books on GoodReads. I&amp;rsquo;ll cover some highlights here.
Many of these recommendations came from the Incomparable&amp;rsquo;s Book Club, part of the main Incomparable podcast. In particular, episode 600 The Machine was a Vampire which is a roundup of their favorites from the 2010s.
Bookended by Murderbot Diaries I started and ended this year (so far) with a couple installments in the Murderbot Diaries.</description><content:encoded><![CDATA[<p>It&rsquo;s &ldquo;Year in X&rdquo; time, and here&rsquo;s my <a href="https://www.goodreads.com/user/year_in_books/2022/82176424">2022 Year in Books</a> on GoodReads. I&rsquo;ll cover some highlights here.</p>
<p>Many of these recommendations came from the <a href="https://www.theincomparable.com/theincomparable/bookclub/">Incomparable&rsquo;s Book Club</a>, part of the main Incomparable podcast. In particular, episode 600 <a href="https://www.theincomparable.com/theincomparable/600/">The Machine was a Vampire</a> which is a roundup of their favorites from the 2010s.</p>
<h2 id="bookended-by-murderbot-diaries">Bookended by Murderbot Diaries</h2>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1505589896i/36223859.jpg" width="200px"/>
<p>I started and ended this year (so far) with a couple installments in the <a href="https://bookshop.org/p/books/the-murderbot-diaries-all-systems-red-artificial-condition-rogue-protocol-exit-strategy-martha-wells/14469574?ean=9781250784278">Murderbot Diaries</a>. These follow a robotic / organic &ldquo;Security Unit&rdquo; that&rsquo;s responsible for taking care of humans in dangerous situations. We pick up after an unfortunate incident where it seems to have gone rouge and murdered her clients (hence, the murderbot) and hacked its governor module to essentially become &ldquo;free&rdquo;.</p>
<p>There&rsquo;s <em>some</em> exploration of &ldquo;what does it mean to be human?&rdquo; in these, but mostly they&rsquo;re just fun.</p>
<h2 id="competency">Competency</h2>
<p>I read a pair of books this year that are set completely different worlds (one in some facsimile of the Byzantine empire, and another in the earth&rsquo;s near-future) that are related by the protagonist being competent at engineering and problem solving.</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655684120i/54906250.jpg" width="200px"/>
<p>First up was Andy Weir&rsquo;s <em>Project Hail Mary</em> (a followup to <em>The Martin</em>, which falls under this category too). At times it felt like some challenges were thrown up <em>just</em> so that the main character could knock them down. But it also had one of my favorite fictional characters ever (no spoilers, but it&rsquo;s Rocky).</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1549334205i/38347801.jpg" width="200px"/>
<p>The second was K.J. Parker&rsquo;s <em>Sixteen Ways to Defend a Walled City</em>. In this one, the main character feels a bit more balanced. His strengths around engineering and problem solving are offset by his (self-admitted) weaknesses. I really enjoyed this one.</p>
<h2 id="some-classics">Some Classics</h2>
<p>After reading Jo Walton&rsquo;s <em>Among Others</em>, which follows a Sci-Fi / Fantasy obsessed girl as she goes through some&hellip; things, I dipped in to some of the referenced works I had never gotten to before.</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1437101205i/25837084.jpg" width="200px"/>
<p>First was Ursula K. Le Guin&rsquo;s <em>The Left Hand of Darkness</em>. This was great. I imagine it was groundbreaking and controversial when it first came out, but I still liked it as a story.</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1619548418i/57877171.jpg" width="200px"/>
<p>Next was Kurt Vonnegut&rsquo;s <em>Cat&rsquo;s Cradle</em>. Wow, was this good. I&rsquo;d only read <em>Slaughterhouse-Five</em> before, and finally got around to some of his other stuff. Sooo good.</p>
<h2 id="wholesomeness">Wholesomeness</h2>
<p>There were two books that I just loved (both got 5 stars on goodreads) that I want to label &ldquo;wholesome&rdquo;.</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1624092003i/52702097.jpg" width="200px"/>
<p><em>Piranesi</em>, by Susanna Clarke, was just great. The setup is bizarre, but we follow our&hellip; wholly innocent (naive? definitely wholesome) main character in a world of classical Greek statues and water. Piranesi just Loves his World and that&rsquo;s great.</p>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1555890984i/45199076.jpg" width="200px"/>
<p>Next up is Katherine Addison&rsquo;s <em>The Goblin Emperor</em>. This a story of a fundamentally good person unexpectedly thrown into power. He does <em>not</em> simply roll over and get pushed around by the system, and he retains his fundamental goodness. It&rsquo;s pretty long (449 pages) and not much actually &ldquo;happens&rdquo; (there&rsquo;s maybe two or three &ldquo;action&rdquo; scenes). And yet somehow Katherine kept the story moving and all the factions straight.</p>
<h2 id="not-so-wholesome">Not-so-wholesome</h2>
<img src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1589154118i/53368275.jpg" width="200px"/>
<p>My other 5-star book this year was Cormac McCarthy&rsquo;s <em>The Road</em>. I know it&rsquo;s super popular so you don&rsquo;t need me recommending it, but dang this got to me a bit<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. I don&rsquo;t know how old The Boy is in the story, but mine&rsquo;s six now and it was hard not to let imagination wander.</p>
<h2 id="nonfiction">Nonfiction</h2>
<p>I think the only non-fiction books I read this year were</p>
<ul>
<li><em>Command and Control</em> by Eric Schlosser about how (not) to safely have a nuclear weapons arsenal</li>
<li><em>The Fifth Risk: Undoing Democracy</em> by Michael Lewis, about the dangers posed by putting people in government who don&rsquo;t care about doing a good job</li>
<li><em>The Path Between the Seas</em> about the development and construction of the Panama canal</li>
</ul>
<p>This is less than I would have liked, but hey, I&rsquo;ve been tired.</p>
<h2 id="the-rest">The Rest</h2>
<p>You can find my read books on <a href="https://www.goodreads.com/review/list/82176424-tom-augspurger?page=1">goodreads</a>. I don&rsquo;t think I read (or at least finished) any <em>bad</em> books this year. My lowest-rated was <em>Eye of the World</em> (the first book in the <em>Wheel of Time</em> series) and it was&hellip; long. It world seems neat though. <em>Leviathan Falls</em> wrapped up the <em>Expanse</em> series satisfyingly. <em>The Nova Incident</em> is a fun spy / cold-war thriller set in the far future, which I&rsquo;d recommend reading after the earlier ones in that series. On the other hand, <em>Galaxy and the Ground Within</em> (book 4 in the Wayfarers series) worked just fine without having read the others.</p>
<p>Overall, a good year in books!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You might call it twisted, if you listen to the <a href="https://www.flophousepodcast.com">Flophouse</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Podcast: Revolutions</title><link>https://tomaugspurger.github.io/posts/revolutions/</link><pubDate>Tue, 20 Dec 2022 16:56:57 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/revolutions/</guid><description>Mike Duncan is wrapping up his excellent Revolutions podcast. If you&amp;rsquo;re at all interested in history then now is a great time to pick it up. He takes the concept of &amp;ldquo;a revolution&amp;rdquo; and looks at it through the lens of a bunch of revolutions throughout history. The appendix episodes from the last few weeks have really tied things together, looking at whats common (and not) across all the revolutions covered in the series.</description><content:encoded><![CDATA[<p>Mike Duncan is wrapping up his excellent <a href="https://thehistoryofrome.typepad.com/revolutions_podcast/">Revolutions</a> podcast. If you&rsquo;re at all interested in history then now is a great time to pick it up. He takes the concept of &ldquo;a revolution&rdquo; and looks at it through the lens of a bunch of revolutions throughout history. The appendix episodes from the last few weeks have really tied things together, looking at whats common (and not) across all the revolutions covered in the series.</p>
<p>It&rsquo;s hard to believe that this podcast started in 2013. I came over from Mike&rsquo;s <a href="http://thehistoryofrome.typepad.com">The History of Rome</a> podcast (which started in 2007(!) I&rsquo;m not sure when I got on that train, but it was in the manually sync podcasts to an iPod days). Congrats to Mike for a podcast well done!</p>
]]></content:encoded></item><item><title>Rebooting</title><link>https://tomaugspurger.github.io/posts/rebooting/</link><pubDate>Sun, 18 Dec 2022 16:51:46 -0600</pubDate><guid>https://tomaugspurger.github.io/posts/rebooting/</guid><description>Like some others, I&amp;rsquo;m getting back into blogging.
I&amp;rsquo;ll be &amp;ldquo;straying from my lane&amp;rdquo; and won&amp;rsquo;t just be writing about Python data libraries (though there will still be some of that). If you too would like to blog more, I&amp;rsquo;d encourge you to read Simon Willison&amp;rsquo;s What to blog About and Matt Rocklin&amp;rsquo;s Write Short Blogposts.
Because I&amp;rsquo;m me, I couldn&amp;rsquo;t just make a new post. I also had to switch static site generators, just becauase.</description><content:encoded><![CDATA[<p>Like <a href="http://www.gregreda.com/2022/11/18/reviving-this-space/">some others</a>, I&rsquo;m getting back into blogging.</p>
<p>I&rsquo;ll be &ldquo;straying from my lane&rdquo; and won&rsquo;t just be writing about Python data libraries (though there will still be some of that).
If you too would like to blog more, I&rsquo;d encourge you to read Simon Willison&rsquo;s <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">What to blog About</a> and Matt Rocklin&rsquo;s <a href="https://matthewrocklin.com/blog/work/2019/06/25/write-short-blogposts">Write Short Blogposts</a>.</p>
<p>Because I&rsquo;m me, I couldn&rsquo;t just make a new post. I also had to switch static site generators, just becauase. All the old links, including my <a href="/index.xml">RSS feed</a>, should continue to work. If you spot any issues, <a href="mailto:tom.w.augspurger@gmail.com">let me know</a> (I think I&rsquo;ve fixed at least one bug in the RSS feed, apologies for any spurious updates. But just in case, you might want to update your RSS links to <a href="http://tomaugspurger.github.io/index.xml">http://tomaugspurger.github.io/index.xml</a>).</p>
<p>Speaking of RSS, it&rsquo;s not dead! I&rsquo;ve been pleasently surprised to see new activity in feeds I&rsquo;ve subscribed to for years. (If you&rsquo;re curious, I use <a href="https://netnewswire.com">NetNewsWire</a> for my reader).</p>
]]></content:encoded></item><item><title>What's Next?</title><link>https://tomaugspurger.github.io/posts/whats-next/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/whats-next/</guid><description>Some personal news: Last Friday was my last day at Anaconda. Next week, I&amp;rsquo;m joining Microsoft&amp;rsquo;s AI for Earth team. This is a very bittersweet transition. While I loved working at Anaconda and all the great people there, I&amp;rsquo;m extremely excited about what I&amp;rsquo;ll be working on at Microsoft.
Reflections I was inspired to write this section by Jim Crist&amp;rsquo;s post on a similar topic: https://jcristharif.com/farewell-to-anaconda.html. I&amp;rsquo;ll highlight some of the projects I worked on while at Anaconda.</description><content:encoded><![CDATA[<p>Some personal news: Last Friday was my last day at <a href="https://www.anaconda.com">Anaconda</a>.
Next week, I&rsquo;m joining Microsoft&rsquo;s <a href="https://www.microsoft.com/en-us/ai/ai-for-earth">AI for Earth</a> team. This is a very bittersweet transition. While I loved working at Anaconda and all the great people there, I&rsquo;m extremely excited about what I&rsquo;ll be working on at Microsoft.</p>
<h2 id="reflections">Reflections</h2>
<p>I was inspired to write this section by Jim Crist&rsquo;s post on a similar topic: <a href="https://jcristharif.com/farewell-to-anaconda.html">https://jcristharif.com/farewell-to-anaconda.html</a>.
I&rsquo;ll highlight some of the projects I worked on while at Anaconda. If you want to skip the navel gazing, skip down to <a href="#whats-next">what&rsquo;s next</a>.</p>
<ol>
<li>This is self-serving and biased to over-emphasize my own role in each of these. None of these could be done without the other individuals on those teams, or the support of my family.</li>
<li>More companies should support open-source like Anaconda does: offer positions to the maintainers of open-source projects and see what they can do. Anaconda <a href="https://www.anaconda.com/blog/sustaining-the-open-source-ds-ml-ecosystem-with-the-anaconda-dividend-program">recently announced</a> a program that makes it easier for more companies to support open-source.</li>
</ol>
<h3 id="pandas">pandas</h3>
<p><img loading="lazy" src="https://pandas.pydata.org/static/img/pandas.svg" alt=""  />
</p>
<p>If I had a primary responsibility at Anaconda, it was stewarding the pandas project. When I joined Anaconda in 2017, pandas was around the 0.20 release, and didn&rsquo;t have much in the way of paid maintenace. By joining Anaconda I was fulfilling a dream: getting paid to work on open-source software. During my time at Anaconda, I was the pandas release manager for a handful of pandas releases, including pandas 1.0.</p>
<p>I think the most important <em>code</em> to come out of my work on pandas is the <a href="https://pandas.pydata.org/pandas-docs/stable/development/extending.html">extension array interface</a>. My post on the <a href="https://www.anaconda.com/blog/cyberpandas-extending-pandas-with-richer-types">Anaconda Blog</a> tells the full story, but this is a great example of a for-profit company (Anaconda) bringing together a funding source and an open-source project to accomplish something great for the community. As an existing member of the pandas community, I was able to leverage some trust that I&rsquo;d built up over the years to propose a major change to the library. And thanks to Anaconda, we had the funding to realisitically pull (some of) it off. The work is still ongoing, but we&rsquo;re gradually solving some of pandas&rsquo; longest-standing pain points (like the lack of an integer dtype with missing values).</p>
<p>But even more important that the code is probably pandas winning its first-ever funding through the <a href="https://chanzuckerberg.com/eoss/">CZI EOSS program</a>. Thanks to Anaconda, I was able to dedicate the time to writing the proposal. This work funded</p>
<ol>
<li>Maintenance, including <a href="https://github.com/simonjayhawkins">Simon Hawkins</a> managing the last few releases.</li>
<li>A native string dtype, based on Apache Arrow, for faster and more memory-efficient strings (coming in the next release or two)</li>
<li>Many improvements to the extension array interface</li>
</ol>
<p>Now that I&rsquo;m leaving Anaconda, I suspect my day-to-day involvement in pandas will drop off a bit. But I&rsquo;ll still be around, hopefully focusing most on helping others work on pandas.</p>
<p>Oh, side-note, I&rsquo;m extremely excited about the <a href="https://pandas.pydata.org/docs/dev/user_guide/duplicates.html">duplicate label handling</a> coming to pandas 1.2.0. That was fun to work on and I think will solve some common pandas papercuts.</p>
<h3 id="dask">Dask</h3>
<img src="https://docs.dask.org/en/latest/_images/dask_horizontal.svg"/>
<p>I started using Dask before I joined Anaconda. It exactly solved my needs at the time (I was working with datasets that were somewhat larger
than the memory of the machine I had access to). I was thrilled to have more time for working on it along with others from Anaconda; I learned a ton from them.</p>
<p>My personal work mainly focused on ensuring that <code>dask.dataframe</code> continued to work well with (and benefit from) the most recent changes to pandas. I also kicked off the <a href="http://ml.dask.org"><code>dask-ml</code></a> project, which initially just started as a bit of documentation on the various projects in the &ldquo;dask / machine learning&rdquo; space (like <code>distributed.joblib</code>, <code>dask-searchcv</code>, <code>dask-xgboost</code>). Eventually this grew into a project of its own, which I&rsquo;m reasonably happy with, even if most people don&rsquo;t need distributed machine learning.</p>
<h3 id="pymapd">pymapd</h3>
<p><a href="https://github.com/omnisci/pymapd">pymapd</a> is a Python library that implements the <a href="https://www.python.org/dev/peps/pep-0249/">DB API spec</a> for OmniSci (FKA MapD). For the most part, this project involved copying the choices made by <code>sqlite3</code> or <code>psycopg2</code> and applying them to. The really fun part of this project was working with Wes McKinney, Siu Kwan Lam, and others on the GPU and shared memory integration. Being able to query a database and get back zero-copy results as a DataFrame (possibly a GPU DataFrame using cuDF) really is neat.</p>
<h3 id="ucx-py">ucx-py</h3>
<p><a href="https://github.com/rapidsai/ucx-py">ucx-py</a> is a Python library for UCX, a high-performance networking library. This came out of work with NVIDIA and Dask, seeing how we could speed up performance on communication-bound workloads (UCX supports high-performance interfaces between devices like NVLink). Working on ucx-py was my first real foray into asyncio and networking. Fortunately, while this was a great learning experience for me, I suspect that very little of <em>my</em> code remains. Hopefully the early prototypes were able to hit some of the roadblocks the later attempts would have stumbled over. See <a href="https://medium.com/rapids-ai/high-performance-python-communication-with-ucx-py-221ac9623a6a">this post</a> for an overview of what that team has been able to accomplish recently.</p>
<h3 id="pangeo">Pangeo</h3>
<img src="https://raw.githubusercontent.com/pangeo-data/pangeo/3b2f9de1bc74625490684204a8431037e00a9ba1/docs/_static/pangeo_simple_logo.svg"/>
<p>Some time last year, after Matt Rocklin left for NVIDIA, I filled his spot on a <a href="https://github.com/pangeo-data/nasa-access-17">NASA ACCESS grant</a> funding work on the Pangeo project. Pangeo is a really interesting community. They&rsquo;re a bunch of geoscientists trying to analyze large datasets using tools like xarray, Zarr, Dask, holoviz, and Jupyter. Naturally, they find rough edges in that workflow, and work to fix them. That might mean working with organizations like NASA to provide data in analysis-ready form. It might mean fixing bugs or performance issues in libraries like Dask. Being able to dedicate large chunks of time is crucial to solving these types of thorny problems, which often span many layers (e.g. using xarray to read data Zarr data from Google cloud storage involves something like eight Python libraries). While there&rsquo;s still work to be done, this type of workflow is smoother than it was a couple years ago.</p>
<p>In addition to work on Dask itself, I was able to help out Pangeo in a few other ways:</p>
<ol>
<li>I helped maintain pangeo&rsquo;s JupyterHub deployments at <a href="https://github.com/pangeo-data/pangeo-cloud-federation">pangeo-cloud-federation</a>. (FYI, <a href="https://2i2c.org">2i2c</a> is a new organization that&rsquo;s purpose-built to do this kind of work).</li>
<li>I put together the <a href="https://github.com/dask/helm-chart/blob/master/daskhub/README.md"><code>daskhub</code> Helm Chart</a>, which Pangeo previously developed and maintained. It combines Dask Gateway&rsquo;s and JupyterHub&rsquo;s helm charts, along with experience from pangeo&rsquo;s deployments, to deploy a multi-user JupyterHub deployment with scalable computation provided by Dask.</li>
<li>I helped with <a href="http://rechunker.readthedocs.io"><code>rechunker</code></a>, a library that very specifically solves a problem that had <a href="https://discourse.pangeo.io/t/best-practices-to-go-from-1000s-of-netcdf-files-to-analyses-on-a-hpc-cluster/588">vexxed pangeo&rsquo;s community members for years</a>.</li>
</ol>
<p>Overall, working with the Pangeo folks has been incredibly rewarding. They&rsquo;re taking the tools we know and love, and putting them together to build an extremely powerful, <a href="https://medium.com/pangeo/closed-platforms-vs-open-architectures-for-cloud-native-earth-system-analytics-1ad88708ebb6">open architechture</a> toolchain. I&rsquo;ve been extremely lucky to work on this project. Which brings me to&hellip;</p>
<h2 id=whats-next>What's Next</h2>
<p>As I mentioned up top, I&rsquo;m joining the AI for Earth team at Microsoft. I&rsquo;ll be helping them build tools and environments for distributed geospatial data processing! I&rsquo;m really excited about this work. Working with the Pangeo community has been incredibly rewarding. I&rsquo;m lookingo forward to doing even more of that.</p>
<p>P.S. <a href="https://careers.microsoft.com/us/en/job/876975/Senior-Geospatial-Applications-Engineer-AI-for-Earth">we&rsquo;re hiring</a>!</p>
]]></content:encoded></item><item><title>Maintaining Performance</title><link>https://tomaugspurger.github.io/posts/performance-regressions/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/performance-regressions/</guid><description>As pandas&amp;rsquo; documentation claims: pandas provides high-performance data structures. But how do we verify that the claim is correct? And how do we ensure that it stays correct over many releases. This post describes
pandas&amp;rsquo; current setup for monitoring performance My personal debugging strategy for understanding and fixing performance regressions when they occur. I hope that the first section topic is useful for library maintainers and the second topic is generally useful for people writing performance-sensitive code.</description><content:encoded><![CDATA[<p>As pandas&rsquo; <a href="https://pandas.pydata.org/docs/">documentation</a> claims: pandas
provides <em>high-performance</em> data structures. But how do we verify that the claim
is correct? And how do we ensure that it <em>stays</em> correct over many releases.
This post describes</p>
<ol>
<li>pandas&rsquo; current setup for monitoring performance</li>
<li>My personal debugging strategy for understanding and fixing performance
regressions when they occur.</li>
</ol>
<p>I hope that the first section topic is useful for library maintainers and the
second topic is generally useful for people writing performance-sensitive code.</p>
<h2 id="know-thyself">Know thyself</h2>
<p>The first rule of optimization is to measure first. It&rsquo;s a common trap to think
you know the performance of some code just from looking at it. The difficulty is
compounded when you&rsquo;re reviewing a diff in a pull request and you lack some
important context. We use benchmarks to measure the performance of code.</p>
<p>There&rsquo;s a strong analogy between using unit tests to verify the correctness of
code and using benchmarks to verify its performance. Each gives us some
confidence that an implementation behaves as expected and that refactors are not
introducing regressions (in correctness or performance). And just as you use can
use a test runner like <code>unittest</code> or <code>pytest</code> to organize and run unit tests,
you can use a tool to organize and run benchmarks.</p>
<p>For that, pandas uses <a href="https://asv.readthedocs.io/en/stable/">asv</a>.</p>
<blockquote>
<p>airspeed velocity (<code>asv</code>) is a tool for benchmarking Python packages over
their lifetime. Runtime, memory consumption and even custom-computed values
may be tracked. The results are displayed in an interactive web frontend that
requires only a basic static webserver to host.</p>
</blockquote>
<p><code>asv</code> provides a structured way to write benchmarks. For example, pandas <code>Series.isin</code>
<a href="https://github.com/pandas-dev/pandas/blob/d1b1236f0d8402d1df6ad7cd916d07ba45706269/asv_bench/benchmarks/series_methods.py">benchmark</a> looks roughly like</p>
<pre tabindex="0"><code>class IsIn:

    def setup(self):
        self.s = Series(np.random.randint(1, 10, 100000))
        self.values = [1, 2]

    def time_isin(self):
        self.s.isin(self.values)
</code></pre><p>There&rsquo;s some setup, and then the benchmark method starting with <code>time_</code>. Using
the <code>asv</code> CLI, benchmarks can be run for a specific commit with
<code>asv run &lt;commit HASH&gt;</code>, or multiple commits can be compared with
<code>asv continuous &lt;GIT RANGE&gt;</code>. Finally, <code>asv</code> will collect performance over time
and can visualize the output. You can see pandas&rsquo; at
<a href="https://pandas.pydata.org/speed/pandas/">https://pandas.pydata.org/speed/pandas/</a>.</p>
<p><img loading="lazy" src="/images/asv-overview.png" alt="pandas&amp;rsquo; asv overview"  />
</p>
<h2 id="detecting-regressions">Detecting Regressions</h2>
<p><code>asv</code> is designed to be run continuously over a project&rsquo;s lifetime. In theory, a
pull request could be accompanied with an <code>asv</code> report demonstrating that the
changes don&rsquo;t introduce a performance regression. There are a few issues
preventing pandas from doing that reliably however, which I&rsquo;ll go into later.</p>
<h2 id="handling-regressions">Handling Regressions</h2>
<p>Here&rsquo;s a high-level overview of my debugging process when a performance
regression is discovered (either by ASV detecting one or a user reporting a
regression).</p>
<p>To make things concrete, we&rsquo;ll walk through <a href="https://github.com/pandas-dev/pandas/issues/33012">this recent pandas
issue</a>, where a slowdown was
reported. User reports are often along the lines of</p>
<blockquote>
<p><code>DataFrame.memory_usage</code> is 100x slower in pandas 1.0 compared to 0.25</p>
</blockquote>
<p>In this case, <code>DataFrame.memory_usage</code> was slower with <code>object</code>-dtypes and
<code>deep=True</code>.</p>
<pre tabindex="0"><code>v1.0.3: memory_usage(deep=True) took 26.4566secs

v0.24.0: memory_usage(deep=True) took 6.0479secs

v0.23.4: memory_usage(deep=True) took 0.4633secs
</code></pre><p>The first thing to verify is that it&rsquo;s purely a performance regression, and not
a behavior change or bugfix, by <a href="https://github.com/pandas-dev/pandas/issues/33012#issuecomment-603828279">ensuring that the outputs
match</a>
between versions. Sometimes correctness requires sacrificing speed. In this
example, we confirmed that the outputs from 0.24 and 1.0.3 matched, so we
focused there.</p>
<p>Now that we have what seems like a legitimate slowdown, I&rsquo;ll reproduce it
locally. I&rsquo;ll first activate environments for both the old and new versions (I
use <a href="https://conda.io/en/latest/"><code>conda</code></a> for this, one environment per version
of pandas, but <code>venv</code> works as well assuming the error isn&rsquo;t specific to a
version of Python). Then I ensure that I can reproduce the slowdown.</p>
<p><img loading="lazy" src="/images/performance-comparison.png" alt="Comparison of two benchmarks"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#34;A&#34;</span>: list(range(<span style="color:#ae81ff">10000</span>))}, dtype<span style="color:#f92672">=</span>object)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">3</span>]: <span style="color:#f92672">%</span>timeit df<span style="color:#f92672">.</span>memory_usage(deep<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5.37</span> ms <span style="color:#960050;background-color:#1e0010">±</span> <span style="color:#ae81ff">201</span> µs per loop (mean <span style="color:#960050;background-color:#1e0010">±</span> std<span style="color:#f92672">.</span> dev<span style="color:#f92672">.</span> of <span style="color:#ae81ff">7</span> runs, <span style="color:#ae81ff">100</span> loops each)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">4</span>]: pd<span style="color:#f92672">.</span>__version__
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">4</span>]: <span style="color:#e6db74">&#39;0.25.1&#39;</span>
</span></span></code></pre></div><p>versus</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#34;A&#34;</span>: list(range(<span style="color:#ae81ff">10000</span>))}, dtype<span style="color:#f92672">=</span>object)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">3</span>]: <span style="color:#f92672">%</span>timeit df<span style="color:#f92672">.</span>memory_usage(deep<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">17.5</span> ms <span style="color:#960050;background-color:#1e0010">±</span> <span style="color:#ae81ff">98.7</span> µs per loop (mean <span style="color:#960050;background-color:#1e0010">±</span> std<span style="color:#f92672">.</span> dev<span style="color:#f92672">.</span> of <span style="color:#ae81ff">7</span> runs, <span style="color:#ae81ff">100</span> loops each)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">4</span>]: pd<span style="color:#f92672">.</span>__version__
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">4</span>]: <span style="color:#e6db74">&#39;1.0.1&#39;</span>
</span></span></code></pre></div><p>So we do have a slowdown, from 5.37ms -&gt; 17.5ms on this example.</p>
<p>Once I&rsquo;ve verified that the outputs match and the slowdown is real, I turn to
<a href="https://jiffyclub.github.io/snakeviz/">snakeviz</a> (created by <a href="https://twitter.com/jiffyclub">Matt
Davis</a>, which measures performance at the
function-level. For large enough slowdowns, the issue will jump out immediately
with snakeviz.</p>
<p><a href="https://gistcdn.rawgit.org/TomAugspurger/bad09c3e4a03338590545033ad2da925/353fbf67bb1ff7c6f039854af1c2d51cb503c865/pandas-0.25_static.html"><strong>pandas 0.25</strong></a></p>
<iframe title="pandas-0.25 snakeviz"
        width="900px"
        height="600px"
        src="https://gistcdn.rawgit.org/TomAugspurger/bad09c3e4a03338590545033ad2da925/353fbf67bb1ff7c6f039854af1c2d51cb503c865/pandas-0.25_static.html"></iframe>
<p><a href="https://gistcdn.rawgit.org/TomAugspurger/98bc79523187f1fde3093b5af63ae68c/5b1d3815fb2319ff365c3881daeac70bf9077e77/pandas-1.0_static.html"><strong>pandas 1.0</strong></a></p>
<iframe title="pandas 1.0.3 snakeviz"
        width="900px"
        height="600px"
        src="https://gistcdn.rawgit.org/TomAugspurger/98bc79523187f1fde3093b5af63ae68c/5b1d3815fb2319ff365c3881daeac70bf9077e77/pandas-1.0_static.html"></iframe>
<p>From the <a href="https://jiffyclub.github.io/snakeviz/#interpreting-results">snakeviz
docs</a>, these charts
show</p>
<blockquote>
<p>the fraction of time spent in a function is represented by the extent of a
visualization element, either the width of a rectangle or the angular extent
of an arc.</p>
</blockquote>
<p>I prefer the &ldquo;sunburst&rdquo; / angular extent style, but either works.</p>
<p>In this case, I noticed that ~95% of the time was being spent in
<code>pandas._libs.lib.memory_usage_of_object</code>, and most of that time was spent in
<code>PandasArray.__getitem__</code> in pandas 1.0.3. This is where a bit of
pandas-specific knowledge comes in, but suffice to say, it looks fishy<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>As an aside, to create and share these snakeviz profiles, I ran the output of
the <code>%snakeviz</code> command through
<a href="https://gist.github.com/jiffyclub/6b5e0f0f05ab487ff607"><code>svstatic</code></a> and
uploaded that as a gist (using <a href="https://github.com/defunkt/gist"><code>gist</code></a>). I
then pasted the &ldquo;raw&rdquo; URL to <a href="https://rawgit.org/">https://rawgit.org/</a> to get the URL embedded here as
an iframe.</p>
<h2 id="line-profiling">Line Profiling</h2>
<p>With snakeviz, we&rsquo;ve identified a function or two that&rsquo;s slowing things down. If
I need more details on <em>why</em> that&rsquo;s function is slow, I&rsquo;ll use
<a href="https://github.com/rkern/line_profiler">line-profiler</a>. In our example, we&rsquo;ve
identified a couple of functions, <code>IndexOpsMixin.memory_usage</code> and
<code>PandasArray.__getitem__</code> that could be inspected in detail.</p>
<p>You point <code>line-profiler</code> at one or more functions with <code>-f</code> and provide a
statement to execute. It will measure things about each line in the function,
including the number of times it&rsquo;s hit and how long is spent on that line (per
hit and total)</p>
<pre tabindex="0"><code>In  [9]: %load_ext line_profiler
In [10]: %lprun -f pd.core.base.IndexOpsMixin.memory_usage df.memory_usage(deep=True)
Total time: 0.034319 s
File: /Users/taugspurger/miniconda3/envs/pandas=1.0.1/lib/python3.8/site-packages/pandas/core/base.py
Function: memory_usage at line 1340

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1340                                               def memory_usage(self, deep=False):
  ...
  1363         1         56.0     56.0      0.2          if hasattr(self.array, &#34;memory_usage&#34;):
  1364                                                       return self.array.memory_usage(deep=deep)
  1365
  1366         1         11.0     11.0      0.0          v = self.array.nbytes
  1367         1         18.0     18.0      0.1          if deep and is_object_dtype(self) and not PYPY:
  1368         1      34233.0  34233.0     99.7              v += lib.memory_usage_of_objects(self.array)
  1369         1          1.0      1.0      0.0          return v
</code></pre><p>THe <code>% time</code> column clearly points to <code>lib.memory_usage_of_objects</code>. This is a
Cython function, so we can&rsquo;t use <code>line-profiler</code> on it. But we know from the
snakeviz output above that we eventually get to <code>PandasArray.__getitem__</code></p>
<pre tabindex="0"><code>In [11]: %lprun -f pd.arrays.PandasArray.__getitem__ df.memory_usage(deep=True)
Timer unit: 1e-06 s

Total time: 0.041508 s
File: /Users/taugspurger/miniconda3/envs/pandas=1.0.1/lib/python3.8/site-packages/pandas/core/arrays/numpy_.py
Function: __getitem__ at line 232

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   232                                               def __getitem__(self, item):
   233     10000       4246.0      0.4     10.2          if isinstance(item, type(self)):
   234                                                       item = item._ndarray
   235
   236     10000      25475.0      2.5     61.4          item = check_array_indexer(self, item)
   237
   238     10000       4394.0      0.4     10.6          result = self._ndarray[item]
   239     10000       4386.0      0.4     10.6          if not lib.is_scalar(item):
   240                                                       result = type(self)(result)
   241     10000       3007.0      0.3      7.2          return result
</code></pre><p>In this particular example, the most notable thing is that fact that we&rsquo;re
calling this function 10,000 times, which amounts to once per item on our 10,000
row <code>DataFrame</code>. Again, the details of this specific example and the fix aren&rsquo;t
too important, but the solution was to just stop doing that<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p><a href="https://github.com/pandas-dev/pandas/pull/33102">The fix</a> was provided by
<a href="https://github.com/neilkg">@neilkg</a> soon after the issue was identified, and
crucially included a new asv benchmark for <code>memory_usage</code> with object dtypes.
Hopefully we won&rsquo;t regress on this again in the future.</p>
<h2 id="workflow-issues">Workflow issues</h2>
<p>This setup is certainly better than nothing. But there are a few notable
problems, some general and some specific to pandas:</p>
<p>Writing benchmarks is hard work (just like tests). There&rsquo;s the general issue of
writing and maintaining code. And on top of that, writing a good ASV benchmark
requires some knowledge specific to ASV. And again, just like tests, your
benchmarks can be trusted only as far as their coverage. For a large codebase
like pandas you&rsquo;ll need a decently large benchmark suite.</p>
<p>But that large benchmark suite comes with it&rsquo;s own costs. Currently pandas&rsquo; full
suite takes about 2 hours to run. This rules out running the benchmarks on most
public CI providers. And even if we could finish it in time, we couldn&rsquo;t really
trust the results. These benchmarks, at least as written, really do need
dedicated hardware to be stable over time. Pandas has a machine in my basement,
but maintaining that has been a time-consuming, challenging process.</p>
<p><img loading="lazy" src="/images/benchmark-server.png" alt="Pandas&amp;rsquo; benchmark server"  />
</p>
<p>This is my current setup, which stuffs the benchmark server (the black Intel
NUC) and a router next to my wife&rsquo;s art storage. We reached this solution after
my 2 year old unplugged the old setup (on my office floor) one too many times.
Apologies for the poor cabling.</p>
<p>We <a href="https://github.com/asv-runner/asv-runner">deploy the benchmarks</a> (for pandas
and a few other NumFOCUS projects) using Ansible. The scripts get the benchmarks
in place, Airflow to run them nightly, and supervisord to kick everything off.
The outputs are <code>rsync</code>ed over to the pandas webserver and served at
<a href="https://pandas.pydata.org/speed/">https://pandas.pydata.org/speed/</a>. You can
see pandas&rsquo; at
<a href="https://pandas.pydata.org/speed/pandas">https://pandas.pydata.org/speed/pandas/</a>.
If this seems like a house of cards waiting to tumble, that&rsquo;s because it is.</p>
<p><img loading="lazy" src="/images/performance-airflow.png" alt="pandas&amp;rsquo; airflow server"  />
</p>
<p>Pandas has applied for a NumFOCUS small development grant to improve our
benchmark process. Ideally maintainers would be able to ask a bot <code>@asv-bot run -b memory_usage</code> which would kick off a process that pulled down the pull
request and ran the requested benchmarks on a dedicated machine (that isn&rsquo;t
easily accessible by my children).</p>
<h2 id="recap">Recap</h2>
<p>To summarize:</p>
<ol>
<li>We need benchmarks to monitor performance, especially over time</li>
<li>We use tools like <code>asv</code> to organize and benchmark continuously</li>
<li>When regressions occur, we use <code>snakeviz</code> and <code>line-profiler</code> to diagnose the
problem</li>
</ol>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>PandasArray is a very simple wrapper that implements pandas'
ExtensionArray interface for 1d NumPy ndarrays, so it&rsquo;s essentially just an
ndarray. But, crucially, it&rsquo;s a Python class so it&rsquo;s getitem is relatively
slow compared to numpy.ndarray&rsquo;s getitem.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>It still does an elementwise getitem, but NumPy&rsquo;s <code>__getitem__</code> is much
faster than <code>PandasArray</code>&rsquo;s.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Dask Workshop</title><link>https://tomaugspurger.github.io/posts/dask-workshop/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dask-workshop/</guid><description>Dask Summit Recap
Last week was the first Dask Developer Workshop. This brought together many of the core Dask developers and its heavy users to discuss the project. I want to share some of the experience with those who weren&amp;rsquo;t able to attend.
This was a great event. Aside from any technical discussions, it was ncie to meet all the people. From new acquaintences to people you&amp;rsquo;re on weekly calls with, it was great to interact with everyone.</description><content:encoded><![CDATA[<p>Dask Summit Recap</p>
<p>Last week was the first Dask Developer Workshop. This brought together many of
the core Dask developers and its heavy users to discuss the project. I want to
share some of the experience with those who weren&rsquo;t able to attend.</p>
<p>This was a great event. Aside from any technical discussions, it was ncie to
meet all the people. From new acquaintences to people you&rsquo;re on weekly calls
with, it was great to interact with everyone.</p>
<p>The workshop</p>
<p>During our brief introductions, everyone included a one-phrase description of
what they&rsquo;d most-like to see improved in the project. These can roughly be
grouped as</p>
<ul>
<li><strong>Project health</strong>: more maintainers, more maintainer diversity, more commercial
adoption</li>
<li><strong>Deployments</strong>: Support for heterogeneous clusters (e.g. some workers with
different resources) on more cluster managers. Easier deployments for various
use cases (single user vs. small team of scientists vs. enterprise IT managing
things for a large team)</li>
<li><strong>Documentation</strong>: Including example</li>
<li><strong>Data Access</strong>: Loading data from various sources</li>
<li><strong>Reliability</strong>: Especially on adaptive clusters, as workers come and go.</li>
<li><strong>Features</strong>: Including things like approximate nearest neighbors, shared
clients between futures, multi-column sorting, MultiIndex for dask.dataframe</li>
</ul>
<p>One of the themes of the workshop was requests for honest, critical feedback
about what needs to improve. Overall, people had great things to say about Dask
and the various sub-projects but there&rsquo;s always things to improve.</p>
<p>Dask sits at a pretty interesting place in the scientific Python ecosystem. It
(and its users) are power-users of many libraries. It acts as a nice
coordination point for many projects. We had maintainers from projects like
NumPy, pandas, scikit-learn, Apache Arrow, cuDF, and others.</p>
]]></content:encoded></item><item><title>pandas + binder</title><link>https://tomaugspurger.github.io/posts/pandas-binder/</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pandas-binder/</guid><description>This post describes the start of a journey to get pandas&amp;rsquo; documentation running on Binder. The end result is this nice button:
For a while now I&amp;rsquo;ve been jealous of Dask&amp;rsquo;s examples repository. That&amp;rsquo;s a repository containing a collection of Jupyter notebooks demonstrating Dask in action. It stitches together some tools to present a set of documentation that is both viewable as a static site at examples.dask.org, and as a executable notebooks on mybinder.</description><content:encoded><![CDATA[<p>This post describes the start of a journey to get pandas&rsquo; documentation running
on Binder. The end result is this nice button:</p>
<p><a href="https://mybinder.org/v2/gh/TomAugspurger/pandas-binder/master?filepath=build%2Fjupyter%2Fgetting_started%2F10min.ipynb"><img loading="lazy" src="https://mybinder.org/badge_logo.svg" alt="Binder"  />
</a></p>
<hr>
<p>For a while now I&rsquo;ve been jealous of <a href="https://github.com/dask/dask-examples">Dask&rsquo;s examples
repository</a>. That&rsquo;s a repository containing a
collection of Jupyter notebooks demonstrating Dask in action. It stitches
together some tools to present a set of documentation that is both viewable
as a static site at <a href="https://examples.dask.org">examples.dask.org</a>, and as a executable notebooks
on <a href="https://mybinder.org/v2/gh/dask/dask-examples/master?urlpath=lab">mybinder</a>.</p>
<p>A bit of background on binder: it&rsquo;s a tool for creating a shareable computing
environment. This is perfect for introductory documentation. A prospective user
may want to just try out a library to get a feel for it before they commit to
installing. Binder<em>Hub</em> is a tool for deploying binder services. You point a
binderhub deployment (like <a href="https://mybinder.org">mybinder</a>) at a git repository
with a collection of notebooks and an environment specification, and out comes
your executable documentation.</p>
<p>Thanks to a lot of hard work by contributors and maintainers, the code examples
in pandas&rsquo; documentation are already runnable (and this is verified on each
commit). We use the <a href="https://ipython.readthedocs.io/en/stable/sphinxext.html">IPython Sphinx
Extension</a> to execute
examples and include their output. We write documentation like</p>
<pre tabindex="0"><code>.. ipython:: python

   import pandas as pd
   s = pd.Series([1, 2])
   s
</code></pre><p>Which is then <em>executed</em> and rendered in the HTML docs as</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: s <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">3</span>]: s
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">3</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>    <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>    <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>    <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>dtype: int64
</span></span></code></pre></div><p>So we have the most important thing: a rich source of documentation that&rsquo;s
already runnable.</p>
<p>There were a couple barriers to just pointing binder at
<code>https://github.com/pandas-dev/pandas</code>, however. First, binder builds on top of
a tool called <a href="https://repo2docker.readthedocs.io/en/latest/">repo2docker</a>. This
is what takes your Git repository and turns it into a Docker image that users
will be dropped into. When someone visits the URL, binder will first check to
see if it&rsquo;s built a docker image. If it&rsquo;s already cached, then that will just be
loaded. If not, binder will have to clone the repository and build it from
scratch, a time-consuming process. Pandas receives 5-10 commits per day, meaning
many users would visit the site and be stuck waiting for a 5-10 minute docker
build.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Second, pandas uses Sphinx and ReST for its documentation. Binder needs a collection
of Notebooks. Fortunately, the fine folks at <a href="https://quantecon.org">QuantEcon</a>
(a fellow NumFOCUS project) wrote
<a href="https://sphinxcontrib-jupyter.readthedocs.io"><code>sphinxcontrib-jupyter</code></a>, a tool
for turning ReST files to Jupyter notebooks. Just what we needed.</p>
<p>So we had some great documentation that already runs, and a tool for converting
ReST files to Jupyter notebooks. All the pieces were falling into place!</p>
<p>Unfortunately, my first attempt failed. <code>sphinxcontrib-jupyter</code> looks for directives
like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rst" data-lang="rst"><span style="display:flex;"><span>.. <span style="color:#f92672">code</span>:: python<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>while pandas uses</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rst" data-lang="rst"><span style="display:flex;"><span>.. <span style="color:#f92672">ipython</span>:: python<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>I started slogging down a path to teach <code>sphinxcontrib-jupyter</code> how to recognize
the IPython directive pandas uses when my kid woke up from his nap. Feeling
dejected I gave up.</p>
<p>But later in the day, I had the (obvious in hindsight) realization that we have
plenty of tools for substituting lines of text. A few (non-obvious) <a href="https://github.com/TomAugspurger/pandas-binder/blob/20fc3e8f52a05d4b291211a41ed3015f37758f81/Makefile#L4">lines of
bash
later</a>
and we were ready to go. All the <code>.. ipython:: python</code> directives were now <code>.. code:: python</code>. Moral of the story: take breaks.</p>
<p>My work currently lives in <a href="https://github.com/TomAugspurger/pandas-binder">this repository</a>, and
the notebooks are runnable <a href="https://mybinder.org/v2/gh/TomAugspurger/pandas-binder/master?filepath=build%2Fjupyter%2Fgetting_started%2F10min.ipynb">on mybinder</a>. But the short version is</p>
<ol>
<li>We include github.com/pandas-dev/pandas as a submodule (which repo2docker
supports just fine)</li>
<li>We patch pandas Sphinx config to include sphinxcontrib-jupyter and its
configuration</li>
<li>We patch pandas source docs to change the ipython directives to be <code>.. code:: python</code> directives.</li>
</ol>
<p>I&rsquo;m reasonably happy with how things are shaping up. I plan to migrate my repository
to the pandas organization and propose a few changes to the pandas documentation
(like a small header pointing from the rendered HTML docs to the binder). If you&rsquo;d like to follow along,
subscribe to <a href="https://github.com/pandas-dev/pandas/issues/27514">this pandas issue</a>.</p>
<p>I&rsquo;m also hopeful that other projects can apply a similar approach to their documentation too.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I realize now that binder can target a specific branch or commit. I&rsquo;m not
sure if additional commits to that repository will trigger a rebuild, but
I suspect not. We still needed to solve problem 2 though.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>A Confluence of Extension</title><link>https://tomaugspurger.github.io/posts/confluence-extension/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/confluence-extension/</guid><description>This post describes a few protocols taking shape in the scientific Python community. On their own, each is powerful. Together, I think they enable for an explosion of creativity in the community.
Each of the protocols / interfaces we&amp;rsquo;ll consider deal with extending.
NEP-13: NumPy __array_ufunc__ NEP-18: NumPy __array_function__ Pandas Extension types Custom Dask Collections First, a bit of brief background on each.
NEP-13 and NEP-18, each deal with using the NumPy API on non-NumPy ndarray objects.</description><content:encoded><![CDATA[<p>This post describes a few protocols taking shape in the scientific Python
community. On their own, each is powerful. Together, I think they enable for an
explosion of creativity in the community.</p>
<p>Each of the protocols / interfaces we&rsquo;ll consider deal with extending.</p>
<ul>
<li><a href="https://www.numpy.org/neps/nep-0013-ufunc-overrides.html">NEP-13: NumPy <code>__array_ufunc__</code></a></li>
<li><a href="https://www.numpy.org/neps/nep-0018-array-function-protocol.html">NEP-18: NumPy <code>__array_function__</code></a></li>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/development/extending.html#extension-types">Pandas Extension types</a></li>
<li><a href="https://docs.dask.org/en/latest/custom-collections.html">Custom Dask Collections</a></li>
</ul>
<hr>
<p>First, a bit of brief background on each.</p>
<p>NEP-13 and NEP-18, each deal with using the NumPy API on non-NumPy ndarray
objects. For example, you might want to apply a ufunc like <code>np.log</code> to a Dask
array.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> da<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>random((<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> np<span style="color:#f92672">.</span>log(a)
</span></span><span style="display:flex;"><span>dask<span style="color:#f92672">.</span>array<span style="color:#f92672">&lt;</span>log, shape<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>), dtype<span style="color:#f92672">=</span>float64, chunksize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>)<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Prior to NEP-13, <code>dask.array</code> needed it&rsquo;s own namespace of ufuncs like <code>da.log</code>,
since <code>np.log</code> would convert the Dask array to an in-memory NumPy array
(probably blowing up your machine&rsquo;s memory). With <code>__array_ufunc__</code> library
authors and users can all just use NumPy ufuncs, without worrying about the type of
the Array object.</p>
<p>While NEP-13 is limited to ufuncs, NEP-18 applies the same idea to most of the
NumPy API. With NEP-18, libraries written to deal with NumPy ndarrays may
suddenly support any object implementing <code>__array_function__</code>.</p>
<p>I highly recommend reading <a href="https://blog.dask.org/2018/05/27/beyond-numpy">this blog
post</a> for more on the motivation
for <code>__array_function__</code>. Ralph Gommers gave a nice talk on the current state of
things at <a href="https://youtu.be/HVLPJnvInzM">PyData Amsterdam 2019</a>, though this is
an active area of development.</p>
<p>Pandas added extension types to allow third-party libraries to solve
domain-specific problems in a way that gels nicely with the rest of pandas. For
example, cyberpandas handles network data, while geopandas handles geographic
data. When both implement extension arrays it&rsquo;s possible to operate on a dataset
with a mixture of geographic and network data in the same DataFrame.</p>
<p>Finally, Dask defines a <a href="https://docs.dask.org/en/latest/custom-collections.html">Collections Interface</a> so that any
object can be a first-class citizen within Dask. This is what ensures <a href="http://xarray.pydata.org/">XArray&rsquo;s</a>
DataArray and Dataset objects work well with Dask.</p>
<h2 id="series__array_ufunc__"><code>Series.__array_ufunc__</code></h2>
<p>Now, onto the fun stuff: combining these interfaces across objects and
libraries. <a href="https://github.com/pandas-dev/pandas/pull/23293">https://github.com/pandas-dev/pandas/pull/23293</a> is a pull request
adding <code>Series.__array_ufunc__</code>. There are a few subtleties, but the basic idea
is that a ufunc applied to a Series should</p>
<ol>
<li>Unbox the array (ndarray or extension array) from the Series</li>
<li>Apply the ufunc to the Series (honoring the array&rsquo;s <code>__array_ufunc__</code> if
needed)</li>
<li>Rebox the output in a Series (with the original index and name)</li>
</ol>
<p>For example, pandas&rsquo; <code>SparseArray</code> implements <code>__array_ufunc__</code>. It works by
calling the ufunc twice, once on the sparse values (e.g. the non-zero values),
and once on the scalar <code>fill_value</code>. The result is a new <code>SparseArray</code> with the
same memory usage. With that PR, we achieve the same thing when operating on a
Series containing an ExtensionArray.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ser <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series(pd<span style="color:#f92672">.</span>SparseArray([<span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">100000</span>))
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ser
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>        <span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>          <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>          <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>          <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">..</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">99998</span>      <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">99999</span>      <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100000</span>     <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100001</span>     <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100002</span>     <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Length: <span style="color:#ae81ff">100003</span>, dtype: Sparse[int64, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> n [<span style="color:#ae81ff">20</span>]: np<span style="color:#f92672">.</span>sign(ser)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>        <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>         <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>         <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">..</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">99998</span>     <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">99999</span>     <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100000</span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100001</span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100002</span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Length: <span style="color:#ae81ff">100003</span>, dtype: Sparse[int64, <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><p>Previously, that would have converted the <code>SparseArray</code> to a <em>dense</em> NumPy
array, blowing up your memory, slowing things down, and giving the incorrect result.</p>
<h2 id="iparray__array_function__"><code>IPArray.__array_function__</code></h2>
<p>To demonstrate <code>__array_function__</code>, we&rsquo;ll implement it on <code>IPArray</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__array_function__</span>(self, func, types, args, kwargs):
</span></span><span style="display:flex;"><span>        cls <span style="color:#f92672">=</span> type(self)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> all(issubclass(t, cls) <span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> types):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> NotImplemented
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> HANDLED_FUNCTIONS[func](<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span></code></pre></div><p><code>IPArray</code> is pretty domain-specific, so we place ourself down at the bottom
priority by returning <code>NotImplemented</code> if there are any types we don&rsquo;t recognize
(we might consider handling Python&rsquo;s stdlib <code>ipaddres.IPv4Address</code> and
<code>ipaddres.IPv6Address</code> objects too).</p>
<p>And then we start implementing the interface. For example, <code>concatenate</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@implements</span>(np<span style="color:#f92672">.</span>concatenate)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">concatenate</span>(arrays, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, out<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> axis <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NotImplementedError</span>(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Axis != 0 is not supported. (Got </span><span style="color:#e6db74">{</span>axis<span style="color:#e6db74">}</span><span style="color:#e6db74">).&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> IPArray(np<span style="color:#f92672">.</span>concatenate([array<span style="color:#f92672">.</span>data <span style="color:#66d9ef">for</span> array <span style="color:#f92672">in</span> arrays]))
</span></span></code></pre></div><p>With this, we can successfully concatenate two IPArrays</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> cyberpandas<span style="color:#f92672">.</span>ip_range(<span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> cyberpandas<span style="color:#f92672">.</span>ip_range(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> np<span style="color:#f92672">.</span>concatenate([a, b])
</span></span><span style="display:flex;"><span>IPArray([<span style="color:#e6db74">&#39;0.0.0.0&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.1&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.2&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.3&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.10&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.11&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.12&#39;</span>, <span style="color:#e6db74">&#39;0.0.0.13&#39;</span>])
</span></span></code></pre></div><h2 id="extending-dask">Extending Dask</h2>
<p>Finally, we may wish to make <code>IPArray</code> work well with <code>dask.dataframe</code>, to do
normal cyberpandas operations in parallel, possibly distributed on a cluster.
This requires a few changes:</p>
<ol>
<li>Updating <code>IPArray</code> to work on either NumPy or Dask arrays</li>
<li>Implementing the Dask Collections interface on <code>IPArray</code>.</li>
<li>Registering an <code>ip</code> accessor with <code>dask.dataframe</code>, just like with <code>pandas</code>.</li>
</ol>
<p>This is demonstrated in <a href="https://github.com/ContinuumIO/cyberpandas/pull/39">https://github.com/ContinuumIO/cyberpandas/pull/39</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">28</span>]: ddf
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">28</span>]:
</span></span><span style="display:flex;"><span>Dask DataFrame Structure:
</span></span><span style="display:flex;"><span>                 A
</span></span><span style="display:flex;"><span>npartitions<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>               ip
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>              <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>             <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Dask Name: from_pandas, <span style="color:#ae81ff">2</span> tasks
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">29</span>]: ddf<span style="color:#f92672">.</span>A<span style="color:#f92672">.</span>ip<span style="color:#f92672">.</span>netmask()
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">29</span>]:
</span></span><span style="display:flex;"><span>Dask Series Structure:
</span></span><span style="display:flex;"><span>npartitions<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>      ip
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>     <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Name: A, dtype: ip
</span></span><span style="display:flex;"><span>Dask Name: from<span style="color:#f92672">-</span>delayed, <span style="color:#ae81ff">22</span> tasks
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">30</span>]: ddf<span style="color:#f92672">.</span>A<span style="color:#f92672">.</span>ip<span style="color:#f92672">.</span>netmask()<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">30</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>     <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span>    <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>    <span style="color:#ae81ff">255.255.255.255</span>
</span></span><span style="display:flex;"><span>dtype: ip
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I think that these points of extension.</p>
]]></content:encoded></item><item><title>Tabular Data in Scikit-Learn and Dask-ML</title><link>https://tomaugspurger.github.io/posts/sklearn-dask-tabular/</link><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/sklearn-dask-tabular/</guid><description>Scikit-Learn 0.20.0 will contain some nice new features for working with tabular data. This blogpost will introduce those improvements with a small demo. We&amp;rsquo;ll then see how Dask-ML was able to piggyback on the work done by scikit-learn to offer a version that works well with Dask Arrays and DataFrames.
import dask import dask.array as da import dask.dataframe as dd import numpy as np import pandas as pd import seaborn as sns import fastparquet from distributed import Client from distributed.</description><content:encoded><![CDATA[<p>Scikit-Learn 0.20.0 will contain some nice new features for working with tabular data.
This blogpost will introduce those improvements with a small demo.
We&rsquo;ll then see how Dask-ML was able to piggyback on the work done by scikit-learn to offer a version that works well with Dask Arrays and DataFrames.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> dask
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.array <span style="color:#66d9ef">as</span> da
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.dataframe <span style="color:#66d9ef">as</span> dd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> fastparquet
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> distributed <span style="color:#f92672">import</span> Client
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> distributed.utils <span style="color:#f92672">import</span> format_bytes
</span></span></code></pre></div><h2 id="background">Background</h2>
<p>For the most part, Scikit-Learn uses NumPy ndarrays or SciPy sparse matricies for its in-memory data structures.
This is great for many reasons, but one major drawback is that you can&rsquo;t store <em>heterogenous</em> (AKA <em>tabular</em>) data in these containers. These are datasets where different columns of the table have different data types (some ints, some floats, some strings, etc.).</p>
<p>Pandas was built to work with tabular data.
Scikit-Learn was built to work with NumPy ndarrays and SciPy sparse matricies.
So there&rsquo;s some friction when you use the two together.
Perhaps someday things will be perfectly smooth, but it&rsquo;s a challenging problem that will require work from several communities to fix.
In <a href="https://www.youtube.com/watch?v=KLPtEBokqQ0">this PyData Chicago talk</a>, I discuss the differences between the two data models of scikit-learn and pandas, and some ways of working through it. The second half of the talk is mostly irrelevant now that <code>ColumnTransformer</code> is in scikit-learn.</p>
<h2 id="columntransformer-in-scikit-learn"><code>ColumnTransformer</code> in Scikit-Learn</h2>
<p>At <a href="https://www.youtube.com/watch?v=lXGcPbmxx8Q">SciPy 2018</a>, Joris Van den Bossche (a scikit-learn and pandas core developer) gives an update on some recent improvements to scikit-learn to make using pandas and scikit-learn together better.</p>
<p>The biggest addition is <a href="http://scikit-learn.org/dev/modules/generated/sklearn.compose.ColumnTransformer.html"><code>sklearn.compose.ColumnTransformer</code></a>, a transformer for working with tabular data.
The basic idea is to specify pairs of <code>(column_selection, transformer)</code>. The transformer will be applied just to the selected columns, and the remaining columns can be passed through or dropped. Column selections can be integer positions (for arrays), names (for DataFrames) or a callable.</p>
<p>Here&rsquo;s a small example on the &ldquo;tips&rdquo; dataset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>load_dataset(<span style="color:#e6db74">&#39;tips&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div class="output">
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>sex</th>
      <th>smoker</th>
      <th>day</th>
      <th>time</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>16.99</td>
      <td>1.01</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10.34</td>
      <td>1.66</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>21.01</td>
      <td>3.50</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23.68</td>
      <td>3.31</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24.59</td>
      <td>3.61</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<p>Our target is whether the tip was larger than 15%.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>X <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#34;tip&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>tip <span style="color:#f92672">/</span> df<span style="color:#f92672">.</span>total_bill <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0.15</span>
</span></span></code></pre></div><p>We&rsquo;ll make a small pipeline that one-hot encodes the categorical columns (sex, smoker, day, time) before fitting a random forest. The numeric columns (total_bill, size) will be passed through as-is.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sklearn.compose
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sklearn.ensemble
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sklearn.pipeline
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sklearn.preprocessing
</span></span></code></pre></div><p>We use <code>make_column_transformer</code> to create the <code>ColumnTransformer</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>categorical_columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;sex&#39;</span>, <span style="color:#e6db74">&#39;smoker&#39;</span>, <span style="color:#e6db74">&#39;day&#39;</span>, <span style="color:#e6db74">&#39;time&#39;</span>]
</span></span><span style="display:flex;"><span>categorical_encoder <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>preprocessing<span style="color:#f92672">.</span>OneHotEncoder(sparse<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>transformers <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>compose<span style="color:#f92672">.</span>make_column_transformer(
</span></span><span style="display:flex;"><span>    (categorical_columns, categorical_encoder),
</span></span><span style="display:flex;"><span>    remainder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;passthrough&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This is just a regular scikit-learn estimator, which can be placed in a pipeline.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>pipeline<span style="color:#f92672">.</span>make_pipeline(
</span></span><span style="display:flex;"><span>    transformers,
</span></span><span style="display:flex;"><span>    sklearn<span style="color:#f92672">.</span>ensemble<span style="color:#f92672">.</span>RandomForestClassifier(n_estimators<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pipe<span style="color:#f92672">.</span>fit(X, y)
</span></span><span style="display:flex;"><span>pipe<span style="color:#f92672">.</span>score(X, y)
</span></span></code></pre></div><div class="output">
    <pre>
1.0
    </pre>
</div>
<p>We&rsquo;ve likely overfitted, but that&rsquo;s not really the point of this article. We&rsquo;re more interested in the pre-processing side of things.</p>
<h2 id="columntransformer-in-dask-ml"><code>ColumnTransformer</code> in Dask-ML</h2>
<p><code>ColumnTransfomrer</code> was added to Dask-ML in <a href="https://github.com/dask/dask-ml/pull/315">https://github.com/dask/dask-ml/pull/315</a>.
Ideally, we wouldn&rsquo;t need that PR at all. We would prefer for dask&rsquo;s collections (and pandas dataframes) to just be handled gracefully by scikit-learn. The main blocking issue is that the Python community doesn&rsquo;t currently have a way to write &ldquo;concatenate this list of array-like objects together&rdquo; in a generic way. That&rsquo;s being worked on in <a href="http://www.numpy.org/neps/nep-0018-array-function-protocol.html">NEP-18</a>.</p>
<p>So for now, if you want to use <code>ColumnTransformer</code> with dask objects, you&rsquo;ll have to use <code>dask_ml.compose.ColumnTransformer</code>, otherwise your large Dask Array or DataFrame would be converted to an in-memory  NumPy array.</p>
<p>As a footnote to this section, the initial PR in Dask-ML was much longer.
I only needed to override one thing (the function <code>_hstack</code> used to glue the results back together). But that was being called from several places, and so I had to override all <em>those</em> places as well. I was able to work with the scikit-learn developers to make <code>_hstack</code> a staticmethod on <code>ColumnTranformer</code>, so any library wishing to extend <code>ColumnTransformer</code> can do so more easily now. The Dask project values working with the existing community.</p>
<h2 id="challenges-with-scaling">Challenges with Scaling</h2>
<p>Many strategies for dealing with large datasets rely on processing the data in chunks.
That&rsquo;s the basic idea behind Dask DataFrame: a Dask DataFrame consists of many pandas DataFrames.
When you write <code>ddf.column.value_counts()</code>, Dask builds a task graph with many <code>pandas.value_counts</code>, and a final aggregation step so that you end up with the same end result.</p>
<p>But chunking can cause issues when there are variations in your dataset and the operation you&rsquo;re applying depends on the data. For example, consider scikit-learn&rsquo;s <code>OneHotEncoder</code>. By default, it looks at the data and creates a column for each unique value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>enc <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>preprocessing<span style="color:#f92672">.</span>OneHotEncoder(sparse<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>enc<span style="color:#f92672">.</span>fit_transform([[<span style="color:#e6db74">&#39;a&#39;</span>], [<span style="color:#e6db74">&#39;a&#39;</span>], [<span style="color:#e6db74">&#39;b&#39;</span>], [<span style="color:#e6db74">&#39;c&#39;</span>]])
</span></span></code></pre></div><div class="output">
<pre>
array([[1., 0., 0.],
       [1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
</pre>
</div>
<p>But let&rsquo;s suppose we wanted to process that in chunks of two, first <code>[['a'], ['a']]</code>, then <code>[['b'], ['c']]</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>enc<span style="color:#f92672">.</span>fit_transform([[<span style="color:#e6db74">&#39;a&#39;</span>], [<span style="color:#e6db74">&#39;a&#39;</span>]])
</span></span></code></pre></div><div class="highlight output">
<pre>
array([[1.],
       [1.]])
</pre>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>enc<span style="color:#f92672">.</span>fit_transform([[<span style="color:#e6db74">&#39;b&#39;</span>], [<span style="color:#e6db74">&#39;c&#39;</span>]])
</span></span></code></pre></div><div class="highlight output">
<pre>
array([[1., 0.],
       [0., 1.]])
</pre>
</div>
<p>We have a problem! Two in fact:</p>
<ol>
<li>The shapes don&rsquo;t match. The first batch only saw &ldquo;a&rdquo;, so the output shape is <code>(2, 1)</code>. We can&rsquo;t concatenate these results vertically</li>
<li>The meaning of the first column of the output has changed. In the first batch, the first column meant &ldquo;a&rdquo; was present. In the second batch, it meant &ldquo;b&rdquo; was present.</li>
</ol>
<p>If we happened to know the set of possible values <em>ahead</em> of time, we could pass those to <code>CategoricalEncoder</code>. But storing that set of possible values separate from the data is fragile. It&rsquo;d be better to store the possible values in the <em>data type</em> itself.</p>
<p>That&rsquo;s exactly what pandas Categorical does. We can confidently know the number of columns in the categorical-encoded data by just looking at the type. Because this is so important in a distributed dataset context, <code>dask_ml.preprocessing.OneHotEncoder</code> differs from scikit-learn when passed categorical data: we use pandas&rsquo; categorical information.</p>
<h2 id="a-larger-example">A larger Example</h2>
<p>We&rsquo;ll work with the Criteo dataset. This has a mixture of numeric and categorical features. It&rsquo;s also a large dataset, which presents some challenges for many pre-processing methods.</p>
<p>The full dataset is from <a href="http://labs.criteo.com/2013/12/download-terabyte-click-logs/">http://labs.criteo.com/2013/12/download-terabyte-click-logs/</a>.
We&rsquo;ll work with a sample.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#f92672">=</span> Client()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ordinal_columns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_0&#39;</span>, <span style="color:#e6db74">&#39;category_1&#39;</span>, <span style="color:#e6db74">&#39;category_2&#39;</span>, <span style="color:#e6db74">&#39;category_3&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_4&#39;</span>, <span style="color:#e6db74">&#39;category_6&#39;</span>, <span style="color:#e6db74">&#39;category_7&#39;</span>, <span style="color:#e6db74">&#39;category_9&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_10&#39;</span>, <span style="color:#e6db74">&#39;category_11&#39;</span>, <span style="color:#e6db74">&#39;category_13&#39;</span>, <span style="color:#e6db74">&#39;category_14&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_17&#39;</span>, <span style="color:#e6db74">&#39;category_19&#39;</span>, <span style="color:#e6db74">&#39;category_20&#39;</span>, <span style="color:#e6db74">&#39;category_21&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_22&#39;</span>, <span style="color:#e6db74">&#39;category_23&#39;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>onehot_columns <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_5&#39;</span>, <span style="color:#e6db74">&#39;category_8&#39;</span>, <span style="color:#e6db74">&#39;category_12&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_15&#39;</span>, <span style="color:#e6db74">&#39;category_16&#39;</span>, <span style="color:#e6db74">&#39;category_18&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;category_24&#39;</span>, <span style="color:#e6db74">&#39;category_25&#39;</span>,
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>numeric_columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;numeric_</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">13</span>)]
</span></span><span style="display:flex;"><span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;click&#39;</span>] <span style="color:#f92672">+</span> numeric_columns <span style="color:#f92672">+</span> onehot_columns <span style="color:#f92672">+</span> ordinal_columns
</span></span></code></pre></div><p>The raw data is a single large CSV. That&rsquo;s been split with <a href="https://gist.github.com/TomAugspurger/4a058f00b32fc049ab5f2860d03fd579#file-split_csv-py">this script</a> and I took a 10% sample with <a href="https://gist.github.com/TomAugspurger/4a058f00b32fc049ab5f2860d03fd579#file-sample-py">this script</a>, which was written to a directory of parquet files. That&rsquo;s what we&rsquo;ll work with.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sample <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_parquet(<span style="color:#e6db74">&#34;data/sample-10.parquet/&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Convert unknown categorical to known.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># See note later on.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pf <span style="color:#f92672">=</span> fastparquet<span style="color:#f92672">.</span>ParquetFile(<span style="color:#e6db74">&#34;data/sample-10.parquet/part.0.parquet&#34;</span>)
</span></span><span style="display:flex;"><span>cats <span style="color:#f92672">=</span> pf<span style="color:#f92672">.</span>grab_cats(onehot_columns)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sample <span style="color:#f92672">=</span> sample<span style="color:#f92672">.</span>assign(<span style="color:#f92672">**</span>{
</span></span><span style="display:flex;"><span>    col: sample[col]<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>set_categories(cats[col]) <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> onehot_columns
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Our goal is to predict &lsquo;click&rsquo; using the other columns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>y <span style="color:#f92672">=</span> sample[<span style="color:#e6db74">&#39;click&#39;</span>]
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> sample<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#34;click&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>)
</span></span></code></pre></div><p>Now, let&rsquo;s lay out our pre-processing pipeline. We have three types of columns</p>
<ol>
<li>Numeric columns</li>
<li>Low-cardinality categorical columns</li>
<li>High-cardinality categorical columns</li>
</ol>
<p>Each of those will be processed differently.</p>
<ol>
<li>Numeric columns will have missing values filled with the column average and standard scaled</li>
<li>Low-cardinality categorical columns will be one-hot encoded</li>
<li>High-cardinality categorical columns will be deterministically hashed and standard scaled</li>
</ol>
<p>You&rsquo;ll probably want to quibble with some of these choices, but right now, I&rsquo;m
just interested in the ability to do these kinds of transformations at all.</p>
<p>We need to define a couple custom estimators, one for hashing the values of a dask dataframe, and one for converting a dask dataframe to a dask array.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sklearn.base
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hash_block</span>(x: pd<span style="color:#f92672">.</span>DataFrame) <span style="color:#f92672">-&gt;</span> pd<span style="color:#f92672">.</span>DataFrame:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Hash the values in a DataFrame.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    hashed <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        pd<span style="color:#f92672">.</span>Series(pd<span style="color:#f92672">.</span>util<span style="color:#f92672">.</span>hash_array(data<span style="color:#f92672">.</span>values), index<span style="color:#f92672">=</span>x<span style="color:#f92672">.</span>index, name<span style="color:#f92672">=</span>col)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> col, data <span style="color:#f92672">in</span> x<span style="color:#f92672">.</span>iteritems()
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pd<span style="color:#f92672">.</span>concat(hashed, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;columns&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HashingEncoder</span>(sklearn<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>BaseEstimator, sklearn<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(X, pd<span style="color:#f92672">.</span>DataFrame):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> hash_block(X)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> isinstance(X, dd<span style="color:#f92672">.</span>DataFrame):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> X<span style="color:#f92672">.</span>map_partitions(hash_block)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Unexpected type &#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39; for &#39;X&#39;&#34;</span><span style="color:#f92672">.</span>format(type(X)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ArrayConverter</span>(sklearn<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>BaseEstimator, sklearn<span style="color:#f92672">.</span>base<span style="color:#f92672">.</span>TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Convert a Dask DataFrame to a Dask Array with known lengths&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, lengths<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>lengths <span style="color:#f92672">=</span> lengths
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> X<span style="color:#f92672">.</span>to_dask_array(lengths<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>lengths)
</span></span></code></pre></div><p>For the final stage, Dask-ML needs to have a Dask Array with known chunk lengths.
So let&rsquo;s compute those ahead of time, and get a bit of info about how large the dataset is while we&rsquo;re at it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>lengths <span style="color:#f92672">=</span> sample[<span style="color:#e6db74">&#39;click&#39;</span>]<span style="color:#f92672">.</span>map_partitions(len)
</span></span><span style="display:flex;"><span>nbytes <span style="color:#f92672">=</span> sample<span style="color:#f92672">.</span>memory_usage(deep<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lengths, nbytes <span style="color:#f92672">=</span> dask<span style="color:#f92672">.</span>compute(lengths, nbytes)
</span></span><span style="display:flex;"><span>lengths <span style="color:#f92672">=</span> tuple(lengths)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>format_bytes(nbytes)
</span></span></code></pre></div><div class="output">
<pre>
'19.20 GB'
</pre>
</div>
<p>We we&rsquo;ll be working with about 20GB of data on a laptop with 16GB of RAM. We&rsquo;ll clearly be relying on Dask to do the operations in parallel, while keeping things in a small memory footprint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> dask_ml.compose <span style="color:#f92672">import</span> make_column_transformer
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask_ml.preprocessing <span style="color:#f92672">import</span> StandardScaler, OneHotEncoder
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask_ml.wrappers <span style="color:#f92672">import</span> Incremental
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask_ml.impute <span style="color:#f92672">import</span> SimpleImputer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.pipeline <span style="color:#f92672">import</span> make_pipeline
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.preprocessing <span style="color:#f92672">import</span> FunctionTransformer
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.linear_model <span style="color:#f92672">import</span> SGDClassifier
</span></span></code></pre></div><p>Now for the pipeline.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>onehot_encoder <span style="color:#f92672">=</span> OneHotEncoder(sparse<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>hashing_encoder <span style="color:#f92672">=</span> HashingEncoder()
</span></span><span style="display:flex;"><span>nan_imputer <span style="color:#f92672">=</span> SimpleImputer()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>to_numeric <span style="color:#f92672">=</span> make_column_transformer(
</span></span><span style="display:flex;"><span>    (onehot_columns, onehot_encoder),
</span></span><span style="display:flex;"><span>    (ordinal_columns, hashing_encoder),
</span></span><span style="display:flex;"><span>    remainder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;passthrough&#39;</span>,
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fill_na <span style="color:#f92672">=</span> make_column_transformer(
</span></span><span style="display:flex;"><span>    (numeric_columns, nan_imputer),
</span></span><span style="display:flex;"><span>    remainder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;passthrough&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>scaler <span style="color:#f92672">=</span> make_column_transformer(
</span></span><span style="display:flex;"><span>    (list(numeric_columns) <span style="color:#f92672">+</span> list(ordinal_columns), StandardScaler()),
</span></span><span style="display:flex;"><span>    remainder<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;passthrough&#39;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>clf <span style="color:#f92672">=</span> Incremental(
</span></span><span style="display:flex;"><span>    SGDClassifier(loss<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;log&#39;</span>,
</span></span><span style="display:flex;"><span>                  random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>                  max_iter<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> make_pipeline(to_numeric, fill_na, scaler, ArrayConverter(lengths<span style="color:#f92672">=</span>lengths), clf)
</span></span><span style="display:flex;"><span>pipe
</span></span></code></pre></div><pre><code>Pipeline(memory=None,
     steps=[('columntransformer-1', ColumnTransformer(n_jobs=1, preserve_dataframe=True, remainder='passthrough',
         sparse_threshold=0.3, transformer_weights=None,
         transformers=[('onehotencoder', OneHotEncoder(categorical_features=None, categories='auto',
       dtype=&lt;class 'numpy.float6...ion=0.1, verbose=0, warm_start=False),
      random_state=None, scoring=None, shuffle_blocks=True))])
</code></pre>
<p>Overall it reads pretty similarly to how we described it in prose.
We specify</p>
<ol>
<li>Onehot the low-cardinality categoricals, hash the others</li>
<li>Fill missing values in the numeric columns</li>
<li>Standard scale the numeric and hashed columns</li>
<li>Fit the incremental SGD</li>
</ol>
<p>And again, these ColumnTransformers are just estimators so we stick them in a regular scikit-learn <code>Pipeline</code> before calling <code>.fit</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time pipe<span style="color:#f92672">.</span>fit(X, y<span style="color:#f92672">.</span>to_dask_array(lengths<span style="color:#f92672">=</span>lengths), incremental__classes<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>])
</span></span></code></pre></div><div class="output">
<pre>
CPU times: user 7min 7s, sys: 41.6 s, total: 7min 48s
Wall time: 16min 42s
<p>Pipeline(memory=None,
steps=[(&lsquo;columntransformer-1&rsquo;, ColumnTransformer(n_jobs=1, preserve_dataframe=True, remainder=&lsquo;passthrough&rsquo;,
sparse_threshold=0.3, transformer_weights=None,
transformers=[(&lsquo;onehotencoder&rsquo;, OneHotEncoder(categorical_features=None, categories=&lsquo;auto&rsquo;,
dtype=&lt;class &rsquo;numpy.float6&hellip;ion=0.1, verbose=0, warm_start=False),
random_state=None, scoring=None, shuffle_blocks=True))])
</pre></p>
</div>
<h2 id="discussion">Discussion</h2>
<p>Some aspects of this workflow could be improved.</p>
<ol>
<li>
<p>Dask, fastparquet, pyarrow, and pandas don&rsquo;t currently have a way to
specify the categorical dtype of a column split across many files.
Each file (parition) is treated independently. This results in categorials
with unknown categories in the Dask DataFrame.
Since <em>we</em> know that the categories are all the same, we&rsquo;re able to read in
the first files categories and assign those to the entire DataFrame. But this
is a bit fragile, as it relies on an assumption not necessarily guaranteed
by the file structure.</p>
</li>
<li>
<p>There&rsquo;s of IO. As written, each stage of the pipeline that
has to see the data does a full read of the dataset. We end up reading the
entire dataset something like 5 times.
<a href="https://github.com/dask/dask-ml/issues/192">https://github.com/dask/dask-ml/issues/192</a> has some discussion on ways
we can progress through a pipeline. If your pipeline consists entirely of
estimators that learn incrementally, it may make sense to send each block
of data through the entire pipeline, rather than sending all the data to
the first step, then all the data to the second, and so on.
I&rsquo;ll note, however, that you can avoid the redundant IO by loading your
data into distributed RAM on a Dask cluster. But I was just trying things
out on my laptop.</p>
</li>
</ol>
<p>Still, it&rsquo;s worth noting that we&rsquo;ve successfully fit a reasonably complex pipeline on a larger-than-RAM dataset using our laptop. That&rsquo;s something!</p>
<p>ColumnTransformer will be available in scikit-learn 0.20.0.
This also contains the changes for <a href="sklearn-dask-tabular">distributed joblib</a> I blogged about earlier.
The <a href="https://pypi.org/project/scikit-learn/0.20rc1/">first release candidate</a> is available now.</p>
<p>For more, visit the <a href="http://docs.dask.org">Dask</a>, <a href="http://ml.dask.org">Dask-ML</a>, and <a href="http://scikit-learn.org/dev/modules/generated/sklearn.compose.ColumnTransformer.html">scikit-learn</a> documentation.</p>
]]></content:encoded></item><item><title>Distributed Auto-ML with TPOT with Dask</title><link>https://tomaugspurger.github.io/posts/distributed-tpot/</link><pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/distributed-tpot/</guid><description>This work is supported by Anaconda Inc.
This post describes a recent improvement made to TPOT. TPOT is an automated machine learning library for Python. It does some feature engineering and hyper-parameter optimization for you. TPOT uses genetic algorithms to evaluate which models are performing well and how to choose new models to try out in the next generation.
Parallelizing TPOT In TPOT-730, we made some modifications to TPOT to support distributed training.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="https://www.anaconda.com/">Anaconda Inc</a>.</em></p>
<p>This post describes a recent improvement made to <a href="https://epistasislab.github.io/tpot/">TPOT</a>. TPOT is an
<a href="https://en.wikipedia.org/wiki/Automated_machine_learning">automated machine learning</a> library for Python. It does some feature
engineering and hyper-parameter optimization for you. TPOT uses <a href="https://en.wikipedia.org/wiki/Genetic_programming">genetic
algorithms</a> to evaluate which models are performing well and how to choose
new models to try out in the next generation.</p>
<h2 id="parallelizing-tpot">Parallelizing TPOT</h2>
<p>In <a href="https://github.com/EpistasisLab/tpot/pull/730">TPOT-730</a>, we made some modifications to TPOT to support
distributed training. As a TPOT user, the only changes you need to make to your
code are</p>
<ol>
<li>Connect a client to your Dask Cluster</li>
<li>Specify the <code>use_dask=True</code> argument to your TPOT estimator</li>
</ol>
<p>From there, all the training will use your cluster of machines. This screencast
shows an example on an 80-core Dask cluster.</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/uyx9nBuOYQQ?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe> 
<h2 id="commentary">Commentary</h2>
<p>Fitting a TPOT estimator consists of several stages. The bulk of the time is
spent evaluating individual scikit-learn pipelines. Dask-ML already had code for
splitting apart a scikit-learn <code>Pipeline.fit</code> call into individual tasks. This
is used in Dask-ML&rsquo;s hyper-parameter optimization to <a href="https://dask.github.io/dask-ml/hyper-parameter-search.html#avoid-repeated-work">avoid repeating
work</a>. We were able to drop-in Dask-ML&rsquo;s fit and scoring method
for the one already used in TPOT. That small change allows fitting the many
individual models in a generation to be done on a cluster.</p>
<p>There&rsquo;s still some room for improvement. Internal to TPOT, some time is spent
determining the next set of models to try out (this is the &ldquo;mutation and
crossover phase&rdquo;). That&rsquo;s not (yet) been parallelized with Dask, so you&rsquo;ll
notice some periods of inactivity on the cluster.</p>
<h2 id="next-steps">Next Steps</h2>
<p>This will be available in the next release of TPOT. You can try out a small
example now on the <a href="https://mybinder.org/v2/gh/dask/dask-examples/master?filepath=machine-learning%2Ftpot.ipynb">dask-examples binder</a>.</p>
<p>Stepping back a bit, I think this is a good example of how libraries can use
Dask internally to parallelize workloads for their users. Deep down in TPOT
there was a single method for fitting many scikit-learn models on some data and
collecting the results. Dask-ML has code for <em>building a task graph</em> that does
the same thing. We were able to swap out the eager TPOT code for the lazy dask
version, and get things distributed on a cluster. Projects like <a href="http://xarray.pydata.org/en/stable/">xarray</a>
have been able to do a similar thing with <a href="http://xarray.pydata.org/en/stable/dask.html">dask Arrays in place of NumPy
arrays</a>. If Dask-ML hadn&rsquo;t already had that code,
<a href="http://dask.pydata.org/en/latest/delayed.html"><code>dask.delayed</code></a> could have been used instead.</p>
<p>If you have a library that you think could take advantage of Dask, please <a href="https://github.com/dask/dask">reach
out</a>!</p>
]]></content:encoded></item><item><title>Moral Philosophy for pandas or: What is `.values`?</title><link>https://tomaugspurger.github.io/posts/pandas-moral-philosophy/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pandas-moral-philosophy/</guid><description>The other day, I put up a Twitter poll asking a simple question: What&amp;rsquo;s the type of series.values?
Pop Quiz! What are the possible results for the following:
&amp;gt;&amp;gt;&amp;gt; type(pandas.Series.values)
&amp;mdash; Tom Augspurger (@TomAugspurger) August 6, 2018 I was a bit limited for space, so I&amp;rsquo;ll expand on the options here. Choose as many as you want.
NumPy ndarray pandas Categorical (or all of the above) An Index or any of it&amp;rsquo;s subclasses (DatetimeIndex, CategoricalIndex, RangeIndex, etc.</description><content:encoded><![CDATA[<p>The other day, I put up a <a href="https://twitter.com/TomAugspurger/status/1026578613389455360">Twitter poll</a> asking a simple question: What&rsquo;s the type of <code>series.values</code>?</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Pop Quiz! What are the possible results for the following:<br><br>&gt;&gt;&gt; type(pandas.Series.values)</p>&mdash; Tom Augspurger (@TomAugspurger) <a href="https://twitter.com/TomAugspurger/status/1026578613389455360?ref_src=twsrc%5Etfw">August 6, 2018</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>I was a bit limited for space, so I&rsquo;ll expand on the options here. Choose as many as you want.</p>
<ol>
<li>NumPy ndarray</li>
<li>pandas Categorical (or all of the above)</li>
<li>An Index or any of it&rsquo;s subclasses (DatetimeIndex, CategoricalIndex, RangeIndex, etc.) (or all of the above)</li>
<li>None or all of the above</li>
</ol>
<p>I was prompted to write this post because <em>a.)</em> this is an (unfortunately) confusing topic and <em>b.)</em> it&rsquo;s undergoing a lot of change right now (and, <em>c.)</em> I had this awesome title in my head).</p>
<h2 id="the-answer">The Answer</h2>
<p>Unfortunately I kind of messed up the poll. Things are even more complex than I initially thought.</p>
<p>As best I can tell, the possible types for <code>series.values</code> are</p>
<ul>
<li>NumPy ndarray</li>
<li>pandas Categorical</li>
<li>pandas SparseArray (I forgot about this one in the poll)</li>
</ul>
<p>So going with the cop-out &ldquo;best-available&rdquo; answer, I would have said that <em>2</em> was the best answer in the poll.
SparseArray is <em>technically</em> and ndarray subclass (for now), so <em>technically</em> 2 is correct, but that&rsquo;s a few too many <em>technically</em>s for me.</p>
<h2 id="the-explanation">The Explanation</h2>
<p>So, that&rsquo;s a bit of a mess. How&rsquo;d we get here? Or, stepping back a bit, what even is an array? What&rsquo;s a dataframe?</p>
<p>NumPy arrays are N-dimensional and <em>homogenous</em>. Every element in the array has to have the same data type.</p>
<p>Pandas dataframes are 2-dimensional and <em>heterogenous</em>. Different columns can have different data types. But every element in a single column (Series) has the same data type.
I like to think of DataFrames as containers for Series.
Stepping down a dimension, I think of Series as containers for 1-D arrays.
In an ideal world, we could say Series are containers for NumPy ararys, but that&rsquo;s not <em>quite</em> the case.</p>
<p>While there&rsquo;s a lot of overlap between the pandas and NumPy communites, there are still differences.
Pandas users place different value on different features, so pandas has restricted and <em>extended</em> NumPy&rsquo;s type system in a few directions.
For example, early Pandas users (many of them in the financial sector) needed datetimes with timezones, but didn&rsquo;t really care about lower-precision timestamps like <code>datetime64[D]</code>.
So pandas limited its scope to just nanosecond-precision datetimes (<code>datetime64[ns]</code>) and extended it with some metedata for the timezone.
Likewise for Categorical, period, sparse, interval, etc.</p>
<p>So back to <code>Series.values</code>; pandas had a choice: should <code>Series.values</code> always be a NumPy array, even if it means losing information like the timezone or categories, and even if it&rsquo;s slow or could exhaust your memory (large categorical or sparse arrays)?
Or should it faithfully represent the data, even if that means not returning an ndarray?</p>
<p>I don&rsquo;t think there&rsquo;s a clear answer to this question. Both options have their downsides.
In the end, we ended up with a messy compromise, where some things return ndarrays, some things return something else (Categorical), and some things do a bit of conversion before returning an <code>ndarary</code>.</p>
<p>For example, off the top of your head, do you know what the type of <code>Series.values</code> is for timezone-aware data?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: pd<span style="color:#f92672">.</span>Series(pd<span style="color:#f92672">.</span>date_range(<span style="color:#e6db74">&#39;2017&#39;</span>, periods<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, tz<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;US/Eastern&#39;</span>))
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">2</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">2017</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>:<span style="color:#ae81ff">00</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">2017</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">02</span> <span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>:<span style="color:#ae81ff">00</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>   <span style="color:#ae81ff">2017</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">03</span> <span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>:<span style="color:#ae81ff">00</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>   <span style="color:#ae81ff">2017</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">04</span> <span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span>:<span style="color:#ae81ff">00</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>:<span style="color:#ae81ff">00</span>
</span></span><span style="display:flex;"><span>dtype: datetime64[ns, US<span style="color:#f92672">/</span>Eastern]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">3</span>]: pd<span style="color:#f92672">.</span>Series(pd<span style="color:#f92672">.</span>date_range(<span style="color:#e6db74">&#39;2017&#39;</span>, periods<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, tz<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;US/Eastern&#39;</span>))<span style="color:#f92672">.</span>values
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">3</span>]:
</span></span><span style="display:flex;"><span>array([<span style="color:#e6db74">&#39;2017-01-01T05:00:00.000000000&#39;</span>, <span style="color:#e6db74">&#39;2017-01-02T05:00:00.000000000&#39;</span>,
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;2017-01-03T05:00:00.000000000&#39;</span>, <span style="color:#e6db74">&#39;2017-01-04T05:00:00.000000000&#39;</span>],
</span></span><span style="display:flex;"><span>      dtype<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;datetime64[ns]&#39;</span>)
</span></span></code></pre></div><p>With the wisdom of Solomon, we decided to have it both ways; the values are converted to UTC and the timezone is dropped.
I don&rsquo;t think anyone would claim this is ideal, but it was backwards compatibile-ish.
Given the constraints, it wasn&rsquo;t the worst choice in the world.</p>
<h2 id="the-near-future">The Near Future</h2>
<p>In pandas 0.24, we&rsquo;ll (hopefully) have a good answer for what <code>series.values</code> is: a NumPy array or an <a href="http://pandas-docs.github.io/pandas-docs-travis/extending.html#extension-types">ExtensionArray</a>.
For regular data types represented by NumPy, you&rsquo;ll get an ndarray.
For extension types (implemented in pandas or elsewhere) you&rsquo;ll get an ExtensionArray.
If you&rsquo;re using <code>Series.values</code>, you can rely on the set of methods common to each.</p>
<p>But that raises the question: <em>why</em> are you using <code>.values</code> in the first place?
There are some legitmate use cases (disabling automatic alignment, for example),
but for many things, passing a <code>Series</code> will hopefully work as well as a NumPy array.
To users of pandas, I recommend avoiding <code>.values</code> as much as possible.
If you know that you need an ndarray, you&rsquo;re probably best of using <code>np.asarray(series)</code>.
That will do the right thing for any data type.</p>
<h2 id="the-far-future">The Far Future</h2>
<p>I&rsquo;m hopeful that some day all we&rsquo;ll have a common language for these data types.
There&rsquo;s a lot going on in the numeric Python ecosystem right now. Stay tuned!</p>
]]></content:encoded></item><item><title>Modern Pandas (Part 8): Scaling</title><link>https://tomaugspurger.github.io/posts/modern-8-scaling/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-8-scaling/</guid><description>This is part 1 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling As I sit down to write this, the third-most popular pandas question on StackOverflow covers how to use pandas for large datasets. This is in tension with the fact that a pandas DataFrame is an in memory container. You can&amp;rsquo;t have a DataFrame larger than your machine&amp;rsquo;s RAM.</description><content:encoded><![CDATA[<hr>
<p>This is part 1 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<p>As I sit down to write this, the third-most popular pandas question on StackOverflow covers <a href="https://stackoverflow.com/q/14262433/1889400">how to use pandas for large datasets</a>. This is in tension with the fact that a pandas DataFrame is an in memory container. <em>You can&rsquo;t have a <code>DataFrame</code> larger than your machine&rsquo;s RAM</em>. In practice, your available RAM should be several times the size of your dataset, as you or pandas will have to make intermediate copies as part of the analysis.</p>
<p>Historically, pandas users have scaled to larger datasets by switching away from pandas or using iteration. Both of these are perfectly valid approaches, but changing your workflow in response to scaling data is unfortunate. I use pandas because it&rsquo;s a pleasant experience, and I would like that experience to scale to larger datasets. That&rsquo;s what <a href="dask.pydata.org/">Dask</a>, a parallel computing library, enables. We&rsquo;ll discuss Dask in detail later. But first, let&rsquo;s work through scaling a simple analysis to a larger than memory dataset.</p>
<p>Our task is to find the 100 most-common occupations reported in the FEC&rsquo;s <a href="https://classic.fec.gov/finance/disclosure/ftpdet.shtml">individual contributions dataest</a>. The files are split by election cycle (2007-2008, 2009-2010, &hellip;). You can find some scripts for downloading the data in <a href="https://github.com/tomaugspurger/scalable-ml-fec">this repository</a>. My laptop can read in each cycle&rsquo;s file individually, but the full dataset is too large to read in at once. Let&rsquo;s read in just 2010&rsquo;s file, and do the &ldquo;small data&rdquo; version.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pathlib <span style="color:#f92672">import</span> Path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_parquet(<span style="color:#e6db74">&#34;data/indiv-10.parq&#34;</span>, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;occupation&#39;</span>], engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pyarrow&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>most_common <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>most_common
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    RETIRED                    279775
    ATTORNEY                   166768
    PRESIDENT                   81336
    PHYSICIAN                   73015
    HOMEMAKER                   66057
                                ...  
    C.E.O.                       1945
    EMERGENCY PHYSICIAN          1944
    BUSINESS EXECUTIVE           1924
    BUSINESS REPRESENTATIVE      1879
    GOVERNMENT AFFAIRS           1867
    Name: occupation, Length: 100, dtype: int64
</pre>
<!-- </div> -->
<p>After reading in the file, our actual analysis is a simple 1-liner using two operations built into pandas. Truly, the best of all possible worlds.</p>
<p>Next, we&rsquo;ll do the analysis for the entire dataset, which is larger than memory, in two ways. First we&rsquo;ll use just pandas and iteration. Then we&rsquo;ll use Dask.</p>
<h3 id="using-iteration">Using Iteration</h3>
<p>To do this with just pandas we have to rewrite our code, taking care to never have too much data in RAM at once. We will</p>
<ol>
<li>Create a global <code>total_counts</code> Series that contains the counts from all of the files processed so far</li>
<li>Read in a file</li>
<li>Compute a temporary variable <code>counts</code> with the counts for just this file</li>
<li>Add that temporary <code>counts</code> into the global <code>total_counts</code></li>
<li>Select the 100 largest with <code>.nlargest</code></li>
</ol>
<p>This works since the <code>total_counts</code> Series is relatively small, and each year&rsquo;s data fits in RAM individually. Our peak memory usage should be the size of the largest individual cycle (2015-2016) plus the size of <code>total_counts</code> (which we can essentially ignore).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>files <span style="color:#f92672">=</span> sorted(Path(<span style="color:#e6db74">&#34;data/&#34;</span>)<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#34;indiv-*.parq&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>total_counts <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> year <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_parquet(year, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;occupation&#39;</span>],
</span></span><span style="display:flex;"><span>                         engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;pyarrow&#34;</span>)
</span></span><span style="display:flex;"><span>    counts <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>value_counts()
</span></span><span style="display:flex;"><span>    total_counts <span style="color:#f92672">=</span> total_counts<span style="color:#f92672">.</span>add(counts, fill_value<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>total_counts <span style="color:#f92672">=</span> total_counts<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">100</span>)<span style="color:#f92672">.</span>sort_values(ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
RETIRED                    4769520
NOT EMPLOYED               2656988
ATTORNEY                   1340434
PHYSICIAN                   659082
HOMEMAKER                   494187
                            ...   
CHIEF EXECUTIVE OFFICER      26551
SURGEON                      25521
EDITOR                       25457
OPERATOR                     25151
ORTHOPAEDIC SURGEON          24384
Name: occupation, Length: 100, dtype: int64
</pre>
<!-- </div> -->
<p>While this works, our small one-liner has ballooned in size (and complexity; should you <em>really</em> have to know about <code>Series.add</code>&rsquo;s <code>fill_value</code> parameter for this simple analysis?). If only there was a better way&hellip;</p>
<h3 id="using-dask">Using Dask</h3>
<p>With Dask, we essentially recover our original code. We&rsquo;ll change our import to use <code>dask.dataframe.read_parquet</code>, which returns a Dask DataFrame.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.dataframe <span style="color:#66d9ef">as</span> dd
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_parquet(<span style="color:#e6db74">&#34;data/indiv-*.parquet&#34;</span>, engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pyarrow&#39;</span>, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;occupation&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>most_common <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>most_common<span style="color:#f92672">.</span>compute()<span style="color:#f92672">.</span>sort_values(ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
RETIRED                    4769520
NOT EMPLOYED               2656988
ATTORNEY                   1340434
PHYSICIAN                   659082
HOMEMAKER                   494187
                            ...   
CHIEF EXECUTIVE OFFICER      26551
SURGEON                      25521
EDITOR                       25457
OPERATOR                     25151
ORTHOPAEDIC SURGEON          24384
Name: occupation, Length: 100, dtype: int64
</pre>
<!-- </div> -->
<p>There are a couple differences from the original pandas version, which we&rsquo;ll discuss next, but overall I hope you agree that the Dask version is nicer than the version using iteration.</p>
<h2 id="dask">Dask</h2>
<p>Now that we&rsquo;ve seen <code>dask.dataframe</code> in action, let&rsquo;s step back and discuss Dask a bit. Dask is an open-source project that natively parallizes Python. I&rsquo;m a happy user of and contributor to Dask.</p>
<p>At a high-level, Dask provides familiar APIs for <a href="https://dask.pydata.org/en/latest/array.html">large N-dimensional arrays</a>, <a href="https://dask.pydata.org/en/latest/dataframe.html">large DataFrames</a>, and <a href="https://distributed.readthedocs.io/en/latest/quickstart.html#map-and-submit-functions">familiar</a> ways to parallelize <a href="https://dask.pydata.org/en/latest/delayed.html">custom algorithms</a>.</p>
<p>At a low-level, each of these is built on high-performance <a href="http://dask.pydata.org/en/latest/scheduling.html">task scheduling</a> that executes operations in parallel. The <a href="http://dask.pydata.org/en/latest/spec.html">low-level details</a> aren&rsquo;t too important; all we care about is that</p>
<ol>
<li>Dask works with <em>task graphs</em> (<em>tasks</em>: functions to call on data, and <em>graphs</em>: the relationships between tasks).</li>
<li>This is a flexible and performant way to parallelize many different kinds of problems.</li>
</ol>
<p>To understand point 1, let&rsquo;s examine the difference between a Dask DataFrame and a pandas DataFrame. When we read in <code>df</code> with <code>dd.read_parquet</code>, we received a Dask DataFrame.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df
</span></span></code></pre></div><div class="output">
<div><strong>Dask DataFrame Structure:</strong></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>occupation</th>
    </tr>
    <tr>
      <th>npartitions=35</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th></th>
      <td>object</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
    </tr>
  </tbody>
</table>
</div>
<div>Dask Name: read-parquet, 35 tasks</div>
</div>
<p>A Dask DataFrame consists of many pandas DataFrames arranged by the index. Dask is really just coordinating these pandas DataFrames.</p>
<img src="http://dask.pydata.org/en/latest/_images/dask-dataframe.svg" width="50%"/>
<p>All the actual computation (reading from disk, computing the value counts, etc.) eventually use pandas internally. If I do <code>df.occupation.str.len</code>, Dask will coordinate calling <code>pandas.Series.str.len</code> on each of the pandas DataFrames.</p>
<p>Those reading carefully will notice a problem with the statement &ldquo;A Dask DataFrame consists of many pandas DataFrames&rdquo;. Our initial problem was that we didn&rsquo;t have enough memory for those DataFrames! How can Dask be coordinating DataFrames if there isn&rsquo;t enough memory? This brings us to the second major difference: Dask DataFrames (and arrays) are lazy. Operations on them don&rsquo;t execute and produce the final result immediately. Rather, calling methods on them builds up a task graph.</p>
<p>We can visualize task graphs using <code>graphviz</code>. For the blog, I&rsquo;ve trimmed down the example to be a subset of the entire graph.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>visualize(rankdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;LR&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/images/scalable-read-simple.svg" alt=""  />
</p>
<p><code>df</code> (the dask DataFrame consisting of many pandas DataFrames) has a task graph with 5 calls to a parquet reader (one for each file), each of which produces a DataFrame when called.</p>
<p>Calling additional methods on <code>df</code> adds additional tasks to this graph. For example, our <code>most_common</code> Series has three additional calls</p>
<ul>
<li>Select the <code>occupation</code> column (<code>__getitem__</code>)</li>
<li>Perform the value counts</li>
<li>Select the 100 largest values</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>most_common <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>most_common
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>

    Dask Series Structure:
    npartitions=1
        int64
          ...
    Name: occupation, dtype: int64
    Dask Name: series-nlargest-agg, 113 tasks
</pre>
<!-- </div> -->
<p>Which we can visualize.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>most_common<span style="color:#f92672">.</span>visualize(rankdir<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;LR&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/images/scalable-most-common.svg" alt=""  />
</p>
<p>So <code>most_common</code> doesn&rsquo;t hold the actual answer yet. Instead, it holds a recipe for the answer; a list of all the steps to take to get the concrete result. One way to ask for the result is with the <code>compute</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>most_common<span style="color:#f92672">.</span>compute()
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    RETIRED                    4769520
    NOT EMPLOYED               2656988
    ATTORNEY                   1340434
    PHYSICIAN                   659082
    HOMEMAKER                   494187
                                ...   
    CHIEF EXECUTIVE OFFICER      26551
    SURGEON                      25521
    EDITOR                       25457
    OPERATOR                     25151
    ORTHOPAEDIC SURGEON          24384
    Name: occupation, Length: 100, dtype: int64
</pre>
<!-- </div> -->
<p>At this point, the task graph is handed to a <a href="https://dask.pydata.org/en/latest/scheduling.html">scheduler</a>, which is responsible for executing a task graph. Schedulers can analyze a task graph and find sections that can run <em>in parallel</em>. (Dask includes several schedulers. See <a href="http://dask.pydata.org/en/latest/scheduling.html">the scheduling documentation</a> for how to choose, though Dask has good defaults.)</p>
<p>So that&rsquo;s a high-level tour of how Dask works:</p>
<p><img loading="lazy" src="http://dask.pydata.org/en/latest/_images/collections-schedulers.png" alt="collections, schedulers"  />
</p>
<ol>
<li>Various collections collections like <code>dask.dataframe</code> and <code>dask.array</code>
provide users familiar APIs for working with large datasets.</li>
<li>Computations are represented as a task graph. These graphs could be built by
hand, or more commonly built by one of the collections.</li>
<li>Dask schedulers run task graphs in parallel (potentially distributed across
a cluster), reusing libraries like NumPy and pandas to do the computations.</li>
</ol>
<p>Let&rsquo;s finish off this post by continuing to explore the FEC dataset with Dask. At this point, we&rsquo;ll use the distributed scheduler for it&rsquo;s nice diagnostics.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.dataframe <span style="color:#66d9ef">as</span> dd
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask <span style="color:#f92672">import</span> compute
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask.distributed <span style="color:#f92672">import</span> Client
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#f92672">=</span> Client(processes<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><p>Calling <code>Client</code> without providing a scheduler address will make a local &ldquo;cluster&rdquo; of threads or processes on your machine. There are <a href="http://dask.pydata.org/en/latest/setup.html">many ways</a> to deploy a Dask cluster onto an actual cluster of machines, though we&rsquo;re particularly fond of <a href="http://dask.pydata.org/en/latest/setup/kubernetes.html">Kubernetes</a>. This highlights one of my favorite features of Dask: it scales down to use a handful of threads on a laptop <em>or</em> up to a cluster with thousands of nodes. Dask can comfortably handle medium-sized datasets (dozens of GBs, so larger than RAM) on a laptop. Or it can scale up to very large datasets with a cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>individual_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;cmte_id&#39;</span>, <span style="color:#e6db74">&#39;entity_tp&#39;</span>, <span style="color:#e6db74">&#39;employer&#39;</span>, <span style="color:#e6db74">&#39;occupation&#39;</span>,
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">&#39;transaction_dt&#39;</span>, <span style="color:#e6db74">&#39;transaction_amt&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>indiv <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_parquet(<span style="color:#e6db74">&#39;data/indiv-*.parq&#39;</span>,
</span></span><span style="display:flex;"><span>                        columns<span style="color:#f92672">=</span>individual_cols,
</span></span><span style="display:flex;"><span>                        engine<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;pyarrow&#34;</span>)
</span></span><span style="display:flex;"><span>indiv
</span></span></code></pre></div><div class="output">
<div><strong>Dask DataFrame Structure:</strong></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>entity_tp</th>
      <th>employer</th>
      <th>occupation</th>
      <th>transaction_dt</th>
      <th>transaction_amt</th>
    </tr>
    <tr>
      <th>npartitions=5</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th></th>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>datetime64[ns]</td>
      <td>int64</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
</div>
<div>Dask Name: read-parquet, 5 tasks</div>
</div>
<p>We can compute summary statistics like the average mean and standard deviation of the transaction amount:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>avg_transaction <span style="color:#f92672">=</span> indiv<span style="color:#f92672">.</span>transaction_amt<span style="color:#f92672">.</span>mean()
</span></span></code></pre></div><p>We can answer questions like &ldquo;Which employer&rsquo;s employees donated the most?&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>total_by_employee <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    indiv<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;employer&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>transaction_amt<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Or &ldquo;what is the average amount donated per occupation?&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>avg_by_occupation <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    indiv<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#34;occupation&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>transaction_amt<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Since Dask is lazy, we haven&rsquo;t actually computed anything.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>total_by_employee
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    Dask Series Structure:
    npartitions=1
        int64
          ...
    Name: transaction_amt, dtype: int64
    Dask Name: series-nlargest-agg, 13 tasks
</pre>
<!-- </div> -->
<p><code>avg_transaction</code>, <code>avg_by_occupation</code> and <code>total_by_employee</code> are three separate computations (they have different task graphs), but we know they share some structure: they&rsquo;re all reading in the same data, they might select the same subset of columns, and so on. Dask is able to avoid redundant computation when you use the top-level <code>dask.compute</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>avg_transaction, by_employee, by_occupation <span style="color:#f92672">=</span> compute(
</span></span><span style="display:flex;"><span>    avg_transaction, total_by_employee, avg_by_occupation
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    CPU times: user 57.5 s, sys: 14.4 s, total: 1min 11s
    Wall time: 54.9 s
</pre>
<!-- </div> -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>avg_transaction
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    566.0899206077507
</pre>
<!-- </div> -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>by_employee
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    employer
    RETIRED                1019973117
    SELF-EMPLOYED           834547641
    SELF                    537402882
    SELF EMPLOYED           447363032
    NONE                    418011322
    HOMEMAKER               355195126
    NOT EMPLOYED            345770418
    FAHR, LLC               166679844
    CANDIDATE                75186830
    ADELSON DRUG CLINIC      53358500
    Name: transaction_amt, dtype: int64
</pre>
<!-- </div> -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>by_occupation
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    occupation
    CHAIRMAN CEO & FOUNDER                   1,023,333.33
    PAULSON AND CO., INC.                    1,000,000.00
    CO-FOUNDING DIRECTOR                       875,000.00
    CHAIRMAN/CHIEF TECHNOLOGY OFFICER          750,350.00
    CO-FOUNDER, DIRECTOR, CHIEF INFORMATIO     675,000.00
    CO-FOUNDER, DIRECTOR                       550,933.33
    MOORE CAPITAL GROUP, LP                    500,000.00
    PERRY HOMES                                500,000.00
    OWNER, FOUNDER AND CEO                     500,000.00
    CHIEF EXECUTIVE OFFICER/PRODUCER           500,000.00
    Name: transaction_amt, dtype: float64
</pre>
<!-- </div> -->
<p>Things like filtering work well. Let&rsquo;s find the 10 most common occupations and filter the dataset down to just those.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>top_occupations <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    indiv<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>value_counts()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">10</span>)<span style="color:#f92672">.</span>index
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>top_occupations
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    Index(['RETIRED', 'NOT EMPLOYED', 'ATTORNEY', 'PHYSICIAN', 'HOMEMAKER',
           'PRESIDENT', 'PROFESSOR', 'CONSULTANT', 'EXECUTIVE', 'ENGINEER'],
          dtype='object')
</pre>
<!-- </div> -->
<p>We&rsquo;ll filter the raw records down to just the ones from those occupations. Then we&rsquo;ll compute a few summary statistics on the transaction amounts for each group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>donations <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    indiv[indiv<span style="color:#f92672">.</span>occupation<span style="color:#f92672">.</span>isin(top_occupations)]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#34;occupation&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>transaction_amt
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>agg([<span style="color:#e6db74">&#39;count&#39;</span>, <span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;sum&#39;</span>, <span style="color:#e6db74">&#39;max&#39;</span>])
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>total_avg, occupation_avg <span style="color:#f92672">=</span> compute(indiv<span style="color:#f92672">.</span>transaction_amt<span style="color:#f92672">.</span>mean(),
</span></span><span style="display:flex;"><span>                                    donations[<span style="color:#e6db74">&#39;mean&#39;</span>])
</span></span></code></pre></div><p>These are small, concrete results so we can turn to familiar tools like matplotlib to visualize the result.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> occupation_avg<span style="color:#f92672">.</span>sort_values(ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>barh(color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">0.9</span>);
</span></span><span style="display:flex;"><span>lim <span style="color:#f92672">=</span> ax<span style="color:#f92672">.</span>get_ylim()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>vlines(total_avg, <span style="color:#f92672">*</span>lim, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;C1&#39;</span>, linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>legend([<span style="color:#e6db74">&#39;Average donation&#39;</span>])
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(xlabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Donation Amount&#34;</span>, title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Average Dontation by Occupation&#34;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern-pandas-08_49_0.png" alt="png"  />
</p>
<p>Dask inherits all of pandas&rsquo; great time-series support. We can get the total amount donated per day using a <a href="https://pandas.pydata.org/pandas-docs/stable/timeseries.html#resampling"><code>resample</code></a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>daily <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    indiv[[<span style="color:#e6db74">&#39;transaction_dt&#39;</span>, <span style="color:#e6db74">&#39;transaction_amt&#39;</span>]]<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;transaction_dt&#39;</span>)[<span style="color:#e6db74">&#39;transaction_amt&#39;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#34;D&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>daily
</span></span></code></pre></div><!-- <div class="output"> -->
<pre>
    1916-01-23    1000
    1916-01-24       0
    1916-01-25       0
    1916-01-26       0
    1916-01-27       0
                  ... 
    2201-05-29       0
    2201-05-30       0
    2201-05-31       0
    2201-06-01       0
    2201-06-02    2000
    Name: transaction_amt, Length: 104226, dtype: int64
</pre>
<!-- </div> -->
<p>It seems like we have some bad data. This should just be 2007-2016. We&rsquo;ll filter it down to the real subset before plotting.
Notice that the seamless transition from <code>dask.dataframe</code> operations above, to pandas operations below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>subset <span style="color:#f92672">=</span> daily<span style="color:#f92672">.</span>loc[<span style="color:#e6db74">&#39;2011&#39;</span>:<span style="color:#e6db74">&#39;2016&#39;</span>]
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> subset<span style="color:#f92672">.</span>div(<span style="color:#ae81ff">1000</span>)<span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(ylim<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Daily Donations&#34;</span>, ylabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;$ (thousands)&#34;</span>,)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine();
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern-pandas-08_54_0.png" alt="png"  />
</p>
<h2 id="joining">Joining</h2>
<p>Like pandas, Dask supports joining together multiple datasets.</p>
<p>Individual donations are made to <em>committees</em>. Committees are what make the actual expenditures (buying a TV ad).
Some committees are directly tied to a candidate (this are campaign committees). Other committees are tied to a group (like the Republican National Committee). Either may be tied to a party.</p>
<p>Let&rsquo;s read in the committees. The total number of committees is small, so we&rsquo;ll <code>.compute</code> immediately to get a pandas DataFrame (the reads still happen in parallel!).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>committee_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;cmte_id&#39;</span>, <span style="color:#e6db74">&#39;cmte_nm&#39;</span>, <span style="color:#e6db74">&#39;cmte_tp&#39;</span>, <span style="color:#e6db74">&#39;cmte_pty_affiliation&#39;</span>]
</span></span><span style="display:flex;"><span>cm <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_parquet(<span style="color:#e6db74">&#34;data/cm-*.parq&#34;</span>,
</span></span><span style="display:flex;"><span>                     columns<span style="color:#f92672">=</span>committee_cols)<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Some committees change thier name, but the ID stays the same</span>
</span></span><span style="display:flex;"><span>cm <span style="color:#f92672">=</span> cm<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;cmte_id&#39;</span>)<span style="color:#f92672">.</span>last()
</span></span><span style="display:flex;"><span>cm
</span></span></code></pre></div><!-- <div class="output"> -->
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table  class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_nm</th>
      <th>cmte_tp</th>
      <th>cmte_pty_affiliation</th>
    </tr>
    <tr>
      <th>cmte_id</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>C00000042</th>
      <td>ILLINOIS TOOL WORKS INC. FOR BETTER GOVERNMENT...</td>
      <td>Q</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C00000059</th>
      <td>HALLMARK CARDS PAC</td>
      <td>Q</td>
      <td>UNK</td>
    </tr>
    <tr>
      <th>C00000422</th>
      <td>AMERICAN MEDICAL ASSOCIATION POLITICAL ACTION ...</td>
      <td>Q</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C00000489</th>
      <td>D R I V E POLITICAL FUND CHAPTER 886</td>
      <td>N</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C00000547</th>
      <td>KANSAS MEDICAL SOCIETY POLITICAL ACTION COMMITTEE</td>
      <td>Q</td>
      <td>UNK</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>C90017237</th>
      <td>ORGANIZE NOW</td>
      <td>I</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C90017245</th>
      <td>FRANCISCO AGUILAR</td>
      <td>I</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C90017336</th>
      <td>LUDWIG, EUGENE</td>
      <td>I</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C99002396</th>
      <td>AMERICAN POLITICAL ACTION COMMITTEE</td>
      <td>Q</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>C99003428</th>
      <td>THIRD DISTRICT REPUBLICAN PARTY</td>
      <td>Y</td>
      <td>REP</td>
    </tr>
  </tbody>
</table>
<p>28612 rows × 3 columns</p>
</div>
<!-- </div> -->
<p>We&rsquo;ll use <code>dd.merge</code>, which is analogous to <code>pd.merge</code> for joining a Dask <code>DataFrame</code> with a pandas or Dask <code>DataFrame</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>indiv <span style="color:#f92672">=</span> indiv[(indiv<span style="color:#f92672">.</span>transaction_dt <span style="color:#f92672">&gt;=</span> pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#34;2007-01-01&#34;</span>)) <span style="color:#f92672">&amp;</span>
</span></span><span style="display:flex;"><span>              (indiv<span style="color:#f92672">.</span>transaction_dt <span style="color:#f92672">&lt;=</span> pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#34;2018-01-01&#34;</span>))]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df2 <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>merge(indiv, cm<span style="color:#f92672">.</span>reset_index(), on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cmte_id&#39;</span>)
</span></span><span style="display:flex;"><span>df2
</span></span></code></pre></div><!-- <div class="output"> -->
<div><strong>Dask DataFrame Structure:</strong></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table  class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>entity_tp</th>
      <th>employer</th>
      <th>occupation</th>
      <th>transaction_dt</th>
      <th>transaction_amt</th>
      <th>cmte_nm</th>
      <th>cmte_tp</th>
      <th>cmte_pty_affiliation</th>
    </tr>
    <tr>
      <th>npartitions=20</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th></th>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>datetime64[ns]</td>
      <td>int64</td>
      <td>object</td>
      <td>object</td>
      <td>object</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
</div>
<div>Dask Name: merge, 141 tasks</div>
<!-- </div> -->
<p>Now we can find which party raised more over the course of each election. We&rsquo;ll group by the day and party and sum the transaction amounts.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>indiv <span style="color:#f92672">=</span> indiv<span style="color:#f92672">.</span>repartition(npartitions<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>df2 <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>merge(indiv, cm<span style="color:#f92672">.</span>reset_index(), on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cmte_id&#39;</span>)
</span></span><span style="display:flex;"><span>df2
</span></span></code></pre></div><!-- <div class="output"> -->
<div><strong>Dask DataFrame Structure:</strong></div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p></style></p>
<table  class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>entity_tp</th>
      <th>employer</th>
      <th>occupation</th>
      <th>transaction_dt</th>
      <th>transaction_amt</th>
      <th>cmte_nm</th>
      <th>cmte_tp</th>
      <th>cmte_pty_affiliation</th>
    </tr>
    <tr>
      <th>npartitions=10</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th></th>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>object</td>
      <td>datetime64[ns]</td>
      <td>int64</td>
      <td>object</td>
      <td>object</td>
      <td>object</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th></th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
</div>
<div>Dask Name: merge, 141 tasks</div>
<!-- </div> -->
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>party_donations <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    df2<span style="color:#f92672">.</span>groupby([df2<span style="color:#f92672">.</span>transaction_dt, <span style="color:#e6db74">&#39;cmte_pty_affiliation&#39;</span>])
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">.</span>transaction_amt<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>)<span style="color:#f92672">.</span>compute()<span style="color:#f92672">.</span>sort_index()
</span></span></code></pre></div><p>We&rsquo;ll filter that down to just Republican and Democrats and plot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    party_donations<span style="color:#f92672">.</span>loc[:, [<span style="color:#e6db74">&#39;REP&#39;</span>, <span style="color:#e6db74">&#39;DEM&#39;</span>]]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>unstack(<span style="color:#e6db74">&#34;cmte_pty_affiliation&#34;</span>)<span style="color:#f92672">.</span>iloc[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>rolling(<span style="color:#e6db74">&#39;30D&#39;</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>plot(color<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;C0&#39;</span>, <span style="color:#e6db74">&#39;C3&#39;</span>], figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>),
</span></span><span style="display:flex;"><span>                                    linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Daily Donations (30-D Moving Average)&#34;</span>, xlabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Date&#34;</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern-pandas-08_64_0.png" alt="png"  />
</p>
<h2 id="try-it-out">Try It Out!</h2>
<p>So that&rsquo;s a taste of Dask. Next time you hit a scaling problem with pandas (or NumPy, scikit-learn, or your custom code), feel free to</p>
<pre tabindex="0"><code>pip install dask[complete]
</code></pre><p>or</p>
<pre tabindex="0"><code>conda install dask
</code></pre><p>The <a href="http://dask.pydata.org/en/latest/">dask homepage</a> has links to all the relevant documentation, and <a href="https://mybinder.org/v2/gh/dask/dask-examples/master?filepath=dataframe.ipynb">binder notebooks</a> where you can try out Dask before installing.</p>
<p>As always, reach out to me on <a href="https://twitter.com/TomAugspurger">Twitter</a> or in the comments if you have anything to share.</p>
]]></content:encoded></item><item><title>dask-ml 0.4.1 Released</title><link>https://tomaugspurger.github.io/posts/dask-ml-041/</link><pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dask-ml-041/</guid><description>This work is supported by Anaconda Inc and the Data Driven Discovery Initiative from the Moore Foundation.
dask-ml 0.4.1 was released today with a few enhancements. See the changelog for all the changes from 0.4.0.
Conda packages are available on conda-forge
$ conda install -c conda-forge dask-ml and wheels and the source are available on PyPI
$ pip install dask-ml I wanted to highlight one change, that touches on a topic I mentioned in my first post on scalable Machine Learning.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="http://anaconda.com/">Anaconda Inc</a> and the Data
Driven Discovery Initiative from the <a href="https://www.moore.org/">Moore
Foundation</a>.</em></p>
<p><a href="http://dask-ml.readthedocs.io/en/latest/">dask-ml</a> 0.4.1 was released today with a few enhancements. See the
<a href="http://dask-ml.readthedocs.io/en/latest/changelog.html">changelog</a> for all the changes from 0.4.0.</p>
<p>Conda packages are available on conda-forge</p>
<pre><code>$ conda install -c conda-forge dask-ml
</code></pre>
<p>and wheels and the source are available on PyPI</p>
<pre><code>$ pip install dask-ml
</code></pre>
<p>I wanted to highlight one change, that touches on a topic I mentioned in my
first post on <a href="scalable-ml-01">scalable Machine Learning</a>. I discussed how, in
my limited experience, a common workflow was to train on a small batch of data
and predict for a much larger set of data. The training data easily fits in
memory on a single machine, but the full dataset does not.</p>
<p>A new meta-estimator, <a href="http://dask-ml.readthedocs.io/en/latest/modules/generated/dask_ml.wrappers.ParallelPostFit.html#dask_ml.wrappers.ParallelPostFit"><code>ParallelPostFit</code></a> helps with this
common case. It&rsquo;s a meta-estimator that wraps a regular scikit-learn estimator,
similar to how <code>GridSearchCV</code> wraps an estimator. The <code>.fit</code> method is very
simple; it just calls the underlying estimator&rsquo;s <code>.fit</code> method and copies over
the learned attributes. This means <code>ParalellPostFit</code> is not suitable for
<em>training</em> on large datasets. It is, however, perfect for post-fit tasks like
<code>.predict</code>, or <code>.transform</code>.</p>
<p>As an example, we&rsquo;ll fit a scikit-learn <code>GradientBoostingClassifier</code> on a small
in-memory dataset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> sklearn.ensemble <span style="color:#f92672">import</span> GradientBoostingClassifier
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> sklearn.datasets
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> dask_ml.datasets
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> X, y <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>datasets<span style="color:#f92672">.</span>make_classification(n_samples<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>                                             random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf <span style="color:#f92672">=</span> ParallelPostFit(estimator<span style="color:#f92672">=</span>GradientBoostingClassifier())
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf<span style="color:#f92672">.</span>fit(X, y)
</span></span><span style="display:flex;"><span>ParallelPostFit(estimator<span style="color:#f92672">=</span>GradientBoostingClassifier(<span style="color:#f92672">...</span>))
</span></span></code></pre></div><p>Nothing special so far. But now, let&rsquo;s suppose we had a &ldquo;large&rdquo; dataset for
prediction. We&rsquo;ll use <code>dask_ml.datasets.make_classification</code>, but in practice
you would read this from a file system or database.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> X_big, y_big <span style="color:#f92672">=</span> dask_ml<span style="color:#f92672">.</span>datasets<span style="color:#f92672">.</span>make_classification(n_samples<span style="color:#f92672">=</span><span style="color:#ae81ff">100000</span>,
</span></span><span style="display:flex;"><span>                                                        chunks<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span>                                                        random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><p>In this case we have a dataset with 100,000 samples split into blocks of 1,000.
We can now predict for this large dataset.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf<span style="color:#f92672">.</span>predict(X)
</span></span><span style="display:flex;"><span>dask<span style="color:#f92672">.</span>array<span style="color:#f92672">&lt;</span>predict, shape<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10000</span>,), dtype<span style="color:#f92672">=</span>int64, chunksize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1000</span>,)<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Now things are different. <code>ParallelPostFit.predict</code>, <code>.predict_proba</code>, and
<code>.transform</code>, all return dask arrays instead of immediately computing the
result. We&rsquo;ve built up task graph of computations to be performed, which allows
dask to step in and compute things in parallel. When you&rsquo;re ready for the
answer, call <code>compute</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf<span style="color:#f92672">.</span>predict_proba(X)<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>array([[<span style="color:#ae81ff">0.99141094</span>, <span style="color:#ae81ff">0.00858906</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.93178389</span>, <span style="color:#ae81ff">0.06821611</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.99129105</span>, <span style="color:#ae81ff">0.00870895</span>],
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">...</span>,
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.97996652</span>, <span style="color:#ae81ff">0.02003348</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.98087444</span>, <span style="color:#ae81ff">0.01912556</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.99407016</span>, <span style="color:#ae81ff">0.00592984</span>]])
</span></span></code></pre></div><p>At that point the dask scheduler comes in and executes your compute in parallel,
using all the cores of your laptop or workstation, or all the machines on your
cluster.</p>
<p><code>ParallelPostFit</code> &ldquo;fixes&rdquo; a couple of issues in scikit-learn outside of
scikit-learn itself</p>
<ul>
<li><a href="https://github.com/scikit-learn/scikit-learn/issues/7448">parallel predict</a></li>
<li><a href="https://github.com/scikit-learn/scikit-learn/issues/7635">parallel transform</a></li>
</ul>
<p>If you&rsquo;re able to depend on dask and dask-ml, consider giving <code>ParallelPostFit</code>
a shot and let me know how it turns out. For estimators whose predict is
relatively expensive and not already parallelized, <code>ParallelPostFit</code> can give
a nice <a href="http://dask-ml.readthedocs.io/en/latest/auto_examples/plot_parallel_postfit.html#sphx-glr-auto-examples-plot-parallel-postfit-py">performance boost</a>.</p>
<p><img loading="lazy" src="/images/sphx_glr_plot_parallel_postfit_001.png" alt="parallel-post-fit"  />
</p>
<p>Even if the underlying estimator&rsquo;s <code>predict</code> or <code>tranform</code> method is cheap or
parallelized, <code>ParallelPostFit</code> does still help with distributed the work on all
the machines in your cluster, or doing the operation out-of-core.</p>
<p>Thanks to all the contributors who worked on this release.</p>
]]></content:encoded></item><item><title>Extension Arrays for Pandas</title><link>https://tomaugspurger.github.io/posts/pandas-extension-arrays/</link><pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pandas-extension-arrays/</guid><description>This is a status update on some enhancements for pandas. The goal of the work is to store things that are sufficiently array-like in a pandas DataFrame, even if they aren&amp;rsquo;t a regular NumPy array. Pandas already does this in a few places for some blessed types (like Categorical); we&amp;rsquo;d like to open that up to anybody.
A couple months ago, a client came to Anaconda with a problem: they have a bunch of IP Address data that they&amp;rsquo;d like to work with in pandas.</description><content:encoded><![CDATA[<p>This is a status update on some enhancements for pandas. The goal of the work
is to store things that are sufficiently array-like in a pandas <code>DataFrame</code>,
even if they aren&rsquo;t a regular NumPy array. Pandas already does this in a few
places for some blessed types (like <code>Categorical</code>); we&rsquo;d like to open that up to
anybody.</p>
<p>A couple months ago, a client came to <a href="https://www.anaconda.com/">Anaconda</a> with a problem: they
have a bunch of IP Address data that they&rsquo;d like to work with in pandas. They
didn&rsquo;t just want to make a NumPy array of IP addresses for a few reasons:</p>
<ol>
<li>IPv6 addresses are 128 bits, so they can&rsquo;t use a specialized NumPy dtype. It
would have to be an <code>object</code> array, which will be slow for their large
datasets.</li>
<li>IP Addresses have special structure. They&rsquo;d like to use this structure for
special methods like <code>is_reserved</code>.</li>
<li>It&rsquo;s much better to put the knowledge of types in the library, rather than
relying on analysts to know that this column of objects or strings is
<em>actually</em> this other special type.</li>
</ol>
<p>I wrote up a <a href="https://github.com/pandas-dev/pandas/issues/18767">proposal</a> to gauge interest from the community for
adding an IP Address dtype to pandas. The general sentiment was that an IP
addresses were too specialized for inclusion pandas (which matched my own
feelings). But, the community was interested in allowing 3rd party libraries to
define their own types and having pandas &ldquo;do the right thing&rdquo; when it encounters
them.</p>
<h2 id="pandas-internals">Pandas Internals</h2>
<p>While not technically true, you could reasonably describe a <code>DataFrame</code> as a
dictionary of NumPy arrays. There are a few complications that invalidate that
caricature , but the one I want to focus on is pandas&rsquo; <em>extension dtypes</em>.</p>
<p>Pandas has extended NumPy&rsquo;s type system in a few cases. For the most part, this
involves tricking <code>pandas.DataFrame</code> and <code>pandas.Series</code> into thinking that
the object passed to it is a single array, when in fact it&rsquo;s multiple arrays, or
an array plus a bit of extra metadata.</p>
<ol>
<li><code>datetime64[ns]</code> <em>with a timezone</em>. A regular <code>numpy.datetime64[ns]</code> array
(which is really just an array of integers) plus some metadata for the
timezone.</li>
<li><code>Period</code>: An array of integer ordinals and some metadata about the frequency.</li>
<li><code>Categorical</code>: two arrays: one with the unique set of <code>categories</code>
and a second array of <code>codes</code>, the positions in <code>categories</code>.</li>
<li><code>Interval</code>: Two arrays, one for the left-hand endpoints and one for the
right-hand endpoints.</li>
</ol>
<p>So our definition of a <code>pandas.DataFrame</code> is now &ldquo;A dictionary of NumPy arrays,
or one of pandas&rsquo; extension types.&rdquo; Internal to pandas, we have checks for &ldquo;is
this thing an extension dtype? If so take this special path.&rdquo; To the user, it
looks like a <code>Categorical</code> is just a regular column, but internally, it&rsquo;s a bit
messier.</p>
<p>Anyway, the upshot of my <a href="https://github.com/pandas-dev/pandas/issues/18767">proposal</a> was to make changes to pandas'
internals to support 3rd-party objects going down that &ldquo;is this an extension
dtype&rdquo; path.</p>
<h2 id="pandas-array-interface">Pandas&rsquo; Array Interface</h2>
<p>To support external libraries defining extension array types, we defined an interface.</p>
<p>In <a href="https://github.com/pandas-dev/pandas/pull/19268">pandas-19268</a> we laid out exactly what pandas considers
sufficiently &ldquo;array-like&rdquo; for an extension array type. When pandas comes across
one of these array-like objects, it avoids the previous behavior of just storing
the data in a NumPy array of objects. The interface includes things like</p>
<ul>
<li>What type of scalars do you hold?</li>
<li>How do I convert you to a NumPy array?</li>
<li><code>__getitem__</code></li>
</ul>
<p>Most things should be pretty straightforward to implement. In the test suit, we
have a 60-line implementation for storing <code>decimal.Decimal</code> objects in a
<code>Series</code>.</p>
<p>It&rsquo;s important to emphasize that pandas&rsquo; <code>ExtensionArray</code> is <em>not</em> another array
implementation. It&rsquo;s just an agreement between pandas and your library that your
array-like object (which may be a NumPy array, many NumPy arrays, an Arrow
array, a list, anything really) that satisfies the proper semantics for storage
inside a <code>Series</code> or <code>DataFrame</code>.</p>
<p>With those changes, I&rsquo;ve been able to prototype a small library (named&hellip;
<a href="https://github.com/ContinuumIO/cyberpandas">cyberpandas</a>) for storing arrays of IP Addresses. It defines
<code>IPAddress</code>, an array-like container for IP Addresses. For this blogpost, the
only relevant implementation detail is that IP Addresses are stored as a NumPy
structured array with two uint64 fields. So we&rsquo;re making pandas treat this 2-D
array as a single array, like how <code>Interval</code> works. Here&rsquo;s a taste:</p>
<p>As a taste for what&rsquo;s possible, here&rsquo;s a preview of our IP Address library,
<code>cyberpandas</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">import</span> cyberpandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">2</span>]: <span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">3</span>]: ips <span style="color:#f92672">=</span> cyberpandas<span style="color:#f92672">.</span>IPAddress([
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">...</span>:     <span style="color:#e6db74">&#39;0.0.0.0&#39;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">...</span>:     <span style="color:#e6db74">&#39;192.168.1.1&#39;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">...</span>:     <span style="color:#e6db74">&#39;2001:0db8:85a3:0000:0000:8a2e:0370:7334&#39;</span>,
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">...</span>: ])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">4</span>]: ips
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">4</span>]: IPAddress([<span style="color:#e6db74">&#39;0.0.0.0&#39;</span>, <span style="color:#e6db74">&#39;192.168.1.1&#39;</span>, <span style="color:#e6db74">&#39;2001:db8:85a3::8a2e:370:7334&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">5</span>]: ips<span style="color:#f92672">.</span>data
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">5</span>]:
</span></span><span style="display:flex;"><span>array([(                  <span style="color:#ae81ff">0</span>,               <span style="color:#ae81ff">0</span>),
</span></span><span style="display:flex;"><span>       (                  <span style="color:#ae81ff">0</span>,      <span style="color:#ae81ff">3232235777</span>),
</span></span><span style="display:flex;"><span>       (<span style="color:#ae81ff">2306139570357600256</span>, <span style="color:#ae81ff">151930230829876</span>)],
</span></span><span style="display:flex;"><span>      dtype<span style="color:#f92672">=</span>[(<span style="color:#e6db74">&#39;hi&#39;</span>, <span style="color:#e6db74">&#39;&gt;u8&#39;</span>), (<span style="color:#e6db74">&#39;lo&#39;</span>, <span style="color:#e6db74">&#39;&gt;u8&#39;</span>)])
</span></span></code></pre></div><p><code>ips</code> satisfies pandas&rsquo; <code>ExtensionArray</code> interface, so it can be stored inside
pandas&rsquo; containers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">6</span>]: ser <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series(ips)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">7</span>]: ser
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">7</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>                         <span style="color:#ae81ff">0.0.0.0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>                     <span style="color:#ae81ff">192.168.1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>    <span style="color:#ae81ff">2001</span>:db8:<span style="color:#ae81ff">85</span>a3::<span style="color:#ae81ff">8</span>a2e:<span style="color:#ae81ff">370</span>:<span style="color:#ae81ff">7334</span>
</span></span><span style="display:flex;"><span>dtype: ip
</span></span></code></pre></div><p>Note the <code>dtype</code> in that output. That&rsquo;s a custom dtype (like <code>category</code>) defined
<em>outside</em> pandas.</p>
<p>We register a <a href="http://pandas-docs.github.io/pandas-docs-travis/developer.html#developer-register-accessors">custom accessor</a> with pandas claiming the <code>.ip</code>
namespace (just like pandas uses <code>.str</code> or <code>.dt</code> or <code>.cat</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>In [<span style="color:#ae81ff">8</span>]: ser<span style="color:#f92672">.</span>ip<span style="color:#f92672">.</span>isna
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">8</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>     <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>    <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>    <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>dtype: bool
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In [<span style="color:#ae81ff">9</span>]: ser<span style="color:#f92672">.</span>ip<span style="color:#f92672">.</span>is_ipv6
</span></span><span style="display:flex;"><span>Out[<span style="color:#ae81ff">9</span>]:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>    <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>    <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>     <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>dtype: bool
</span></span></code></pre></div><p>I&rsquo;m <em>extremely</em> interested in seeing what the community builds on top of this
interface. Joris has already tested out the <a href="geopandas">Cythonized geopandas</a>
extension, which stores a NumPy array of pointers to geometry objects, and
things seem great. I could see someone (perhaps you, dear reader?) building a
<code>JSONArray</code> array type for working with nested data. That combined with custom
<code>.json</code> accessor, perhaps with a <a href="https://stedolan.github.io/jq/"><code>jq</code>-like</a> query language should make for
a powerful combination.</p>
<p>I&rsquo;m also happy to have to say &ldquo;Closed, out of scope; sorry.&rdquo; less often. Now it
can be &ldquo;Closed, out of scope; do it outside of pandas.&rdquo; :)</p>
<h2 id="open-source-success-story">Open Source Success Story</h2>
<p>It&rsquo;s worth taking a moment to realize that this was a great example of open
source at its best.</p>
<ol>
<li>A company had a need for a tool. They didn&rsquo;t have the expertise or desire to
build and maintain it internally, so they approached Anaconda (a for-profit
company with a great OSS tradition) to do it for them.</li>
<li>A proposal was made <em>and rejected</em> by the pandas community. You can&rsquo;t just
&ldquo;buy&rdquo; features in pandas if it conflicts too strongly with the long-term
goals for the project.</li>
<li>A more general solution was found, with minimal changes to pandas itself,
allowing anyone to do this type of extension outside of pandas.</li>
<li>We built the <a href="https://github.com/ContinuumIO/cyberpandas">cyberpandas</a>, which to users will feel like a
first-class array type in pandas.</li>
</ol>
<p>Thanks to the tireless reviews from the other pandas contributors, especially
Jeff Reback, Joris van den Bossche, and Stephen Hoyer. Look forward to these
changes in the next major pandas release.</p>
]]></content:encoded></item><item><title>Easy distributed training with Joblib and dask</title><link>https://tomaugspurger.github.io/posts/distributed-joblib/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/distributed-joblib/</guid><description>This work is supported by Anaconda Inc and the Data Driven Discovery Initiative from the Moore Foundation.
This past week, I had a chance to visit some of the scikit-learn developers at Inria in Paris. It was a fun and productive week, and I&amp;rsquo;m thankful to them for hosting me and Anaconda for sending me there. This article will talk about some improvements we made to improve training scikit-learn models using a cluster.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="http://anaconda.com/">Anaconda Inc</a> and the Data
Driven Discovery Initiative from the <a href="https://www.moore.org/">Moore
Foundation</a>.</em></p>
<p>This past week, I had a chance to visit some of the scikit-learn developers at
Inria in Paris. It was a fun and productive week, and I&rsquo;m thankful to them for
hosting me and Anaconda for sending me there. This article will talk about some
improvements we made to improve training scikit-learn models using a cluster.</p>
<p>Scikit-learn uses <a href="https://pythonhosted.org/joblib/parallel.html">joblib</a> for
simple parallelism in many places. Anywhere you pass an <code>n_jobs</code> keyword,
scikit-learn is internally calling <code>joblib.Parallel(...)</code>, and doing a batch of
work in parallel. The estimator may have an embarrassingly parallel step
internally (fitting each of the trees in a <code>RandomForest</code> for example). Or your
meta-estimator like <code>GridSearchCV</code> may try out many combinations of
hyper-parameters in parallel.</p>
<p>You can think of joblib as a broker between the user and the algorithm author.
The user comes along and says, &ldquo;I have <code>n_jobs</code> cores, please use them!&rdquo;.
Scikit-Learn says &ldquo;I have all these embarrassingly parallel tasks to be run as
part of fitting this estimator.&rdquo; Joblib accepts the cores from the user and the
tasks from scikit-learn, runs the tasks on the cores, and hands the completed
tasks back to scikit-learn.</p>
<p>Joblib offers a few &ldquo;backends&rdquo; for how to do your parallelism, but they all boil
down to using many processes versus using many threads.</p>
<h2 id="parallelism-in-python">Parallelism in Python</h2>
<p>A quick digression on <em>single-machine</em> parallelism in Python. We can&rsquo;t say up
front that using threads is always better or worse than using processes.
Unfortunately the relative performance depends on the specific workload. But we
do have some general heuristics that come down to serialization overhead and
Python&rsquo;s Global Interpreter Lock (GIL).</p>
<p>The GIL is part of CPython, the C program that interprets and runs your Python
program. It limits your Python process so that only one thread is executing
<em>Python</em> at once, defeating your parallelism. Fortunately, much of the numerical
Python stack is written in C, Cython, C++, Fortran, or numba, and <em>may</em> be able
to release the GIL. This means your &ldquo;Python&rdquo; program, which is calling into
Cython or C via NumPy or pandas, can get real thread-based parallelism without
being limited by the GIL. The main caveat here that manipulating strings or
Python objects (lists, dicts, sets, etc) typically requires holding the GIL.</p>
<p>So, if we have the <em>option</em> of choosing threads or processes, which do we want?
For most numeric / scientific workloads, threads are better than processes
because of <em>shared memory</em>. Each thread in a thread-pool can view (and modify!)
the <em>same</em> large NumPy array. With multiple processes, data must be <em>serialized</em>
between processes (perhaps using pickle). For large arrays or dataframes this
can be slow, and it may blow up your memory if the data a decent fraction of
your machine&rsquo;s RAM. You&rsquo;ll have a full copy in each processes.</p>
<p>See <a href="http://matthewrocklin.com/blog/work/2015/03/10/PyData-GIL">Matthew Rocklin&rsquo;s
article</a> and <a href="http://www.dabeaz.com/GIL/">David
Beazley&rsquo;s page</a> if you want to learn more.</p>
<h2 id="distributed-training-with-daskdistributed">Distributed Training with dask.distributed</h2>
<p>For a while now, you&rsquo;ve been able to use
<a href="http://distributed.readthedocs.io/en/latest/"><code>dask.distributed</code></a> as a
backend for joblib. This means that in <em>most</em> places scikit-learn offers an
<code>n_jobs</code> keyword, you&rsquo;re able to do the parallel computation on your cluster.</p>
<p>This is great when</p>
<ol>
<li>Your dataset is not too large (since the data must be sent to each worker)</li>
<li>The runtime of each task is long enough that the overhead of serializing the
data across the network to the worker doesn&rsquo;t dominate the runtime</li>
<li>You have many parallel tasks to run (else, you&rsquo;d just use a local thread or
process pool and avoid the network delay)</li>
</ol>
<p>Fitting a <code>RandomForest</code> is a good example of this. Each tree in a forest may be
built independently of every other tree. This next code chunk shows how you can
parallelize fitting a <code>RandomForestClassifier</code> across a cluster, though as
discussed later this won&rsquo;t work on the currently released versions of
scikit-learn and joblib.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.externals <span style="color:#f92672">import</span> joblib
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dask.distributed <span style="color:#f92672">import</span> Client
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> distributed.joblib  <span style="color:#75715e"># register the joblib backend</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#f92672">=</span> Client(<span style="color:#e6db74">&#39;dask-scheduler:8786&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> joblib<span style="color:#f92672">.</span>parallel_backend(<span style="color:#e6db74">&#34;dask&#34;</span>, scatter<span style="color:#f92672">=</span>[X_train, y_train]):
</span></span><span style="display:flex;"><span>    clf<span style="color:#f92672">.</span>fit(X_train, y_train)
</span></span></code></pre></div><p>The <code>.fit</code> call is parallelized across all the workers in your cluster. Here&rsquo;s
the distributed dashboard during that training.</p>
<video src="/images/distributed-joblib-cluster.webm" autoplay controls loop width="80%">
  Your browser doesn't support HTML5 video.
</video>
<p>The center pane shows the task stream as they complete. Each rectangle is a
single task, building a single tree in a random forest in this case. Workers are
represented vertically. My cluster had 8 workers with 4 cores each, which means
up to 32 tasks can be processed simultaneously. We fit the 200 trees in about 20
seconds.</p>
<h2 id="changes-to-joblib">Changes to Joblib</h2>
<p>Above, I said that distributed training worked in <em>most</em> places in scikit-learn.
Getting it to work everywhere required a bit more work, and was part of last
week&rsquo;s focus.</p>
<p>First, <code>dask.distributed</code>&rsquo;s joblib backend didn&rsquo;t handle <em>nested</em> parallelism
well. This may occur if you do something like</p>
<pre tabindex="0"><code class="language-pytohn" data-lang="pytohn">gs = GridSearchCV(Estimator(n_jobs=-1), n_jobs=-1)
gs.fit(X, y)
</code></pre><p>Previously, that caused deadlocks. Inside <code>GridSearchCV</code>, there&rsquo;s a call like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># In GridSearchCV.fit, the outer layer</span>
</span></span><span style="display:flex;"><span>results <span style="color:#f92672">=</span> joblib<span style="color:#f92672">.</span>Parallel(n_jobs<span style="color:#f92672">=</span>n_jobs)(fit_estimator)(<span style="color:#f92672">...</span>)
</span></span></code></pre></div><p>where <code>fit_estimator</code> is a function that <em>itself</em> tries to do things in parallel</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># In fit_estimator, the inner layer</span>
</span></span><span style="display:flex;"><span>results <span style="color:#f92672">=</span> joblib<span style="color:#f92672">.</span>Parallel(n_jobs<span style="color:#f92672">=</span>n_jobs)(fit_one)(<span style="color:#f92672">...</span>)
</span></span></code></pre></div><p>So the outer level kicks off a bunch of <code>joblib.Parallel</code> calls, and waits
around for the results. For each of those <code>Parallel</code> calls, the inner level
tries to make a bunch of <code>joblib.Parallel</code> calls. When joblib tried to start the
inner ones, it would ask the distributed scheduler for a free worker. But all
the workers were &ldquo;busy&rdquo; waiting around for the outer <code>Parallel</code> calls to finish,
which weren&rsquo;t progressing because there weren&rsquo;t any free workers! Deadlock!</p>
<p><code>dask.distributed</code> has a solution for this case (workers
<a href="http://distributed.readthedocs.io/en/latest/api.html#distributed.secede"><code>secede</code></a>
from the thread pool when they start a long-running <code>Parllel</code> call, and
<a href="http://distributed.readthedocs.io/en/latest/api.html#distributed.rejoin"><code>rejoin</code></a>
when they&rsquo;re done), but we needed a way to negotiate with joblib about when the
<code>secede</code> and <code>rejoin</code> should happen. Joblib now has an API for backends to
control some setup and teardown around the actual function execution. This work
was done in <a href="https://github.com/joblib/joblib/pull/538">Joblib #538</a> and
<a href="https://github.com/dask/distributed/pull/1705">dask-distributed #1705</a>.</p>
<p>Second, some places in scikit-learn hard-code the backend they want to use in
their <code>Parallel()</code> call, meaning the cluster isn&rsquo;t used. This may be because the
algorithm author knows that one backend performs better than others. For
example, <code>RandomForest.fit</code> performs better with threads, since it&rsquo;s purely
numeric and releases the GIL. In this case we would say the <code>Parallel</code> call
<em>prefers</em> threads, since you&rsquo;d get the same result with processes, it&rsquo;d just be
slower.</p>
<p>Another reason for hard-coding the backend is if the <em>correctness</em> of the
implementation relies on it. For example, <code>RandomForest.predict</code> preallocates
the output array and mutates it from many threads (it knows not to mutate the
same place from multiple threads). In this case, we&rsquo;d say the <code>Parallel</code> call
<em>requires</em> shared memory, because you&rsquo;d get an incorrect result using processes.</p>
<p>The solution was to enhance <code>joblib.Parallel</code> to take two new keywords, <code>prefer</code>
and <code>require</code>. If a <code>Parallel</code> call <em>prefers</em> threads, it&rsquo;ll use them, unless
it&rsquo;s in a context saying &ldquo;use this backend instead&rdquo;, like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(n_jobs<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> joblib<span style="color:#f92672">.</span>Parallel(n_jobs<span style="color:#f92672">=</span>n_jobs, prefer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;threads&#34;</span>)(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> joblib<span style="color:#f92672">.</span>parallel_backend(<span style="color:#e6db74">&#39;dask&#39;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This uses dask&#39;s workers, not threads</span>
</span></span><span style="display:flex;"><span>    fit()
</span></span></code></pre></div><p>On the other hand, if a <code>Parallel</code> requires a specific backend, it&rsquo;ll get it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(n_jobs<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> joblib<span style="color:#f92672">.</span>Parallel(n_jobs<span style="color:#f92672">=</span>n_jobs, require<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sharedmem&#34;</span>)(<span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> joblib<span style="color:#f92672">.</span>parallel_backend(<span style="color:#e6db74">&#39;dask&#39;</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This uses the threading backend, since shared memory is required</span>
</span></span><span style="display:flex;"><span>    fit()
</span></span></code></pre></div><p>This is a elegant way to negotiate a compromise between</p>
<ol>
<li>The <em>user</em>, who knows best about what resources are available, as specified
by the <code>joblib.parallel_backend</code> context manager. And,</li>
<li>The <em>algorithm author</em>, who knows best about the GIL handling and shared
memory requirements.</li>
</ol>
<p>This work was done in <a href="https://github.com/joblib/joblib/pull/602">Joblib #602</a>.</p>
<p>After the next joblib release, scikit-learn will be updated to use these options
in places where the backend is currently hard-coded. My example above used a
branch with those changes.</p>
<p>Look forward for these changes in the upcoming joblib, dask, and scikit-learn
releases. As always, let me know if you have any feedback.</p>
]]></content:encoded></item><item><title>Rewriting scikit-learn for big data, in under 9 hours.</title><link>https://tomaugspurger.github.io/posts/dask-ml-iid/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dask-ml-iid/</guid><description>This past week, I had a chance to visit some of the scikit-learn developers at Inria in Paris. It was a fun and productive week, and I&amp;rsquo;m thankful to them for hosting me and Anaconda for sending me there.
Towards the end of our week, Gael threw out the observation that for many applications, you don&amp;rsquo;t need to train on the entire dataset, a sample is often sufficient. But it&amp;rsquo;d be nice if the trained estimator would be able to transform and predict for dask arrays, getting all the nice distributed parallelism and memory management dask brings.</description><content:encoded><![CDATA[<p>This past week, I had a chance to visit some of the scikit-learn developers at
Inria in Paris. It was a fun and productive week, and I&rsquo;m thankful to them for
hosting me and Anaconda for sending me there.</p>
<p>Towards the end of our week, Gael threw out the observation that for many
applications, you don&rsquo;t need to <em>train</em> on the entire dataset, a sample is often
sufficient. But it&rsquo;d be nice if the trained estimator would be able to
<em>transform</em> and <em>predict</em> for dask arrays, getting all the nice distributed
parallelism and memory management dask brings.</p>
<p>This intrigued me, and I had a 9 hour plane ride, so&hellip;</p>
<h2 id="dask_mliid"><code>dask_ml.iid</code></h2>
<p>I put together the <code>dask_ml.iid</code> sub-package. The estimators contained within
are appropriate for data that are independently and identically distributed
(IID). Roughly speaking, your data is IID if there aren&rsquo;t any &ldquo;patterns&rdquo; in the
data as you move top to bottom. For example, time-series data is often <em>not</em>
IID, there&rsquo;s often an underlying time trend to the data. Or the data may be
autocorrelated (if <code>y</code> was above average yesterday, it&rsquo;ll probably be above
average today too). If your data is sorted, say by customer ID, then it likely
isn&rsquo;t IID. You might be able to shuffle it in this case.</p>
<p>If your data are IID, it <em>may</em> be OK to just fit the model on the first block.
In principal, it should be a representative sample of your entire dataset.</p>
<p>Here&rsquo;s a quick example. We&rsquo;ll fit a <code>GradientBoostingClassifier</code>. The dataset
will be 1,000,000 x 20, in chunks of 10,000. This would take <em>way</em> too long to
fit regularly. But, with IID data, we may be OK fitting the model on just the
the first 10,000 observations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> dask_ml.datasets <span style="color:#f92672">import</span> make_classification
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> dask_ml.iid.ensemble <span style="color:#f92672">import</span> GradientBoostingClassifier
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> X, y <span style="color:#f92672">=</span> make_classification(n_samples<span style="color:#f92672">=</span><span style="color:#ae81ff">1_000_000</span>, chunks<span style="color:#f92672">=</span><span style="color:#ae81ff">10_100</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf <span style="color:#f92672">=</span> GradientBoostingClassifier()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> clf<span style="color:#f92672">.</span>fit(X, y)
</span></span></code></pre></div><p>At this point, we have a scikit-learn estimator that can be used to transform or
predict for dask arrays (in parallel, out of core or distributed across your
cluster).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> prob_a
</span></span><span style="display:flex;"><span>dask<span style="color:#f92672">.</span>array<span style="color:#f92672">&lt;</span>predict_proba, shape<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1000000</span>, <span style="color:#ae81ff">2</span>), dtype<span style="color:#f92672">=</span>float64, chunksize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">2</span>)<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> prob_a[:<span style="color:#ae81ff">10</span>]<span style="color:#f92672">.</span>compute()
</span></span><span style="display:flex;"><span>array([[<span style="color:#ae81ff">0.98268198</span>, <span style="color:#ae81ff">0.01731802</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.41509521</span>, <span style="color:#ae81ff">0.58490479</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.97702961</span>, <span style="color:#ae81ff">0.02297039</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.91652623</span>, <span style="color:#ae81ff">0.08347377</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.96530773</span>, <span style="color:#ae81ff">0.03469227</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.94015097</span>, <span style="color:#ae81ff">0.05984903</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.98167384</span>, <span style="color:#ae81ff">0.01832616</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.97621963</span>, <span style="color:#ae81ff">0.02378037</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.95951444</span>, <span style="color:#ae81ff">0.04048556</span>],
</span></span><span style="display:flex;"><span>       [<span style="color:#ae81ff">0.98654415</span>, <span style="color:#ae81ff">0.01345585</span>]])
</span></span></code></pre></div><p>An alternative to <code>dask_ml.iid</code> is to sample your data and use a regular
scikit-learn estimator. But the <code>dask_ml.iid</code> approach is <em>slightly</em> preferable,
since post-fit tasks like prediction can be done on dask arrays in parallel (and
potentially distributed). Scikit-Learn&rsquo;s estimators are not dask-aware, so
they&rsquo;d just convert it to a NumPy array, possibly blowing up your memory.</p>
<p>If dask and <code>dask_ml.iid</code> had existed a few years ago, it would have solved all
the &ldquo;big data&rdquo; needs of my old job. Personally, I never hit a problem where, if
my dataset was already large, training on an even larger dataset was the answer.
I&rsquo;d always hit the level part of the learning curve, or was already dealing with
highly imbalanced classes. But, I would often have to make <em>predictions</em> for a
much larger dataset. For example, I might have trained a model on &ldquo;all the
customers for this store&rdquo; and predicted for &ldquo;All the people in Iowa&rdquo;.</p>
]]></content:encoded></item><item><title>dask-ml</title><link>https://tomaugspurger.github.io/posts/dask-ml-announce/</link><pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dask-ml-announce/</guid><description>Today we released the first version of dask-ml, a library for parallel and distributed machine learning. Read the documentation or install it with
pip install dask-ml Packages are currently building for conda-forge, and will be up later today.
conda install -c conda-forge dask-ml The Goals dask is, to quote the docs, &amp;ldquo;a flexible parallel computing library for analytic computing.&amp;rdquo; dask.array and dask.dataframe have done a great job scaling NumPy arrays and pandas dataframes; dask-ml hopes to do the same in the machine learning domain.</description><content:encoded><![CDATA[<p>Today we released the first version of <code>dask-ml</code>, a library for parallel and
distributed machine learning. Read the <a href="http://dask-ml.readthedocs.io/en/latest/">documentation</a> or install it with</p>
<pre tabindex="0"><code>pip install dask-ml
</code></pre><p>Packages are currently building for conda-forge, and will be up later today.</p>
<pre tabindex="0"><code>conda install -c conda-forge dask-ml
</code></pre><h2 id="the-goals">The Goals</h2>
<p><a href="http://dask.pydata.org/en/latest/">dask</a> is, to quote the docs, &ldquo;a flexible parallel computing library for
analytic computing.&rdquo; <code>dask.array</code> and <code>dask.dataframe</code> have done a great job
scaling NumPy arrays and pandas dataframes; <code>dask-ml</code> hopes to do the same in
the machine learning domain.</p>
<p>Put simply, we want</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>est <span style="color:#f92672">=</span> MyEstimator()
</span></span><span style="display:flex;"><span>est<span style="color:#f92672">.</span>fit(X, y)
</span></span></code></pre></div><p>to work well in parallel and potentially distributed across a cluster. <code>dask</code>
provides us with the building blocks to do that.</p>
<h2 id="whats-been-done">What&rsquo;s Been Done</h2>
<p><code>dask-ml</code> collects some efforts that others already built:</p>
<ul>
<li><a href="http://dask-ml.readthedocs.io/en/latest/joblib.html">distributed joblib</a>:
scaling out some scikit-learn operations to clusters (from
<code>distributed.joblib</code>)</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/hyper-parameter-search.html">hyper-parameter
search</a>:
Some drop in replacements for scikit-learn&rsquo;s <code>GridSearchCV</code> and
<code>RandomizedSearchCV</code> classes (from <code>dask-searchcv</code>)</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/glm.html">distributed GLMs</a>: Fit
large Generalized Linear Models on your cluster (from <code>dask-glm</code>)</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/xgboost.html">dask + xgboost</a>: Peer a
<code>dask.distributed</code> cluster with XGBoost running in distributed mode (from
<code>dask-xgboost</code>)</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/tensorflow.html">dask + tensorflow</a>:
Peer a <code>dask.distributed</code> cluster with TensorFlow running in distributed mode
(from <code>dask-tensorflow</code>)</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/incremental.html">Out-of-core learning in
pipelines</a>: Reuse
scikit-learn&rsquo;s out-of-core <code>.partial_fit</code> API in pipelines (from
<code>dask.array.learn</code>)</li>
</ul>
<p>In addition to providing a single home for these existing efforts, we&rsquo;ve
implemented some algorithms that are designed to run in parallel and distributed
across a cluster.</p>
<ul>
<li><a href="http://dask-ml.readthedocs.io/en/latest/modules/generated/dask_ml.cluster.KMeans.html#dask_ml.cluster.KMeans"><code>KMeans</code></a>:
Uses the <code>k-means||</code> algorithm for initialization, and a parallelized Lloyd&rsquo;s
algorithm for the EM step.</li>
<li><a href="http://dask-ml.readthedocs.io/en/latest/modules/api.html#module-dask_ml.preprocessing">Preprocessing</a>:
These are estimators that can be dropped into scikit-learn Pipelines, but they
operate in parallel on dask collections. They&rsquo;ll work well on datasets in
distributed memory, and may be faster for NumPy arrays (depending on the
overhead from parallelizing, and whether or not the scikit-learn
implementation is already parallel).</li>
</ul>
<h2 id="help-contribute">Help Contribute!</h2>
<p>Scikit-learn is a robust, mature, stable library. <code>dask-ml</code> is&hellip; not. Which
means there are plenty of places to contribute! Dask makes writing parallel and
distributed implementations of algorithms fun. For the most part, you don&rsquo;t even
have to think about &ldquo;where&rsquo;s my data? How do I parallelize this?&rdquo; Dask does that
for you.</p>
<p>Have a look at the <a href="https://github.com/dask/dask-ml/issues">issues</a> or propose a
new one. I&rsquo;d love to hear issues that you&rsquo;ve run into when scaling the
&ldquo;traditional&rdquo; scientific python stack out to larger problems.</p>
]]></content:encoded></item><item><title>Scalable Machine Learning (Part 3): Parallel</title><link>https://tomaugspurger.github.io/posts/scalable-ml-03/</link><pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/scalable-ml-03/</guid><description>This work is supported by Anaconda, Inc. and the Data Driven Discovery Initiative from the Moore Foundation.
This is part three of my series on scalable machine learning.
Small Fit, Big Predict Scikit-Learn Partial Fit Parallel Machine Learning You can download a notebook of this post [here][notebook].
In part one, I talked about the type of constraints that push us to parallelize or distribute a machine learning workload. Today, we&amp;rsquo;ll be talking about the second constraint, &amp;ldquo;I&amp;rsquo;m constrained by time, and would like to fit more models at once, by using all the cores of my laptop, or all the machines in my cluster&amp;rdquo;.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="https://www.anaconda.com/">Anaconda, Inc.</a> and the
Data Driven Discovery Initiative from the <a href="https://www.moore.org/">Moore Foundation</a>.</em></p>
<p>This is part three of my series on scalable machine learning.</p>
<ul>
<li><a href="scalable-ml-01">Small Fit, Big Predict</a></li>
<li><a href="scalable-ml-02">Scikit-Learn Partial Fit</a></li>
<li><a href="scalable-ml-03">Parallel Machine Learning</a></li>
</ul>
<p>You can download a notebook of this post [here][notebook].</p>
<hr>
<p>In <a href="scalable-ml-01">part one</a>, I talked about the type of constraints that push
us to parallelize or distribute a machine learning workload. Today, we&rsquo;ll be
talking about the second constraint, &ldquo;I&rsquo;m constrained by time, and would like to
fit more models at once, by using all the cores of my laptop, or all the
machines in my cluster&rdquo;.</p>
<h2 id="an-aside-on-parallelism">An Aside on Parallelism</h2>
<p>In the case of Python, we have two main avenues of parallelization (which we&rsquo;ll
roughly define as using multiple &ldquo;workers&rdquo; to do some &ldquo;work&rdquo; in less time).
Those two avenues are</p>
<ol>
<li>multi-threading</li>
<li>multi-processing</li>
</ol>
<p>For python, the most important differences are that</p>
<ol>
<li>multi-threaded code can <em>potentially</em> be limited by the GIL</li>
<li>multi-processing code requires that data be serialized between processes</li>
</ol>
<p>The GIL is the &ldquo;Global Interpreter Lock&rdquo;, an implementation detail of CPython
that means only one thread in your python process can be executing python code
at once.</p>
<p><a href="https://www.youtube.com/watch?v=9zinZmE3Ogk">This talk</a> by Python
core-developer Raymond Hettinger does a good job summarizing things for Python,
with an important caveat: much of what he says about the GIL doesn&rsquo;t apply to
the <em>scientific</em> python stack. NumPy, scikit-learn, and much of pandas release
the GIL and can run multi-threaded, using shared memory and so avoiding
serialization costs. I&rsquo;ll highlight his quote, which summarizes the
situation:</p>
<blockquote>
<blockquote>
<p>Your weakness is your strength, and your strength is your weakness</p>
</blockquote>
</blockquote>
<blockquote>
<p>The strength of threads is shared state. The weakness of threads is shared
state.</p>
</blockquote>
<p>Another wrinkle here is that when you move to a distributed cluster, you <em>have</em>
to have multiple processes. And communication between processes becomes even
more expensive since you&rsquo;ll have network overhead to worry about, in addition to
the serialization costs.</p>
<p>Fortunately, modules like <code>concurrent.futures</code> and libraries like <code>dask</code> make it
easy to swap one mode in for another. Let&rsquo;s make a little dask array:</p>
<pre tabindex="0"><code>import dask.array as da
import dask
import dask.threaded
import dask.multiprocessing

X = da.random.uniform(size=(10000, 10), chunks=(1000, 10))
result = X / (X.T @ X).sum(1)
</code></pre><p>We can swap out the scheduler with a context-manager:</p>
<pre tabindex="0"><code>%%time
with dask.set_options(get=dask.threaded.get):
    # threaded is the default for dask.array anyway
    result.compute()
</code></pre><pre tabindex="0"><code>%%time
with dask.set_options(get=dask.multiprocessing.get):
    result.compute()
</code></pre><p>Every dask collection (<code>dask.array</code>, <code>dask.dataframe</code>, <code>dask.bag</code>) has a default
scheduler that typically works well for the kinds of operations it does. For
<code>dask.array</code> and <code>dask.dataframe</code>, the shared-memory threaded scheduler is used.</p>
<h2 id="cost-models">Cost Models</h2>
<p>In <a href="https://www.youtube.com/watch?v=tC94Mkg-oJU">this talk</a>, Simon Peyton Jones
talks about parallel and distributed computing for Haskell. He stressed
repeatedly that there&rsquo;s no silver bullet when it comes to parallelism. The type
of parallelism appropriate for a web server, say, may be different than the type
of parallelism appropriate for a machine learning algorithm.</p>
<p>I mention all this, since we&rsquo;re about to talk about parallel machine learning.
<em>In general</em>, for small data and many models you&rsquo;ll want to use the threaded
scheduler. For bigger data (larger than memory), you&rsquo;ll want want to use the
distributed scheduler. Assuming the underlying NumPy, SciPy, scikit-learn, or
pandas operation releases the GIL, you&rsquo;ll be able to get nice speedups without
the cost of serialization. But again, there isn&rsquo;t a silver bullet here, and the
best type of parallelism will depend on your particular problem.</p>
<h2 id="where-to-parallelize">Where to Parallelize</h2>
<p>In a typical machine-learning workflow, there are typically ample opportunities for
parallelism.</p>
<ol>
<li>Over Hyper-parameters (one fit per combination of parameters)</li>
<li>Over Cross-validation folds (one fit per fold)</li>
<li>Within an algorithm (for some algorithms)</li>
</ol>
<p>Scikit-learn already uses parallelism in many places, anywhere you see an
<code>n_jobs</code> keyword.</p>
]]></content:encoded></item><item><title>Scalable Machine Learning (Part 2): Partial Fit</title><link>https://tomaugspurger.github.io/posts/scalable-ml-02/</link><pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/scalable-ml-02/</guid><description>This work is supported by Anaconda, Inc. and the Data Driven Discovery Initiative from the Moore Foundation.
This is part two of my series on scalable machine learning.
Small Fit, Big Predict Scikit-Learn Partial Fit You can download a notebook of this post here.
Scikit-learn supports out-of-core learning (fitting a model on a dataset that doesn&amp;rsquo;t fit in RAM), through it&amp;rsquo;s partial_fit API. See here.
The basic idea is that, for certain estimators, learning can be done in batches.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="https://www.anaconda.com/">Anaconda, Inc.</a> and the
Data Driven Discovery Initiative from the <a href="https://www.moore.org/">Moore Foundation</a>.</em></p>
<p>This is part two of my series on scalable machine learning.</p>
<ul>
<li><a href="scalable-ml-01">Small Fit, Big Predict</a></li>
<li><a href="scalable-ml-02">Scikit-Learn Partial Fit</a></li>
</ul>
<p>You can download a notebook of this post <a href="http://nbviewer.jupyter.org/github/TomAugspurger/scalable-ml/blob/master/partial.ipynb">here</a>.</p>
<hr>
<p>Scikit-learn supports out-of-core learning (fitting a model on a dataset that
doesn&rsquo;t fit in RAM), through it&rsquo;s <code>partial_fit</code> API. See
<a href="http://scikit-learn.org/stable/modules/scaling_strategies.html#scaling-with-instances-using-out-of-core-learning">here</a>.</p>
<p>The basic idea is that, <em>for certain estimators</em>, learning can be done in
batches. The estimator will see a batch, and then incrementally update whatever
it&rsquo;s learning (the coefficients, for example). <a href="http://scikit-learn.org/stable/modules/scaling_strategies.html#incremental-learning">This
link</a>
has a list of the algorithms that implement <code>partial_fit</code>.</p>
<p>Unfortunately, the <code>partial_fit</code> API doesn&rsquo;t play that nicely with my favorite
part of scikit-learn,
<a href="http://scikit-learn.org/stable/modules/pipeline.html#pipeline">pipelines</a>,
which we discussed at length in <a href="scalable-ml-01">part 1</a>. For pipelines to work,
you would essentially need every step in the pipeline to have an out-of-core
<code>partial_fit</code> version, which isn&rsquo;t really feasible; some algorithms just have to
see the entire dataset at once. Setting that aside, it wouldn&rsquo;t be great for a
user, since working with generators of datasets is awkward compared to the
expressivity we get from pandas and NumPy.</p>
<p>Fortunately, we <em>have</em> great data containers for larger than memory arrays and
dataframes: <code>dask.array</code> and <code>dask.dataframe</code>. We can</p>
<ol>
<li>Use dask for pre-processing data in an out-of-core manner</li>
<li>Use scikit-learn to fit the actual model, out-of-core, using the
<code>partial_fit</code> API</li>
</ol>
<p>And with a little bit of work, all of this can be done in a pipeline. The rest
of this post shows how.</p>
<h2 id="big-arrays">Big Arrays</h2>
<p>If you follow along in the <a href="http://nbviewer.jupyter.org/github/TomAugspurger/scalable-ml/blob/master/partial.ipynb">companion notebook</a>, you&rsquo;ll see that I
generate a dataset, replicate it 100 times, and write the results out to disk. I
then read it back in as a pair of <code>dask.dataframe</code>s and convert them to a pair
of <code>dask.array</code>s. I&rsquo;ll skip those details to focus on main goal: using
<code>sklearn.Pipeline</code>s on larger-than-memory datasets. Suffice to say, we have a
function <code>read</code> that gives us our big <code>X</code> and <code>y</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>X, y <span style="color:#f92672">=</span> read()
</span></span><span style="display:flex;"><span>X
</span></span></code></pre></div><pre><code>dask.array&lt;concatenate, shape=(100000000, 20), dtype=float64, chunksize=(500000, 20)&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>y
</span></span></code></pre></div><pre><code>dask.array&lt;squeeze, shape=(100000000,), dtype=float64, chunksize=(500000,)&gt;
</code></pre>
<p>So <code>X</code> is a 100,000,000 x 20 array of floats (I have float64s, you&rsquo;re probably
fine with float32s) that we&rsquo;ll use to predict <code>y</code>. I generated the dataset, so I
know that <code>y</code> is either 0 or 1. We&rsquo;ll be doing classification.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(X<span style="color:#f92672">.</span>nbytes <span style="color:#f92672">+</span> y<span style="color:#f92672">.</span>nbytes) <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">**</span><span style="color:#ae81ff">9</span>
</span></span></code></pre></div><pre><code>16.8
</code></pre>
<p>My laptop has 16 GB of RAM, and the dataset is 16.8 GB. We can&rsquo;t simply read the
entire thing into memory. We&rsquo;ll use dask for the preprocessing, and scikit-learn
for the fitting. We&rsquo;ll have a small pipeline</p>
<ol>
<li>Scale the features by mean and variance</li>
<li>Fit an SGDClassifier</li>
</ol>
<p>I&rsquo;ve implemented a <code>daskml.preprocessing.StandardScaler</code>, using dask, in about
40 lines of code (see <a href="https://github.com/dask/dask-ml/blob/9e85ba282a93c0f62afbe68dabe088fbd59ada40/daskml/preprocessing/data.py#L8">here</a>).
The scaling will be done completely in parallel and completely out-of-core.</p>
<p>I <em>haven&rsquo;t</em> implemented a custom <code>SGDClassifier</code>, because that&rsquo;d be much more
than 40 lines of code. Instead, I&rsquo;ve put together a small wrapper that will use
scikit-learn&rsquo;s <code>SGDClassifier.partial_fit</code> to fit the model out-of-core (but not
in parallel).</p>
<pre tabindex="0"><code>from daskml.preprocessing import StandardScaler
from daskml.linear_model import BigSGDClassifier  # The wrapper

from dask.diagnostics import ResourceProfiler, Profiler, ProgressBar
from sklearn.pipeline import make_pipeline
</code></pre><p>As a user, the API is the same as <code>scikit-learn</code>. Indeed, it <em>is</em> just a regular
<code>sklearn.pipeline.Pipeline</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> make_pipeline(
</span></span><span style="display:flex;"><span>    StandardScaler(),
</span></span><span style="display:flex;"><span>    BigSGDClassifier(classes<span style="color:#f92672">=</span>[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>], max_iter<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>, tol<span style="color:#f92672">=</span><span style="color:#ae81ff">1e-3</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>),
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>And fitting is identical as well: <code>pipe.fit(X, y)</code>. We&rsquo;ll collect some
performance metrics as well, so we can analyze our parallelism.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>rp <span style="color:#f92672">=</span> ResourceProfiler()
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> Profiler()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> p, rp:
</span></span><span style="display:flex;"><span>    pipe<span style="color:#f92672">.</span>fit(X, y)
</span></span></code></pre></div><pre><code>CPU times: user 2min 38s, sys: 1min 44s, total: 4min 22s
Wall time: 1min 47s
</code></pre>
<p>And that&rsquo;s it. It&rsquo;s just a regular scikit-learn pipeline, operating on a
larger-than-memory data. <code>pipe</code> has has all the regular methods you would
expect, <code>predict</code>, <code>predict_proba</code>, etc. You can get to the individual
attributes like <code>pipe.steps[1][1].coef_</code>.</p>
<p>One important point to stress here: when we get to the <code>BigSGDClassifier.fit</code>
at the end of the pipeline, everything is done serially. We can see that by
plotting the <code>Profiler</code> we captured up above:</p>
<p><img loading="lazy" src="/images/sml-02-fit.png" alt="Training parallelism"  />
</p>
<p>That graph shows the tasks (the rectangles) each worker (a core on my laptop)
executed over time. Workers are along the vertical axis, and time is along the
horizontal. Towards the start, when we&rsquo;re reading off disk, converting to
<code>dask.array</code>s, and doing the <code>StandardScaler</code>, everything is in parallel. Once
we get to the <code>BigSGDClassifier</code>, which is just a simple wrapper around
<code>sklearn.linear_model.SGDClassifier</code>, we lose all our parallelism*.</p>
<p>The predict step <em>is</em> done entirely in parallel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> rp, p:
</span></span><span style="display:flex;"><span>    predictions <span style="color:#f92672">=</span> pipe<span style="color:#f92672">.</span>predict(X)
</span></span><span style="display:flex;"><span>    predictions<span style="color:#f92672">.</span>to_dask_dataframe(columns<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">.</span>to_parquet(<span style="color:#e6db74">&#39;predictions.parq&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/images/sml-02-predict.png" alt="Predicting parallelism"  />
</p>
<p>That took about 40 seconds, from disk to prediction, and back to disk on 16 GB
of data, using all 8 cores of my laptop.</p>
<h2 id="how">How?</h2>
<p>When I had this idea last week, of feeding blocks of <code>dask.array</code> to a
scikit-learn estimator&rsquo;s <code>partial_fit</code> method, I thought it was pretty neat.
Turns out Matt Rocklin already had the idea, and implemented it in dask, two
years ago.</p>
<p>Roughly speaking, the implementation is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BigSGDClassifier</span>(SGDClassifier):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># ... some setup</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> xx, yy <span style="color:#f92672">in</span> by_blocks(X, y):
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>partial_fit(xx, yy)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span></code></pre></div><p>If you aren&rsquo;t familiar with <code>dask</code>, its arrays are composed of many smaller
NumPy arrays (blocks in the larger dask array). We iterate over the dask arrays
block-wise, and pass them into the estimators <code>partial_fit</code> method. That&rsquo;s exactly
what you would be doing if you were using, say, a generator feed NumPy arrays to
the <code>partial_fit</code> method. Only you can manipulate a <code>dask.array</code> like regular
NumPy array, so things are more convenient.</p>
<h2 id="some-challenges">Some Challenges</h2>
<p>For our small pipeline, we had to make two passes over the data. One to fit the
<code>StandardScaler</code> and one to fit the <code>BigSGDClassifier</code>. In general, with
this approach, we&rsquo;ll have to make one pass per stage of the pipeline, which
isn&rsquo;t great. I <em>think</em> this is unavoidable with the current design, but I&rsquo;m
considering ways around it.</p>
<h2 id="recap">Recap</h2>
<p>We&rsquo;ve seen <em>a</em> way to use scikit-learn&rsquo;s existing estimators on
larger-than-memory dask arrays by passing the blocks of a dask array to the
<code>partial_fit</code> method. This enables us to use <code>Pipeline</code>s on larger-than-memory
datasets.</p>
<p>Let me know what you think. I&rsquo;m pretty excited about this because it removes
some of the friction around using sckit-learn Pipelines with out-of-core
estimators. In <a href="https://github.com/dask/dask-ml"><code>dask-ml</code></a>, I&rsquo;ve implemented similar wrappers for</p>
<ul>
<li>SGDRegressor</li>
<li>PassiveAggressiveClassifier</li>
<li>PassiveAggressiveRegressor</li>
<li>Perceptron</li>
<li>MPLClassifier</li>
<li>MLPRegressor</li>
<li>MiniBatchKMeans</li>
</ul>
<p>I&rsquo;ll be packaging this up in <a href="https://github.com/dask/dask-ml"><code>daskml</code></a> to make it more usable for the
community over the next couple weeks. If this type of work interests you, please
reach out on <a href="http://twitter.com/TomAugspurger">Twitter</a> or by
email at <a href="mailto:tom.w.augspurger@gmail.com">mailto:tom.w.augspurger@gmail.com</a>. If you&rsquo;re interested in contributing, I
think a library of basic transformers that operate on NumPy and dask arrays and
pandas and dask DataFrames would be <em>extremely</em> useful. I&rsquo;ve started <a href="https://github.com/dask/dask-ml/issues/6">an
issue</a> to track this progress.
Contributions would be extremely welcome.</p>
<p>Next time we&rsquo;ll be going back to smaller datasets. We&rsquo;ll see how dask can help
us parallelize our work to fit more models in less time.</p>
]]></content:encoded></item><item><title>Scalable Machine Learning (Part 1)</title><link>https://tomaugspurger.github.io/posts/scalable-ml-01/</link><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/scalable-ml-01/</guid><description>This work is supported by Anaconda Inc. and the Data Driven Discovery Initiative from the Moore Foundation.
Anaconda is interested in scaling the scientific python ecosystem. My current focus is on out-of-core, parallel, and distributed machine learning. This series of posts will introduce those concepts, explore what we have available today, and track the community&amp;rsquo;s efforts to push the boundaries.
You can download a Jupyter notebook demonstrating the analysis here.</description><content:encoded><![CDATA[<p><em>This work is supported by <a href="https://www.anaconda.com/">Anaconda Inc.</a> and the Data Driven Discovery
Initiative from the <a href="https://www.moore.org/">Moore Foundation</a>.</em></p>
<p>Anaconda is interested in scaling the scientific python ecosystem. My current
focus is on out-of-core, parallel, and distributed machine learning. This series
of posts will introduce those concepts, explore what we have available today,
and track the community&rsquo;s efforts to push the boundaries.</p>
<p><em>You can download a Jupyter notebook demonstrating the analysis <a href="https://nbviewer.jupyter.org/gist/TomAugspurger/94ee62127bbc8e20223f97ebd7d29191">here</a>.</em></p>
<h2 id="constraints">Constraints</h2>
<p>I am (or was, anyway) an economist, and economists like to think in terms of
constraints. How are we constrained by scale? The two main ones I can think of
are</p>
<ol>
<li><strong>I&rsquo;m constrained by size</strong>: My training dataset fits in RAM, but I have to
predict for a much larger dataset. Or, my training dataset doesn&rsquo;t even fit
in RAM. <em>I&rsquo;d like to scale out by adopting algorithms that work in batches
locally, or on a distributed cluster.</em></li>
<li><strong>I&rsquo;m constrained by time</strong>: I&rsquo;d like to fit more models (think
hyper-parameter optimization or ensemble learning) on my dataset in a given
amount of time. <em>I&rsquo;d like to scale out by fitting more models in parallel,
either on my laptop by using more cores, or on a cluster.</em></li>
</ol>
<p>These aren&rsquo;t mutually exclusive or exhaustive, but they should serve as a nice
framework for our discussion. I&rsquo;ll be showing where the usual pandas +
scikit-learn for in-memory analytics workflow breaks down, and offer some
solutions for scaling out to larger problems.</p>
<p>This post will focus on cases where your <em>training</em> dataset fits in memory, but
you must predict on a dataset that&rsquo;s larger than memory. Later posts will
explore into parallel, out-of-core, and distributed training of machine learning
models.</p>
<h2 id="dont-forget-your-statistics">Don&rsquo;t forget your Statistics</h2>
<p>Statistics is a thing<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Statisticians have thought a lot about things like
sampling and the variance of estimators. So it&rsquo;s worth stating up front that
you may be able to just</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> dataset
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> random()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">LIMIT</span> <span style="color:#ae81ff">10000</span>;
</span></span></code></pre></div><p>and fit your model on a (representative) subset of your data. <em>You may not need
distributed machine learning</em>. The tricky thing is selecting how large your
sample should be. The &ldquo;correct&rdquo; value depends on the complexity of your learning
task, the complexity of your model, and the nature of your data. The best you
can do here is think carefully about your problem and to plot the <a href="http://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html">learning
curve</a>.</p>
<p><img loading="lazy" src="http://scikit-learn.org/stable/_images/sphx_glr_plot_learning_curve_001.png" alt="scikit-learn"  />
</p>
<div style="text-align: center"> <a
  href="http://scikit-learn.org/stable/_images/sphx_glr_plot_learning_curve_001.png"><i>source</i></a>
</div>
<p>As usual, the scikit-learn developers do a great job explaining the concept in
addition to providing a great library. I encourage you to follow <a href="http://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html">that
link</a>. This gist is that—for some models on some
datasets—training the model on more observations doesn&rsquo;t improve performance. At
some point the learning curve levels off and you&rsquo;re just wasting time and money
training on those extra observations.</p>
<p>For today, we&rsquo;ll assume that we&rsquo;re on the flat part of the learning curve. Later
in the series we&rsquo;ll explore cases where we run out of RAM before the learning
curve levels off.</p>
<h2 id="fit-predict">Fit, Predict</h2>
<p>In my experience, the first place I bump into RAM constraints is when my
training dataset fits in memory, but I have to make predictions for a dataset
that&rsquo;s orders of magnitude larger. In these cases, I fit my model like normal,
and do my predictions out-of-core (without reading the full dataset into memory
at once).</p>
<p>We&rsquo;ll see that the training side is completely normal (since everything fits in
RAM). We&rsquo;ll see that <a href="https://dask.pydata.org">dask</a> let&rsquo;s us write normal-looking pandas and NumPy code,
so we don&rsquo;t have to worry about writing the batching code ourself.</p>
<p>To make this concrete, we&rsquo;ll use the (tried and true) New York City taxi
dataset. The goal will be to predict if the passenger leaves a tip. We&rsquo;ll train
the model on a single month&rsquo;s worth of data (which fits in my laptop&rsquo;s RAM), and
predict on the full dataset<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>Let&rsquo;s load in the first month of data from disk:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dtype <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;vendor_name&#39;</span>: <span style="color:#e6db74">&#39;category&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Payment_Type&#39;</span>: <span style="color:#e6db74">&#39;category&#39;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;data/yellow_tripdata_2009-01.csv&#34;</span>, dtype<span style="color:#f92672">=</span>dtype,
</span></span><span style="display:flex;"><span>                 parse_dates<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Trip_Pickup_DateTime&#39;</span>, <span style="color:#e6db74">&#39;Trip_Dropoff_DateTime&#39;</span>],)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><table> <thead> <tr style="text-align: right;"> <th></th> <th>vendor_name</th>
  <th>Trip_Pickup_DateTime</th> <th>Trip_Dropoff_DateTime</th>
  <th>Passenger_Count</th> <th>Trip_Distance</th> <th>Start_Lon</th>
  <th>Start_Lat</th> <th>Rate_Code</th> <th>store_and_forward</th>
  <th>End_Lon</th> <th>End_Lat</th> <th>Payment_Type</th> <th>Fare_Amt</th>
  <th>surcharge</th> <th>mta_tax</th> <th>Tip_Amt</th> <th>Tolls_Amt</th>
  <th>Total_Amt</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>VTS</td>
  <td>2009-01-04 02:52:00</td> <td>2009-01-04 03:02:00</td> <td>1</td>
  <td>2.63</td> <td>-73.991957</td> <td>40.721567</td> <td>NaN</td> <td>NaN</td>
  <td>-73.993803</td> <td>40.695922</td> <td>CASH</td> <td>8.9</td> <td>0.5</td>
  <td>NaN</td> <td>0.00</td> <td>0.0</td> <td>9.40</td> </tr> <tr> <th>1</th>
  <td>VTS</td> <td>2009-01-04 03:31:00</td> <td>2009-01-04 03:38:00</td>
  <td>3</td> <td>4.55</td> <td>-73.982102</td> <td>40.736290</td> <td>NaN</td>
  <td>NaN</td> <td>-73.955850</td> <td>40.768030</td> <td>Credit</td>
  <td>12.1</td> <td>0.5</td> <td>NaN</td> <td>2.00</td> <td>0.0</td>
  <td>14.60</td> </tr> <tr> <th>2</th> <td>VTS</td> <td>2009-01-03 15:43:00</td>
  <td>2009-01-03 15:57:00</td> <td>5</td> <td>10.35</td> <td>-74.002587</td>
  <td>40.739748</td> <td>NaN</td> <td>NaN</td> <td>-73.869983</td>
  <td>40.770225</td> <td>Credit</td> <td>23.7</td> <td>0.0</td> <td>NaN</td>
  <td>4.74</td> <td>0.0</td> <td>28.44</td> </tr> <tr> <th>3</th> <td>DDS</td>
  <td>2009-01-01 20:52:58</td> <td>2009-01-01 21:14:00</td> <td>1</td>
  <td>5.00</td> <td>-73.974267</td> <td>40.790955</td> <td>NaN</td> <td>NaN</td>
  <td>-73.996558</td> <td>40.731849</td> <td>CREDIT</td> <td>14.9</td>
  <td>0.5</td> <td>NaN</td> <td>3.05</td> <td>0.0</td> <td>18.45</td> </tr> <tr>
  <th>4</th> <td>DDS</td> <td>2009-01-24 16:18:23</td> <td>2009-01-24
  16:24:56</td> <td>1</td> <td>0.40</td> <td>-74.001580</td> <td>40.719382</td>
  <td>NaN</td> <td>NaN</td> <td>-74.008378</td> <td>40.720350</td> <td>CASH</td>
  <td>3.7</td> <td>0.0</td> <td>NaN</td> <td>0.00</td> <td>0.0</td>
  <td>3.70</td> </tr> </tbody> </table>
<p>The January 2009 file has about 14M rows, and pandas takes about a minute to
read the CSV into memory. We&rsquo;ll do the usual train-test split:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>X <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#34;Tip_Amt&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Tip_Amt&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>X_train, X_test, y_train, y_test <span style="color:#f92672">=</span> train_test_split(X, y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Train:&#34;</span>, len(X_train))
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Test: &#34;</span>, len(X_test))
</span></span></code></pre></div><pre><code>Train: 10569309
Test:  3523104
</code></pre>
<h2 id="aside-on-pipelines">Aside on Pipelines</h2>
<p>The first time you&rsquo;re introduced to scikit-learn, you&rsquo;ll typically be shown how
you pass two NumPy arrays <code>X</code> and <code>y</code> straight into an estimator&rsquo;s <code>.fit</code>
method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.linear_model <span style="color:#f92672">import</span> LinearRegression
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>est <span style="color:#f92672">=</span> LinearRegression()
</span></span><span style="display:flex;"><span>est<span style="color:#f92672">.</span>fit(X, y)
</span></span></code></pre></div><p>Eventually, you might want to use some of scikit-learn&rsquo;s pre-processing methods.
For example, we might impute missing values with the median and normalize the
data before handing it off to <code>LinearRegression</code>. You could do this &ldquo;by hand&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.preprocessing <span style="color:#f92672">import</span> Imputer, StandardScaler
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>imputer <span style="color:#f92672">=</span> Imputer(strategy<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;median&#39;</span>)
</span></span><span style="display:flex;"><span>X_filled <span style="color:#f92672">=</span> imputer<span style="color:#f92672">.</span>fit_transform(X, y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>scaler <span style="color:#f92672">=</span> StandardScaler()
</span></span><span style="display:flex;"><span>X_scaled <span style="color:#f92672">=</span> X_scaler<span style="color:#f92672">.</span>fit_transform(X_filled, y)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>est <span style="color:#f92672">=</span> LinearRegression()
</span></span><span style="display:flex;"><span>est<span style="color:#f92672">.</span>fit(X_scaled, y)
</span></span></code></pre></div><p>We set up each step, and manually pass the data through: <code>X -&gt; X_filled -&gt; X_scaled</code>.</p>
<p>The downside of this approach is that we now have to remember which
pre-processing steps we did, and in what order. The pipeline from raw data to
fit model is spread across multiple python objects. A better approach is to use
scikit-learn&rsquo;s <code>Pipeline</code> object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.pipeline <span style="color:#f92672">import</span> make_pipeline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> make_pipeline(
</span></span><span style="display:flex;"><span>    Imputer(strategy<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;median&#39;</span>),
</span></span><span style="display:flex;"><span>    StandardScaler(),
</span></span><span style="display:flex;"><span>    LinearRegression()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>pipe<span style="color:#f92672">.</span>fit(X, y)
</span></span></code></pre></div><p>Each step in the pipeline implements the <code>fit</code>, <code>transform</code>, and <code>fit_transform</code>
methods. Scikit-learn takes care of shepherding the data through the various
transforms, and finally to the estimator at the end. Pipelines have many
benefits but the main one for our purpose today is that it packages our entire
task into a single python object. Later on, our <code>predict</code> step will be a single
function call, which makes scaling out to the entire dataset extremely
convenient.</p>
<p>If you want more information on <code>Pipeline</code>s, check out the <a href="http://scikit-learn.org/stable/modules/pipeline.html#pipeline">scikit-learn
docs</a>, <a href="http://zacstewart.com/2014/08/05/pipelines-of-featureunions-of-pipelines.html">this blog</a> post, and my talk from
<a href="https://www.youtube.com/watch?v=KLPtEBokqQ0">PyData Chicago 2016</a>. We&rsquo;ll be implementing some custom ones,
which is <em>not</em> the point of this post. Don&rsquo;t get lost in the weeds here, I only
include this section for completeness.</p>
<h2 id="our-pipeline">Our Pipeline</h2>
<p>This isn&rsquo;t a perfectly clean dataset, which is nice because it gives us a chance
to demonstrate some pandas&rsquo; pre-processing prowess, before we hand the data
of to scikit-learn to fit the model.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.pipeline <span style="color:#f92672">import</span> make_pipeline
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We&#39;ll use FunctionTransformer for simple transforms</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.preprocessing <span style="color:#f92672">import</span> FunctionTransformer
</span></span><span style="display:flex;"><span><span style="color:#75715e"># TransformerMixin gives us fit_transform for free</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.base <span style="color:#f92672">import</span> TransformerMixin
</span></span></code></pre></div><p>There are some minor differences in the spelling on &ldquo;Payment Type&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>Payment_Type<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>categories
</span></span></code></pre></div><pre><code>Index(['CASH', 'CREDIT', 'Cash', 'Credit', 'Dispute', 'No Charge'], dtype='object')
</code></pre>
<p>We&rsquo;ll reconcile that by lower-casing everything with a <code>.str.lower()</code>. But
resist the temptation to just do that imperatively inplace! We&rsquo;ll package it up
into a function that will later be wrapped up in a <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.FunctionTransformer.html">FunctionTransformer</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">payment_lowerer</span>(X):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> X<span style="color:#f92672">.</span>assign(Payment_Type<span style="color:#f92672">=</span>X<span style="color:#f92672">.</span>Payment_Type<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>lower())
</span></span></code></pre></div><p>I should note here that I&rsquo;m using
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html"><code>.assign</code></a>
to update the variables since it implicitly copies the data. We don&rsquo;t want to
be modifying the caller&rsquo;s data without their consent.</p>
<p>Not all the columns look useful. We could have easily solved this by only
reading in the data that we&rsquo;re actually going to use, but let&rsquo;s solve it now
with another simple transformer:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ColumnSelector</span>(TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Select `columns` from `X`&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, columns):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> columns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> X[self<span style="color:#f92672">.</span>columns]
</span></span></code></pre></div><p>Internally, pandas stores <code>datetimes</code> like <code>Trip_Pickup_DateTime</code> as a 64-bit
integer representing the nanoseconds since some time in the 1600s. If we left
this untransformed, scikit-learn would happily transform that column to its
integer representation, which may not be the most meaningful item to stick in
a linear model for predicting tips. A better feature might the hour of the day:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HourExtractor</span>(TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Transform each datetime in `columns` to integer hour of the day&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, columns):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> columns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> X<span style="color:#f92672">.</span>assign(<span style="color:#f92672">**</span>{col: <span style="color:#66d9ef">lambda</span> x: x[col]<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>hour
</span></span><span style="display:flex;"><span>                           <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>columns})
</span></span></code></pre></div><p>Likewise, we&rsquo;ll need to ensure the categorical variables (in a statistical
sense) are categorical dtype (in a pandas sense). We want categoricals so that
we can call <code>get_dummies</code> later on without worrying about missing or extra
categories in a subset of the data throwing off our linear algebra (See my
<a href="https://www.youtube.com/watch?v=KLPtEBokqQ0">talk</a> for more details).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CategoricalEncoder</span>(TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Convert to Categorical with specific `categories`.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Examples
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    --------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &gt;&gt;&gt; CategoricalEncoder({&#34;A&#34;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]}).fit_transform(
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ...     pd.DataFrame({&#34;A&#34;: [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;a&#39;]})
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ... )[&#39;A&#39;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    0    a
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    1    b
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    2    a
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    3    a
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Name: A, dtype: category
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Categories (2, object): [a, b, c]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, categories):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>categories <span style="color:#f92672">=</span> categories
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        X <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> col, categories <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>categories<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>            X[col] <span style="color:#f92672">=</span> X[col]<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>set_categories(categories)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> X
</span></span></code></pre></div><p>Finally, we&rsquo;d like to normalize the quantitative subset of the data.
Scikit-learn has a <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html">StandardScaler</a>, which we&rsquo;ll mimic here, to just operate on
a subset of the columns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">StandardScaler</span>(TransformerMixin):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Scale a subset of the columns in a DataFrame&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, columns):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> columns
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fit</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Yes, non-ASCII symbols can be a valid identfiers in python 3</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>μs <span style="color:#f92672">=</span> X[self<span style="color:#f92672">.</span>columns]<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>σs <span style="color:#f92672">=</span> X[self<span style="color:#f92672">.</span>columns]<span style="color:#f92672">.</span>std()
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transform</span>(self, X, y<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        X <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>        X[self<span style="color:#f92672">.</span>columns] <span style="color:#f92672">=</span> X[self<span style="color:#f92672">.</span>columns]<span style="color:#f92672">.</span>sub(self<span style="color:#f92672">.</span>μs)<span style="color:#f92672">.</span>div(self<span style="color:#f92672">.</span>σs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> X
</span></span></code></pre></div><p>Side-note: I&rsquo;d like to repeat my desire for a library of <code>Transformers</code> that
work well on NumPy arrays, dask arrays, pandas <code>DataFrame</code>s and dask dataframes.
I think that&rsquo;d be a popular library. Essentially everything we&rsquo;ve written could
go in there and be imported.</p>
<p>Now we can build up the pipeline:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># The columns at the start of the pipeline</span>
</span></span><span style="display:flex;"><span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;vendor_name&#39;</span>, <span style="color:#e6db74">&#39;Trip_Pickup_DateTime&#39;</span>,
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#39;Passenger_Count&#39;</span>, <span style="color:#e6db74">&#39;Trip_Distance&#39;</span>,
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#39;Payment_Type&#39;</span>, <span style="color:#e6db74">&#39;Fare_Amt&#39;</span>, <span style="color:#e6db74">&#39;surcharge&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The mapping of {column: set of categories}</span>
</span></span><span style="display:flex;"><span>categories <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;vendor_name&#39;</span>: [<span style="color:#e6db74">&#39;CMT&#39;</span>, <span style="color:#e6db74">&#39;DDS&#39;</span>, <span style="color:#e6db74">&#39;VTS&#39;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Payment_Type&#39;</span>: [<span style="color:#e6db74">&#39;cash&#39;</span>, <span style="color:#e6db74">&#39;credit&#39;</span>, <span style="color:#e6db74">&#39;dispute&#39;</span>, <span style="color:#e6db74">&#39;no charge&#39;</span>],
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>scale <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Trip_Distance&#39;</span>, <span style="color:#e6db74">&#39;Fare_Amt&#39;</span>, <span style="color:#e6db74">&#39;surcharge&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> make_pipeline(
</span></span><span style="display:flex;"><span>    ColumnSelector(columns),
</span></span><span style="display:flex;"><span>    HourExtractor([<span style="color:#e6db74">&#39;Trip_Pickup_DateTime&#39;</span>]),
</span></span><span style="display:flex;"><span>    FunctionTransformer(payment_lowerer, validate<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>),
</span></span><span style="display:flex;"><span>    CategoricalEncoder(categories),
</span></span><span style="display:flex;"><span>    FunctionTransformer(pd<span style="color:#f92672">.</span>get_dummies, validate<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>),
</span></span><span style="display:flex;"><span>    StandardScaler(scale),
</span></span><span style="display:flex;"><span>    LogisticRegression(),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>pipe
</span></span></code></pre></div><pre><code>[('columnselector', &lt;__main__.ColumnSelector at 0x1a2c726d8&gt;),
 ('hourextractor', &lt;__main__.HourExtractor at 0x10dc72a90&gt;),
 ('functiontransformer-1', FunctionTransformer(accept_sparse=False,
           func=&lt;function payment_lowerer at 0x17e0d5510&gt;, inv_kw_args=None,
           inverse_func=None, kw_args=None, pass_y='deprecated',
           validate=False)),
 ('categoricalencoder', &lt;__main__.CategoricalEncoder at 0x11dd72f98&gt;),
 ('functiontransformer-2', FunctionTransformer(accept_sparse=False,
           func=&lt;function get_dummies at 0x10f43b0d0&gt;, inv_kw_args=None,
           inverse_func=None, kw_args=None, pass_y='deprecated',
           validate=False)),
 ('standardscaler', &lt;__main__.StandardScaler at 0x162580a90&gt;),
 ('logisticregression',
  LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
           intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
           penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
           verbose=0, warm_start=False))]
</code></pre>
<p>We can fit the pipeline as normal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>time pipe<span style="color:#f92672">.</span>fit(X_train, y_train)
</span></span></code></pre></div><p>This take about a minute on my laptop. We can check the accuracy (but again,
this isn&rsquo;t the point)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> pipe<span style="color:#f92672">.</span>score(X_train, y_train)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.9931</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> pipe<span style="color:#f92672">.</span>score(X_test, y_test)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.9931</span>
</span></span></code></pre></div><p>It turns out people essentially tip if and only if they&rsquo;re paying with a card,
so this isn&rsquo;t a particularly difficult task. Or perhaps more accurately, tips
are only <em>recorded</em> when someone pays with a card.</p>
<h2 id="scaling-out-with-dask">Scaling Out with Dask</h2>
<p>OK, so we&rsquo;ve fit our model and it&rsquo;s been basically normal. Maybe we&rsquo;ve been
overly-dogmatic about doing <em>everything</em> in a pipeline, but that&rsquo;s just good
model hygiene anyway.</p>
<p>Now, to scale out to the rest of the dataset. We&rsquo;ll predict the probability of
tipping for every cab ride in the dataset (bearing in mind that the full dataset
doesn&rsquo;t fit in my laptop&rsquo;s RAM, so we&rsquo;ll do it out-of-core).</p>
<p>To make things a bit easier we&rsquo;ll use dask, though it isn&rsquo;t strictly necessary
for this section. It saves us from writing a for loop (big whoop). Later on well
see that we can, reuse this code when we go to scale out to a cluster (that part
is pretty cool, actually). Dask can scale down to a single laptop, and up to
thousands of cores.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> dask.dataframe <span style="color:#66d9ef">as</span> dd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;data/*.csv&#34;</span>, dtype<span style="color:#f92672">=</span>dtype,
</span></span><span style="display:flex;"><span>                 parse_dates<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Trip_Pickup_DateTime&#39;</span>, <span style="color:#e6db74">&#39;Trip_Dropoff_DateTime&#39;</span>],)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#34;Tip_Amt&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p><code>X</code> is a <code>dask.dataframe</code>, which can be mostly be treated like a pandas
dataframe (internally, operations are done on many smaller dataframes). <code>X</code> has
about 170M rows (compared with the 14M for the training dataset).</p>
<p>Since scikit-learn isn&rsquo;t dask-aware, we can&rsquo;t simply call
<code>pipe.predict_proba(X)</code>. At some point, our <code>dask.dataframe</code> would be cast to a
<code>numpy.ndarray</code>, and our memory would blow up. Fortunately, dask has some nice
little escape hatches for dealing with functions that know how to operate on
NumPy arrays, but not dask objects. In this case, we&rsquo;ll use <code>map_partitions</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>yhat <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>map_partitions(<span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Series(pipe<span style="color:#f92672">.</span>predict_proba(x)[:, <span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>                                            name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;yhat&#39;</span>),
</span></span><span style="display:flex;"><span>                        meta<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;yhat&#39;</span>, <span style="color:#e6db74">&#39;f8&#39;</span>))
</span></span></code></pre></div><p><code>map_partitions</code> will go through each partition in your dataframe (one per
file), calling the function on each partition. Dask worries about stitching
together the result (though we provide a hint with the <code>meta</code> keyword, to say
that it&rsquo;s a <code>Series</code> with name <code>yhat</code> and dtype <code>f8</code>).</p>
<p>Now we can write it out to disk (using parquet rather than CSV, because CSVs are
evil).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>yhat<span style="color:#f92672">.</span>to_frame()<span style="color:#f92672">.</span>to_parquet(<span style="color:#e6db74">&#34;data/predictions.parq&#34;</span>)
</span></span></code></pre></div><p>This takes about 9 minutes to finish on my laptop.</p>
<h2 id="scaling-out-even-further">Scaling Out (even further)</h2>
<p>If 9 minutes is too long, and you happen to have a cluster sitting around, you
can repurpose that dask code to run on the <a href="http://distributed.readthedocs.io/en/latest/">distributed scheduler</a>. I&rsquo;ll use
<a href="https://github.com/dask/dask-kubernetes">dask-kubernetes</a>, to start up a cluster on Google Cloud Platform, but you could
also use <a href="https://github.com/dask/dask-ec2">dask-ec2</a> for AWS, or <a href="https://github.com/dask/dask-drmaa">dask-drmaa</a> or <a href="https://github.com/dask/dask-yarn">dask-yarn</a> if already have
access to a cluster from your business or institution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dask<span style="color:#f92672">-</span>kubernetes create scalable<span style="color:#f92672">-</span>ml
</span></span></code></pre></div><p>This sets up a cluster with 8 workers and 54 GB of memory.</p>
<p>The next part of this post is a bit fuzzy, since your teams will probably have
different procedures and infrastructure around persisting models. At my old job,
I wrote a small utility for serializing a scikit-learn model along with some
metadata about what it was trained on, before dumping it in S3. If you want to
be fancy, you should watch <a href="https://www.youtube.com/watch?v=vKU8MWORHP8">this talk</a>
by <a href="https://twitter.com/oceankidbilly">Rob Story</a> on how Stripe handles these things
(it&rsquo;s a bit more sophisticated than my &ldquo;dump it on S3&rdquo; script).</p>
<p>For this blog post, &ldquo;shipping it to prod&rdquo; consists of a <code>joblib.dump(pipe, &quot;taxi-model.pkl&quot;)</code> on our laptop, and copying it to somewhere the cluster can
load the file. Then on the cluster, we&rsquo;ll load it up, and create a <code>Client</code> to
communicate with our cluster&rsquo;s workers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> distributed <span style="color:#f92672">import</span> Client
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.externals <span style="color:#f92672">import</span> joblib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pipe <span style="color:#f92672">=</span> joblib<span style="color:#f92672">.</span>load(<span style="color:#e6db74">&#34;taxi-model.pkl&#34;</span>)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> Client(<span style="color:#e6db74">&#39;dask-scheduler:8786&#39;</span>)
</span></span></code></pre></div><p>Depending on how your cluster is set up, specifically with respect to having a
shared-file-system or not, the rest of the code is more-or-less identical. If
we&rsquo;re using S3 or Google Cloud Storage as our shared file system, we&rsquo;d modify
the loading code to read from S3 or GCS, rather than our local hard drive:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> dd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;s3://bucket/yellow_tripdata_2009*.csv&#34;</span>,
</span></span><span style="display:flex;"><span>                 dtype<span style="color:#f92672">=</span>dtype,
</span></span><span style="display:flex;"><span>                 parse_dates<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Trip_Pickup_DateTime&#39;</span>, <span style="color:#e6db74">&#39;Trip_Dropoff_DateTime&#39;</span>],
</span></span><span style="display:flex;"><span>                 storage_options<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;anon&#39;</span>: <span style="color:#66d9ef">True</span>})
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>persist(df)  <span style="color:#75715e"># persist the dataset in distributed memory</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#75715e"># across all the workers in the Dataset</span>
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#34;Tip_Amt&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;Tip_Amt&#39;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>Computing the predictions is identical to our out-of-core-on-my-laptop code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>yhat <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>map_partitions(<span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Series(pipe<span style="color:#f92672">.</span>predict_proba(x)[:, <span style="color:#ae81ff">1</span>], name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;yhat&#39;</span>),
</span></span><span style="display:flex;"><span>                        meta<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;yhat&#39;</span>, <span style="color:#e6db74">&#39;f8&#39;</span>))
</span></span></code></pre></div><p>And saving the data (say to S3) might look like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>yhat<span style="color:#f92672">.</span>to_parquet(<span style="color:#e6db74">&#34;s3://bucket/predictions.parq&#34;</span>)
</span></span></code></pre></div><p>The loading took about 4 minutes on the cluster, the predict about 10 seconds,
and the writing about 1 minute. Not bad overall.</p>
<h2 id="wrapup">Wrapup</h2>
<p>Today, we went into detail on what&rsquo;s potentially the first scaling problem
you&rsquo;ll hit with scikit-learn: you can train your dataset in-memory (on a laptop,
or a large workstation), but you have to predict on a much larger dataset.</p>
<p>We saw that the existing tools handle this case quite well. For training, we
followed best-practices and did everything inside a <code>Pipeline</code> object. For
predicting, we used <code>dask</code> to write regular pandas code that worked out-of-core
on my laptop or on a distributed cluster.</p>
<p>If this topic interests you, you should watch <a href="https://www.youtube.com/watch?v=KqKEttfQ_hE">this talk</a>
by <a href="https://twitter.com/stephenactual">Stephen Hoover</a> on how Civis is scaling scikit-learn.</p>
<p>In future posts we&rsquo;ll dig into</p>
<ul>
<li>how dask can speed up your existing pipelines by executing them in parallel</li>
<li>scikit-learn&rsquo;s out of core API for when your training dataset doesn&rsquo;t fit in
memory</li>
<li>using dask to implement distributed machine learning algorithms</li>
</ul>
<p>Until then I would <em>really</em> appreciate your feedback. My personal experience
using scikit-learn and pandas can&rsquo;t cover the diversity of use-cases they&rsquo;re
being thrown into. You can reach me on Twitter
<a href="https://twitter.com/TomAugspurger">@TomAugspurger</a> or by email at
<a href="mailto:tom.w.augspurger@gmail.com">mailto:tom.w.augspurger@gmail.com</a>. Thanks for reading!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>p &lt; .05&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>This is a bad example, since there could be a time-trend or seasonality to
the dataset. But our focus isn&rsquo;t on building a good model, I hope you&rsquo;ll
forgive me.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded></item><item><title>Dask Performace Trip</title><link>https://tomaugspurger.github.io/posts/dask-performance-story/</link><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dask-performance-story/</guid><description>I&amp;rsquo;m faced with a fairly specific problem: Compute the pairwise distances between two matrices $X$ and $Y$ as quickly as possible. We&amp;rsquo;ll assume that $Y$ is fairly small, but $X$ may not fit in memory. This post tracks my progress.</description><content:encoded><![CDATA[<p>I&rsquo;m faced with a fairly specific problem: Compute the pairwise distances between
two matrices $X$ and $Y$ as quickly as possible. We&rsquo;ll assume that $Y$ is fairly
small, but $X$ may not fit in memory. This post tracks my progress.</p>
]]></content:encoded></item><item><title>Introducing Stitch</title><link>https://tomaugspurger.github.io/posts/intro-stitch/</link><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/intro-stitch/</guid><description>Today I released stitch into the wild. If you haven&amp;rsquo;t yet, check out the examples page to see an example of what stitch does, and the Github repo for how to install. I&amp;rsquo;m using this post to explain why I wrote stitch, and some issues it tries to solve.
Why knitr / knitpy / stitch / RMarkdown? Each of these tools or formats have the same high-level goal: produce reproducible, dynamic (to changes in the data) reports.</description><content:encoded><![CDATA[<p>Today I released <a href="https://github.com/pystitch/stitch"><code>stitch</code></a> into the
wild. If you haven&rsquo;t yet, check out the <a href="https://pystitch.github.io">examples
page</a> to see an example of what stitch does,
and the <a href="https://github.com/pystitch/stitch">Github repo</a> for how to
install. I&rsquo;m using this post to explain why I wrote stitch, and some
issues it tries to solve.</p>
<h2 id="why-knitrhttpyihuinameknitr--knitpyhttpsgithubcomjanschulzknitpy--stitch--rmarkdownhttprmarkdownrstudiocom">Why <a href="http://yihui.name/knitr/">knitr</a> / <a href="https://github.com/janschulz/knitpy">knitpy</a> / stitch / <a href="http://rmarkdown.rstudio.com">RMarkdown</a>?</h2>
<p>Each of these tools or formats have the same high-level goal: produce
reproducible, dynamic (to changes in the data) reports. They take some
source document (typically markdown) that&rsquo;s a mixture of text and code
and convert it to a destination output (HTML, PDF, docx, etc.).</p>
<p>The main difference from something like pandoc, is that these tools
actually execute the code and interweave the output of the code back
into the document.</p>
<p>Reproducibility is something I care very deeply about. My workflow when
writing a report is typically</p>
<ul>
<li>prototype in the notebook or IPython REPL (data cleaning, modeling,
visualizing, repeat)</li>
<li>rewrite and cleanup those prototypes in a <code>.py</code> file that produces
one or more outputs (figure, table, parameter, etc.)</li>
<li>Write the prose contextualizing a figure or table in markdown</li>
<li>Source output artifacts (figure or table) when converting the
markdown to the final output</li>
</ul>
<p>This was fine, but had a lot of overhead, and separated the generated
report from the code itself (which is sometimes, but not always, what
you want).</p>
<p>Stitch aims to make this a simpler process. You (just) write your code
and results all in one file, and call</p>
<pre tabindex="0"><code>stitch input.md -o output.pdf
</code></pre><h2 id="why-not-jupyter-notebooks">Why not Jupyter Notebooks?</h2>
<p>A valid question, but I think misguided. I love the notebook, and I use
it every day for exploratory research. That said, there&rsquo;s a continuum
between all-text reports, and all-code reports. For reports that have a
higher ratio of <code>text:code</code>, I prefer writing in my comfortable
text-editor (yay spellcheck!) and using stitch / pandoc to compile the
document. For reports that have more <code>code:text</code>, or that are very early
on in their lifecycle, I prefer notebooks. Use the right tool for the
job.</p>
<p>When writing my <a href="https://leanpub.com/effective-pandas">pandas ebook</a>, I
had to <a href="https://github.com/TomAugspurger/modern-pandas/blob/master/Makefile">jump through
hoops</a>
to get from notebook source to final output (epub or PDF) that looked
OK. <a href="https://nbconvert.readthedocs.io">NBConvert</a> was essential to that
workflow, and I couldn&rsquo;t have done without it. I hope that the
stitch-based workflow is a bit smoother.</p>
<p>If a tool similar to <a href="https://github.com/podoc/podoc/">podoc</a> is
developed, then we can have transparent conversion between text-files
with executable blocks of code and notebooks. Living the dream.</p>
<h2 id="why-python">Why python?</h2>
<p>While RMarkdown / knitr are great (and way more usable than stitch at
this point), they&rsquo;re essentially only for R. The support for other
languages (last I checked) is limited to passing a code chunk into the
<code>python</code> command-line executable. All state is lost between code chunks.</p>
<p><em>Stitch supports any language that implements a Jupyter kernel</em>, which
is <a href="https://github.com/ipython/ipython/wiki/IPython-kernels-for-other-languages">a
lot</a>.</p>
<p>Additionally, when RStudio introduced <a href="http://rmarkdown.rstudio.com/r_notebooks.html">R
Notebooks</a>, they did so
with their own file format, rather than adopting the Jupyter notebook
format. I assume that they were aware of the choice when going their own
way, and made it for the right reasons. But for these types of tasks
(things creating documents) I prefer language-agnostic tools <em>where
possible</em>. It&rsquo;s certain that RMarkdown / knitr are better than stitch
right now for rendering <code>.Rmd</code> files. It&rsquo;s quite likely that they will
<em>always</em> be better at working with R than stitch; specialized tools
exist for a reason.</p>
<h2 id="misc">Misc.</h2>
<p>Stitch was heavily inspired by Jan Schulz&rsquo;s
<a href="https://github.com/janschulz/knitpy">knitpy</a>, so you might want to
check that out and see if it fits your needs better. Thanks to Jan for
giving guidance on difficulty areas he ran into when writing knitpy.</p>
<p>I wrote stitch in about three weeks of random nights and weekends I had
free. I stole time that from family or maintaining pandas. Thanks to my
wife and the pandas maintainers for picking up my slack.</p>
<p>The three week thing isn&rsquo;t a boast. It&rsquo;s a testament to the rich
libraries already available. Stitch simply would not exist if we
couldn&rsquo;t reuse</p>
<ul>
<li><a href="http://pandoc.org">pandoc</a> via
<a href="https://pypi.python.org/pypi/pypandoc">pypandoc</a> for parsing
markdown and converting to the destination output (and for
installing pandoc via conda-forge)</li>
<li><a href="http://jupyter.readthedocs.io/en/latest/">Jupyter</a> for providing
kernels as execution contexts and a
<a href="https://jupyter-client.readthedocs.io">client</a> for easily
communicating with them.</li>
<li><a href="https://github.com/jgm/pandocfilters">pandocfilters</a> for wrapping
code-chunk output</li>
</ul>
<p>And of course RMarkdown, knitr, and knitpy for proving that a library
like this is useful and giving a design that works.</p>
<p>Stitch is still extremely young. It could benefit from users trying it
out, and letting me know what&rsquo;s working and what isn&rsquo;t. Please do give
it a shot and let me know what you think.</p>
<p>© Tom Augspurger</p>
]]></content:encoded></item><item><title>Modern Pandas (Part 7): Timeseries</title><link>https://tomaugspurger.github.io/posts/modern-7-timeseries/</link><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-7-timeseries/</guid><description>This is part 7 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Timeseries Pandas started out in the financial world, so naturally it has strong timeseries support.
The first half of this post will look at pandas&amp;rsquo; capabilities for manipulating time series data. The second half will discuss modelling time series data with statsmodels.
%matplotlib inline import os import numpy as np import pandas as pd import pandas_datareader.</description><content:encoded><![CDATA[<hr>
<p>This is part 7 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<h1 id="timeseries">Timeseries</h1>
<p>Pandas started out in the financial world, so naturally it has strong timeseries support.</p>
<p>The first half of this post will look at pandas&rsquo; capabilities for manipulating time series data.
The second half will discuss modelling time series data with statsmodels.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas_datareader.data <span style="color:#66d9ef">as</span> web
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ticks&#39;</span>, context<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;talk&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> int(os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;MODERN_PANDAS_EPUB&#34;</span>, <span style="color:#ae81ff">0</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> prep <span style="color:#75715e"># noqa</span>
</span></span></code></pre></div><p>Let&rsquo;s grab some stock data for Goldman Sachs using the <a href="http://pandas-datareader.readthedocs.io/en/latest/"><code>pandas-datareader</code></a> package, which spun off of pandas:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>DataReader(<span style="color:#e6db74">&#34;GS&#34;</span>, data_source<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;yahoo&#39;</span>, start<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2006-01-01&#39;</span>,
</span></span><span style="display:flex;"><span>                    end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2010-01-01&#39;</span>)
</span></span><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>head()<span style="color:#f92672">.</span>round(<span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03</th>
      <td>126.70</td>
      <td>129.44</td>
      <td>124.23</td>
      <td>128.87</td>
      <td>112.34</td>
      <td>6188700</td>
    </tr>
    <tr>
      <th>2006-01-04</th>
      <td>127.35</td>
      <td>128.91</td>
      <td>126.38</td>
      <td>127.09</td>
      <td>110.79</td>
      <td>4861600</td>
    </tr>
    <tr>
      <th>2006-01-05</th>
      <td>126.00</td>
      <td>127.32</td>
      <td>125.61</td>
      <td>127.04</td>
      <td>110.74</td>
      <td>3717400</td>
    </tr>
    <tr>
      <th>2006-01-06</th>
      <td>127.29</td>
      <td>129.25</td>
      <td>127.29</td>
      <td>128.84</td>
      <td>112.31</td>
      <td>4319600</td>
    </tr>
    <tr>
      <th>2006-01-09</th>
      <td>128.50</td>
      <td>130.62</td>
      <td>128.00</td>
      <td>130.39</td>
      <td>113.66</td>
      <td>4723500</td>
    </tr>
  </tbody>
</table>
</div>
<p>There isn&rsquo;t a special data-container just for time series in pandas, they&rsquo;re just <code>Series</code> or <code>DataFrame</code>s with a <code>DatetimeIndex</code>.</p>
<h2 id="special-slicing">Special Slicing</h2>
<p>Looking at the elements of <code>gs.index</code>, we see that <code>DatetimeIndex</code>es are made up of <code>pandas.Timestamp</code>s:</p>
<p>Looking at the elements of <code>gs.index</code>, we see that <code>DatetimeIndex</code>es are made up of <code>pandas.Timestamp</code>s:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>index[<span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><pre><code>Timestamp('2006-01-03 00:00:00')
</code></pre>
<p>A <code>Timestamp</code> is mostly compatible with the <code>datetime.datetime</code> class, but much amenable to storage in arrays.</p>
<p>Working with <code>Timestamp</code>s can be awkward, so Series and DataFrames with <code>DatetimeIndexes</code> have some special slicing rules.
The first special case is <em>partial-string indexing</em>. Say we wanted to select all the days in 2006. Even with <code>Timestamp</code>&rsquo;s convenient constructors, it&rsquo;s a pai</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>loc[pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2006-01-01&#39;</span>):pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2006-12-31&#39;</span>)]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03</th>
      <td>126.699997</td>
      <td>129.440002</td>
      <td>124.230003</td>
      <td>128.869995</td>
      <td>112.337547</td>
      <td>6188700</td>
    </tr>
    <tr>
      <th>2006-01-04</th>
      <td>127.349998</td>
      <td>128.910004</td>
      <td>126.379997</td>
      <td>127.089996</td>
      <td>110.785889</td>
      <td>4861600</td>
    </tr>
    <tr>
      <th>2006-01-05</th>
      <td>126.000000</td>
      <td>127.320000</td>
      <td>125.610001</td>
      <td>127.040001</td>
      <td>110.742340</td>
      <td>3717400</td>
    </tr>
    <tr>
      <th>2006-01-06</th>
      <td>127.290001</td>
      <td>129.250000</td>
      <td>127.290001</td>
      <td>128.839996</td>
      <td>112.311401</td>
      <td>4319600</td>
    </tr>
    <tr>
      <th>2006-01-09</th>
      <td>128.500000</td>
      <td>130.619995</td>
      <td>128.000000</td>
      <td>130.389999</td>
      <td>113.662605</td>
      <td>4723500</td>
    </tr>
  </tbody>
</table>
</div>
<p>Thanks to partial-string indexing, it&rsquo;s as simple as</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>loc[<span style="color:#e6db74">&#39;2006&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03</th>
      <td>126.699997</td>
      <td>129.440002</td>
      <td>124.230003</td>
      <td>128.869995</td>
      <td>112.337547</td>
      <td>6188700</td>
    </tr>
    <tr>
      <th>2006-01-04</th>
      <td>127.349998</td>
      <td>128.910004</td>
      <td>126.379997</td>
      <td>127.089996</td>
      <td>110.785889</td>
      <td>4861600</td>
    </tr>
    <tr>
      <th>2006-01-05</th>
      <td>126.000000</td>
      <td>127.320000</td>
      <td>125.610001</td>
      <td>127.040001</td>
      <td>110.742340</td>
      <td>3717400</td>
    </tr>
    <tr>
      <th>2006-01-06</th>
      <td>127.290001</td>
      <td>129.250000</td>
      <td>127.290001</td>
      <td>128.839996</td>
      <td>112.311401</td>
      <td>4319600</td>
    </tr>
    <tr>
      <th>2006-01-09</th>
      <td>128.500000</td>
      <td>130.619995</td>
      <td>128.000000</td>
      <td>130.389999</td>
      <td>113.662605</td>
      <td>4723500</td>
    </tr>
  </tbody>
</table>
</div>
<p>Since label slicing is inclusive, this slice selects any observation where the year is 2006.</p>
<p>The second &ldquo;convenience&rdquo; is <code>__getitem__</code> (square-bracket) fall-back indexing. I&rsquo;m only going to mention it here, with the caveat that you should never use it.
DataFrame <code>__getitem__</code> typically looks in the column: <code>gs['2006']</code> would search <code>gs.columns</code> for <code>'2006'</code>, not find it, and raise a <code>KeyError</code>. But DataFrames with a <code>DatetimeIndex</code> catch that <code>KeyError</code> and try to slice the index.
If it succeeds in slicing the index, the result like <code>gs.loc['2006']</code> is returned.
If it fails, the <code>KeyError</code> is re-raised.
This is confusing because in pretty much every other case <code>DataFrame.__getitem__</code> works on columns, and it&rsquo;s fragile because if you happened to have a column <code>'2006'</code> you <em>would</em> get just that column, and no fall-back indexing would occur. Just use <code>gs.loc['2006']</code> when slicing DataFrame indexes.</p>
<h2 id="special-methods">Special Methods</h2>
<h3 id="resampling">Resampling</h3>
<p>Resampling is similar to a <code>groupby</code>: you split the time series into groups (5-day buckets below), apply a function to each group (<code>mean</code>), and combine the result (one row per group).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#34;5d&#34;</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03</th>
      <td>126.834999</td>
      <td>128.730002</td>
      <td>125.877501</td>
      <td>127.959997</td>
      <td>111.544294</td>
      <td>4.771825e+06</td>
    </tr>
    <tr>
      <th>2006-01-08</th>
      <td>130.349998</td>
      <td>132.645000</td>
      <td>130.205002</td>
      <td>131.660000</td>
      <td>114.769649</td>
      <td>4.664300e+06</td>
    </tr>
    <tr>
      <th>2006-01-13</th>
      <td>131.510002</td>
      <td>133.395005</td>
      <td>131.244995</td>
      <td>132.924995</td>
      <td>115.872357</td>
      <td>3.258250e+06</td>
    </tr>
    <tr>
      <th>2006-01-18</th>
      <td>132.210002</td>
      <td>133.853333</td>
      <td>131.656667</td>
      <td>132.543335</td>
      <td>115.611125</td>
      <td>4.997767e+06</td>
    </tr>
    <tr>
      <th>2006-01-23</th>
      <td>133.771997</td>
      <td>136.083997</td>
      <td>133.310001</td>
      <td>135.153998</td>
      <td>118.035918</td>
      <td>3.968500e+06</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#34;W&#34;</span>)<span style="color:#f92672">.</span>agg([<span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;sum&#39;</span>])<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">Open</th>
      <th colspan="2" halign="left">High</th>
      <th colspan="2" halign="left">Low</th>
      <th colspan="2" halign="left">Close</th>
      <th colspan="2" halign="left">Adj Close</th>
      <th colspan="2" halign="left">Volume</th>
    </tr>
    <tr>
      <th></th>
      <th>mean</th>
      <th>sum</th>
      <th>mean</th>
      <th>sum</th>
      <th>mean</th>
      <th>sum</th>
      <th>mean</th>
      <th>sum</th>
      <th>mean</th>
      <th>sum</th>
      <th>mean</th>
      <th>sum</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-08</th>
      <td>126.834999</td>
      <td>507.339996</td>
      <td>128.730002</td>
      <td>514.920006</td>
      <td>125.877501</td>
      <td>503.510002</td>
      <td>127.959997</td>
      <td>511.839988</td>
      <td>111.544294</td>
      <td>446.177177</td>
      <td>4771825.0</td>
      <td>19087300</td>
    </tr>
    <tr>
      <th>2006-01-15</th>
      <td>130.684000</td>
      <td>653.419998</td>
      <td>132.848001</td>
      <td>664.240006</td>
      <td>130.544000</td>
      <td>652.720001</td>
      <td>131.979999</td>
      <td>659.899994</td>
      <td>115.048592</td>
      <td>575.242958</td>
      <td>4310420.0</td>
      <td>21552100</td>
    </tr>
    <tr>
      <th>2006-01-22</th>
      <td>131.907501</td>
      <td>527.630005</td>
      <td>133.672501</td>
      <td>534.690003</td>
      <td>131.389999</td>
      <td>525.559998</td>
      <td>132.555000</td>
      <td>530.220000</td>
      <td>115.603432</td>
      <td>462.413728</td>
      <td>4653725.0</td>
      <td>18614900</td>
    </tr>
    <tr>
      <th>2006-01-29</th>
      <td>133.771997</td>
      <td>668.859986</td>
      <td>136.083997</td>
      <td>680.419983</td>
      <td>133.310001</td>
      <td>666.550003</td>
      <td>135.153998</td>
      <td>675.769989</td>
      <td>118.035918</td>
      <td>590.179588</td>
      <td>3968500.0</td>
      <td>19842500</td>
    </tr>
    <tr>
      <th>2006-02-05</th>
      <td>140.900000</td>
      <td>704.500000</td>
      <td>142.467999</td>
      <td>712.339996</td>
      <td>139.937998</td>
      <td>699.689988</td>
      <td>141.618002</td>
      <td>708.090011</td>
      <td>123.681204</td>
      <td>618.406020</td>
      <td>3920120.0</td>
      <td>19600600</td>
    </tr>
  </tbody>
</table>
</div>
<p>You can up-sample to convert to a higher frequency.
The new points are filled with NaNs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#34;6H&#34;</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03 00:00:00</th>
      <td>126.699997</td>
      <td>129.440002</td>
      <td>124.230003</td>
      <td>128.869995</td>
      <td>112.337547</td>
      <td>6188700.0</td>
    </tr>
    <tr>
      <th>2006-01-03 06:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2006-01-03 12:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2006-01-03 18:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2006-01-04 00:00:00</th>
      <td>127.349998</td>
      <td>128.910004</td>
      <td>126.379997</td>
      <td>127.089996</td>
      <td>110.785889</td>
      <td>4861600.0</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="rolling--expanding--ew">Rolling / Expanding / EW</h3>
<p>These methods aren&rsquo;t unique to <code>DatetimeIndex</code>es, but they often make sense with time series, so I&rsquo;ll show them here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>Close<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Raw&#39;</span>)
</span></span><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>Close<span style="color:#f92672">.</span>rolling(<span style="color:#ae81ff">28</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;28D MA&#39;</span>)
</span></span><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>Close<span style="color:#f92672">.</span>expanding()<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Expanding Average&#39;</span>)
</span></span><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>Close<span style="color:#f92672">.</span>ewm(alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.03</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;EWMA($</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">alpha=.03$)&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend(bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1.25</span>, <span style="color:#ae81ff">.5</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#34;Close ($)&#34;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_23_0.png" alt="png"  />
</p>
<p>Each of <code>.rolling</code>, <code>.expanding</code>, and <code>.ewm</code> return a deferred object, similar to a GroupBy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>roll <span style="color:#f92672">=</span> gs<span style="color:#f92672">.</span>Close<span style="color:#f92672">.</span>rolling(<span style="color:#ae81ff">30</span>, center<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>roll
</span></span></code></pre></div><pre><code>Rolling [window=30,center=True,axis=0]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m <span style="color:#f92672">=</span> roll<span style="color:#f92672">.</span>agg([<span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;std&#39;</span>])
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> m[<span style="color:#e6db74">&#39;mean&#39;</span>]<span style="color:#f92672">.</span>plot()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>fill_between(m<span style="color:#f92672">.</span>index, m[<span style="color:#e6db74">&#39;mean&#39;</span>] <span style="color:#f92672">-</span> m[<span style="color:#e6db74">&#39;std&#39;</span>], m[<span style="color:#e6db74">&#39;mean&#39;</span>] <span style="color:#f92672">+</span> m[<span style="color:#e6db74">&#39;std&#39;</span>],
</span></span><span style="display:flex;"><span>                alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.25</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#34;Close ($)&#34;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_26_0.png" alt="png"  />
</p>
<h2 id="grab-bag">Grab Bag</h2>
<h3 id="offsets">Offsets</h3>
<p>These are similar to <code>dateutil.relativedelta</code>, but works with arrays.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>index <span style="color:#f92672">+</span> pd<span style="color:#f92672">.</span>DateOffset(months<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, days<span style="color:#f92672">=-</span><span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><pre><code>DatetimeIndex(['2006-04-01', '2006-04-02', '2006-04-03', '2006-04-04',
               '2006-04-07', '2006-04-08', '2006-04-09', '2006-04-10',
               '2006-04-11', '2006-04-15',
               ...
               '2010-03-15', '2010-03-16', '2010-03-19', '2010-03-20',
               '2010-03-21', '2010-03-22', '2010-03-26', '2010-03-27',
               '2010-03-28', '2010-03-29'],
              dtype='datetime64[ns]', name='Date', length=1007, freq=None)
</code></pre>
<h3 id="holiday-calendars">Holiday Calendars</h3>
<p>There are a whole bunch of special calendars, useful for traders probabaly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pandas.tseries.holiday <span style="color:#f92672">import</span> USColumbusDay
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>USColumbusDay<span style="color:#f92672">.</span>dates(<span style="color:#e6db74">&#39;2015-01-01&#39;</span>, <span style="color:#e6db74">&#39;2020-01-01&#39;</span>)
</span></span></code></pre></div><pre><code>DatetimeIndex(['2015-10-12', '2016-10-10', '2017-10-09', '2018-10-08',
               '2019-10-14'],
              dtype='datetime64[ns]', freq='WOM-2MON')
</code></pre>
<h3 id="timezones">Timezones</h3>
<p>Pandas works with <code>pytz</code> for nice timezone-aware datetimes.
The typical workflow is</p>
<ol>
<li>localize timezone-naive timestamps to some timezone</li>
<li>convert to desired timezone</li>
</ol>
<p>If you already have timezone-aware Timestamps, there&rsquo;s no need for step one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># tz naiive -&gt; tz aware..... to desired UTC</span>
</span></span><span style="display:flex;"><span>gs<span style="color:#f92672">.</span>tz_localize(<span style="color:#e6db74">&#39;US/Eastern&#39;</span>)<span style="color:#f92672">.</span>tz_convert(<span style="color:#e6db74">&#39;UTC&#39;</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2006-01-03 05:00:00+00:00</th>
      <td>126.699997</td>
      <td>129.440002</td>
      <td>124.230003</td>
      <td>128.869995</td>
      <td>112.337547</td>
      <td>6188700</td>
    </tr>
    <tr>
      <th>2006-01-04 05:00:00+00:00</th>
      <td>127.349998</td>
      <td>128.910004</td>
      <td>126.379997</td>
      <td>127.089996</td>
      <td>110.785889</td>
      <td>4861600</td>
    </tr>
    <tr>
      <th>2006-01-05 05:00:00+00:00</th>
      <td>126.000000</td>
      <td>127.320000</td>
      <td>125.610001</td>
      <td>127.040001</td>
      <td>110.742340</td>
      <td>3717400</td>
    </tr>
    <tr>
      <th>2006-01-06 05:00:00+00:00</th>
      <td>127.290001</td>
      <td>129.250000</td>
      <td>127.290001</td>
      <td>128.839996</td>
      <td>112.311401</td>
      <td>4319600</td>
    </tr>
    <tr>
      <th>2006-01-09 05:00:00+00:00</th>
      <td>128.500000</td>
      <td>130.619995</td>
      <td>128.000000</td>
      <td>130.389999</td>
      <td>113.662605</td>
      <td>4723500</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="modeling-time-series">Modeling Time Series</h2>
<p>The rest of this post will focus on time series in the econometric sense.
My indented reader for this section isn&rsquo;t all that clear, so I apologize upfront for any sudden shifts in complexity.
I&rsquo;m roughly targeting material that could be presented in a first or second semester applied statisctics course.
What follows certainly isn&rsquo;t a replacement for that.
Any formality will be restricted to footnotes for the curious.
I&rsquo;ve put a whole bunch of resources at the end for people earger to learn more.</p>
<p>We&rsquo;ll focus on modelling Average Monthly Flights. Let&rsquo;s download the data.
If you&rsquo;ve been following along in the series, you&rsquo;ve seen most of this code before, so feel free to skip.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> io
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> glob
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> zipfile
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> utils <span style="color:#f92672">import</span> download_timeseries
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.api <span style="color:#66d9ef">as</span> sm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">download_many</span>(start, end):
</span></span><span style="display:flex;"><span>    months <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>period_range(start, end<span style="color:#f92672">=</span>end, freq<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;M&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We could easily parallelize this loop.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, month <span style="color:#f92672">in</span> enumerate(months):
</span></span><span style="display:flex;"><span>        download_timeseries(month)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">time_to_datetime</span>(df, columns):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Combine all time items into datetimes.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    2014-01-01,1149.0 -&gt; 2014-01-01T11:49:00
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">converter</span>(col):
</span></span><span style="display:flex;"><span>        timepart <span style="color:#f92672">=</span> (col<span style="color:#f92672">.</span>astype(str)
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;\.0$&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)  <span style="color:#75715e"># NaNs force float dtype</span>
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>pad(<span style="color:#ae81ff">4</span>, fillchar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0&#39;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>  pd<span style="color:#f92672">.</span>to_datetime(df[<span style="color:#e6db74">&#39;fl_date&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>),
</span></span><span style="display:flex;"><span>                               errors<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;coerce&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> datetime_part
</span></span><span style="display:flex;"><span>    df[columns] <span style="color:#f92672">=</span> df[columns]<span style="color:#f92672">.</span>apply(converter)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_one</span>(fp):
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(fp, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;latin1&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>str<span style="color:#f92672">.</span>lower)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#39;unnamed: 6&#39;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>pipe(time_to_datetime, [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;arr_time&#39;</span>, <span style="color:#e6db74">&#39;crs_arr_time&#39;</span>,
</span></span><span style="display:flex;"><span>                                     <span style="color:#e6db74">&#39;crs_dep_time&#39;</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>assign(fl_date<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>to_datetime(x[<span style="color:#e6db74">&#39;fl_date&#39;</span>])))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span></code></pre></div><pre><code>/Users/taugspurger/miniconda3/envs/modern-pandas/lib/python3.6/site-packages/statsmodels/compat/pandas.py:56: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.
  from pandas.core import datetools
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>store <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data/ts.hdf5&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(store):
</span></span><span style="display:flex;"><span>    download_many(<span style="color:#e6db74">&#39;2000-01-01&#39;</span>, <span style="color:#e6db74">&#39;2016-01-01&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    zips <span style="color:#f92672">=</span> glob<span style="color:#f92672">.</span>glob(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;data&#39;</span>, <span style="color:#e6db74">&#39;timeseries&#39;</span>, <span style="color:#e6db74">&#39;*.zip&#39;</span>))
</span></span><span style="display:flex;"><span>    csvs <span style="color:#f92672">=</span> [unzip_one(fp) <span style="color:#66d9ef">for</span> fp <span style="color:#f92672">in</span> zips]
</span></span><span style="display:flex;"><span>    dfs <span style="color:#f92672">=</span> [read_one(fp) <span style="color:#66d9ef">for</span> fp <span style="color:#f92672">in</span> csvs]
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat(dfs, ignore_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;origin&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;origin&#39;</span>]<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)
</span></span><span style="display:flex;"><span>    df<span style="color:#f92672">.</span>to_hdf(store, <span style="color:#e6db74">&#39;ts&#39;</span>, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(store, <span style="color:#e6db74">&#39;ts&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> pd<span style="color:#f92672">.</span>option_context(<span style="color:#e6db74">&#39;display.max_rows&#39;</span>, <span style="color:#ae81ff">100</span>):
</span></span><span style="display:flex;"><span>    print(df<span style="color:#f92672">.</span>dtypes)
</span></span></code></pre></div><pre><code>fl_date         datetime64[ns]
origin                category
crs_dep_time    datetime64[ns]
dep_time        datetime64[ns]
crs_arr_time    datetime64[ns]
arr_time        datetime64[ns]
dtype: object
</code></pre>
<p>We can calculate the historical values with a resample.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>daily <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>fl_date<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> daily<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#39;MS&#39;</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>y<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>2000-01-01    15176.677419
2000-02-01    15327.551724
2000-03-01    15578.838710
2000-04-01    15442.100000
2000-05-01    15448.677419
Freq: MS, Name: fl_date, dtype: float64
</code></pre>
<p>Note that I use the <code>&quot;MS&quot;</code> frequency code there.
Pandas defaults to end of month (or end of year).
Append an <code>'S'</code> to get the start.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>plot()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(ylabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Average Monthly Flights&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_41_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.formula.api <span style="color:#66d9ef">as</span> smf
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.tsa.api <span style="color:#66d9ef">as</span> smt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.api <span style="color:#66d9ef">as</span> sm
</span></span></code></pre></div><p>One note of warning: I&rsquo;m using the development version of statsmodels (commit <code>de15ec8</code> to be precise).
Not all of the items I&rsquo;ve shown here are available in the currently-released version.</p>
<p>Think back to a typical regression problem, ignoring anything to do with time series for now.
The usual task is to predict some value $y$ using some a linear combination of features in $X$.</p>
<p>$$y = \beta_0 + \beta_1 X_1 + \ldots + \beta_p X_p + \epsilon$$</p>
<p>When working with time series, some of the most important (and sometimes <em>only</em>) features are the previous, or <em>lagged</em>, values of $y$.</p>
<p>Let&rsquo;s start by trying just that &ldquo;manually&rdquo;: running a regression of <code>y</code> on lagged values of itself.
We&rsquo;ll see that this regression suffers from a few problems: multicollinearity, autocorrelation, non-stationarity, and seasonality.
I&rsquo;ll explain what each of those are in turn and why they&rsquo;re problems.
Afterwards, we&rsquo;ll use a second model, seasonal ARIMA, which handles those problems for us.</p>
<p>First, let&rsquo;s create a dataframe with our lagged values of <code>y</code> using the <code>.shift</code> method, which shifts the index <code>i</code> periods, so it lines up with that observation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>X <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>concat([y<span style="color:#f92672">.</span>shift(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">6</span>)], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>               keys<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;y&#39;</span>] <span style="color:#f92672">+</span> [<span style="color:#e6db74">&#39;L</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>)])
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">.</span>dropna())
</span></span><span style="display:flex;"><span>X<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>y</th>
      <th>L1</th>
      <th>L2</th>
      <th>L3</th>
      <th>L4</th>
      <th>L5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-06-01</th>
      <td>15703.333333</td>
      <td>15448.677419</td>
      <td>15442.100000</td>
      <td>15578.838710</td>
      <td>15327.551724</td>
      <td>15176.677419</td>
    </tr>
    <tr>
      <th>2000-07-01</th>
      <td>15591.677419</td>
      <td>15703.333333</td>
      <td>15448.677419</td>
      <td>15442.100000</td>
      <td>15578.838710</td>
      <td>15327.551724</td>
    </tr>
    <tr>
      <th>2000-08-01</th>
      <td>15850.516129</td>
      <td>15591.677419</td>
      <td>15703.333333</td>
      <td>15448.677419</td>
      <td>15442.100000</td>
      <td>15578.838710</td>
    </tr>
    <tr>
      <th>2000-09-01</th>
      <td>15436.566667</td>
      <td>15850.516129</td>
      <td>15591.677419</td>
      <td>15703.333333</td>
      <td>15448.677419</td>
      <td>15442.100000</td>
    </tr>
    <tr>
      <th>2000-10-01</th>
      <td>15669.709677</td>
      <td>15436.566667</td>
      <td>15850.516129</td>
      <td>15591.677419</td>
      <td>15703.333333</td>
      <td>15448.677419</td>
    </tr>
  </tbody>
</table>
</div>
<p>We can fit the lagged model using statsmodels (which uses <a href="http://patsy.readthedocs.org">patsy</a> to translate the formula string to a design matrix).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod_lagged <span style="color:#f92672">=</span> smf<span style="color:#f92672">.</span>ols(<span style="color:#e6db74">&#39;y ~ trend + L1 + L2 + L3 + L4 + L5&#39;</span>,
</span></span><span style="display:flex;"><span>                     data<span style="color:#f92672">=</span>X<span style="color:#f92672">.</span>assign(trend<span style="color:#f92672">=</span>np<span style="color:#f92672">.</span>arange(len(X))))
</span></span><span style="display:flex;"><span>res_lagged <span style="color:#f92672">=</span> mod_lagged<span style="color:#f92672">.</span>fit()
</span></span><span style="display:flex;"><span>res_lagged<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><table class="simpletable">
<caption>OLS Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>            <td>y</td>        <th>  R-squared:         </th> <td>   0.896</td>
</tr>
<tr>
  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.893</td>
</tr>
<tr>
  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   261.1</td>
</tr>
<tr>
  <th>Date:</th>             <td>Sun, 03 Sep 2017</td> <th>  Prob (F-statistic):</th> <td>2.61e-86</td>
</tr>
<tr>
  <th>Time:</th>                 <td>11:21:46</td>     <th>  Log-Likelihood:    </th> <td> -1461.2</td>
</tr>
<tr>
  <th>No. Observations:</th>      <td>   188</td>      <th>  AIC:               </th> <td>   2936.</td>
</tr>
<tr>
  <th>Df Residuals:</th>          <td>   181</td>      <th>  BIC:               </th> <td>   2959.</td>
</tr>
<tr>
  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   
</tr>
<tr>
  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   
</tr>
</table>
<table class="simpletable">
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>Intercept</th> <td> 1055.4443</td> <td>  459.096</td> <td>    2.299</td> <td> 0.023</td> <td>  149.575</td> <td> 1961.314</td>
</tr>
<tr>
  <th>trend</th>     <td>   -1.0395</td> <td>    0.795</td> <td>   -1.307</td> <td> 0.193</td> <td>   -2.609</td> <td>    0.530</td>
</tr>
<tr>
  <th>L1</th>        <td>    1.0143</td> <td>    0.075</td> <td>   13.543</td> <td> 0.000</td> <td>    0.867</td> <td>    1.162</td>
</tr>
<tr>
  <th>L2</th>        <td>   -0.0769</td> <td>    0.106</td> <td>   -0.725</td> <td> 0.470</td> <td>   -0.286</td> <td>    0.133</td>
</tr>
<tr>
  <th>L3</th>        <td>   -0.0666</td> <td>    0.106</td> <td>   -0.627</td> <td> 0.531</td> <td>   -0.276</td> <td>    0.143</td>
</tr>
<tr>
  <th>L4</th>        <td>    0.1311</td> <td>    0.106</td> <td>    1.235</td> <td> 0.219</td> <td>   -0.078</td> <td>    0.341</td>
</tr>
<tr>
  <th>L5</th>        <td>   -0.0567</td> <td>    0.075</td> <td>   -0.758</td> <td> 0.449</td> <td>   -0.204</td> <td>    0.091</td>
</tr>
</table>
<table class="simpletable">
<tr>
  <th>Omnibus:</th>       <td>74.709</td> <th>  Durbin-Watson:     </th> <td>   1.979</td> 
</tr>
<tr>
  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 851.300</td> 
</tr>
<tr>
  <th>Skew:</th>          <td> 1.114</td> <th>  Prob(JB):          </th> <td>1.39e-185</td>
</tr>
<tr>
  <th>Kurtosis:</th>      <td>13.184</td> <th>  Cond. No.          </th> <td>4.24e+05</td> 
</tr>
</table>
<p>There are a few problems with this approach though.
Since our lagged values are highly correlated with each other, our regression suffers from <a href="https://en.wikipedia.org/wiki/Multicollinearity">multicollinearity</a>.
That ruins our estimates of the slopes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>heatmap(X<span style="color:#f92672">.</span>corr());
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_48_0.png" alt="png"  />
</p>
<p>Second, we&rsquo;d intuitively expect the $\beta_i$s to gradually decline to zero.
The immediately preceding period <em>should</em> be most important ($\beta_1$ is the largest coefficient in absolute value), followed by $\beta_2$, and $\beta_3$&hellip;
Looking at the regression summary and the bar graph below, this isn&rsquo;t the case (the cause is related to multicollinearity).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> res_lagged<span style="color:#f92672">.</span>params<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Intercept&#39;</span>, <span style="color:#e6db74">&#39;trend&#39;</span>])<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>bar(rot<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Coefficeint&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_50_0.png" alt="png"  />
</p>
<p>Finally, our degrees of freedom drop since we lose two for each variable (one for estimating the coefficient, one for the lost observation as a result of the <code>shift</code>).
At least in (macro)econometrics, each observation is precious and we&rsquo;re loath to throw them away, though sometimes that&rsquo;s unavoidable.</p>
<h3 id="autocorrelation">Autocorrelation</h3>
<p>Another problem our lagged model suffered from is <a href="https://en.wikipedia.org/wiki/Autocorrelation">autocorrelation</a> (also know as serial correlation).
Roughly speaking, autocorrelation is when there&rsquo;s a clear pattern in the residuals of your regression (the observed minus the predicted).
Let&rsquo;s fit a simple model of $y = \beta_0 + \beta_1 T + \epsilon$, where <code>T</code> is the time trend (<code>np.arange(len(y))</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># `Results.resid` is a Series of residuals: y - ŷ</span>
</span></span><span style="display:flex;"><span>mod_trend <span style="color:#f92672">=</span> sm<span style="color:#f92672">.</span>OLS<span style="color:#f92672">.</span>from_formula(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;y ~ trend&#39;</span>, data<span style="color:#f92672">=</span>y<span style="color:#f92672">.</span>to_frame(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>assign(trend<span style="color:#f92672">=</span>np<span style="color:#f92672">.</span>arange(len(y))))
</span></span><span style="display:flex;"><span>res_trend <span style="color:#f92672">=</span> mod_trend<span style="color:#f92672">.</span>fit()
</span></span></code></pre></div><p>Residuals (the observed minus the expected, or $\hat{e_t} = y_t - \hat{y_t}$) are supposed to be <a href="https://en.wikipedia.org/wiki/White_noise">white noise</a>.
That&rsquo;s <a href="https://en.wikipedia.org/wiki/Gauss%E2%80%93Markov_theorem">one of the assumptions</a> many of the properties of linear regression are founded upon.
In this case there&rsquo;s a correlation between one residual and the next: if the residual at time $t$ was above expectation, then the residual at time $t + 1$ is <em>much</em> more likely to be above average as well ($e_t &gt; 0 \implies E_t[e_{t+1}] &gt; 0$).</p>
<p>We&rsquo;ll define a helper function to plot the residuals time series, and some diagnostics about them.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tsplot</span>(y, lags<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">8</span>)):
</span></span><span style="display:flex;"><span>    fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>figsize)
</span></span><span style="display:flex;"><span>    layout <span style="color:#f92672">=</span> (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    ts_ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplot2grid(layout, (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>), colspan<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    acf_ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplot2grid(layout, (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>    pacf_ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplot2grid(layout, (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    y<span style="color:#f92672">.</span>plot(ax<span style="color:#f92672">=</span>ts_ax)
</span></span><span style="display:flex;"><span>    smt<span style="color:#f92672">.</span>graphics<span style="color:#f92672">.</span>plot_acf(y, lags<span style="color:#f92672">=</span>lags, ax<span style="color:#f92672">=</span>acf_ax)
</span></span><span style="display:flex;"><span>    smt<span style="color:#f92672">.</span>graphics<span style="color:#f92672">.</span>plot_pacf(y, lags<span style="color:#f92672">=</span>lags, ax<span style="color:#f92672">=</span>pacf_ax)
</span></span><span style="display:flex;"><span>    [ax<span style="color:#f92672">.</span>set_xlim(<span style="color:#ae81ff">1.5</span>) <span style="color:#66d9ef">for</span> ax <span style="color:#f92672">in</span> [acf_ax, pacf_ax]]
</span></span><span style="display:flex;"><span>    sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>    plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ts_ax, acf_ax, pacf_ax
</span></span></code></pre></div><p>Calling it on the residuals from the linear trend:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tsplot(res_trend<span style="color:#f92672">.</span>resid, lags<span style="color:#f92672">=</span><span style="color:#ae81ff">36</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_58_0.png" alt="png"  />
</p>
<p>The top subplot shows the time series of our residuals $e_t$, which should be white noise (but it isn&rsquo;t).
The bottom shows the <a href="https://www.otexts.org/fpp/2/2#autocorrelation">autocorrelation</a> of the residuals as a correlogram.
It measures the correlation between a value and it&rsquo;s lagged self, e.g. $corr(e_t, e_{t-1}), corr(e_t, e_{t-2}), \ldots$.
The partial autocorrelation plot in the bottom-right shows a similar concept.
It&rsquo;s partial in the sense that the value for $corr(e_t, e_{t-k})$ is the correlation between those two periods, after controlling for the values at all shorter lags.</p>
<p>Autocorrelation is a problem in regular regressions like above, but we&rsquo;ll use it to our advantage when we setup an ARIMA model below.
The basic idea is pretty sensible: if your regression residuals have a clear pattern, then there&rsquo;s clearly some structure in the data that you aren&rsquo;t taking advantage of.
If a positive residual today means you&rsquo;ll likely have a positive residual tomorrow, why not incorporate that information into your forecast, and lower your forecasted value for tomorrow?
That&rsquo;s pretty much what ARIMA does.</p>
<p>It&rsquo;s important that your dataset be stationary, otherwise you run the risk of finding <a href="http://www.tylervigen.com/spurious-correlations">spurious correlations</a>.
A common example is the relationship between number of TVs per person and life expectancy.
It&rsquo;s not likely that there&rsquo;s an actual causal relationship there.
Rather, there could be a third variable that&rsquo;s driving both (wealth, say).
<a href="http://wolfweb.unr.edu/homepage/zal/STAT758/Granger_Newbold_1974.pdf">Granger and Newbold (1974)</a> had some stern words for the econometrics literature on this.</p>
<blockquote>
<p>We find it very curious that whereas virtually every textbook on econometric methodology contains explicit warnings of the dangers of autocorrelated errors, this phenomenon crops up so frequently in well-respected applied work.</p>
</blockquote>
<p>(:fire:), but in that academic passive-aggressive way.</p>
<p>The typical way to handle non-stationarity is to difference the non-stationary variable until is is stationary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>y<span style="color:#f92672">.</span>to_frame(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;y&#39;</span>)<span style="color:#f92672">.</span>assign(Δy<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>y<span style="color:#f92672">.</span>diff())<span style="color:#f92672">.</span>plot(subplots<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_61_0.png" alt="png"  />
</p>
<p>Our original series actually doesn&rsquo;t look <em>that</em> bad.
It doesn&rsquo;t look like nominal GDP say, where there&rsquo;s a clearly rising trend.
But we have more rigorous methods for detecting whether a series is non-stationary than simply plotting and squinting at it.
One popular method is the Augmented Dickey-Fuller test.
It&rsquo;s a statistical hypothesis test that roughly says:</p>
<p>$H_0$ (null hypothesis): $y$ is non-stationary, needs to be differenced</p>
<p>$H_A$ (alternative hypothesis): $y$ is stationary, doesn&rsquo;t need to be differenced</p>
<p>I don&rsquo;t want to get into the weeds on exactly what the test statistic is, and what the distribution looks like.
This is implemented in statsmodels as <a href="http://www.statsmodels.org/dev/generated/statsmodels.tsa.stattools.adfuller.html"><code>smt.adfuller</code></a>.
The return type is a bit busy for me, so we&rsquo;ll wrap it in a <code>namedtuple</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> namedtuple
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ADF <span style="color:#f92672">=</span> namedtuple(<span style="color:#e6db74">&#34;ADF&#34;</span>, <span style="color:#e6db74">&#34;adf pvalue usedlag nobs critical icbest&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ADF(<span style="color:#f92672">*</span>smt<span style="color:#f92672">.</span>adfuller(y))<span style="color:#f92672">.</span>_asdict()
</span></span></code></pre></div><pre><code>OrderedDict([('adf', -1.3206520699512339),
             ('pvalue', 0.61967180643147923),
             ('usedlag', 15),
             ('nobs', 177),
             ('critical',
              {'1%': -3.4678453197999071,
               '10%': -2.575551186759871,
               '5%': -2.8780117454974392}),
             ('icbest', 2710.6120408261486)])
</code></pre>
<p>So we failed to reject the null hypothesis that the original series was non-stationary.
Let&rsquo;s difference it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ADF(<span style="color:#f92672">*</span>smt<span style="color:#f92672">.</span>adfuller(y<span style="color:#f92672">.</span>diff()<span style="color:#f92672">.</span>dropna()))<span style="color:#f92672">.</span>_asdict()
</span></span></code></pre></div><pre><code>OrderedDict([('adf', -3.6412428797327996),
             ('pvalue', 0.0050197770854934548),
             ('usedlag', 14),
             ('nobs', 177),
             ('critical',
              {'1%': -3.4678453197999071,
               '10%': -2.575551186759871,
               '5%': -2.8780117454974392}),
             ('icbest', 2696.3891181091631)])
</code></pre>
<p>This looks better.
It&rsquo;s not statistically significant at the 5% level, but who cares what statisticins say anyway.</p>
<p>We&rsquo;ll fit another OLS model of $\Delta y = \beta_0 + \beta_1 L \Delta y_{t-1} + e_t$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data <span style="color:#f92672">=</span> (y<span style="color:#f92672">.</span>to_frame(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">.</span>assign(Δy<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> df: df<span style="color:#f92672">.</span>y<span style="color:#f92672">.</span>diff())
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">.</span>assign(LΔy<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> df: df<span style="color:#f92672">.</span>Δy<span style="color:#f92672">.</span>shift()))
</span></span><span style="display:flex;"><span>mod_stationary <span style="color:#f92672">=</span> smf<span style="color:#f92672">.</span>ols(<span style="color:#e6db74">&#39;Δy ~ LΔy&#39;</span>, data<span style="color:#f92672">=</span>data<span style="color:#f92672">.</span>dropna())
</span></span><span style="display:flex;"><span>res_stationary <span style="color:#f92672">=</span> mod_stationary<span style="color:#f92672">.</span>fit()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tsplot(res_stationary<span style="color:#f92672">.</span>resid, lags<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_69_0.png" alt="png"  />
</p>
<p>So we&rsquo;ve taken care of multicolinearity, autocorelation, and stationarity, but we still aren&rsquo;t done.</p>
<h2 id="seasonality">Seasonality</h2>
<p>We have strong monthly seasonality:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>smt<span style="color:#f92672">.</span>seasonal_decompose(y)<span style="color:#f92672">.</span>plot();
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_73_0.png" alt="png"  />
</p>
<p>There are a few ways to handle seasonality.
We&rsquo;ll just rely on the <code>SARIMAX</code> method to do it for us.
For now, recognize that it&rsquo;s a problem to be solved.</p>
<h2 id="arima">ARIMA</h2>
<p>So, we&rsquo;ve sketched the problems with regular old regression: multicollinearity, autocorrelation, non-stationarity, and seasonality.
Our tool of choice, <code>smt.SARIMAX</code>, which stands for Seasonal ARIMA with eXogenous regressors, can handle all these.
We&rsquo;ll walk through the components in pieces.</p>
<p>ARIMA stands for AutoRegressive Integrated Moving Average.
It&rsquo;s a relatively simple yet flexible way of modeling univariate time series.
It&rsquo;s made up of three components, and is typically written as $\mathrm{ARIMA}(p, d, q)$.</p>
<p>ARIMA stands for AutoRegressive Integrated Moving Average, and it&rsquo;s a relatively simple way of modeling univariate time series.
It&rsquo;s made up of three components, and is typically written as $\mathrm{ARIMA}(p, d, q)$.</p>
<h3 id="autoregressivehttpswwwotextsorgfpp83"><a href="https://www.otexts.org/fpp/8/3">AutoRegressive</a></h3>
<p>The idea is to predict a variable by a linear combination of its lagged values (<em>auto</em>-regressive as in regressing a value on its past <em>self</em>).
An AR(p), where $p$ represents the number of lagged values used, is written as</p>
<p>$$y_t = c + \phi_1 y_{t-1} + \phi_2 y_{t-2} + \ldots + \phi_p y_{t-p} + e_t$$</p>
<p>$c$ is a constant and $e_t$ is white noise.
This looks a lot like a linear regression model with multiple predictors, but the predictors happen to be lagged values of $y$ (though they are estimated differently).</p>
<h3 id="integrated">Integrated</h3>
<p>Integrated is like the opposite of differencing, and is the part that deals with stationarity.
If you have to difference your dataset 1 time to get it stationary, then $d=1$.
We&rsquo;ll introduce one bit of notation for differencing: $\Delta y_t = y_t - y_{t-1}$ for $d=1$.</p>
<h3 id="moving-averagehttpswwwotextsorgfpp84"><a href="https://www.otexts.org/fpp/8/4">Moving Average</a></h3>
<p>MA models look somewhat similar to the AR component, but it&rsquo;s dealing with different values.</p>
<p>$$y_t = c + e_t + \theta_1 e_{t-1} + \theta_2 e_{t-2} + \ldots + \theta_q e_{t-q}$$</p>
<p>$c$ again is a constant and $e_t$ again is white noise.
But now the coefficients are the <em>residuals</em> from previous predictions.</p>
<h3 id="combining">Combining</h3>
<p>Putting that together, an ARIMA(1, 1, 1) process is written as</p>
<p>$$\Delta y_t = c + \phi_1 \Delta y_{t-1} + \theta_t e_{t-1} + e_t$$</p>
<p>Using <em>lag notation</em>, where $L y_t = y_{t-1}$, i.e. <code>y.shift()</code> in pandas, we can rewrite that as</p>
<p>$$(1 - \phi_1 L) (1 - L)y_t = c + (1 + \theta L)e_t$$</p>
<p>That was for our specific $\mathrm{ARIMA}(1, 1, 1)$ model. For the general $\mathrm{ARIMA}(p, d, q)$, that becomes</p>
<p>$$(1 - \phi_1 L - \ldots - \phi_p L^p) (1 - L)^d y_t = c + (1 + \theta L + \ldots + \theta_q L^q)e_t$$</p>
<p>We went through that <em>extremely</em> quickly, so don&rsquo;t feel bad if things aren&rsquo;t clear.
Fortunately, the model is pretty easy to use with statsmodels (using it <em>correctly</em>, in a statistical sense, is another matter).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod <span style="color:#f92672">=</span> smt<span style="color:#f92672">.</span>SARIMAX(y, trend<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;c&#39;</span>, order<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> mod<span style="color:#f92672">.</span>fit()
</span></span><span style="display:flex;"><span>tsplot(res<span style="color:#f92672">.</span>resid[<span style="color:#ae81ff">2</span>:], lags<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_81_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>res<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><table class="simpletable">
<caption>Statespace Model Results</caption>
<tr>
  <th>Dep. Variable:</th>        <td>fl_date</td>     <th>  No. Observations:  </th>    <td>193</td>   
</tr>
<tr>
  <th>Model:</th>           <td>SARIMAX(1, 1, 1)</td> <th>  Log Likelihood     </th> <td>-1494.618</td>
</tr>
<tr>
  <th>Date:</th>            <td>Sun, 03 Sep 2017</td> <th>  AIC                </th> <td>2997.236</td> 
</tr>
<tr>
  <th>Time:</th>                <td>11:21:50</td>     <th>  BIC                </th> <td>3010.287</td> 
</tr>
<tr>
  <th>Sample:</th>             <td>01-01-2000</td>    <th>  HQIC               </th> <td>3002.521</td> 
</tr>
<tr>
  <th></th>                   <td>- 01-01-2016</td>   <th>                     </th>     <td> </td>    
</tr>
<tr>
  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>    
</tr>
</table>
<table class="simpletable">
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>intercept</th> <td>   -5.4306</td> <td>   66.818</td> <td>   -0.081</td> <td> 0.935</td> <td> -136.391</td> <td>  125.529</td>
</tr>
<tr>
  <th>ar.L1</th>     <td>   -0.0327</td> <td>    2.689</td> <td>   -0.012</td> <td> 0.990</td> <td>   -5.303</td> <td>    5.237</td>
</tr>
<tr>
  <th>ma.L1</th>     <td>    0.0775</td> <td>    2.667</td> <td>    0.029</td> <td> 0.977</td> <td>   -5.149</td> <td>    5.305</td>
</tr>
<tr>
  <th>sigma2</th>    <td> 3.444e+05</td> <td> 1.69e+04</td> <td>   20.392</td> <td> 0.000</td> <td> 3.11e+05</td> <td> 3.77e+05</td>
</tr>
</table>
<table class="simpletable">
<tr>
  <th>Ljung-Box (Q):</th>          <td>225.58</td> <th>  Jarque-Bera (JB):  </th> <td>1211.00</td>
</tr>
<tr>
  <th>Prob(Q):</th>                 <td>0.00</td>  <th>  Prob(JB):          </th>  <td>0.00</td>  
</tr>
<tr>
  <th>Heteroskedasticity (H):</th>  <td>0.67</td>  <th>  Skew:              </th>  <td>1.20</td>  
</tr>
<tr>
  <th>Prob(H) (two-sided):</th>     <td>0.12</td>  <th>  Kurtosis:          </th>  <td>15.07</td> 
</tr>
</table>
<p>There&rsquo;s a bunch of output there with various tests, estimated parameters, and information criteria.
Let&rsquo;s just say that things are looking better, but we still haven&rsquo;t accounted for seasonality.</p>
<p>A seasonal ARIMA model is written as $\mathrm{ARIMA}(p,d,q)×(P,D,Q)_s$.
Lowercase letters are for the non-seasonal component, just like before. Upper-case letters are a similar specification for the seasonal component, where $s$ is the periodicity (4 for quarterly, 12 for monthly).</p>
<p>It&rsquo;s like we have two processes, one for non-seasonal component and one for seasonal components, and we multiply them together with regular algebra rules.</p>
<p>The general form of that looks like (quoting the <a href="http://www.statsmodels.org/dev/examples/notebooks/generated/statespace_sarimax_stata.html">statsmodels docs</a> here)</p>
<p>$$\phi_p(L)\tilde{\phi}_P(L^S)\Delta^d\Delta_s^D y_t = A(t) + \theta_q(L)\tilde{\theta}_Q(L^s)e_t$$</p>
<p>where</p>
<ul>
<li>$\phi_p(L)$ is the non-seasonal autoregressive lag polynomial</li>
<li>$\tilde{\phi}_P(L^S)$ is the seasonal autoregressive lag polynomial</li>
<li>$\Delta^d\Delta_s^D$ is the time series, differenced  $d$ times, and seasonally differenced $D$ times.</li>
<li>$A(t)$ is the trend polynomial (including the intercept)</li>
<li>$\theta_q(L)$ is the non-seasonal moving average lag polynomial</li>
<li>$\tilde{\theta}_Q(L^s)$  is the seasonal moving average lag polynomial</li>
</ul>
<p>I don&rsquo;t find that to be very clear, but maybe an example will help.
We&rsquo;ll fit a seasonal ARIMA$(1,1,2)×(0, 1, 2)_{12}$.</p>
<p>So the nonseasonal component is</p>
<ul>
<li>$p=1$: period autoregressive: use $y_{t-1}$</li>
<li>$d=1$: one first-differencing of the data (one month)</li>
<li>$q=2$: use the previous two non-seasonal residual, $e_{t-1}$ and $e_{t-2}$, to forecast</li>
</ul>
<p>And the seasonal component is</p>
<ul>
<li>$P=0$: Don&rsquo;t use any previous seasonal values</li>
<li>$D=1$: Difference the series 12 periods back: <code>y.diff(12)</code></li>
<li>$Q=2$: Use the two previous seasonal residuals</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod_seasonal <span style="color:#f92672">=</span> smt<span style="color:#f92672">.</span>SARIMAX(y, trend<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>                           order<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>), seasonal_order<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">12</span>),
</span></span><span style="display:flex;"><span>                           simple_differencing<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>res_seasonal <span style="color:#f92672">=</span> mod_seasonal<span style="color:#f92672">.</span>fit()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>res_seasonal<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><table class="simpletable">
<caption>Statespace Model Results</caption>
<tr>
  <th>Dep. Variable:</th>               <td>fl_date</td>            <th>  No. Observations:  </th>    <td>193</td>   
</tr>
<tr>
  <th>Model:</th>           <td>SARIMAX(1, 1, 2)x(0, 1, 2, 12)</td> <th>  Log Likelihood     </th> <td>-1357.847</td>
</tr>
<tr>
  <th>Date:</th>                   <td>Sun, 03 Sep 2017</td>        <th>  AIC                </th> <td>2729.694</td> 
</tr>
<tr>
  <th>Time:</th>                       <td>11:21:53</td>            <th>  BIC                </th> <td>2752.533</td> 
</tr>
<tr>
  <th>Sample:</th>                    <td>01-01-2000</td>           <th>  HQIC               </th> <td>2738.943</td> 
</tr>
<tr>
  <th></th>                          <td>- 01-01-2016</td>          <th>                     </th>     <td> </td>    
</tr>
<tr>
  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>     <td> </td>    
</tr>
</table>
<table class="simpletable">
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>intercept</th> <td>  -17.5871</td> <td>   44.920</td> <td>   -0.392</td> <td> 0.695</td> <td> -105.628</td> <td>   70.454</td>
</tr>
<tr>
  <th>ar.L1</th>     <td>   -0.9988</td> <td>    0.013</td> <td>  -74.479</td> <td> 0.000</td> <td>   -1.025</td> <td>   -0.973</td>
</tr>
<tr>
  <th>ma.L1</th>     <td>    0.9956</td> <td>    0.109</td> <td>    9.130</td> <td> 0.000</td> <td>    0.782</td> <td>    1.209</td>
</tr>
<tr>
  <th>ma.L2</th>     <td>    0.0042</td> <td>    0.110</td> <td>    0.038</td> <td> 0.969</td> <td>   -0.211</td> <td>    0.219</td>
</tr>
<tr>
  <th>ma.S.L12</th>  <td>   -0.7836</td> <td>    0.059</td> <td>  -13.286</td> <td> 0.000</td> <td>   -0.899</td> <td>   -0.668</td>
</tr>
<tr>
  <th>ma.S.L24</th>  <td>    0.2118</td> <td>    0.041</td> <td>    5.154</td> <td> 0.000</td> <td>    0.131</td> <td>    0.292</td>
</tr>
<tr>
  <th>sigma2</th>    <td> 1.842e+05</td> <td> 1.21e+04</td> <td>   15.240</td> <td> 0.000</td> <td> 1.61e+05</td> <td> 2.08e+05</td>
</tr>
</table>
<table class="simpletable">
<tr>
  <th>Ljung-Box (Q):</th>          <td>32.57</td> <th>  Jarque-Bera (JB):  </th> <td>1298.39</td>
</tr>
<tr>
  <th>Prob(Q):</th>                <td>0.79</td>  <th>  Prob(JB):          </th>  <td>0.00</td>  
</tr>
<tr>
  <th>Heteroskedasticity (H):</th> <td>0.17</td>  <th>  Skew:              </th>  <td>-1.33</td> 
</tr>
<tr>
  <th>Prob(H) (two-sided):</th>    <td>0.00</td>  <th>  Kurtosis:          </th>  <td>15.89</td> 
</tr>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tsplot(res_seasonal<span style="color:#f92672">.</span>resid[<span style="color:#ae81ff">12</span>:], lags<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_86_0.png" alt="png"  />
</p>
<p>Things look much better now.</p>
<p>One thing I didn&rsquo;t really talk about is order selection. How to choose $p, d, q, P, D$ and $Q$.
R&rsquo;s forecast package does have a handy <code>auto.arima</code> function that does this for you.
Python / statsmodels don&rsquo;t have that at the minute.
The alternative seems to be experience (boo), intuition (boo), and good-old grid-search.
You can fit a bunch of models for a bunch of combinations of the parameters and use the <a href="https://en.wikipedia.org/wiki/Akaike_information_criterion">AIC</a> or <a href="https://en.wikipedia.org/wiki/Bayesian_information_criterion">BIC</a> to choose the best.
<a href="https://www.otexts.org/fpp/8/7">Here</a> is a useful reference, and <a href="http://stackoverflow.com/a/22770973">this</a> StackOverflow answer recommends a few options.</p>
<h2 id="forecasting">Forecasting</h2>
<p>Now that we fit that model, let&rsquo;s put it to use.
First, we&rsquo;ll make a bunch of one-step ahead forecasts.
At each point (month), we take the history up to that point and make a forecast for the next month.
So the forecast for January 2014 has available all the data up through December 2013.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pred <span style="color:#f92672">=</span> res_seasonal<span style="color:#f92672">.</span>get_prediction(start<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2001-03-01&#39;</span>)
</span></span><span style="display:flex;"><span>pred_ci <span style="color:#f92672">=</span> pred<span style="color:#f92672">.</span>conf_int()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;observed&#39;</span>)
</span></span><span style="display:flex;"><span>pred<span style="color:#f92672">.</span>predicted_mean<span style="color:#f92672">.</span>plot(ax<span style="color:#f92672">=</span>ax, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Forecast&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.7</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>fill_between(pred_ci<span style="color:#f92672">.</span>index,
</span></span><span style="display:flex;"><span>                pred_ci<span style="color:#f92672">.</span>iloc[:, <span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>                pred_ci<span style="color:#f92672">.</span>iloc[:, <span style="color:#ae81ff">1</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.2</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#34;Monthly Flights&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_91_0.png" alt="png"  />
</p>
<p>There are a few places where the observed series slips outside the 95% confidence interval.
The series seems especially unstable before 2005.</p>
<p>Alternatively, we can make <em>dynamic</em> forecasts as of some month (January 2013 in the example below).
That means the forecast from that point forward only use information available as of January 2013.
The predictions are generated in a similar way: a bunch of one-step forecasts.
Only instead of plugging in the <em>actual</em> values beyond January 2013, we plug in the <em>forecast</em> values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pred_dy <span style="color:#f92672">=</span> res_seasonal<span style="color:#f92672">.</span>get_prediction(start<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2002-03-01&#39;</span>, dynamic<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2013-01-01&#39;</span>)
</span></span><span style="display:flex;"><span>pred_dy_ci <span style="color:#f92672">=</span> pred_dy<span style="color:#f92672">.</span>conf_int()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>plot(label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;observed&#39;</span>)
</span></span><span style="display:flex;"><span>pred_dy<span style="color:#f92672">.</span>predicted_mean<span style="color:#f92672">.</span>plot(ax<span style="color:#f92672">=</span>ax, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Forecast&#39;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>fill_between(pred_dy_ci<span style="color:#f92672">.</span>index,
</span></span><span style="display:flex;"><span>                pred_dy_ci<span style="color:#f92672">.</span>iloc[:, <span style="color:#ae81ff">0</span>],
</span></span><span style="display:flex;"><span>                pred_dy_ci<span style="color:#f92672">.</span>iloc[:, <span style="color:#ae81ff">1</span>], color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.25</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#34;Monthly Flights&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Highlight the forecast area</span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>fill_betweenx(ax<span style="color:#f92672">.</span>get_ylim(), pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2013-01-01&#39;</span>), y<span style="color:#f92672">.</span>index[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>                 alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.1</span>, zorder<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>annotate(<span style="color:#e6db74">&#39;Dynamic $</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">longrightarrow$&#39;</span>, (pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2013-02-01&#39;</span>), <span style="color:#ae81ff">550</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>legend()
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_7_timeseries_94_0.png" alt="png"  />
</p>
<h2 id="resources">Resources</h2>
<p>This is a collection of links for those interested.</p>
<h3 id="time-series-modeling-in-python">Time series modeling in Python</h3>
<ul>
<li><a href="http://www.statsmodels.org/dev/examples/index.html#statespace">Statsmodels Statespace Notebooks</a></li>
<li><a href="http://www.statsmodels.org/dev/vector_ar.html#var">Statsmodels VAR tutorial</a></li>
</ul>
<ul>
<li><a href="https://github.com/bashtage/arch">ARCH Library by Kevin Sheppard</a></li>
</ul>
<h3 id="general-textbooks">General Textbooks</h3>
<ul>
<li><a href="https://www.otexts.org/fpp/">Forecasting: Principles and Practice</a>: A great introduction</li>
<li><a href="http://wps.aw.com/aw_stock_ie_3/178/45691/11696965.cw/">Stock and Watson</a>: Readable undergraduate resource, has a few chapters on time series</li>
<li><a href="http://pages.stern.nyu.edu/~wgreene/Text/econometricanalysis.htm">Greene&rsquo;s Econometric Analysis</a>: My favorite PhD level textbook</li>
<li><a href="http://www.amazon.com/Time-Analysis-James-Douglas-Hamilton/dp/0691042896">Hamilton&rsquo;s Time Series Analysis</a>: A classic</li>
<li><a href="http://www.amazon.com/New-Introduction-Multiple-Time-Analysis/dp/3540262393">Lutkehpohl&rsquo;s New Introduction to Multiple Time Series Analysis</a>: Extremely dry, but useful if you&rsquo;re implementing this stuff</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Congratulations if you made it this far, this piece just kept growing (and I still had to cut stuff).
The main thing cut was talking about how <code>SARIMAX</code> is implemented on top of using statsmodels&rsquo; statespace framework.
The statespace framework, developed mostly by Chad Fulton over the past couple years, is really nice.
You can pretty easily <a href="http://www.statsmodels.org/dev/examples/notebooks/generated/statespace_local_linear_trend.html">extend it</a> with custom models, but still get all the benefits of the framework&rsquo;s estimation and results facilities.
I&rsquo;d recommend reading the <a href="http://www.statsmodels.org/dev/examples/index.html#statespace">notebooks</a>.
We also didn&rsquo;t get to talk at all about Skipper Seabold&rsquo;s work on VARs, but maybe some other time.</p>
<p>As always, <a href="https://twitter.com/tomaugspurger">feedback is welcome</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"></code></pre></div>]]></content:encoded></item><item><title>Modern Pandas (Part 6): Visualization</title><link>https://tomaugspurger.github.io/posts/modern-6-visualization/</link><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-6-visualization/</guid><description>This is part 6 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Visualization and Exploratory Analysis A few weeks ago, the R community went through some hand-wringing about plotting packages. For outsiders (like me) the details aren&amp;rsquo;t that important, but some brief background might be useful so we can transfer the takeaways to Python. The competing systems are &amp;ldquo;base R&amp;rdquo;, which is the plotting system built into the language, and ggplot2, Hadley Wickham&amp;rsquo;s implementation of the grammar of graphics.</description><content:encoded><![CDATA[<hr>
<p>This is part 6 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<h1 id="visualization-and-exploratory-analysis">Visualization and Exploratory Analysis</h1>
<p>A few weeks ago, the R community went through some hand-wringing about plotting packages.
For outsiders (like me) the details aren&rsquo;t that important, but some brief background might be useful so we can transfer the takeaways to Python.
The competing systems are &ldquo;base R&rdquo;, which is the plotting system built into the language, and ggplot2, Hadley Wickham&rsquo;s implementation of the grammar of graphics.
For those interested in more details, start with</p>
<ul>
<li><a href="http://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/">Why I Don&rsquo;t Use ggplot2</a></li>
<li><a href="http://varianceexplained.org/r/why-I-use-ggplot2/">Why I use ggplot2</a></li>
<li><a href="http://flowingdata.com/2016/03/22/comparing-ggplot2-and-r-base-graphics/">Comparing ggplot2 and base r graphics</a></li>
</ul>
<p>The most important takeaways are that</p>
<ol>
<li>Either system is capable of producing anything the other can</li>
<li>ggplot2 is usually better for exploratory analysis</li>
</ol>
<p>Item 2 is not universally agreed upon, and it certainly isn&rsquo;t true for every type of chart, but we&rsquo;ll take it as fact for now.
I&rsquo;m not foolish enough to attempt a formal analogy here, like &ldquo;matplotlib is python&rsquo;s base R&rdquo;.
But there&rsquo;s at least a rough comparison:
like dplyr/tidyr and ggplot2, the combination of pandas and seaborn allows for fast iteration and exploration.
When you need to, you can &ldquo;drop down&rdquo; into matplotlib for further refinement.</p>
<h2 id="overview">Overview</h2>
<p>Here&rsquo;s a brief sketch of the plotting landscape as of April 2016.
For some reason, plotting tools feel a bit more personal than other parts of this series so far, so I feel the need to blanket this who discussion in a caveat: this is my personal take, shaped by my personal background and tastes.
Also, I&rsquo;m not at all an expert on visualization, just a consumer.
For real advice, you should <a href="http://twitter.com/mbostock">listen</a> to the <a href="https://twitter.com/oceankidbilly">experts</a> in this <a href="https://twitter.com/arnicas">area</a>.
Take this all with an extra grain or two of salt.</p>
<h2 id="matplotlibhttpmatplotliborg"><a href="http://matplotlib.org/">Matplotlib</a></h2>
<p>Matplotlib is an amazing project, and is the foundation of pandas&rsquo; built-in plotting and Seaborn.
It handles everything from the integration with various drawing backends, to several APIs handling drawing charts or adding and transforming individual glyphs (artists).
I&rsquo;ve found knowing the <a href="http://matplotlib.org/api/pyplot_api.html">pyplot API</a> useful.
You&rsquo;re less likely to need things like <a href="http://matplotlib.org/users/transforms_tutorial.html">Transforms</a> or <a href="http://matplotlib.org/api/artist_api.html">artists</a>, but when you do the documentation is there.</p>
<p>Matplotlib has built up something of a bad reputation for being verbose.
I think that complaint is valid, but misplaced.
Matplotlib lets you control essentially anything on the figure.
An overly-verbose API just means there&rsquo;s an opportunity for a higher-level, domain specific, package to exist (like seaborn for statistical graphics).</p>
<h2 id="pandas-builtin-plottinghttppandaspydataorgpandas-docsversion0180visualizationhtml"><a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/visualization.html">Pandas&rsquo; builtin-plotting</a></h2>
<p><code>DataFrame</code> and <code>Series</code> have a <code>.plot</code> namespace, with various chart types available (<code>line</code>, <code>hist</code>, <code>scatter</code>, etc.).
Pandas objects provide additional metadata that can be used to enhance plots (the Index for a better automatic x-axis then <code>range(n)</code> or Index names as axis labels for example).</p>
<p>And since pandas had fewer backwards-compatibility constraints, it had a bit better default aesthetics.
The <a href="http://matplotlib.org/style_changes.html">matplotlib 2.0 release</a> will level this, and pandas has <a href="https://github.com/pydata/pandas/issues/11783">deprecated its custom plotting styles</a>, in favor of matplotlib&rsquo;s (technically <a href="https://github.com/pydata/pandas/issues/11727">I just broke</a> it when fixing matplotlib 1.5 compatibility, so we deprecated it after the fact).</p>
<p>At this point, I see pandas <code>DataFrame.plot</code> as a useful exploratory tool for quick throwaway plots.</p>
<h2 id="seabornhttpsstanfordedumwaskomsoftwareseaborn"><a href="https://stanford.edu/~mwaskom/software/seaborn/">Seaborn</a></h2>
<p><a href="https://stanford.edu/~mwaskom/software/seaborn/">Seaborn</a>, created by Michael Waskom, &ldquo;provides a high-level interface for drawing attractive statistical graphics.&rdquo; Seaborn gives a great API for quickly exploring different visual representations of your data. We&rsquo;ll be focusing on that today</p>
<h2 id="bokehhttpbokehpydataorgenlatest"><a href="http://bokeh.pydata.org/en/latest/">Bokeh</a></h2>
<p><a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> is a (still under heavy development) visualiztion library that targets the browser.</p>
<p>Like matplotlib, Bokeh has a few APIs at various levels of abstraction.
They have a glyph API, which I suppose is most similar to matplotlib&rsquo;s Artists API, for drawing single or arrays of glpyhs (circles, rectangles, polygons, etc.).
More recently they introduced a Charts API, for producing canned charts from data structures like dicts or DataFrames.</p>
<h2 id="other-libraries">Other Libraries</h2>
<p>This is a (probably incomplete) list of other visualization libraries that I don&rsquo;t know enough about to comment on</p>
<ul>
<li><a href="https://github.com/ellisonbg/altair">Altair</a></li>
<li><a href="http://lightning-viz.org/">Lightning</a></li>
<li><a href="http://holoviews.org/">HoloViews</a></li>
<li><a href="http://www.glueviz.org/en/stable/">Glueviz</a></li>
<li><a href="http://vispy.org/">vispy</a></li>
<li><a href="https://github.com/bloomberg/bqplot">bqplot</a></li>
<li><a href="https://plot.ly/python/">Plotly</a></li>
</ul>
<p>It&rsquo;s also possible to use Javascript tools like D3 directly in the Jupyter notebook, but we won&rsquo;t go into those today.</p>
<h2 id="examples">Examples</h2>
<p>I do want to pause and explain the type of work I&rsquo;m doing with these packages.
The vast majority of plots I create are for exploratory analysis, helping me understand the dataset I&rsquo;m working with.
They aren&rsquo;t intended for the client (whoever that is) to see.
Occasionally that exploratory plot will evolve towards a final product that will be used to explain things to the client.
In this case I&rsquo;ll either polish the exploratory plot, or rewrite it in another system more suitable for the final product (in D3 or Bokeh, say, if it needs to be an interactive document in the browser).</p>
<p>Now that we have a feel for the overall landscape (from my point of view), let&rsquo;s delve into a few examples.
We&rsquo;ll use the <code>diamonds</code> dataset from ggplot2.
You could use Vincent Arelbundock&rsquo;s <a href="https://github.com/vincentarelbundock/Rdatasets">RDatasets package</a> to find it (<code>pd.read_csv('http://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/diamonds.csv')</code>), but I wanted to checkout <a href="https://github.com/wesm/feather">feather</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> feather
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> int(os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;MODERN_PANDAS_EPUB&#34;</span>, <span style="color:#ae81ff">0</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> prep <span style="color:#75715e"># noqa</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>load_ext rpy2<span style="color:#f92672">.</span>ipython
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#f92672">%%</span>R
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">suppressPackageStartupMessages</span>(<span style="color:#a6e22e">library</span>(ggplot2))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(feather)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write_feather</span>(diamonds, <span style="color:#e6db74">&#39;diamonds.fthr&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> feather
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> feather<span style="color:#f92672">.</span>read_dataframe(<span style="color:#e6db74">&#39;diamonds.fthr&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>carat</th>
      <th>cut</th>
      <th>color</th>
      <th>clarity</th>
      <th>depth</th>
      <th>table</th>
      <th>price</th>
      <th>x</th>
      <th>y</th>
      <th>z</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.23</td>
      <td>Ideal</td>
      <td>E</td>
      <td>SI2</td>
      <td>61.5</td>
      <td>55.0</td>
      <td>326</td>
      <td>3.95</td>
      <td>3.98</td>
      <td>2.43</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.21</td>
      <td>Premium</td>
      <td>E</td>
      <td>SI1</td>
      <td>59.8</td>
      <td>61.0</td>
      <td>326</td>
      <td>3.89</td>
      <td>3.84</td>
      <td>2.31</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.23</td>
      <td>Good</td>
      <td>E</td>
      <td>VS1</td>
      <td>56.9</td>
      <td>65.0</td>
      <td>327</td>
      <td>4.05</td>
      <td>4.07</td>
      <td>2.31</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.29</td>
      <td>Premium</td>
      <td>I</td>
      <td>VS2</td>
      <td>62.4</td>
      <td>58.0</td>
      <td>334</td>
      <td>4.20</td>
      <td>4.23</td>
      <td>2.63</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.31</td>
      <td>Good</td>
      <td>J</td>
      <td>SI2</td>
      <td>63.3</td>
      <td>58.0</td>
      <td>335</td>
      <td>4.34</td>
      <td>4.35</td>
      <td>2.75</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>info()
</span></span></code></pre></div><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 53940 entries, 0 to 53939
Data columns (total 10 columns):
carat      53940 non-null float64
cut        53940 non-null category
color      53940 non-null category
clarity    53940 non-null category
depth      53940 non-null float64
table      53940 non-null float64
price      53940 non-null int32
x          53940 non-null float64
y          53940 non-null float64
z          53940 non-null float64
dtypes: category(3), float64(6), int32(1)
memory usage: 2.8 MB
</code></pre>
<p>It&rsquo;s not clear to me where the scientific community will come down on Bokeh for exploratory analysis.
The ability to share interactive graphics is compelling.
The trend towards more and more analysis and communication happening in the browser will only enhance this feature of Bokeh.</p>
<p>Personally though, I have a lot of inertia behind matplotlib so I haven&rsquo;t switched to Bokeh for day-to-day exploratory analysis.</p>
<p>I have greatly enjoyed Bokeh for building dashboards and <a href="http://bokeh.pydata.org/en/latest/docs/user_guide/interaction.html">webapps</a> with Bokeh server.
It&rsquo;s still young, and I&rsquo;ve hit <a href="http://stackoverflow.com/questions/36610328/control-bokeh-plot-state-with-http-request">some rough edges</a>, but I&rsquo;m happy to put up with some awkwardness to avoid writing more javascript.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(context<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;talk&#39;</span>, style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ticks&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span></code></pre></div><h2 id="matplotlib">Matplotlib</h2>
<p>Since it&rsquo;s relatively new, I should point out that matplotlib 1.5 added support for plotting labeled data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>scatter(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;carat&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;depth&#39;</span>, data<span style="color:#f92672">=</span>df, c<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.15</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_13_0.png" alt="png"  />
</p>
<p>This isn&rsquo;t limited to just <code>DataFrame</code>s.
It supports anything that uses <code>__getitem__</code> (square-brackets) with string keys.
Other than that, I don&rsquo;t have much to add to the <a href="http://matplotlib.org/">matplotlib documentation</a>.</p>
<h2 id="pandas-built-in-plotting">Pandas Built-in Plotting</h2>
<p>The metadata in DataFrames gives a bit better defaults on plots.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>scatter(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;carat&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;depth&#39;</span>, c<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_17_0.png" alt="png"  />
</p>
<p>We get axis labels from the column names.
Nothing major, just nice.</p>
<p>Pandas can be more convenient for plotting a bunch of columns with a shared x-axis (the index), say several timeseries.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pandas_datareader <span style="color:#f92672">import</span> fred
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gdp <span style="color:#f92672">=</span> fred<span style="color:#f92672">.</span>FredReader([<span style="color:#e6db74">&#39;GCEC96&#39;</span>, <span style="color:#e6db74">&#39;GPDIC96&#39;</span>], start<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;2000-01-01&#39;</span>)<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gdp<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;GCEC96&#34;</span>: <span style="color:#e6db74">&#34;Government Expenditure&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;GPDIC96&#34;</span>: <span style="color:#e6db74">&#34;Private Investment&#34;</span>})<span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><pre><code>/Users/taugspurger/miniconda3/envs/modern-pandas/lib/python3.6/site-packages/ipykernel_launcher.py:3: DeprecationWarning: pandas.core.common.is_list_like is deprecated. import from the public API: pandas.api.types.is_list_like instead
  This is separate from the ipykernel package so we can avoid doing imports until
</code></pre>
<p><img loading="lazy" src="/images/modern_6_visualization_19_1.png" alt="png"  />
</p>
<h2 id="seaborn">Seaborn</h2>
<p>The rest of this post will focus on seaborn, and why I think it&rsquo;s especially great for exploratory analysis.</p>
<p>I would encourage you to read Seaborn&rsquo;s <a href="https://stanford.edu/~mwaskom/software/seaborn/introduction.html#introduction">introductory notes</a>, which describe its design philosophy and attempted goals. Some highlights:</p>
<blockquote>
<p>Seaborn aims to make visualization a central part of exploring and understanding data.</p>
</blockquote>
<p>It does this through a consistent, understandable (to me anyway) API.</p>
<blockquote>
<p>The plotting functions try to do something useful when called with a minimal set of arguments, and they expose a number of customizable options through additional parameters.</p>
</blockquote>
<p>Which works great for exploratory analysis, with the option to turn that into something more polished if it looks promising.</p>
<blockquote>
<p>Some of the functions plot directly into a matplotlib axes object, while others operate on an entire figure and produce plots with several panels.</p>
</blockquote>
<p>The fact that seaborn is built on matplotlib means that if you are familiar with the pyplot API, your knowledge will still be useful.</p>
<p>Most seaborn plotting functions (one per chart-type) take an <code>x</code>, <code>y</code>, <code>hue</code>, and <code>data</code> arguments (only some are required, depending on the plot type). If you&rsquo;re working with DataFrames, you&rsquo;ll pass in strings referring to column names, and the DataFrame for <code>data</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cut&#39;</span>, data<span style="color:#f92672">=</span>df)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_22_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cut&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;price&#39;</span>, data<span style="color:#f92672">=</span>df)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_23_0.png" alt="png"  />
</p>
<p>Bivariate relationships can easily be explored, either one at a time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>jointplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;carat&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;price&#39;</span>, data<span style="color:#f92672">=</span>df, size<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.25</span>,
</span></span><span style="display:flex;"><span>              color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_25_0.png" alt="png"  />
</p>
<p>Or many at once</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>pairplot(df, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;cut&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_27_0.png" alt="png"  />
</p>
<p><code>pairplot</code> is a convenience wrapper around <code>PairGrid</code>, and offers our first look at an important seaborn abstraction, the <code>Grid</code>. <em>Seaborn <code>Grid</code>s provide a link between a matplotlib <code>Figure</code> with multiple <code>axes</code> and features in your dataset.</em></p>
<p>There are two main ways of interacting with grids. First, seaborn provides convenience-wrapper functions like <code>pairplot</code>, that have good defaults for common tasks. If you need more flexibility, you can work with the <code>Grid</code> directly by mapping plotting functions over each axes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">core</span>(df, α<span style="color:#f92672">=</span><span style="color:#ae81ff">.05</span>):
</span></span><span style="display:flex;"><span>    mask <span style="color:#f92672">=</span> (df <span style="color:#f92672">&gt;</span> df<span style="color:#f92672">.</span>quantile(α))<span style="color:#f92672">.</span>all(<span style="color:#ae81ff">1</span>) <span style="color:#f92672">&amp;</span> (df <span style="color:#f92672">&lt;</span> df<span style="color:#f92672">.</span>quantile(<span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span> α))<span style="color:#f92672">.</span>all(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df[mask]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cmap <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>cubehelix_palette(as_cmap<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, dark<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, light<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(df<span style="color:#f92672">.</span>select_dtypes(include<span style="color:#f92672">=</span>[np<span style="color:#f92672">.</span>number])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>pipe(core)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>pipe(sns<span style="color:#f92672">.</span>PairGrid)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>map_upper(plt<span style="color:#f92672">.</span>scatter, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.25</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>map_diag(sns<span style="color:#f92672">.</span>kdeplot)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>map_lower(plt<span style="color:#f92672">.</span>hexbin, cmap<span style="color:#f92672">=</span>cmap, gridsize<span style="color:#f92672">=</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_30_1.png" alt="png"  />
</p>
<p>This last example shows the tight integration with matplotlib. <code>g.axes</code> is an array of <code>matplotlib.Axes</code> and <code>g.fig</code> is a <code>matplotlib.Figure</code>.
This is a pretty common pattern when using seaborn: use a seaborn plotting method (or grid) to get a good start, and then adjust with matplotlib as needed.</p>
<p>I <em>think</em> (not an expert on this at all) that one thing people like about the grammar of graphics is its flexibility.
You aren&rsquo;t limited to a fixed set of chart types defined by the library author.
Instead, you construct your chart by layering scales, aesthetics and geometries.
And using <code>ggplot2</code> in R is a delight.</p>
<p>That said, I wouldn&rsquo;t really call what seaborn / matplotlib offer that limited.
You can create pretty complex charts suited to your needs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>agged <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;cut&#39;</span>, <span style="color:#e6db74">&#39;color&#39;</span>])<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>sort_index()<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>PairGrid(agged, x_vars<span style="color:#f92672">=</span>agged<span style="color:#f92672">.</span>columns[<span style="color:#ae81ff">2</span>:], y_vars<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;cut&#39;</span>, <span style="color:#e6db74">&#39;color&#39;</span>],
</span></span><span style="display:flex;"><span>                 size<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, aspect<span style="color:#f92672">=</span><span style="color:#ae81ff">.65</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>stripplot, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;h&#34;</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, palette<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Blues_d&#39;</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_32_1.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(df, col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;color&#39;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;color&#39;</span>, col_wrap<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>regplot, <span style="color:#e6db74">&#39;carat&#39;</span>, <span style="color:#e6db74">&#39;price&#39;</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_33_1.png" alt="png"  />
</p>
<p>Initially I had many more examples showing off seaborn, but I&rsquo;ll spare you.
Seaborn&rsquo;s <a href="https://stanford.edu/~mwaskom/software/seaborn/">documentation</a> is thorough (and just beautiful to look at).</p>
<p>We&rsquo;ll end with a nice scikit-learn integration for exploring the parameter-space on a GridSearch object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.ensemble <span style="color:#f92672">import</span> RandomForestClassifier
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sklearn.model_selection <span style="color:#f92672">import</span> GridSearchCV
</span></span></code></pre></div><p>For those unfamiliar with machine learning or scikit-learn, the basic idea is your algorithm (<code>RandomForestClassifer</code>) is trying to maximize some objective function (percent of correctly classified items in this case).
There are various <em>hyperparameters</em> that affect the fit.
We can search this space by trying out a bunch of possible values for each parameter with the <code>GridSearchCV</code> estimator.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>load_dataset(<span style="color:#e6db74">&#39;titanic&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>clf <span style="color:#f92672">=</span> RandomForestClassifier()
</span></span><span style="display:flex;"><span>param_grid <span style="color:#f92672">=</span> dict(max_depth<span style="color:#f92672">=</span>[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">40</span>],
</span></span><span style="display:flex;"><span>                  min_samples_split<span style="color:#f92672">=</span>[<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>],
</span></span><span style="display:flex;"><span>                  min_samples_leaf<span style="color:#f92672">=</span>[<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>])
</span></span><span style="display:flex;"><span>est <span style="color:#f92672">=</span> GridSearchCV(clf, param_grid<span style="color:#f92672">=</span>param_grid, n_jobs<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;survived&#39;</span>]
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;survived&#39;</span>, <span style="color:#e6db74">&#39;who&#39;</span>, <span style="color:#e6db74">&#39;alive&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>get_dummies(X, drop_first<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>X <span style="color:#f92672">=</span> X<span style="color:#f92672">.</span>fillna(value<span style="color:#f92672">=</span>X<span style="color:#f92672">.</span>median())
</span></span><span style="display:flex;"><span>est<span style="color:#f92672">.</span>fit(X, y);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>scores <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(est<span style="color:#f92672">.</span>cv_results_)
</span></span><span style="display:flex;"><span>scores<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean_fit_time</th>
      <th>mean_score_time</th>
      <th>mean_test_score</th>
      <th>mean_train_score</th>
      <th>param_max_depth</th>
      <th>param_min_samples_leaf</th>
      <th>param_min_samples_split</th>
      <th>params</th>
      <th>rank_test_score</th>
      <th>split0_test_score</th>
      <th>split0_train_score</th>
      <th>split1_test_score</th>
      <th>split1_train_score</th>
      <th>split2_test_score</th>
      <th>split2_train_score</th>
      <th>std_fit_time</th>
      <th>std_score_time</th>
      <th>std_test_score</th>
      <th>std_train_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.017463</td>
      <td>0.002174</td>
      <td>0.786756</td>
      <td>0.797419</td>
      <td>1</td>
      <td>2</td>
      <td>2</td>
      <td>{'max_depth': 1, 'min_samples_leaf': 2, 'min_s...</td>
      <td>54</td>
      <td>0.767677</td>
      <td>0.804714</td>
      <td>0.808081</td>
      <td>0.797980</td>
      <td>0.784512</td>
      <td>0.789562</td>
      <td>0.000489</td>
      <td>0.000192</td>
      <td>0.016571</td>
      <td>0.006198</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.014982</td>
      <td>0.001843</td>
      <td>0.773288</td>
      <td>0.783951</td>
      <td>1</td>
      <td>2</td>
      <td>5</td>
      <td>{'max_depth': 1, 'min_samples_leaf': 2, 'min_s...</td>
      <td>57</td>
      <td>0.767677</td>
      <td>0.804714</td>
      <td>0.754209</td>
      <td>0.752525</td>
      <td>0.797980</td>
      <td>0.794613</td>
      <td>0.001900</td>
      <td>0.000356</td>
      <td>0.018305</td>
      <td>0.022600</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.013890</td>
      <td>0.001895</td>
      <td>0.771044</td>
      <td>0.786195</td>
      <td>1</td>
      <td>2</td>
      <td>10</td>
      <td>{'max_depth': 1, 'min_samples_leaf': 2, 'min_s...</td>
      <td>58</td>
      <td>0.767677</td>
      <td>0.811448</td>
      <td>0.754209</td>
      <td>0.752525</td>
      <td>0.791246</td>
      <td>0.794613</td>
      <td>0.000935</td>
      <td>0.000112</td>
      <td>0.015307</td>
      <td>0.024780</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.015679</td>
      <td>0.001691</td>
      <td>0.764310</td>
      <td>0.760943</td>
      <td>1</td>
      <td>3</td>
      <td>2</td>
      <td>{'max_depth': 1, 'min_samples_leaf': 3, 'min_s...</td>
      <td>61</td>
      <td>0.801347</td>
      <td>0.799663</td>
      <td>0.700337</td>
      <td>0.695286</td>
      <td>0.791246</td>
      <td>0.787879</td>
      <td>0.001655</td>
      <td>0.000025</td>
      <td>0.045423</td>
      <td>0.046675</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.013034</td>
      <td>0.001695</td>
      <td>0.765432</td>
      <td>0.787318</td>
      <td>1</td>
      <td>3</td>
      <td>5</td>
      <td>{'max_depth': 1, 'min_samples_leaf': 3, 'min_s...</td>
      <td>60</td>
      <td>0.710438</td>
      <td>0.772727</td>
      <td>0.801347</td>
      <td>0.781145</td>
      <td>0.784512</td>
      <td>0.808081</td>
      <td>0.000289</td>
      <td>0.000038</td>
      <td>0.039490</td>
      <td>0.015079</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>factorplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;param_max_depth&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mean_test_score&#39;</span>,
</span></span><span style="display:flex;"><span>               col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;param_min_samples_split&#39;</span>,
</span></span><span style="display:flex;"><span>               hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;param_min_samples_leaf&#39;</span>,
</span></span><span style="display:flex;"><span>               data<span style="color:#f92672">=</span>scores);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_6_visualization_39_0.png" alt="png"  />
</p>
<p>Thanks for reading!
I want to reiterate at the end that this is just <em>my</em> way of doing data visualization.
Your needs might differ, meaning you might need different tools.
You can still use pandas to get it to the point where it&rsquo;s ready to be visualized!</p>
<p>As always, <a href="https://twitter.com/tomaugspurger">feedback is welcome</a>.</p>
]]></content:encoded></item><item><title>Modern Pandas (Part 5): Tidy Data</title><link>https://tomaugspurger.github.io/posts/modern-5-tidy/</link><pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-5-tidy/</guid><description>This is part 5 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Reshaping &amp;amp; Tidy Data Structuring datasets to facilitate analysis (Wickham 2014)
So, you&amp;rsquo;ve sat down to analyze a new dataset. What do you do first?
In episode 11 of Not So Standard Deviations, Hilary and Roger discussed their typical approaches. I&amp;rsquo;m with Hilary on this one, you should make sure your data is tidy.</description><content:encoded><![CDATA[<hr>
<p>This is part 5 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<h1 id="reshaping--tidy-data">Reshaping &amp; Tidy Data</h1>
<blockquote>
<p>Structuring datasets to facilitate analysis <a href="http://www.jstatsoft.org/v59/i10/paper">(Wickham 2014)</a></p>
</blockquote>
<p>So, you&rsquo;ve sat down to analyze a new dataset.
What do you do first?</p>
<p>In episode 11 of <a href="https://www.patreon.com/NSSDeviations?ty=h">Not So Standard Deviations</a>, Hilary and Roger discussed their typical approaches.
I&rsquo;m with Hilary on this one, you should make sure your data is tidy.
Before you do any plots, filtering, transformations, summary statistics, regressions&hellip;
Without a tidy dataset, you&rsquo;ll be fighting your tools to get the result you need.
With a tidy dataset, it&rsquo;s relatively easy to do all of those.</p>
<p>Hadley Wickham kindly summarized tidiness as a dataset where</p>
<ol>
<li>Each variable forms a column</li>
<li>Each observation forms a row</li>
<li>Each type of observational unit forms a table</li>
</ol>
<p>And today we&rsquo;ll only concern ourselves with the first two.
As quoted at the top, this really is about facilitating analysis: going as quickly as possible from question to answer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> int(os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;MODERN_PANDAS_EPUB&#34;</span>, <span style="color:#ae81ff">0</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> prep <span style="color:#75715e"># noqa</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>options<span style="color:#f92672">.</span>display<span style="color:#f92672">.</span>max_rows <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ticks&#39;</span>, context<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;talk&#39;</span>)
</span></span></code></pre></div><h2 id="nba-data">NBA Data</h2>
<p><a href="http://stackoverflow.com/questions/22695680/python-pandas-timedelta-specific-rows">This</a> StackOverflow question asked about calculating the number of days of rest NBA teams have between games.
The answer would have been difficult to compute with the raw data.
After transforming the dataset to be tidy, we&rsquo;re able to quickly get the answer.</p>
<p>We&rsquo;ll grab some NBA game data from basketball-reference.com using pandas&rsquo; <code>read_html</code> function, which returns a list of DataFrames.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data/nba.csv&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(fp):
</span></span><span style="display:flex;"><span>    tables <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_html(<span style="color:#e6db74">&#34;http://www.basketball-reference.com/leagues/NBA_2016_games.html&#34;</span>)
</span></span><span style="display:flex;"><span>    games <span style="color:#f92672">=</span> tables[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    games<span style="color:#f92672">.</span>to_csv(fp)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    games <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(fp)
</span></span><span style="display:flex;"><span>games<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>Start (ET)</th>
      <th>Unnamed: 2</th>
      <th>Visitor/Neutral</th>
      <th>PTS</th>
      <th>Home/Neutral</th>
      <th>PTS.1</th>
      <th>Unnamed: 7</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>October</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Tue, Oct 27, 2015</td>
      <td>8:00 pm</td>
      <td>Box Score</td>
      <td>Detroit Pistons</td>
      <td>106.0</td>
      <td>Atlanta Hawks</td>
      <td>94.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Tue, Oct 27, 2015</td>
      <td>8:00 pm</td>
      <td>Box Score</td>
      <td>Cleveland Cavaliers</td>
      <td>95.0</td>
      <td>Chicago Bulls</td>
      <td>97.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Tue, Oct 27, 2015</td>
      <td>10:30 pm</td>
      <td>Box Score</td>
      <td>New Orleans Pelicans</td>
      <td>95.0</td>
      <td>Golden State Warriors</td>
      <td>111.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Wed, Oct 28, 2015</td>
      <td>7:30 pm</td>
      <td>Box Score</td>
      <td>Philadelphia 76ers</td>
      <td>95.0</td>
      <td>Boston Celtics</td>
      <td>112.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
<p>Side note: pandas&rsquo; <code>read_html</code> is pretty good. On simple websites it almost always works.
It provides a couple parameters for controlling what gets selected from the webpage if the defaults fail.
I&rsquo;ll always use it first, before moving on to <a href="https://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> or <a href="http://lxml.de/">lxml</a> if the page is more complicated.</p>
<p>As you can see, we have a bit of general munging to do before tidying.
Each month slips in an extra row of mostly NaNs, the column names aren&rsquo;t too useful, and we have some dtypes to fix up.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>column_names <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Date&#39;</span>: <span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;Start (ET)&#39;</span>: <span style="color:#e6db74">&#39;start&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Unamed: 2&#39;</span>: <span style="color:#e6db74">&#39;box&#39;</span>, <span style="color:#e6db74">&#39;Visitor/Neutral&#39;</span>: <span style="color:#e6db74">&#39;away_team&#39;</span>, 
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;PTS&#39;</span>: <span style="color:#e6db74">&#39;away_points&#39;</span>, <span style="color:#e6db74">&#39;Home/Neutral&#39;</span>: <span style="color:#e6db74">&#39;home_team&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;PTS.1&#39;</span>: <span style="color:#e6db74">&#39;home_points&#39;</span>, <span style="color:#e6db74">&#39;Unamed: 7&#39;</span>: <span style="color:#e6db74">&#39;n_ot&#39;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>games <span style="color:#f92672">=</span> (games<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>column_names)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>dropna(thresh<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>    [[<span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;away_team&#39;</span>, <span style="color:#e6db74">&#39;away_points&#39;</span>, <span style="color:#e6db74">&#39;home_team&#39;</span>, <span style="color:#e6db74">&#39;home_points&#39;</span>]]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>assign(date<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>to_datetime(x[<span style="color:#e6db74">&#39;date&#39;</span>], format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%a</span><span style="color:#e6db74">, %b </span><span style="color:#e6db74">%d</span><span style="color:#e6db74">, %Y&#39;</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;date&#39;</span>, append<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>rename_axis([<span style="color:#e6db74">&#34;game_id&#34;</span>, <span style="color:#e6db74">&#34;date&#34;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>sort_index())
</span></span><span style="display:flex;"><span>games<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>away_team</th>
      <th>away_points</th>
      <th>home_team</th>
      <th>home_points</th>
    </tr>
    <tr>
      <th>game_id</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <th>2015-10-27</th>
      <td>Detroit Pistons</td>
      <td>106.0</td>
      <td>Atlanta Hawks</td>
      <td>94.0</td>
    </tr>
    <tr>
      <th>2</th>
      <th>2015-10-27</th>
      <td>Cleveland Cavaliers</td>
      <td>95.0</td>
      <td>Chicago Bulls</td>
      <td>97.0</td>
    </tr>
    <tr>
      <th>3</th>
      <th>2015-10-27</th>
      <td>New Orleans Pelicans</td>
      <td>95.0</td>
      <td>Golden State Warriors</td>
      <td>111.0</td>
    </tr>
    <tr>
      <th>4</th>
      <th>2015-10-28</th>
      <td>Philadelphia 76ers</td>
      <td>95.0</td>
      <td>Boston Celtics</td>
      <td>112.0</td>
    </tr>
    <tr>
      <th>5</th>
      <th>2015-10-28</th>
      <td>Chicago Bulls</td>
      <td>115.0</td>
      <td>Brooklyn Nets</td>
      <td>100.0</td>
    </tr>
  </tbody>
</table>
</div>
<p>A quick aside on that last block.</p>
<ul>
<li><code>dropna</code> has a <code>thresh</code> argument. If at least <code>thresh</code> items are missing, the row is dropped. We used it to remove the &ldquo;Month headers&rdquo; that slipped into the table.</li>
<li><code>assign</code> can take a callable. This lets us refer to the DataFrame in the previous step of the chain. Otherwise we would have to assign <code>temp_df = games.dropna()...</code> And then do the <code>pd.to_datetime</code> on that.</li>
<li><code>set_index</code> has an <code>append</code> keyword. We keep the original index around since it will be our unique identifier per game.</li>
<li>We use <code>.rename_axis</code> to set the index names (this behavior is new in pandas 0.18; before <code>.rename_axis</code> only took a mapping for changing labels).</li>
</ul>
<p>The Question:</p>
<blockquote>
<p><strong>How many days of rest did each team get between each game?</strong></p>
</blockquote>
<p>Whether or not your dataset is tidy depends on your question. Given our question, what is an observation?</p>
<p>In this case, an observation is a <code>(team, game)</code> pair, which we don&rsquo;t have yet. Rather, we have two observations per row, one for home and one for away. We&rsquo;ll fix that with <code>pd.melt</code>.</p>
<p><code>pd.melt</code> works by taking observations that are spread across columns (<code>away_team</code>, <code>home_team</code>), and melting them down into one column with multiple rows. However, we don&rsquo;t want to lose the metadata (like <code>game_id</code> and <code>date</code>) that is shared between the observations. By including those columns as <code>id_vars</code>, the values will be repeated as many times as needed to stay with their observations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tidy <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>melt(games<span style="color:#f92672">.</span>reset_index(),
</span></span><span style="display:flex;"><span>               id_vars<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;game_id&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>], value_vars<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;away_team&#39;</span>, <span style="color:#e6db74">&#39;home_team&#39;</span>],
</span></span><span style="display:flex;"><span>               value_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>)
</span></span><span style="display:flex;"><span>tidy<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>game_id</th>
      <th>date</th>
      <th>variable</th>
      <th>team</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>2015-10-27</td>
      <td>away_team</td>
      <td>Detroit Pistons</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>2015-10-27</td>
      <td>away_team</td>
      <td>Cleveland Cavaliers</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>2015-10-27</td>
      <td>away_team</td>
      <td>New Orleans Pelicans</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>2015-10-28</td>
      <td>away_team</td>
      <td>Philadelphia 76ers</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>2015-10-28</td>
      <td>away_team</td>
      <td>Chicago Bulls</td>
    </tr>
  </tbody>
</table>
</div>
<p>The DataFrame <code>tidy</code> meets our rules for tidiness: each variable is in a column, and each observation (<code>team</code>, <code>date</code> pair) is on its own row.
Now the translation from question (&ldquo;How many days of rest between games&rdquo;) to operation (&ldquo;date of today&rsquo;s game - date of previous game - 1&rdquo;) is direct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># For each team... get number of days between games</span>
</span></span><span style="display:flex;"><span>tidy<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;team&#39;</span>)[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#f92672">.</span>diff()<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>days <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><pre><code>0       NaN
1       NaN
2       NaN
3       NaN
4       NaN
       ... 
2455    7.0
2456    1.0
2457    1.0
2458    3.0
2459    2.0
Name: date, Length: 2460, dtype: float64
</code></pre>
<p>That&rsquo;s the essence of tidy data, the reason why it&rsquo;s worth considering what shape your data should be in.
It&rsquo;s about setting yourself up for success so that the answers naturally flow from the data (just kidding, it&rsquo;s usually still difficult. But hopefully less so).</p>
<p>Let&rsquo;s assign that back into our DataFrame</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tidy[<span style="color:#e6db74">&#39;rest&#39;</span>] <span style="color:#f92672">=</span> tidy<span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;date&#39;</span>)<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;team&#39;</span>)<span style="color:#f92672">.</span>date<span style="color:#f92672">.</span>diff()<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>days <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>tidy<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>game_id</th>
      <th>date</th>
      <th>variable</th>
      <th>team</th>
      <th>rest</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>2015-10-28</td>
      <td>away_team</td>
      <td>Chicago Bulls</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>9</td>
      <td>2015-10-28</td>
      <td>away_team</td>
      <td>Cleveland Cavaliers</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>15</td>
      <td>2015-10-28</td>
      <td>away_team</td>
      <td>New Orleans Pelicans</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>18</td>
      <td>2015-10-29</td>
      <td>away_team</td>
      <td>Memphis Grizzlies</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>19</td>
      <td>2015-10-29</td>
      <td>away_team</td>
      <td>Dallas Mavericks</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>
<p>To show the inverse of <code>melt</code>, let&rsquo;s take <code>rest</code> values we just calculated and place them back in the original DataFrame with a <code>pivot_table</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>by_game <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>pivot_table(tidy, values<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rest&#39;</span>,
</span></span><span style="display:flex;"><span>                          index<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;game_id&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>],
</span></span><span style="display:flex;"><span>                          columns<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;variable&#39;</span>)
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;away_team&#39;</span>: <span style="color:#e6db74">&#39;away_rest&#39;</span>,
</span></span><span style="display:flex;"><span>                              <span style="color:#e6db74">&#39;home_team&#39;</span>: <span style="color:#e6db74">&#39;home_rest&#39;</span>}))
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([games, by_game], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>away_team</th>
      <th>away_points</th>
      <th>home_team</th>
      <th>home_points</th>
      <th>away_rest</th>
      <th>home_rest</th>
    </tr>
    <tr>
      <th>game_id</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>18</th>
      <th>2015-10-29</th>
      <td>Memphis Grizzlies</td>
      <td>112.0</td>
      <td>Indiana Pacers</td>
      <td>103.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>19</th>
      <th>2015-10-29</th>
      <td>Dallas Mavericks</td>
      <td>88.0</td>
      <td>Los Angeles Clippers</td>
      <td>104.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>20</th>
      <th>2015-10-29</th>
      <td>Atlanta Hawks</td>
      <td>112.0</td>
      <td>New York Knicks</td>
      <td>101.0</td>
      <td>1.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>21</th>
      <th>2015-10-30</th>
      <td>Charlotte Hornets</td>
      <td>94.0</td>
      <td>Atlanta Hawks</td>
      <td>97.0</td>
      <td>1.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <th>2015-10-30</th>
      <td>Toronto Raptors</td>
      <td>113.0</td>
      <td>Boston Celtics</td>
      <td>103.0</td>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>
<p>One somewhat subtle point: an &ldquo;observation&rdquo; depends on the question being asked.
So really, we have two tidy datasets, <code>tidy</code> for answering team-level questions, and <code>df</code> for answering game-level questions.</p>
<p>One potentially interesting question is &ldquo;what was each team&rsquo;s average days of rest, at home and on the road?&rdquo; With a tidy dataset (the DataFrame <code>tidy</code>, since it&rsquo;s team-level), <code>seaborn</code> makes this easy (more on seaborn in a future post):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ticks&#39;</span>, context<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;paper&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(tidy, col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, col_wrap<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>barplot, <span style="color:#e6db74">&#39;variable&#39;</span>, <span style="color:#e6db74">&#39;rest&#39;</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_17_0.png" alt="png"  />
</p>
<p>An example of a game-level statistic is the distribution of rest differences in games:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;home_win&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;home_points&#39;</span>] <span style="color:#f92672">&gt;</span> df[<span style="color:#e6db74">&#39;away_points&#39;</span>]
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;rest_spread&#39;</span>] <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;home_rest&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;away_rest&#39;</span>]
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>away_team</th>
      <th>away_points</th>
      <th>home_team</th>
      <th>home_points</th>
      <th>away_rest</th>
      <th>home_rest</th>
      <th>home_win</th>
      <th>rest_spread</th>
    </tr>
    <tr>
      <th>game_id</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>18</th>
      <th>2015-10-29</th>
      <td>Memphis Grizzlies</td>
      <td>112.0</td>
      <td>Indiana Pacers</td>
      <td>103.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>False</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>19</th>
      <th>2015-10-29</th>
      <td>Dallas Mavericks</td>
      <td>88.0</td>
      <td>Los Angeles Clippers</td>
      <td>104.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>True</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>20</th>
      <th>2015-10-29</th>
      <td>Atlanta Hawks</td>
      <td>112.0</td>
      <td>New York Knicks</td>
      <td>101.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>False</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>21</th>
      <th>2015-10-30</th>
      <td>Charlotte Hornets</td>
      <td>94.0</td>
      <td>Atlanta Hawks</td>
      <td>97.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>True</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>22</th>
      <th>2015-10-30</th>
      <td>Toronto Raptors</td>
      <td>113.0</td>
      <td>Boston Celtics</td>
      <td>103.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>False</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>delta <span style="color:#f92672">=</span> (by_game<span style="color:#f92672">.</span>home_rest <span style="color:#f92672">-</span> by_game<span style="color:#f92672">.</span>away_rest)<span style="color:#f92672">.</span>dropna()<span style="color:#f92672">.</span>astype(int)
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> (delta<span style="color:#f92672">.</span>value_counts()
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>reindex(np<span style="color:#f92672">.</span>arange(delta<span style="color:#f92672">.</span>min(), delta<span style="color:#f92672">.</span>max() <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>), fill_value<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>plot(kind<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bar&#39;</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, width<span style="color:#f92672">=</span><span style="color:#ae81ff">.9</span>, rot<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(xlabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Difference in Rest (Home - Away)&#39;</span>, ylabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Games&#39;</span>);
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_20_0.png" alt="png"  />
</p>
<p>Or the win percent by rest difference</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>barplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rest_spread&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;home_win&#39;</span>, data<span style="color:#f92672">=</span>df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;-3 &lt;= rest_spread &lt;= 3&#39;</span>),
</span></span><span style="display:flex;"><span>            color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#4c72b0&#39;</span>, ax<span style="color:#f92672">=</span>ax)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_22_0.png" alt="png"  />
</p>
<h2 id="stack--unstack">Stack / Unstack</h2>
<p>Pandas has two useful methods for quickly converting from wide to long format (<code>stack</code>) and long to wide (<code>unstack</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>rest <span style="color:#f92672">=</span> (tidy<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;variable&#39;</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>rest<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>dropna())
</span></span><span style="display:flex;"><span>rest<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>date        variable 
2015-10-28  away_team    0.000000
            home_team    0.000000
2015-10-29  away_team    0.333333
            home_team    0.000000
2015-10-30  away_team    1.083333
Name: rest, dtype: float64
</code></pre>
<p><code>rest</code> is in a &ldquo;long&rdquo; form since we have a single column of data, with multiple &ldquo;columns&rdquo; of metadata (in the MultiIndex). We use <code>.unstack</code> to move from long to wide.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>rest<span style="color:#f92672">.</span>unstack()<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>variable</th>
      <th>away_team</th>
      <th>home_team</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-10-28</th>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>2015-10-29</th>
      <td>0.333333</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>2015-10-30</th>
      <td>1.083333</td>
      <td>0.916667</td>
    </tr>
    <tr>
      <th>2015-10-31</th>
      <td>0.166667</td>
      <td>0.833333</td>
    </tr>
    <tr>
      <th>2015-11-01</th>
      <td>1.142857</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>
<p><code>unstack</code> moves a level of a MultiIndex (innermost by default) up to the columns.
<code>stack</code> is the inverse.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>rest<span style="color:#f92672">.</span>unstack()<span style="color:#f92672">.</span>stack()
</span></span></code></pre></div><pre><code>date        variable 
2015-10-28  away_team    0.000000
            home_team    0.000000
2015-10-29  away_team    0.333333
            home_team    0.000000
2015-10-30  away_team    1.083333
                           ...   
2016-04-11  home_team    0.666667
2016-04-12  away_team    1.000000
            home_team    1.400000
2016-04-13  away_team    0.500000
            home_team    1.214286
Length: 320, dtype: float64
</code></pre>
<p>With <code>.unstack</code> you can move between those APIs that expect there data in long-format and those APIs that work with wide-format data. For example, <code>DataFrame.plot()</code>, works with wide-form data, one line per column.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> sns<span style="color:#f92672">.</span>color_palette() <span style="color:#66d9ef">as</span> pal:
</span></span><span style="display:flex;"><span>    b, g <span style="color:#f92672">=</span> pal<span style="color:#f92672">.</span>as_hex()[:<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">=</span>(rest<span style="color:#f92672">.</span>unstack()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;away_team &lt; 7&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>rolling(<span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>plot(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>), linewidth<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, legend<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>))
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(ylabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Rest (7 day MA)&#39;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>annotate(<span style="color:#e6db74">&#34;Home&#34;</span>, (rest<span style="color:#f92672">.</span>index[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">1.02</span>), color<span style="color:#f92672">=</span>g, size<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>annotate(<span style="color:#e6db74">&#34;Away&#34;</span>, (rest<span style="color:#f92672">.</span>index[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>], <span style="color:#ae81ff">0.82</span>), color<span style="color:#f92672">=</span>b, size<span style="color:#f92672">=</span><span style="color:#ae81ff">14</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_30_0.png" alt="png"  />
</p>
<p>The most conenient form will depend on exactly what you&rsquo;re doing.
When interacting with databases you&rsquo;ll often deal with long form data.
Pandas&rsquo; <code>DataFrame.plot</code> often expects wide-form data, while <code>seaborn</code> often expect long-form data. Regressions will expect wide-form data. Either way, it&rsquo;s good to be comfortable with <code>stack</code> and <code>unstack</code> (and MultiIndexes) to quickly move between the two.</p>
<h2 id="mini-project-home-court-advantage">Mini Project: Home Court Advantage?</h2>
<p>We&rsquo;ve gone to all that work tidying our dataset, let&rsquo;s put it to use.
What&rsquo;s the effect (in terms of probability to win) of being
the home team?</p>
<h3 id="step-1-create-an-outcome-variable">Step 1: Create an outcome variable</h3>
<p>We need to create an indicator for whether the home team won.
Add it as a column called <code>home_win</code> in <code>games</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;home_win&#39;</span>] <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>home_points <span style="color:#f92672">&gt;</span> df<span style="color:#f92672">.</span>away_points
</span></span></code></pre></div><h3 id="step-2-find-the-win-percent-for-each-team">Step 2: Find the win percent for each team</h3>
<p>In the 10-minute literature review I did on the topic, it seems like people include a team-strength variable in their regressions.
I suppose that makes sense; if stronger teams happened to play against weaker teams at home more often than away, it&rsquo;d look like the home-effect is stronger than it actually is.
We&rsquo;ll do a terrible job of controlling for team strength by calculating each team&rsquo;s win percent and using that as a predictor.
It&rsquo;d be better to use some kind of independent measure of team strength, but this will do for now.</p>
<p>We&rsquo;ll use a similar <code>melt</code> operation as earlier, only now with the <code>home_win</code> variable we just created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>wins <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    pd<span style="color:#f92672">.</span>melt(df<span style="color:#f92672">.</span>reset_index(),
</span></span><span style="display:flex;"><span>            id_vars<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;game_id&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;home_win&#39;</span>],
</span></span><span style="display:flex;"><span>            value_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, var_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;is_home&#39;</span>,
</span></span><span style="display:flex;"><span>            value_vars<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;home_team&#39;</span>, <span style="color:#e6db74">&#39;away_team&#39;</span>])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>assign(win<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>home_win <span style="color:#f92672">==</span> (x<span style="color:#f92672">.</span>is_home <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;home_team&#39;</span>))
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;team&#39;</span>, <span style="color:#e6db74">&#39;is_home&#39;</span>])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>win
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>agg([<span style="color:#e6db74">&#39;sum&#39;</span>, <span style="color:#e6db74">&#39;count&#39;</span>, <span style="color:#e6db74">&#39;mean&#39;</span>])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>dict(sum<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;n_wins&#39;</span>,
</span></span><span style="display:flex;"><span>                        count<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;n_games&#39;</span>,
</span></span><span style="display:flex;"><span>                        mean<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;win_pct&#39;</span>))
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>wins<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>n_wins</th>
      <th>n_games</th>
      <th>win_pct</th>
    </tr>
    <tr>
      <th>team</th>
      <th>is_home</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">Atlanta Hawks</th>
      <th>away_team</th>
      <td>21.0</td>
      <td>41</td>
      <td>0.512195</td>
    </tr>
    <tr>
      <th>home_team</th>
      <td>27.0</td>
      <td>41</td>
      <td>0.658537</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">Boston Celtics</th>
      <th>away_team</th>
      <td>20.0</td>
      <td>41</td>
      <td>0.487805</td>
    </tr>
    <tr>
      <th>home_team</th>
      <td>28.0</td>
      <td>41</td>
      <td>0.682927</td>
    </tr>
    <tr>
      <th>Brooklyn Nets</th>
      <th>away_team</th>
      <td>7.0</td>
      <td>41</td>
      <td>0.170732</td>
    </tr>
  </tbody>
</table>
</div>
<p>Pause for visualiztion, because why not</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(wins<span style="color:#f92672">.</span>reset_index(), hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>, aspect<span style="color:#f92672">=</span><span style="color:#ae81ff">.5</span>, palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;k&#39;</span>])
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>pointplot, <span style="color:#e6db74">&#39;is_home&#39;</span>, <span style="color:#e6db74">&#39;win_pct&#39;</span>)<span style="color:#f92672">.</span>set(ylim<span style="color:#f92672">=</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>));
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_38_0.png" alt="png"  />
</p>
<p>(It&rsquo;d be great if there was a library built on top of matplotlib that auto-labeled each point decently well. Apparently this is a difficult problem to do in general).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(wins<span style="color:#f92672">.</span>reset_index(), col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, col_wrap<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>pointplot, <span style="color:#e6db74">&#39;is_home&#39;</span>, <span style="color:#e6db74">&#39;win_pct&#39;</span>)
</span></span></code></pre></div><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x11a0fe588&gt;
</code></pre>
<p><img loading="lazy" src="/images/modern_5_tidy_40_1.png" alt="png"  />
</p>
<p>Those two graphs show that most teams have a higher win-percent at home than away. So we can continue to investigate.
Let&rsquo;s aggregate over home / away to get an overall win percent per team.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>win_percent <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Use sum(games) / sum(games) instead of mean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># since I don&#39;t know if teams play the same</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># number of games at home as away</span>
</span></span><span style="display:flex;"><span>    wins<span style="color:#f92672">.</span>groupby(level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;team&#39;</span>, as_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>n_wins<span style="color:#f92672">.</span>sum() <span style="color:#f92672">/</span> x<span style="color:#f92672">.</span>n_games<span style="color:#f92672">.</span>sum())
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>win_percent<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>team
Atlanta Hawks        0.585366
Boston Celtics       0.585366
Brooklyn Nets        0.256098
Charlotte Hornets    0.585366
Chicago Bulls        0.512195
dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>win_percent<span style="color:#f92672">.</span>sort_values()<span style="color:#f92672">.</span>plot<span style="color:#f92672">.</span>barh(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">12</span>), width<span style="color:#f92672">=</span><span style="color:#ae81ff">.85</span>, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#34;Win Percent&#34;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_43_1.png" alt="png"  />
</p>
<p>Is there a relationship between overall team strength and their home-court advantage?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>(wins<span style="color:#f92672">.</span>win_pct
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>unstack()
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>assign(<span style="color:#f92672">**</span>{<span style="color:#e6db74">&#39;Home Win % - Away %&#39;</span>: <span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>home_team <span style="color:#f92672">-</span> x<span style="color:#f92672">.</span>away_team,
</span></span><span style="display:flex;"><span>               <span style="color:#e6db74">&#39;Overall %&#39;</span>: <span style="color:#66d9ef">lambda</span> x: (x<span style="color:#f92672">.</span>home_team <span style="color:#f92672">+</span> x<span style="color:#f92672">.</span>away_team) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>})
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">.</span>pipe((sns<span style="color:#f92672">.</span>regplot, <span style="color:#e6db74">&#39;data&#39;</span>), x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Overall %&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Home Win % - Away %&#39;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_5_tidy_45_0.png" alt="png"  />
</p>
<p>Let&rsquo;s get the team strength back into <code>df</code>.
You could you <code>pd.merge</code>, but I prefer <code>.map</code> when joining a <code>Series</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>assign(away_strength<span style="color:#f92672">=</span>df[<span style="color:#e6db74">&#39;away_team&#39;</span>]<span style="color:#f92672">.</span>map(win_percent),
</span></span><span style="display:flex;"><span>               home_strength<span style="color:#f92672">=</span>df[<span style="color:#e6db74">&#39;home_team&#39;</span>]<span style="color:#f92672">.</span>map(win_percent),
</span></span><span style="display:flex;"><span>               point_diff<span style="color:#f92672">=</span>df[<span style="color:#e6db74">&#39;home_points&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;away_points&#39;</span>],
</span></span><span style="display:flex;"><span>               rest_diff<span style="color:#f92672">=</span>df[<span style="color:#e6db74">&#39;home_rest&#39;</span>] <span style="color:#f92672">-</span> df[<span style="color:#e6db74">&#39;away_rest&#39;</span>])
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>away_team</th>
      <th>away_points</th>
      <th>home_team</th>
      <th>home_points</th>
      <th>away_rest</th>
      <th>home_rest</th>
      <th>home_win</th>
      <th>rest_spread</th>
      <th>away_strength</th>
      <th>home_strength</th>
      <th>point_diff</th>
      <th>rest_diff</th>
    </tr>
    <tr>
      <th>game_id</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <th>2015-10-27</th>
      <td>Detroit Pistons</td>
      <td>106.0</td>
      <td>Atlanta Hawks</td>
      <td>94.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>False</td>
      <td>NaN</td>
      <td>0.536585</td>
      <td>0.585366</td>
      <td>-12.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <th>2015-10-27</th>
      <td>Cleveland Cavaliers</td>
      <td>95.0</td>
      <td>Chicago Bulls</td>
      <td>97.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>True</td>
      <td>NaN</td>
      <td>0.695122</td>
      <td>0.512195</td>
      <td>2.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <th>2015-10-27</th>
      <td>New Orleans Pelicans</td>
      <td>95.0</td>
      <td>Golden State Warriors</td>
      <td>111.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>True</td>
      <td>NaN</td>
      <td>0.365854</td>
      <td>0.890244</td>
      <td>16.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <th>2015-10-28</th>
      <td>Philadelphia 76ers</td>
      <td>95.0</td>
      <td>Boston Celtics</td>
      <td>112.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>True</td>
      <td>NaN</td>
      <td>0.121951</td>
      <td>0.585366</td>
      <td>17.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <th>2015-10-28</th>
      <td>Chicago Bulls</td>
      <td>115.0</td>
      <td>Brooklyn Nets</td>
      <td>100.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>False</td>
      <td>NaN</td>
      <td>0.512195</td>
      <td>0.256098</td>
      <td>-15.0</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.formula.api <span style="color:#66d9ef">as</span> sm
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;home_win&#39;</span>] <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>home_win<span style="color:#f92672">.</span>astype(int)  <span style="color:#75715e"># for statsmodels</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod <span style="color:#f92672">=</span> sm<span style="color:#f92672">.</span>logit(<span style="color:#e6db74">&#39;home_win ~ home_strength + away_strength + home_rest + away_rest&#39;</span>, df)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> mod<span style="color:#f92672">.</span>fit()
</span></span><span style="display:flex;"><span>res<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><pre><code>Optimization terminated successfully.
         Current function value: 0.552792
         Iterations 6
</code></pre>
<table class="simpletable">
<caption>Logit Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>     <td>home_win</td>     <th>  No. Observations:  </th>  <td>  1213</td>  
</tr>
<tr>
  <th>Model:</th>               <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  1208</td>  
</tr>
<tr>
  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     4</td>  
</tr>
<tr>
  <th>Date:</th>          <td>Sun, 03 Sep 2017</td> <th>  Pseudo R-squ.:     </th>  <td>0.1832</td>  
</tr>
<tr>
  <th>Time:</th>              <td>07:25:41</td>     <th>  Log-Likelihood:    </th> <td> -670.54</td> 
</tr>
<tr>
  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -820.91</td> 
</tr>
<tr>
  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th> <td>7.479e-64</td>
</tr>
</table>
<table class="simpletable">
<tr>
        <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>Intercept</th>     <td>    0.0707</td> <td>    0.314</td> <td>    0.225</td> <td> 0.822</td> <td>   -0.546</td> <td>    0.687</td>
</tr>
<tr>
  <th>home_strength</th> <td>    5.4204</td> <td>    0.465</td> <td>   11.647</td> <td> 0.000</td> <td>    4.508</td> <td>    6.333</td>
</tr>
<tr>
  <th>away_strength</th> <td>   -4.7445</td> <td>    0.452</td> <td>  -10.506</td> <td> 0.000</td> <td>   -5.630</td> <td>   -3.859</td>
</tr>
<tr>
  <th>home_rest</th>     <td>    0.0894</td> <td>    0.079</td> <td>    1.137</td> <td> 0.255</td> <td>   -0.065</td> <td>    0.243</td>
</tr>
<tr>
  <th>away_rest</th>     <td>   -0.0422</td> <td>    0.067</td> <td>   -0.629</td> <td> 0.529</td> <td>   -0.174</td> <td>    0.089</td>
</tr>
</table>
<p>The strength variables both have large coefficeints (really we should be using some independent measure of team strength here, <code>win_percent</code> is showing up on the left and right side of the equation). The rest variables don&rsquo;t seem to matter as much.</p>
<p>With <code>.assign</code> we can quickly explore variations in formula.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(sm<span style="color:#f92672">.</span>Logit<span style="color:#f92672">.</span>from_formula(<span style="color:#e6db74">&#39;home_win ~ strength_diff + rest_spread&#39;</span>,
</span></span><span style="display:flex;"><span>                       df<span style="color:#f92672">.</span>assign(strength_diff<span style="color:#f92672">=</span>df<span style="color:#f92672">.</span>home_strength <span style="color:#f92672">-</span> df<span style="color:#f92672">.</span>away_strength))
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>fit()<span style="color:#f92672">.</span>summary())
</span></span></code></pre></div><pre><code>Optimization terminated successfully.
         Current function value: 0.553499
         Iterations 6
</code></pre>
<table class="simpletable">
<caption>Logit Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>     <td>home_win</td>     <th>  No. Observations:  </th>  <td>  1213</td>  
</tr>
<tr>
  <th>Model:</th>               <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  1210</td>  
</tr>
<tr>
  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  
</tr>
<tr>
  <th>Date:</th>          <td>Sun, 03 Sep 2017</td> <th>  Pseudo R-squ.:     </th>  <td>0.1821</td>  
</tr>
<tr>
  <th>Time:</th>              <td>07:25:41</td>     <th>  Log-Likelihood:    </th> <td> -671.39</td> 
</tr>
<tr>
  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -820.91</td> 
</tr>
<tr>
  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th> <td>1.165e-65</td>
</tr>
</table>
<table class="simpletable">
<tr>
        <td></td>           <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>Intercept</th>     <td>    0.4610</td> <td>    0.068</td> <td>    6.756</td> <td> 0.000</td> <td>    0.327</td> <td>    0.595</td>
</tr>
<tr>
  <th>strength_diff</th> <td>    5.0671</td> <td>    0.349</td> <td>   14.521</td> <td> 0.000</td> <td>    4.383</td> <td>    5.751</td>
</tr>
<tr>
  <th>rest_spread</th>   <td>    0.0566</td> <td>    0.062</td> <td>    0.912</td> <td> 0.362</td> <td>   -0.065</td> <td>    0.178</td>
</tr>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod <span style="color:#f92672">=</span> sm<span style="color:#f92672">.</span>Logit<span style="color:#f92672">.</span>from_formula(<span style="color:#e6db74">&#39;home_win ~ home_rest + away_rest&#39;</span>, df)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> mod<span style="color:#f92672">.</span>fit()
</span></span><span style="display:flex;"><span>res<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><pre><code>Optimization terminated successfully.
         Current function value: 0.676549
         Iterations 4
</code></pre>
<table class="simpletable">
<caption>Logit Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>     <td>home_win</td>     <th>  No. Observations:  </th>  <td>  1213</td>  
</tr>
<tr>
  <th>Model:</th>               <td>Logit</td>      <th>  Df Residuals:      </th>  <td>  1210</td>  
</tr>
<tr>
  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  
</tr>
<tr>
  <th>Date:</th>          <td>Sun, 03 Sep 2017</td> <th>  Pseudo R-squ.:     </th> <td>0.0003107</td>
</tr>
<tr>
  <th>Time:</th>              <td>07:25:41</td>     <th>  Log-Likelihood:    </th> <td> -820.65</td> 
</tr>
<tr>
  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -820.91</td> 
</tr>
<tr>
  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th>  <td>0.7749</td>  
</tr>
</table>
<table class="simpletable">
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  
</tr>
<tr>
  <th>Intercept</th> <td>    0.3667</td> <td>    0.094</td> <td>    3.889</td> <td> 0.000</td> <td>    0.182</td> <td>    0.552</td>
</tr>
<tr>
  <th>home_rest</th> <td>    0.0338</td> <td>    0.069</td> <td>    0.486</td> <td> 0.627</td> <td>   -0.102</td> <td>    0.170</td>
</tr>
<tr>
  <th>away_rest</th> <td>   -0.0420</td> <td>    0.061</td> <td>   -0.693</td> <td> 0.488</td> <td>   -0.161</td> <td>    0.077</td>
</tr>
</table>
<p>Overall not seeing to much support for rest mattering, but we got to see some more tidy data.</p>
<p>That&rsquo;s it for today.
Next time we&rsquo;ll look at data visualization.</p>
]]></content:encoded></item><item><title>Modern Panadas (Part 3): Indexes</title><link>https://tomaugspurger.github.io/posts/modern-3-indexes/</link><pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-3-indexes/</guid><description>This is part 3 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Indexes can be a difficult concept to grasp at first. I suspect this is partly becuase they&amp;rsquo;re somewhat peculiar to pandas. These aren&amp;rsquo;t like the indexes put on relational database tables for performance optimizations. Rather, they&amp;rsquo;re more like the row_labels of an R DataFrame, but much more capable.</description><content:encoded><![CDATA[<hr>
<p>This is part 3 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<p><code>Indexes</code> can be a difficult concept to grasp at first.
I suspect this is partly becuase they&rsquo;re somewhat peculiar to pandas.
These aren&rsquo;t like the indexes put on relational database tables for performance optimizations.
Rather, they&rsquo;re more like the <code>row_labels</code> of an R DataFrame, but much more capable.</p>
<p><code>Indexes</code> offer</p>
<ul>
<li>metadata container</li>
<li>easy label-based row selection</li>
<li>easy label-based alignment in operations</li>
<li>label-based concatenation</li>
</ul>
<p>To demonstrate these, we&rsquo;ll first fetch some more data.
This will be weather data from sensors at a bunch of airports across the US.
See <a href="https://github.com/akrherz/iem/blob/master/scripts/asos/iem_scraper_example.py">here</a> for the example scraper I based this off of.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> glob
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> io <span style="color:#f92672">import</span> StringIO
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_style(<span style="color:#e6db74">&#39;ticks&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># States are broken into networks. The networks have a list of ids, each representing a station.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We will take that list of ids and pass them as query parameters to the URL we built up ealier.</span>
</span></span><span style="display:flex;"><span>states <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;AK AL AR AZ CA CO CT DE FL GA HI IA ID IL IN KS KY LA MA MD ME
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> WA WI WV WY&#34;&#34;&#34;</span><span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># IEM has Iowa AWOS sites in its own labeled network</span>
</span></span><span style="display:flex;"><span>networks <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;AWOS&#39;</span>] <span style="color:#f92672">+</span> [<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">_ASOS&#39;</span><span style="color:#f92672">.</span>format(state) <span style="color:#66d9ef">for</span> state <span style="color:#f92672">in</span> states]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_weather</span>(stations, start<span style="color:#f92672">=</span>pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2014-01-01&#39;</span>),
</span></span><span style="display:flex;"><span>                end<span style="color:#f92672">=</span>pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2014-01-31&#39;</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Fetch weather data from MESONet between ``start`` and ``stop``.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;http://mesonet.agron.iastate.edu/cgi-bin/request/asos.py?&#34;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#34;&amp;data=tmpf&amp;data=relh&amp;data=sped&amp;data=mslp&amp;data=p01i&amp;data=vsby&amp;data=gust_mph&amp;data=skyc1&amp;data=skyc2&amp;data=skyc3&#34;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#34;&amp;tz=Etc/UTC&amp;format=comma&amp;latlon=no&#34;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#34;&amp;{start:year1=%Y&amp;month1=%m&amp;day1=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">}&#34;</span>
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#34;&amp;{end:year2=%Y&amp;month2=%m&amp;day2=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">}&amp;</span><span style="color:#e6db74">{stations}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    stations <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&amp;&#34;</span><span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#34;station=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> s <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> stations)
</span></span><span style="display:flex;"><span>    weather <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(url<span style="color:#f92672">.</span>format(start<span style="color:#f92672">=</span>start, end<span style="color:#f92672">=</span>end, stations<span style="color:#f92672">=</span>stations),
</span></span><span style="display:flex;"><span>                           comment<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>)
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#34;valid&#34;</span>: <span style="color:#e6db74">&#34;date&#34;</span>})
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>str<span style="color:#f92672">.</span>strip)
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>assign(date<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> df: pd<span style="color:#f92672">.</span>to_datetime(df[<span style="color:#e6db74">&#39;date&#39;</span>]))
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>set_index([<span style="color:#e6db74">&#34;station&#34;</span>, <span style="color:#e6db74">&#34;date&#34;</span>])
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>sort_index())
</span></span><span style="display:flex;"><span>    float_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;tmpf&#39;</span>, <span style="color:#e6db74">&#39;relh&#39;</span>, <span style="color:#e6db74">&#39;sped&#39;</span>, <span style="color:#e6db74">&#39;mslp&#39;</span>, <span style="color:#e6db74">&#39;p01i&#39;</span>, <span style="color:#e6db74">&#39;vsby&#39;</span>, <span style="color:#e6db74">&#34;gust_mph&#34;</span>]
</span></span><span style="display:flex;"><span>    weather[float_cols] <span style="color:#f92672">=</span> weather[float_cols]<span style="color:#f92672">.</span>apply(pd<span style="color:#f92672">.</span>to_numeric, errors<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;corce&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> weather
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_ids</span>(network):
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://mesonet.agron.iastate.edu/geojson/network.php?network=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">.</span>format(network))
</span></span><span style="display:flex;"><span>    md <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>io<span style="color:#f92672">.</span>json<span style="color:#f92672">.</span>json_normalize(r<span style="color:#f92672">.</span>json()[<span style="color:#e6db74">&#39;features&#39;</span>])
</span></span><span style="display:flex;"><span>    md[<span style="color:#e6db74">&#39;network&#39;</span>] <span style="color:#f92672">=</span> network
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> md
</span></span></code></pre></div><p>Talk briefly about the gem of a method that is <code>json_normalize</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://mesonet.agron.iastate.edu/geojson/network.php?network=</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#34;AWOS&#34;</span>))
</span></span><span style="display:flex;"><span>js <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>json()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>js[<span style="color:#e6db74">&#39;features&#39;</span>][:<span style="color:#ae81ff">2</span>]
</span></span></code></pre></div><pre><code>[{'geometry': {'coordinates': [-94.2723694444, 43.0796472222],
   'type': 'Point'},
  'id': 'AXA',
  'properties': {'sid': 'AXA', 'sname': 'ALGONA'},
  'type': 'Feature'},
 {'geometry': {'coordinates': [-93.569475, 41.6878083333], 'type': 'Point'},
  'id': 'IKV',
  'properties': {'sid': 'IKV', 'sname': 'ANKENY'},
  'type': 'Feature'}]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>DataFrame(js[<span style="color:#e6db74">&#39;features&#39;</span>])<span style="color:#f92672">.</span>head()<span style="color:#f92672">.</span>to_html()
</span></span></code></pre></div><table border="0" class="dataframe">
    <thead>
        <tr style="text-align: right;">
            <th></th>
            <th>geometry</th>
            <th>id</th>
            <th>properties</th>
            <th>type</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>0</th>
            <td>{\'coordinates\': [-94.2723694444, 43.0796472222...</td>
            <td>AXA</td>
            <td>{\'sname\': \'ALGONA\', \'sid\': \'AXA\'}</td>
            <td>Feature</td>
        </tr>
        <tr>
            <th>1</th>
            <td>{\'coordinates\': [-93.569475, 41.6878083333], \'...</td>
            <td>IKV</td>
            <td>{\'sname\': \'ANKENY\', \'sid\': \'IKV\'}</td>
            <td>Feature</td>
        </tr>
        <tr>
            <th>2</th>
            <td>{\'coordinates\': [-95.0465277778, 41.4058805556...</td>
            <td>AIO</td>
            <td>{\'sname\': \'ATLANTIC\', \'sid\': \'AIO\'}</td>
            <td>Feature</td>
        </tr>
        <tr>
            <th>3</th>
            <td>{\'coordinates\': [-94.9204416667, 41.6993527778...</td>
            <td>ADU</td>
            <td>{\'sname\': \'AUDUBON\', \'sid\': \'ADU\'}</td>
            <td>Feature</td>
        </tr>
        <tr>
            <th>4</th>
            <td>{\'coordinates\': [-93.848575, 42.0485694444], \'...</td>
            <td>BNW</td>
            <td>{\'sname\': \'BOONE MUNI\', \'sid\': \'BNW\'}</td>
            <td>Feature</td>
        </tr>
    </tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>js[<span style="color:#e6db74">&#39;features&#39;</span>][<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;geometry&#39;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.2723694444</span>, <span style="color:#ae81ff">43.0796472222</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;AXA&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;properties&#39;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;AXA&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;ALGONA&#39;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>js[<span style="color:#e6db74">&#39;features&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.2723694444</span>, <span style="color:#ae81ff">43.0796472222</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;AXA&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;AXA&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;ALGONA&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.569475</span>, <span style="color:#ae81ff">41.6878083333</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;IKV&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;IKV&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;ANKENY&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.0465277778</span>, <span style="color:#ae81ff">41.4058805556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;AIO&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;AIO&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;ATLANTIC&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.9204416667</span>, <span style="color:#ae81ff">41.6993527778</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;ADU&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;ADU&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;AUDUBON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.848575</span>, <span style="color:#ae81ff">42.0485694444</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;BNW&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;BNW&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;BOONE MUNI&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.7888805556</span>, <span style="color:#ae81ff">42.0443611111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CIN&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CIN&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CARROLL&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.8983388889</span>, <span style="color:#ae81ff">40.6831805556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;TVK&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;TVK&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Centerville&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.3607694444</span>, <span style="color:#ae81ff">41.0184305556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CNC&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CNC&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CHARITON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.6132222222</span>, <span style="color:#ae81ff">43.0730055556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CCY&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CCY&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CHARLES CITY&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.553775</span>, <span style="color:#ae81ff">42.7304194444</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CKP&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CKP&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Cherokee&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.0222722222</span>, <span style="color:#ae81ff">40.7241527778</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;ICL&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;ICL&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CLARINDA&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.7592583333</span>, <span style="color:#ae81ff">42.7430416667</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CAV&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CAV&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CLARION&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">90.332796</span>, <span style="color:#ae81ff">41.829504</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CWI&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CWI&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CLINTON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.7604083333</span>, <span style="color:#ae81ff">41.2611111111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CBF&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CBF&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;COUNCIL BLUFFS&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.3607972222</span>, <span style="color:#ae81ff">41.0187888889</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;CSQ&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;CSQ&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;CRESTON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.7433138889</span>, <span style="color:#ae81ff">43.2755194444</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;DEH&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;DEH&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;DECORAH&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.3799888889</span>, <span style="color:#ae81ff">41.9841944444</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;DNS&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;DNS&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;DENISON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.9834111111</span>, <span style="color:#ae81ff">41.0520888889</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;FFL&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;FFL&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;FAIRFIELD&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.6236694444</span>, <span style="color:#ae81ff">43.2323166667</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;FXY&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;FXY&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Forest City&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.203203</span>, <span style="color:#ae81ff">42.549741</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;FOD&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;FOD&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;FORT DODGE&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.3267166667</span>, <span style="color:#ae81ff">40.6614833333</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;FSW&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;FSW&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;FORT MADISON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.7331972222</span>, <span style="color:#ae81ff">41.7097305556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;GGI&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;GGI&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Grinnell&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.3354555556</span>, <span style="color:#ae81ff">41.5834194444</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;HNR&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;HNR&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;HARLAN&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.9504</span>, <span style="color:#ae81ff">42.4544277778</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;IIB&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;IIB&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;INDEPENDENCE&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.2650805556</span>, <span style="color:#ae81ff">42.4690972222</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;IFA&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;IFA&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Iowa Falls&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.4273916667</span>, <span style="color:#ae81ff">40.4614611111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;EOK&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;EOK&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;KEOKUK MUNI&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.1113916667</span>, <span style="color:#ae81ff">41.2984472222</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;OXV&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;OXV&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Knoxville&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">96.19225</span>, <span style="color:#ae81ff">42.775375</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;LRJ&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;LRJ&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;LE MARS&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.1604555556</span>, <span style="color:#ae81ff">42.2203611111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;MXO&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;MXO&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;MONTICELLO MUNI&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.5122277778</span>, <span style="color:#ae81ff">40.9452527778</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;MPZ&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;MPZ&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;MOUNT PLEASANT&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.140575</span>, <span style="color:#ae81ff">41.3669944444</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;MUT&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;MUT&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;MUSCATINE&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.0190416667</span>, <span style="color:#ae81ff">41.6701111111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;TNU&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;TNU&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;NEWTON MUNI&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.9759888889</span>, <span style="color:#ae81ff">42.6831388889</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;OLZ&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;OLZ&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;OELWEIN&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">96.0605861111</span>, <span style="color:#ae81ff">42.9894916667</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;ORC&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;ORC&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Orange City&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.6876138889</span>, <span style="color:#ae81ff">41.0471722222</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;I75&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;I75&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Osceola&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.4918666667</span>, <span style="color:#ae81ff">41.227275</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;OOA&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;OOA&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Oskaloosa&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.9431083333</span>, <span style="color:#ae81ff">41.3989138889</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;PEA&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;PEA&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;PELLA&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">94.1637083333</span>, <span style="color:#ae81ff">41.8277916667</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;PRO&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;PRO&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Perry&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.2624111111</span>, <span style="color:#ae81ff">41.01065</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;RDK&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;RDK&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;RED OAK&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.8353138889</span>, <span style="color:#ae81ff">43.2081611111</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;SHL&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;SHL&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;SHELDON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.4112333333</span>, <span style="color:#ae81ff">40.753275</span>], <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;SDA&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;SDA&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;SHENANDOAH MUNI&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">95.2399194444</span>, <span style="color:#ae81ff">42.5972277778</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;SLB&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;SLB&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Storm Lake&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">92.0248416667</span>, <span style="color:#ae81ff">42.2175777778</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;VTI&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;VTI&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;VINTON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">91.6748111111</span>, <span style="color:#ae81ff">41.2751444444</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;AWG&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;AWG&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;WASHINGTON&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>},
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;geometry&#39;</span>: {<span style="color:#e6db74">&#39;coordinates&#39;</span>: [<span style="color:#f92672">-</span><span style="color:#ae81ff">93.8690777778</span>, <span style="color:#ae81ff">42.4392305556</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Point&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;id&#39;</span>: <span style="color:#e6db74">&#39;EBS&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;properties&#39;</span>: {<span style="color:#e6db74">&#39;sid&#39;</span>: <span style="color:#e6db74">&#39;EBS&#39;</span>, <span style="color:#e6db74">&#39;sname&#39;</span>: <span style="color:#e6db74">&#39;Webster City&#39;</span>},
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;type&#39;</span>: <span style="color:#e6db74">&#39;Feature&#39;</span>}]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>stations <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>io<span style="color:#f92672">.</span>json<span style="color:#f92672">.</span>json_normalize(js[<span style="color:#e6db74">&#39;features&#39;</span>])<span style="color:#f92672">.</span>id
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#34;http://mesonet.agron.iastate.edu/cgi-bin/request/asos.py?&#34;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;&amp;data=tmpf&amp;data=relh&amp;data=sped&amp;data=mslp&amp;data=p01i&amp;data=vsby&amp;data=gust_mph&amp;data=skyc1&amp;data=skyc2&amp;data=skyc3&#34;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;&amp;tz=Etc/UTC&amp;format=comma&amp;latlon=no&#34;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;&amp;{start:year1=%Y&amp;month1=%m&amp;day1=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">}&#34;</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;&amp;{end:year2=%Y&amp;month2=%m&amp;day2=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">}&amp;</span><span style="color:#e6db74">{stations}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>stations <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&amp;&#34;</span><span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#34;station=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> s <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> stations)
</span></span><span style="display:flex;"><span>start <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2014-01-01&#39;</span>)
</span></span><span style="display:flex;"><span>end<span style="color:#f92672">=</span>pd<span style="color:#f92672">.</span>Timestamp(<span style="color:#e6db74">&#39;2014-01-31&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(url<span style="color:#f92672">.</span>format(start<span style="color:#f92672">=</span>start, end<span style="color:#f92672">=</span>end, stations<span style="color:#f92672">=</span>stations),
</span></span><span style="display:flex;"><span>                       comment<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#&#34;</span>))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>ids <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([get_ids(network) <span style="color:#66d9ef">for</span> network <span style="color:#f92672">in</span> networks], ignore_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>gr <span style="color:#f92672">=</span> ids<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;network&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>os<span style="color:#f92672">.</span>makedirs(<span style="color:#e6db74">&#34;weather&#34;</span>, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i, (k, v) <span style="color:#f92672">in</span> enumerate(gr):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(i, len(network)), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>    weather <span style="color:#f92672">=</span> get_weather(v[<span style="color:#e6db74">&#39;id&#39;</span>])
</span></span><span style="display:flex;"><span>    weather<span style="color:#f92672">.</span>to_csv(<span style="color:#e6db74">&#34;weather/</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">.csv&#34;</span><span style="color:#f92672">.</span>format(k))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([
</span></span><span style="display:flex;"><span>    pd<span style="color:#f92672">.</span>read_csv(f, parse_dates<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;date&#39;</span>, index_col<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;station&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> f <span style="color:#f92672">in</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;weather/*.csv&#39;</span>)])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>to_hdf(<span style="color:#e6db74">&#34;weather.h5&#34;</span>, <span style="color:#e6db74">&#34;weather&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(<span style="color:#e6db74">&#34;weather.h5&#34;</span>, <span style="color:#e6db74">&#34;weather&#34;</span>)<span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
      <th>skyc1</th>
      <th>skyc2</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>station</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">01M</th>
      <th>2014-01-01 00:15:00</th>
      <td>33.80</td>
      <td>85.86</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 00:35:00</th>
      <td>33.44</td>
      <td>87.11</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 00:55:00</th>
      <td>32.54</td>
      <td>90.97</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:15:00</th>
      <td>31.82</td>
      <td>93.65</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:35:00</th>
      <td>32.00</td>
      <td>92.97</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>
<p>OK, that was a bit of work. Here&rsquo;s a plot to reward ourselves.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>airports <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;DSM&#39;</span>, <span style="color:#e6db74">&#39;ORD&#39;</span>, <span style="color:#e6db74">&#39;JFK&#39;</span>, <span style="color:#e6db74">&#39;PDX&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(weather<span style="color:#f92672">.</span>sort_index()<span style="color:#f92672">.</span>loc[airports]<span style="color:#f92672">.</span>reset_index(),
</span></span><span style="display:flex;"><span>                  col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;station&#39;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;station&#39;</span>, col_wrap<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>regplot, <span style="color:#e6db74">&#39;sped&#39;</span>, <span style="color:#e6db74">&#39;gust_mph&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;../content/images/indexes_wind_gust_facet.png&#39;</span>);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>airports <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;DSM&#39;</span>, <span style="color:#e6db74">&#39;ORD&#39;</span>, <span style="color:#e6db74">&#39;JFK&#39;</span>, <span style="color:#e6db74">&#39;PDX&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>FacetGrid(weather<span style="color:#f92672">.</span>sort_index()<span style="color:#f92672">.</span>loc[airports]<span style="color:#f92672">.</span>reset_index(),
</span></span><span style="display:flex;"><span>                  col<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;station&#39;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;station&#39;</span>, col_wrap<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map(sns<span style="color:#f92672">.</span>regplot, <span style="color:#e6db74">&#39;sped&#39;</span>, <span style="color:#e6db74">&#39;gust_mph&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;../content/images/indexes_wind_gust_facet.svg&#39;</span>, transparent<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>);
</span></span></code></pre></div><p><img loading="lazy" src="Indexes_files/Indexes_18_0.png" alt="png"  />
</p>
<h1 id="set-operations">Set Operations</h1>
<p>Indexes are set-like (technically <em>multi</em>sets, since you can have duplicates), so they support most python <code>set</code> operations. Indexes are immutable so you won&rsquo;t find any of the inplace <code>set</code> operations.
One other difference is that since <code>Index</code>es are also array like, you can&rsquo;t use some infix operators like <code>-</code> for <code>difference</code>. If you have a numeric index it is unclear whether you intend to perform math operations or set operations.
You can use <code>&amp;</code> for intersetion, <code>|</code> for union, and <code>^</code> for symmetric difference though, since there&rsquo;s no ambiguity.</p>
<p>For example, lets find the set of airports that we have weather and flight information on. Since <code>weather</code> had a MultiIndex of <code>airport,datetime</code>, we&rsquo;ll use the <code>levels</code> attribute to get at the airport data, separate from the date data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Bring in the flights data</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flights <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(<span style="color:#e6db74">&#39;flights.h5&#39;</span>, <span style="color:#e6db74">&#39;flights&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>weather_locs <span style="color:#f92672">=</span> weather<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>levels[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The `categories` attribute of a Categorical is an Index</span>
</span></span><span style="display:flex;"><span>origin_locs <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>origin<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>categories
</span></span><span style="display:flex;"><span>dest_locs <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>dest<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>categories
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>airports <span style="color:#f92672">=</span> weather_locs <span style="color:#f92672">&amp;</span> origin_locs <span style="color:#f92672">&amp;</span> dest_locs
</span></span><span style="display:flex;"><span>airports
</span></span></code></pre></div><pre><code>Index(['ABE', 'ABI', 'ABQ', 'ABR', 'ABY', 'ACT', 'ACV', 'AEX', 'AGS', 'ALB',
       ...
       'TUL', 'TUS', 'TVC', 'TWF', 'TXK', 'TYR', 'TYS', 'VLD', 'VPS', 'XNA'],
      dtype='object', length=267)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Weather, no flights:</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>, weather_locs<span style="color:#f92672">.</span>difference(origin_locs <span style="color:#f92672">|</span> dest_locs), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Flights, no weather:</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>, (origin_locs <span style="color:#f92672">|</span> dest_locs)<span style="color:#f92672">.</span>difference(weather_locs), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Dropped Stations:</span><span style="color:#ae81ff">\n\t</span><span style="color:#e6db74">&#34;</span>, (origin_locs <span style="color:#f92672">|</span> dest_locs) <span style="color:#f92672">^</span> weather_locs)
</span></span></code></pre></div><pre><code>Weather, no flights:
	 Index(['01M', '04V', '04W', '05U', '06D', '08D', '0A9', '0CO', '0E0', '0F2',
       ...
       'Y50', 'Y51', 'Y63', 'Y70', 'YIP', 'YKM', 'YKN', 'YNG', 'ZPH', 'ZZV'],
      dtype='object', length=1909)

Flights, no weather:
	 Index(['ADK', 'ADQ', 'ANC', 'BET', 'BKG', 'BQN', 'BRW', 'CDV', 'CLD', 'FAI',
       'FCA', 'GUM', 'HNL', 'ITO', 'JNU', 'KOA', 'KTN', 'LIH', 'MQT', 'OGG',
       'OME', 'OTZ', 'PPG', 'PSE', 'PSG', 'SCC', 'SCE', 'SIT', 'SJU', 'STT',
       'STX', 'WRG', 'YAK', 'YUM'],
      dtype='object')

Dropped Stations:
	 Index(['01M', '04V', '04W', '05U', '06D', '08D', '0A9', '0CO', '0E0', '0F2',
       ...
       'Y63', 'Y70', 'YAK', 'YIP', 'YKM', 'YKN', 'YNG', 'YUM', 'ZPH', 'ZZV'],
      dtype='object', length=1943)
</code></pre>
<h1 id="flavors">Flavors</h1>
<p>Pandas has many subclasses of the regular <code>Index</code>, each tailored to a specific kind of data.
Most of the time these will be created for you automatically, so you don&rsquo;t have to worry about which one to choose.</p>
<ol>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/generated/pandas.Index.html#pandas.Index"><code>Index</code></a></li>
<li><code>Int64Index</code></li>
<li><code>RangeIndex</code> (Memory-saving special case of <code>Int64Index</code>)</li>
<li><code>FloatIndex</code></li>
<li><code>DatetimeIndex</code>: Datetime64[ns] precision data</li>
<li><code>PeriodIndex</code>: Regularly-spaced, arbitrary precision datetime data.</li>
<li><code>TimedeltaIndex</code>: Timedelta data</li>
<li><code>CategoricalIndex</code>:</li>
</ol>
<p>Some of these are purely optimizations, others use information about the data to provide additional methods.
And while sometimes you might work with indexes directly (like the set operations above), most of they time you&rsquo;ll be operating on a Series or DataFrame, which in turn makes use of its Index.</p>
<h3 id="row-slicing">Row Slicing</h3>
<p>We saw in part one that they&rsquo;re great for making <em>row</em> subsetting as easy as column subsetting.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>loc[<span style="color:#e6db74">&#39;DSM&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
      <th>skyc1</th>
      <th>skyc2</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>10.3</td>
      <td>1024.9</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>FEW</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>11.4</td>
      <td>1025.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 02:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>8.0</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 03:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>9.1</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 04:54:00</th>
      <td>10.04</td>
      <td>72.69</td>
      <td>9.1</td>
      <td>1024.7</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>
<p>Without indexes we&rsquo;d probably resort to boolean masks.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather2 <span style="color:#f92672">=</span> weather<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>weather2[weather2[<span style="color:#e6db74">&#39;station&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;DSM&#39;</span>]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station</th>
      <th>date</th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
      <th>skyc1</th>
      <th>skyc2</th>
      <th>skyc3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>884855</th>
      <td>DSM</td>
      <td>2014-01-01 00:54:00</td>
      <td>10.94</td>
      <td>72.79</td>
      <td>10.3</td>
      <td>1024.9</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>FEW</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>884856</th>
      <td>DSM</td>
      <td>2014-01-01 01:54:00</td>
      <td>10.94</td>
      <td>72.79</td>
      <td>11.4</td>
      <td>1025.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>884857</th>
      <td>DSM</td>
      <td>2014-01-01 02:54:00</td>
      <td>10.94</td>
      <td>72.79</td>
      <td>8.0</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>884858</th>
      <td>DSM</td>
      <td>2014-01-01 03:54:00</td>
      <td>10.94</td>
      <td>72.79</td>
      <td>9.1</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>884859</th>
      <td>DSM</td>
      <td>2014-01-01 04:54:00</td>
      <td>10.04</td>
      <td>72.69</td>
      <td>9.1</td>
      <td>1024.7</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>
<p>Slightly less convenient, but still doable.</p>
<h3 id="indexes-for-easier-arithmetic-analysis">Indexes for Easier Arithmetic, Analysis</h3>
<p>It&rsquo;s nice to have your metadata (labels on each observation) next to you actual values. But if you store them in an array, they&rsquo;ll get in the way. Say we wanted to translate the farenheit temperature to celcius.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># With indecies</span>
</span></span><span style="display:flex;"><span>temp <span style="color:#f92672">=</span> weather[<span style="color:#e6db74">&#39;tmpf&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> (temp <span style="color:#f92672">-</span> <span style="color:#ae81ff">32</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">.</span>to_frame()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>tmpf</th>
    </tr>
    <tr>
      <th>station</th>
      <th>date</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">01M</th>
      <th>2014-01-01 00:15:00</th>
      <td>1.0</td>
    </tr>
    <tr>
      <th>2014-01-01 00:35:00</th>
      <td>0.8</td>
    </tr>
    <tr>
      <th>2014-01-01 00:55:00</th>
      <td>0.3</td>
    </tr>
    <tr>
      <th>2014-01-01 01:15:00</th>
      <td>-0.1</td>
    </tr>
    <tr>
      <th>2014-01-01 01:35:00</th>
      <td>0.0</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="5" valign="top">ZZV</th>
      <th>2014-01-30 19:53:00</th>
      <td>-2.8</td>
    </tr>
    <tr>
      <th>2014-01-30 20:53:00</th>
      <td>-2.2</td>
    </tr>
    <tr>
      <th>2014-01-30 21:53:00</th>
      <td>-2.2</td>
    </tr>
    <tr>
      <th>2014-01-30 22:53:00</th>
      <td>-2.8</td>
    </tr>
    <tr>
      <th>2014-01-30 23:53:00</th>
      <td>-1.7</td>
    </tr>
  </tbody>
</table>
<p>3303647 rows × 1 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># without</span>
</span></span><span style="display:flex;"><span>temp2 <span style="color:#f92672">=</span> weather<span style="color:#f92672">.</span>reset_index()[[<span style="color:#e6db74">&#39;station&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;tmpf&#39;</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp2[<span style="color:#e6db74">&#39;tmpf&#39;</span>] <span style="color:#f92672">=</span> (temp2[<span style="color:#e6db74">&#39;tmpf&#39;</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">32</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>temp2<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>station</th>
      <th>date</th>
      <th>tmpf</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>01M</td>
      <td>2014-01-01 00:15:00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>01M</td>
      <td>2014-01-01 00:35:00</td>
      <td>0.8</td>
    </tr>
    <tr>
      <th>2</th>
      <td>01M</td>
      <td>2014-01-01 00:55:00</td>
      <td>0.3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>01M</td>
      <td>2014-01-01 01:15:00</td>
      <td>-0.1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>01M</td>
      <td>2014-01-01 01:35:00</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>
<p>Again, not terrible, but not as good.
And, what if you had wanted to keep farenheit around as well, instead of overwriting it like we did?
Then you&rsquo;d need to make a copy of everything, including the <code>station</code> and <code>date</code> columns.
We don&rsquo;t have that problem, since indexes are mutable and safely shared between DataFrames / Series.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>temp<span style="color:#f92672">.</span>index <span style="color:#f92672">is</span> c<span style="color:#f92672">.</span>index
</span></span></code></pre></div><pre><code>True
</code></pre>
<h3 id="indexes-for-alignment">Indexes for Alignment</h3>
<p>I&rsquo;ve saved the best for last.
Automatic alignment, or reindexing, is fundamental to pandas.</p>
<p>All binary operations (add, multiply, etc&hellip;) between Series/DataFrames first <em>align</em> and then proceed.</p>
<p>Let&rsquo;s suppose we have hourly observations on temperature and windspeed.
And suppose some of the observations were invalid, and not reported (simulated below by sampling from the full dataset). We&rsquo;ll assume the missing windspeed observations were potentially different from the missing temperature observations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dsm <span style="color:#f92672">=</span> weather<span style="color:#f92672">.</span>loc[<span style="color:#e6db74">&#39;DSM&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hourly <span style="color:#f92672">=</span> dsm<span style="color:#f92672">.</span>resample(<span style="color:#e6db74">&#39;H&#39;</span>)<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp <span style="color:#f92672">=</span> hourly[<span style="color:#e6db74">&#39;tmpf&#39;</span>]<span style="color:#f92672">.</span>sample(frac<span style="color:#f92672">=</span><span style="color:#ae81ff">.5</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>sped <span style="color:#f92672">=</span> hourly[<span style="color:#e6db74">&#39;sped&#39;</span>]<span style="color:#f92672">.</span>sample(frac<span style="color:#f92672">=</span><span style="color:#ae81ff">.5</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)<span style="color:#f92672">.</span>sort_index()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>temp<span style="color:#f92672">.</span>head()<span style="color:#f92672">.</span>to_frame()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:00:00</th>
      <td>10.94</td>
    </tr>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>10.94</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>10.94</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>10.04</td>
    </tr>
    <tr>
      <th>2014-01-01 05:00:00</th>
      <td>10.04</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sped<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>date
2014-01-01 01:00:00    11.4
2014-01-01 02:00:00     8.0
2014-01-01 03:00:00     9.1
2014-01-01 04:00:00     9.1
2014-01-01 05:00:00    10.3
Name: sped, dtype: float64
</code></pre>
<p>Notice that the two indexes aren&rsquo;t identical.</p>
<p>Suppose that the <code>windspeed : temperature</code> ratio is meaningful.
When we go to compute that, pandas will automatically align the two by index label.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sped <span style="color:#f92672">/</span> temp
</span></span></code></pre></div><pre><code>date
2014-01-01 00:00:00         NaN
2014-01-01 01:00:00         NaN
2014-01-01 02:00:00    0.731261
2014-01-01 03:00:00    0.831810
2014-01-01 04:00:00    0.906375
                         ...   
2014-01-30 13:00:00         NaN
2014-01-30 14:00:00    0.584712
2014-01-30 17:00:00         NaN
2014-01-30 21:00:00         NaN
2014-01-30 23:00:00         NaN
dtype: float64
</code></pre>
<p>This lets you focus on doing the operation, rather than manually aligning things, ensuring that the arrays are the same length and in the same order.
By deault, missing values are inserted where the two don&rsquo;t align.
You can use the method version of any binary operation to specify a <code>fill_value</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sped<span style="color:#f92672">.</span>div(temp, fill_value<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><pre><code>date
2014-01-01 00:00:00     0.091408
2014-01-01 01:00:00    11.400000
2014-01-01 02:00:00     0.731261
2014-01-01 03:00:00     0.831810
2014-01-01 04:00:00     0.906375
                         ...    
2014-01-30 13:00:00     0.027809
2014-01-30 14:00:00     0.584712
2014-01-30 17:00:00     0.023267
2014-01-30 21:00:00     0.035663
2014-01-30 23:00:00    13.700000
dtype: float64
</code></pre>
<p>And since I couldn&rsquo;t find anywhere else to put it, you can control the axis the operation is aligned along as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>hourly<span style="color:#f92672">.</span>div(sped, axis<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;index&#39;</span>)
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 01:00:00</th>
      <td>0.959649</td>
      <td>6.385088</td>
      <td>1.0</td>
      <td>89.947368</td>
      <td>0.0</td>
      <td>0.877193</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>1.367500</td>
      <td>9.098750</td>
      <td>1.0</td>
      <td>128.162500</td>
      <td>0.0</td>
      <td>1.250000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>1.202198</td>
      <td>7.998901</td>
      <td>1.0</td>
      <td>112.670330</td>
      <td>0.0</td>
      <td>1.098901</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>1.103297</td>
      <td>7.987912</td>
      <td>1.0</td>
      <td>112.604396</td>
      <td>0.0</td>
      <td>1.098901</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2014-01-30 19:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 20:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 21:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 22:00:00</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 23:00:00</th>
      <td>1.600000</td>
      <td>4.535036</td>
      <td>1.0</td>
      <td>73.970803</td>
      <td>0.0</td>
      <td>0.729927</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>720 rows × 7 columns</p>
</div>
<p>The non row-labeled version of this is messy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>temp2 <span style="color:#f92672">=</span> temp<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>sped2 <span style="color:#f92672">=</span> sped<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Find rows where the operation is defined</span>
</span></span><span style="display:flex;"><span>common_dates <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Index(temp2<span style="color:#f92672">.</span>date) <span style="color:#f92672">&amp;</span> sped2<span style="color:#f92672">.</span>date
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>concat([
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># concat to not lose date information</span>
</span></span><span style="display:flex;"><span>    sped2<span style="color:#f92672">.</span>loc[sped2[<span style="color:#e6db74">&#39;date&#39;</span>]<span style="color:#f92672">.</span>isin(common_dates), <span style="color:#e6db74">&#39;date&#39;</span>],
</span></span><span style="display:flex;"><span>    (sped2<span style="color:#f92672">.</span>loc[sped2<span style="color:#f92672">.</span>date<span style="color:#f92672">.</span>isin(common_dates), <span style="color:#e6db74">&#39;sped&#39;</span>] <span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>     temp2<span style="color:#f92672">.</span>loc[temp2<span style="color:#f92672">.</span>date<span style="color:#f92672">.</span>isin(common_dates), <span style="color:#e6db74">&#39;tmpf&#39;</span>])],
</span></span><span style="display:flex;"><span>    axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>dropna(how<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;all&#39;</span>)
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>2014-01-01 02:00:00</td>
      <td>0.731261</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2014-01-01 03:00:00</td>
      <td>0.831810</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2014-01-01 04:00:00</td>
      <td>0.906375</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2014-01-01 05:00:00</td>
      <td>1.025896</td>
    </tr>
    <tr>
      <th>8</th>
      <td>2014-01-01 13:00:00</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>351</th>
      <td>2014-01-29 23:00:00</td>
      <td>0.535609</td>
    </tr>
    <tr>
      <th>354</th>
      <td>2014-01-30 05:00:00</td>
      <td>0.487735</td>
    </tr>
    <tr>
      <th>356</th>
      <td>2014-01-30 09:00:00</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>357</th>
      <td>2014-01-30 10:00:00</td>
      <td>0.618939</td>
    </tr>
    <tr>
      <th>358</th>
      <td>2014-01-30 14:00:00</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>170 rows × 2 columns</p>
</div>
<p>Yeah, I prefer the <code>temp / sped</code> version.</p>
<p>Alignment isn&rsquo;t limited to arithmetic operations, although those are the most obvious and easiest to demonstrate.</p>
<h1 id="merging">Merging</h1>
<p>There are two ways of merging DataFrames / Series in pandas</p>
<ol>
<li>Relational Database style with <code>pd.merge</code></li>
<li>Array style with <code>pd.concat</code></li>
</ol>
<p>Personally, I think in terms of the <code>concat</code> style.
I learned pandas before I ever really used SQL, so it comes more naturally to me I suppose.
<code>pd.merge</code> has more flexibilty, though I think <em>most</em> of the time you don&rsquo;t need this flexibilty.</p>
<h3 id="concat-version">Concat Version</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>concat([temp, sped], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>sped</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:00:00</th>
      <td>10.94</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 01:00:00</th>
      <td>NaN</td>
      <td>11.4</td>
    </tr>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>10.94</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>10.94</td>
      <td>9.1</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>10.04</td>
      <td>9.1</td>
    </tr>
  </tbody>
</table>
</div>
<p>The <code>axis</code> parameter controls how the data should be stacked, <code>0</code> for vertically, <code>1</code> for horizontally.
The <code>join</code> parameter controls the merge behavior on the shared axis, (the Index for <code>axis=1</code>). By default it&rsquo;s like a union of the two indexes, or an outer join.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>concat([temp, sped], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, join<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;inner&#39;</span>)
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>sped</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>10.94</td>
      <td>8.000</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>10.94</td>
      <td>9.100</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>10.04</td>
      <td>9.100</td>
    </tr>
    <tr>
      <th>2014-01-01 05:00:00</th>
      <td>10.04</td>
      <td>10.300</td>
    </tr>
    <tr>
      <th>2014-01-01 13:00:00</th>
      <td>8.96</td>
      <td>13.675</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2014-01-29 23:00:00</th>
      <td>35.96</td>
      <td>18.200</td>
    </tr>
    <tr>
      <th>2014-01-30 05:00:00</th>
      <td>33.98</td>
      <td>17.100</td>
    </tr>
    <tr>
      <th>2014-01-30 09:00:00</th>
      <td>35.06</td>
      <td>16.000</td>
    </tr>
    <tr>
      <th>2014-01-30 10:00:00</th>
      <td>35.06</td>
      <td>21.700</td>
    </tr>
    <tr>
      <th>2014-01-30 14:00:00</th>
      <td>35.06</td>
      <td>20.500</td>
    </tr>
  </tbody>
</table>
<p>170 rows × 2 columns</p>
</div>
<h3 id="merge-version">Merge Version</h3>
<p>Since we&rsquo;re joining by index here the merge version is quite similar.
We&rsquo;ll see an example later of a one-to-many join where the two differ.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>merge(temp<span style="color:#f92672">.</span>to_frame(), sped<span style="color:#f92672">.</span>to_frame(), left_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, right_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>sped</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>10.94</td>
      <td>8.000</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>10.94</td>
      <td>9.100</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>10.04</td>
      <td>9.100</td>
    </tr>
    <tr>
      <th>2014-01-01 05:00:00</th>
      <td>10.04</td>
      <td>10.300</td>
    </tr>
    <tr>
      <th>2014-01-01 13:00:00</th>
      <td>8.96</td>
      <td>13.675</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>merge(temp<span style="color:#f92672">.</span>to_frame(), sped<span style="color:#f92672">.</span>to_frame(), left_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, right_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,
</span></span><span style="display:flex;"><span>         how<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;outer&#39;</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>sped</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:00:00</th>
      <td>10.94</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 01:00:00</th>
      <td>NaN</td>
      <td>11.4</td>
    </tr>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>10.94</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>10.94</td>
      <td>9.1</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>10.04</td>
      <td>9.1</td>
    </tr>
  </tbody>
</table>
</div>
<p>Like I said, I typically prefer <code>concat</code> to <code>merge</code>.
The exception here is one-to-many type joins. Let&rsquo;s walk through one of those,
where we join the flight data to the weather data.
To focus just on the merge, we&rsquo;ll aggregate hour weather data to be daily, rather than trying to find the closest recorded weather observation to each departure (you could do that, but it&rsquo;s not the focus right now). We&rsquo;ll then join the one <code>(airport, date)</code> record to the many <code>(airport, date, flight)</code> records.</p>
<p>Quick tangent, to get the weather data to daily frequency, we&rsquo;ll need to resample (more on that in the timeseries section). The resample essentially involves breaking the recorded values into daily buckets and computing the aggregation function on each bucket. The only wrinkle is that we have to resample <em>by station</em>, so we&rsquo;ll use the <code>pd.TimeGrouper</code> helper.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>idx_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;unique_carrier&#39;</span>, <span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dest&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>, <span style="color:#e6db74">&#39;fl_num&#39;</span>, <span style="color:#e6db74">&#39;fl_date&#39;</span>]
</span></span><span style="display:flex;"><span>data_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;crs_dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>, <span style="color:#e6db74">&#39;crs_arr_time&#39;</span>, <span style="color:#e6db74">&#39;arr_delay&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;taxi_out&#39;</span>, <span style="color:#e6db74">&#39;taxi_in&#39;</span>, <span style="color:#e6db74">&#39;wheels_off&#39;</span>, <span style="color:#e6db74">&#39;wheels_on&#39;</span>, <span style="color:#e6db74">&#39;distance&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>set_index(idx_cols)[data_cols]<span style="color:#f92672">.</span>sort_index()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mode</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Arbitrarily break ties.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>index[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aggfuncs <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;tmpf&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;relh&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;sped&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;mslp&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;p01i&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;vsby&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;gust_mph&#39;</span>: <span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;skyc1&#39;</span>: mode,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;skyc2&#39;</span>: mode, <span style="color:#e6db74">&#39;skyc3&#39;</span>: mode}
</span></span><span style="display:flex;"><span><span style="color:#75715e"># TimeGrouper works on a DatetimeIndex, so we move `station` to the</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># columns and then groupby it as well.</span>
</span></span><span style="display:flex;"><span>daily <span style="color:#f92672">=</span> (weather<span style="color:#f92672">.</span>reset_index(level<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;station&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span>groupby([pd<span style="color:#f92672">.</span>TimeGrouper(<span style="color:#e6db74">&#39;1d&#39;</span>), <span style="color:#e6db74">&#34;station&#34;</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">.</span>agg(aggfuncs))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>daily<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>gust_mph</th>
      <th>vsby</th>
      <th>sped</th>
      <th>relh</th>
      <th>skyc1</th>
      <th>tmpf</th>
      <th>skyc2</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>date</th>
      <th>station</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">2014-01-01</th>
      <th>01M</th>
      <td>NaN</td>
      <td>9.229167</td>
      <td>2.262500</td>
      <td>81.117917</td>
      <td>CLR</td>
      <td>35.747500</td>
      <td>M</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>04V</th>
      <td>31.307143</td>
      <td>9.861111</td>
      <td>11.131944</td>
      <td>72.697778</td>
      <td>CLR</td>
      <td>18.350000</td>
      <td>M</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>04W</th>
      <td>NaN</td>
      <td>10.000000</td>
      <td>3.601389</td>
      <td>69.908056</td>
      <td>OVC</td>
      <td>-9.075000</td>
      <td>M</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>05U</th>
      <td>NaN</td>
      <td>9.929577</td>
      <td>3.770423</td>
      <td>71.519859</td>
      <td>CLR</td>
      <td>26.321127</td>
      <td>M</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>06D</th>
      <td>NaN</td>
      <td>9.576389</td>
      <td>5.279167</td>
      <td>73.784179</td>
      <td>CLR</td>
      <td>-11.388060</td>
      <td>M</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="the-merge-version">The merge version</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(flights, daily<span style="color:#f92672">.</span>reset_index()<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;date&#39;</span>: <span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;station&#39;</span>: <span style="color:#e6db74">&#39;origin&#39;</span>}),
</span></span><span style="display:flex;"><span>             on<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;origin&#39;</span>])<span style="color:#f92672">.</span>set_index(idx_cols)<span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>airline_id</th>
      <th>origin_airport_id</th>
      <th>origin_airport_seq_id</th>
      <th>origin_city_market_id</th>
      <th>origin_city_name</th>
      <th>origin_state_nm</th>
      <th>dest_airport_id</th>
      <th>dest_airport_seq_id</th>
      <th>dest_city_market_id</th>
      <th>dest_city_name</th>
      <th>...</th>
      <th>gust_mph</th>
      <th>vsby</th>
      <th>sped</th>
      <th>relh</th>
      <th>skyc1</th>
      <th>tmpf</th>
      <th>skyc2</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th>origin</th>
      <th>dest</th>
      <th>tail_num</th>
      <th>fl_num</th>
      <th>fl_date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">AA</th>
      <th rowspan="5" valign="top">ABQ</th>
      <th rowspan="5" valign="top">DFW</th>
      <th rowspan="2" valign="top">N200AA</th>
      <th>1090</th>
      <th>2014-01-27</th>
      <td>19805</td>
      <td>10140</td>
      <td>1014002</td>
      <td>30140</td>
      <td>Albuquerque, NM</td>
      <td>New Mexico</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>Dallas/Fort Worth, TX</td>
      <td>...</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>6.737500</td>
      <td>34.267500</td>
      <td>SCT</td>
      <td>41.8325</td>
      <td>M</td>
      <td>1014.620833</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>1662</th>
      <th>2014-01-06</th>
      <td>19805</td>
      <td>10140</td>
      <td>1014002</td>
      <td>30140</td>
      <td>Albuquerque, NM</td>
      <td>New Mexico</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>Dallas/Fort Worth, TX</td>
      <td>...</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>9.270833</td>
      <td>27.249167</td>
      <td>CLR</td>
      <td>28.7900</td>
      <td>M</td>
      <td>1029.016667</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>N202AA</th>
      <th>1332</th>
      <th>2014-01-27</th>
      <td>19805</td>
      <td>10140</td>
      <td>1014002</td>
      <td>30140</td>
      <td>Albuquerque, NM</td>
      <td>New Mexico</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>Dallas/Fort Worth, TX</td>
      <td>...</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>6.737500</td>
      <td>34.267500</td>
      <td>SCT</td>
      <td>41.8325</td>
      <td>M</td>
      <td>1014.620833</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N426AA</th>
      <th>1467</th>
      <th>2014-01-15</th>
      <td>19805</td>
      <td>10140</td>
      <td>1014002</td>
      <td>30140</td>
      <td>Albuquerque, NM</td>
      <td>New Mexico</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>Dallas/Fort Worth, TX</td>
      <td>...</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>6.216667</td>
      <td>34.580000</td>
      <td>FEW</td>
      <td>40.2500</td>
      <td>M</td>
      <td>1027.800000</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>1662</th>
      <th>2014-01-09</th>
      <td>19805</td>
      <td>10140</td>
      <td>1014002</td>
      <td>30140</td>
      <td>Albuquerque, NM</td>
      <td>New Mexico</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>Dallas/Fort Worth, TX</td>
      <td>...</td>
      <td>NaN</td>
      <td>10.0</td>
      <td>3.087500</td>
      <td>42.162500</td>
      <td>FEW</td>
      <td>34.6700</td>
      <td>M</td>
      <td>1018.379167</td>
      <td>0.0</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 40 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m<span style="color:#f92672">.</span>sample(n<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>)<span style="color:#f92672">.</span>pipe((sns<span style="color:#f92672">.</span>jointplot, <span style="color:#e6db74">&#39;data&#39;</span>), <span style="color:#e6db74">&#39;sped&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;../content/images/indexes_sped_delay_join.svg&#39;</span>, transparent<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p><img loading="lazy" src="Indexes_files/Indexes_63_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;skyc1&#39;</span>)<span style="color:#f92672">.</span>dep_delay<span style="color:#f92672">.</span>agg([<span style="color:#e6db74">&#39;mean&#39;</span>, <span style="color:#e6db74">&#39;count&#39;</span>])<span style="color:#f92672">.</span>sort_values(by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;mean&#39;</span>)
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean</th>
      <th>count</th>
    </tr>
    <tr>
      <th>skyc1</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>M</th>
      <td>-1.948052</td>
      <td>77</td>
    </tr>
    <tr>
      <th>CLR</th>
      <td>11.222288</td>
      <td>115121</td>
    </tr>
    <tr>
      <th>FEW</th>
      <td>16.863177</td>
      <td>161727</td>
    </tr>
    <tr>
      <th>SCT</th>
      <td>17.803048</td>
      <td>19289</td>
    </tr>
    <tr>
      <th>BKN</th>
      <td>18.638034</td>
      <td>54030</td>
    </tr>
    <tr>
      <th>OVC</th>
      <td>21.667762</td>
      <td>52643</td>
    </tr>
    <tr>
      <th>VV</th>
      <td>30.487008</td>
      <td>9583</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.api <span style="color:#66d9ef">as</span> sm
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mod <span style="color:#f92672">=</span> sm<span style="color:#f92672">.</span>OLS<span style="color:#f92672">.</span>from_formula(<span style="color:#e6db74">&#39;dep_delay ~ C(skyc1) + distance + tmpf + relh + sped + mslp&#39;</span>, data<span style="color:#f92672">=</span>m)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> mod<span style="color:#f92672">.</span>fit()
</span></span><span style="display:flex;"><span>res<span style="color:#f92672">.</span>summary()
</span></span></code></pre></div><table class="simpletable">
<caption>OLS Regression Results</caption>
<tr>
  <th>Dep. Variable:</th>        <td>dep_delay</td>    <th>  R-squared:         </th>  <td>   0.026</td>  
</tr>
<tr>
  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   0.025</td>  
</tr>
<tr>
  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>   976.4</td>  
</tr>
<tr>
  <th>Date:</th>             <td>Sun, 10 Apr 2016</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>   
</tr>
<tr>
  <th>Time:</th>                 <td>16:06:15</td>     <th>  Log-Likelihood:    </th> <td>-2.1453e+06</td>
</tr>
<tr>
  <th>No. Observations:</th>      <td>410372</td>      <th>  AIC:               </th>  <td>4.291e+06</td> 
</tr>
<tr>
  <th>Df Residuals:</th>          <td>410360</td>      <th>  BIC:               </th>  <td>4.291e+06</td> 
</tr>
<tr>
  <th>Df Model:</th>              <td>    11</td>      <th>                     </th>      <td> </td>     
</tr>
<tr>
  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>     
</tr>
</table>
<table class="simpletable">
<tr>
         <td></td>            <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th> <th>[95.0% Conf. Int.]</th> 
</tr>
<tr>
  <th>Intercept</th>       <td> -331.1032</td> <td>   10.828</td> <td>  -30.577</td> <td> 0.000</td> <td> -352.327  -309.880</td>
</tr>
<tr>
  <th>C(skyc1)[T.CLR]</th> <td>   -4.4041</td> <td>    0.249</td> <td>  -17.662</td> <td> 0.000</td> <td>   -4.893    -3.915</td>
</tr>
<tr>
  <th>C(skyc1)[T.FEW]</th> <td>   -0.7330</td> <td>    0.226</td> <td>   -3.240</td> <td> 0.001</td> <td>   -1.176    -0.290</td>
</tr>
<tr>
  <th>C(skyc1)[T.M]</th>   <td>  -16.4341</td> <td>    8.681</td> <td>   -1.893</td> <td> 0.058</td> <td>  -33.448     0.580</td>
</tr>
<tr>
  <th>C(skyc1)[T.OVC]</th> <td>    0.3818</td> <td>    0.281</td> <td>    1.358</td> <td> 0.174</td> <td>   -0.169     0.933</td>
</tr>
<tr>
  <th>C(skyc1)[T.SCT]</th> <td>    0.8589</td> <td>    0.380</td> <td>    2.260</td> <td> 0.024</td> <td>    0.114     1.604</td>
</tr>
<tr>
  <th>C(skyc1)[T.VV ]</th> <td>    8.8603</td> <td>    0.509</td> <td>   17.414</td> <td> 0.000</td> <td>    7.863     9.858</td>
</tr>
<tr>
  <th>distance</th>        <td>    0.0008</td> <td>    0.000</td> <td>    6.174</td> <td> 0.000</td> <td>    0.001     0.001</td>
</tr>
<tr>
  <th>tmpf</th>            <td>   -0.1841</td> <td>    0.005</td> <td>  -38.390</td> <td> 0.000</td> <td>   -0.193    -0.175</td>
</tr>
<tr>
  <th>relh</th>            <td>    0.1626</td> <td>    0.004</td> <td>   38.268</td> <td> 0.000</td> <td>    0.154     0.171</td>
</tr>
<tr>
  <th>sped</th>            <td>    0.6096</td> <td>    0.018</td> <td>   33.716</td> <td> 0.000</td> <td>    0.574     0.645</td>
</tr>
<tr>
  <th>mslp</th>            <td>    0.3340</td> <td>    0.010</td> <td>   31.960</td> <td> 0.000</td> <td>    0.313     0.354</td>
</tr>
</table>
<table class="simpletable">
<tr>
  <th>Omnibus:</th>       <td>456713.147</td> <th>  Durbin-Watson:     </th>   <td>   1.872</td>  
</tr>
<tr>
  <th>Prob(Omnibus):</th>   <td> 0.000</td>   <th>  Jarque-Bera (JB):  </th> <td>76162962.824</td>
</tr>
<tr>
  <th>Skew:</th>            <td> 5.535</td>   <th>  Prob(JB):          </th>   <td>    0.00</td>  
</tr>
<tr>
  <th>Kurtosis:</th>        <td>68.816</td>   <th>  Cond. No.          </th>   <td>2.07e+05</td>  
</tr>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>scatter(res<span style="color:#f92672">.</span>fittedvalues, res<span style="color:#f92672">.</span>resid, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;.&#39;</span>, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.25</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set(xlabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Predicted&#39;</span>, ylabel<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Residual&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>savefig(<span style="color:#e6db74">&#39;../content/images/indexes_resid_fit.png&#39;</span>, transparent<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p><img loading="lazy" src="Indexes_files/Indexes_67_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
      <th>skyc1</th>
      <th>skyc2</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>station</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">01M</th>
      <th>2014-01-01 00:15:00</th>
      <td>33.80</td>
      <td>85.86</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 00:35:00</th>
      <td>33.44</td>
      <td>87.11</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 00:55:00</th>
      <td>32.54</td>
      <td>90.97</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:15:00</th>
      <td>31.82</td>
      <td>93.65</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:35:00</th>
      <td>32.00</td>
      <td>92.97</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>CLR</td>
      <td>M</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read</span>(fp):
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(fp)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>str<span style="color:#f92672">.</span>lower)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#39;unnamed: 36&#39;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>pipe(extract_city_name)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>pipe(time_to_datetime, [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;arr_time&#39;</span>, <span style="color:#e6db74">&#39;crs_arr_time&#39;</span>, <span style="color:#e6db74">&#39;crs_dep_time&#39;</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>assign(fl_date<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>to_datetime(x[<span style="color:#e6db74">&#39;fl_date&#39;</span>]),
</span></span><span style="display:flex;"><span>                    dest<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;dest&#39;</span>]),
</span></span><span style="display:flex;"><span>                    origin<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;origin&#39;</span>]),
</span></span><span style="display:flex;"><span>                    tail_num<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;tail_num&#39;</span>]),
</span></span><span style="display:flex;"><span>                    unique_carrier<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;unique_carrier&#39;</span>]),
</span></span><span style="display:flex;"><span>                    cancellation_code<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;cancellation_code&#39;</span>])))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">extract_city_name</span>(df):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Chicago, IL -&gt; Chicago for origin_city_name and dest_city_name
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;origin_city_name&#39;</span>, <span style="color:#e6db74">&#39;dest_city_name&#39;</span>]
</span></span><span style="display:flex;"><span>    city <span style="color:#f92672">=</span> df[cols]<span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>extract(<span style="color:#e6db74">&#34;(.*), \w</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>))
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>    df[[<span style="color:#e6db74">&#39;origin_city_name&#39;</span>, <span style="color:#e6db74">&#39;dest_city_name&#39;</span>]] <span style="color:#f92672">=</span> city
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">time_to_datetime</span>(df, columns):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Combine all time items into datetimes.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    2014-01-01,0914 -&gt; 2014-01-01 09:14:00
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">converter</span>(col):
</span></span><span style="display:flex;"><span>        timepart <span style="color:#f92672">=</span> (col<span style="color:#f92672">.</span>astype(str)
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;\.0$&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)  <span style="color:#75715e"># NaNs force float dtype</span>
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>pad(<span style="color:#ae81ff">4</span>, fillchar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0&#39;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>  pd<span style="color:#f92672">.</span>to_datetime(df[<span style="color:#e6db74">&#39;fl_date&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>),
</span></span><span style="display:flex;"><span>                               errors<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;coerce&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> datetime_part
</span></span><span style="display:flex;"><span>    df[columns] <span style="color:#f92672">=</span> df[columns]<span style="color:#f92672">.</span>apply(converter)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flights <span style="color:#f92672">=</span> read(<span style="color:#e6db74">&#34;878167309_T_ONTIME.csv&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>locs <span style="color:#f92672">=</span> weather<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>levels[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">&amp;</span> flights<span style="color:#f92672">.</span>origin<span style="color:#f92672">.</span>unique()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(weather<span style="color:#f92672">.</span>reset_index(level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;station&#39;</span>)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;station in @locs&#39;</span>)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;station&#39;</span>, pd<span style="color:#f92672">.</span>TimeGrouper(<span style="color:#e6db74">&#39;H&#39;</span>)]))<span style="color:#f92672">.</span>mean()
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
    </tr>
    <tr>
      <th>station</th>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">ABE</th>
      <th>2014-01-01 00:00:00</th>
      <td>26.06</td>
      <td>47.82</td>
      <td>14.8</td>
      <td>1024.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>21.7</td>
    </tr>
    <tr>
      <th>2014-01-01 01:00:00</th>
      <td>24.08</td>
      <td>51.93</td>
      <td>8.0</td>
      <td>1025.2</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 02:00:00</th>
      <td>24.08</td>
      <td>49.87</td>
      <td>6.8</td>
      <td>1025.7</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 03:00:00</th>
      <td>23.00</td>
      <td>52.18</td>
      <td>9.1</td>
      <td>1026.2</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-01 04:00:00</th>
      <td>23.00</td>
      <td>52.18</td>
      <td>4.6</td>
      <td>1026.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="5" valign="top">XNA</th>
      <th>2014-01-30 19:00:00</th>
      <td>44.96</td>
      <td>38.23</td>
      <td>16.0</td>
      <td>1009.7</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>25.1</td>
    </tr>
    <tr>
      <th>2014-01-30 20:00:00</th>
      <td>46.04</td>
      <td>41.74</td>
      <td>16.0</td>
      <td>1010.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 21:00:00</th>
      <td>46.04</td>
      <td>41.74</td>
      <td>13.7</td>
      <td>1010.9</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>20.5</td>
    </tr>
    <tr>
      <th>2014-01-30 22:00:00</th>
      <td>42.98</td>
      <td>46.91</td>
      <td>11.4</td>
      <td>1011.5</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2014-01-30 23:00:00</th>
      <td>39.92</td>
      <td>54.81</td>
      <td>3.4</td>
      <td>1012.2</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>191445 rows × 7 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> (flights<span style="color:#f92672">.</span>copy()[[<span style="color:#e6db74">&#39;unique_carrier&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>, <span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dep_time&#39;</span>]]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;origin in @locs&#39;</span>))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>loc[<span style="color:#e6db74">&#39;DSM&#39;</span>]
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>tmpf</th>
      <th>relh</th>
      <th>sped</th>
      <th>mslp</th>
      <th>p01i</th>
      <th>vsby</th>
      <th>gust_mph</th>
      <th>skyc1</th>
      <th>skyc2</th>
      <th>skyc3</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2014-01-01 00:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>10.3</td>
      <td>1024.9</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>FEW</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 01:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>11.4</td>
      <td>1025.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 02:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>8.0</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 03:54:00</th>
      <td>10.94</td>
      <td>72.79</td>
      <td>9.1</td>
      <td>1025.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>OVC</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-01 04:54:00</th>
      <td>10.04</td>
      <td>72.69</td>
      <td>9.1</td>
      <td>1024.7</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>BKN</td>
      <td>M</td>
      <td>M</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2014-01-30 19:54:00</th>
      <td>30.92</td>
      <td>55.99</td>
      <td>28.5</td>
      <td>1006.3</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>35.3</td>
      <td>FEW</td>
      <td>FEW</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-30 20:54:00</th>
      <td>30.02</td>
      <td>55.42</td>
      <td>14.8</td>
      <td>1008.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>28.5</td>
      <td>FEW</td>
      <td>FEW</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-30 21:54:00</th>
      <td>28.04</td>
      <td>55.12</td>
      <td>18.2</td>
      <td>1010.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>26.2</td>
      <td>FEW</td>
      <td>FEW</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-30 22:54:00</th>
      <td>26.06</td>
      <td>57.04</td>
      <td>13.7</td>
      <td>1011.8</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>FEW</td>
      <td>FEW</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2014-01-30 23:54:00</th>
      <td>21.92</td>
      <td>62.13</td>
      <td>13.7</td>
      <td>1013.4</td>
      <td>0.0</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>FEW</td>
      <td>FEW</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
<p>896 rows × 10 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df
</span></span></code></pre></div><div>
<table border="0" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>unique_carrier</th>
      <th>airline_id</th>
      <th>tail_num</th>
      <th>fl_num</th>
      <th>origin_airport_id</th>
      <th>origin_airport_seq_id</th>
      <th>origin_city_market_id</th>
      <th>origin</th>
      <th>origin_city_name</th>
      <th>...</th>
      <th>arr_delay</th>
      <th>cancelled</th>
      <th>cancellation_code</th>
      <th>diverted</th>
      <th>distance</th>
      <th>carrier_delay</th>
      <th>weather_delay</th>
      <th>nas_delay</th>
      <th>security_delay</th>
      <th>late_aircraft_delay</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2014-01-01</td>
      <td>AA</td>
      <td>19805</td>
      <td>N338AA</td>
      <td>1</td>
      <td>12478</td>
      <td>1247802</td>
      <td>31703</td>
      <td>JFK</td>
      <td>New York</td>
      <td>...</td>
      <td>13.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2475.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2014-01-01</td>
      <td>AA</td>
      <td>19805</td>
      <td>N339AA</td>
      <td>2</td>
      <td>12892</td>
      <td>1289203</td>
      <td>32575</td>
      <td>LAX</td>
      <td>Los Angeles</td>
      <td>...</td>
      <td>111.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2475.0</td>
      <td>111.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2014-01-01</td>
      <td>AA</td>
      <td>19805</td>
      <td>N335AA</td>
      <td>3</td>
      <td>12478</td>
      <td>1247802</td>
      <td>31703</td>
      <td>JFK</td>
      <td>New York</td>
      <td>...</td>
      <td>13.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>2475.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2014-01-01</td>
      <td>AA</td>
      <td>19805</td>
      <td>N367AA</td>
      <td>5</td>
      <td>11298</td>
      <td>1129803</td>
      <td>30194</td>
      <td>DFW</td>
      <td>Dallas/Fort Worth</td>
      <td>...</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>3784.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2014-01-01</td>
      <td>AA</td>
      <td>19805</td>
      <td>N364AA</td>
      <td>6</td>
      <td>13830</td>
      <td>1383002</td>
      <td>33830</td>
      <td>OGG</td>
      <td>Kahului</td>
      <td>...</td>
      <td>-8.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>3711.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>471944</th>
      <td>2014-01-31</td>
      <td>OO</td>
      <td>20304</td>
      <td>N292SW</td>
      <td>5313</td>
      <td>12889</td>
      <td>1288903</td>
      <td>32211</td>
      <td>LAS</td>
      <td>Las Vegas</td>
      <td>...</td>
      <td>-7.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>259.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>471945</th>
      <td>2014-01-31</td>
      <td>OO</td>
      <td>20304</td>
      <td>N580SW</td>
      <td>5314</td>
      <td>12892</td>
      <td>1289203</td>
      <td>32575</td>
      <td>LAX</td>
      <td>Los Angeles</td>
      <td>...</td>
      <td>-12.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>89.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>471946</th>
      <td>2014-01-31</td>
      <td>OO</td>
      <td>20304</td>
      <td>N580SW</td>
      <td>5314</td>
      <td>14689</td>
      <td>1468902</td>
      <td>34689</td>
      <td>SBA</td>
      <td>Santa Barbara</td>
      <td>...</td>
      <td>11.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>89.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>471947</th>
      <td>2014-01-31</td>
      <td>OO</td>
      <td>20304</td>
      <td>N216SW</td>
      <td>5315</td>
      <td>11292</td>
      <td>1129202</td>
      <td>30325</td>
      <td>DEN</td>
      <td>Denver</td>
      <td>...</td>
      <td>56.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>260.0</td>
      <td>36.0</td>
      <td>0.0</td>
      <td>13.0</td>
      <td>0.0</td>
      <td>7.0</td>
    </tr>
    <tr>
      <th>471948</th>
      <td>2014-01-31</td>
      <td>OO</td>
      <td>20304</td>
      <td>N216SW</td>
      <td>5315</td>
      <td>14543</td>
      <td>1454302</td>
      <td>34543</td>
      <td>RKS</td>
      <td>Rock Springs</td>
      <td>...</td>
      <td>47.0</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>260.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>4.0</td>
      <td>0.0</td>
      <td>43.0</td>
    </tr>
  </tbody>
</table>
<p>471949 rows × 36 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dep<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>0        2014-01-01 09:14:00
1        2014-01-01 11:32:00
2        2014-01-01 11:57:00
3        2014-01-01 13:07:00
4        2014-01-01 17:53:00
                 ...        
163906   2014-01-11 16:57:00
163910   2014-01-11 11:04:00
181062   2014-01-12 17:02:00
199092   2014-01-13 23:36:00
239150   2014-01-16 16:46:00
Name: dep_time, dtype: datetime64[ns]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>dep_time
</span></span></code></pre></div><pre><code>0        2014-01-01 09:14:00
1        2014-01-01 11:32:00
2        2014-01-01 11:57:00
3        2014-01-01 13:07:00
4        2014-01-01 17:53:00
                 ...        
471944   2014-01-31 09:05:00
471945   2014-01-31 09:24:00
471946   2014-01-31 10:39:00
471947   2014-01-31 09:28:00
471948   2014-01-31 11:22:00
Name: dep_time, dtype: datetime64[ns]
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>dep_time<span style="color:#f92672">.</span>unique()
</span></span></code></pre></div><pre><code>array(['2014-01-01T03:14:00.000000000-0600',
       '2014-01-01T05:32:00.000000000-0600',
       '2014-01-01T05:57:00.000000000-0600', ...,
       '2014-01-30T18:44:00.000000000-0600',
       '2014-01-31T17:16:00.000000000-0600',
       '2014-01-30T18:47:00.000000000-0600'], dtype='datetime64[ns]')
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>stations
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>dep_time<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>0   2014-01-01 09:14:00
1   2014-01-01 11:32:00
2   2014-01-01 11:57:00
3   2014-01-01 13:07:00
4   2014-01-01 17:53:00
Name: dep_time, dtype: datetime64[ns]
</code></pre>
]]></content:encoded></item><item><title>Modern Pandas (Part 4): Performance</title><link>https://tomaugspurger.github.io/posts/modern-4-performance/</link><pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-4-performance/</guid><description>This is part 4 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Wes McKinney, the creator of pandas, is kind of obsessed with performance. From micro-optimizations for element access, to embedding a fast hash table inside pandas, we all benefit from his and others&amp;rsquo; hard work. This post will focus mainly on making efficient use of pandas and NumPy.</description><content:encoded><![CDATA[<hr>
<p>This is part 4 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<p><a href="https://twitter.com/wesmckinn">Wes McKinney</a>, the creator of pandas, is kind of obsessed with performance. From micro-optimizations for element access, to <a href="https://github.com/pydata/pandas/tree/master/pandas/src/klib">embedding</a> a fast hash table inside pandas, we all benefit from his and others&rsquo; hard work.
This post will focus mainly on making efficient use of pandas and NumPy.</p>
<p>One thing I&rsquo;ll explicitly not touch on is storage formats.
Performance is just one of many factors that go into choosing a storage format.
Just know that pandas can talk to <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/io.html">many formats</a>, and the format that strikes the right balance between performance, portability, data-types, metadata handling, etc., is an <a href="http://blog.cloudera.com/blog/2016/03/feather-a-fast-on-disk-format-for-data-frames-for-r-and-python-powered-by-apache-arrow/">ongoing</a> topic of discussion.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> int(os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;MODERN_PANDAS_EPUB&#34;</span>, <span style="color:#ae81ff">0</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> prep <span style="color:#75715e"># noqa</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_style(<span style="color:#e6db74">&#39;ticks&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_context(<span style="color:#e6db74">&#39;talk&#39;</span>)
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>options<span style="color:#f92672">.</span>display<span style="color:#f92672">.</span>max_rows <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span></code></pre></div><h2 id="constructors">Constructors</h2>
<p>It&rsquo;s pretty common to have many similar sources (say a bunch of CSVs) that need to be combined into a single DataFrame. There are two routes to the same end:</p>
<ol>
<li>Initialize one DataFrame and append to that</li>
<li>Make many smaller DataFrames and concatenate at the end</li>
</ol>
<p>For pandas, the second option is faster.
DataFrame appends are expensive relative to a list append.
Depending on the values, pandas might have to recast the data to a different type.
And indexes are immutable, so each time you append pandas has to create an entirely new one.</p>
<p>In the last section we downloaded a bunch of weather files, one per state, writing each to a separate CSV.
One could imagine coming back later to read them in, using the following code.</p>
<p>The idiomatic python way</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>files <span style="color:#f92672">=</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;weather/*.csv&#39;</span>)
</span></span><span style="display:flex;"><span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;station&#39;</span>, <span style="color:#e6db74">&#39;date&#39;</span>, <span style="color:#e6db74">&#39;tmpf&#39;</span>, <span style="color:#e6db74">&#39;relh&#39;</span>, <span style="color:#e6db74">&#39;sped&#39;</span>, <span style="color:#e6db74">&#39;mslp&#39;</span>,
</span></span><span style="display:flex;"><span>           <span style="color:#e6db74">&#39;p01i&#39;</span>, <span style="color:#e6db74">&#39;vsby&#39;</span>, <span style="color:#e6db74">&#39;gust_mph&#39;</span>, <span style="color:#e6db74">&#39;skyc1&#39;</span>, <span style="color:#e6db74">&#39;skyc2&#39;</span>, <span style="color:#e6db74">&#39;skyc3&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># init empty DataFrame, like you might for a list</span>
</span></span><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(columns<span style="color:#f92672">=</span>columns)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> fp <span style="color:#f92672">in</span> files:
</span></span><span style="display:flex;"><span>    city <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(fp, columns<span style="color:#f92672">=</span>columns)
</span></span><span style="display:flex;"><span>    weather<span style="color:#f92672">.</span>append(city)
</span></span></code></pre></div><p>This is pretty standard code, quite similar to building up a list of tuples, say.
The only nitpick is that you&rsquo;d probably use a list-comprehension if you were just making a list.
But we don&rsquo;t have special syntax for DataFrame-comprehensions (if only), so you&rsquo;d fall back to the &ldquo;initialize empty container, append to said container&rdquo; pattern.</p>
<p>But there&rsquo;s a better, pandorable, way</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>files <span style="color:#f92672">=</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;weather/*.csv&#39;</span>)
</span></span><span style="display:flex;"><span>weather_dfs <span style="color:#f92672">=</span> [pd<span style="color:#f92672">.</span>read_csv(fp, names<span style="color:#f92672">=</span>columns) <span style="color:#66d9ef">for</span> fp <span style="color:#f92672">in</span> files]
</span></span><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat(weather_dfs)
</span></span></code></pre></div><p>Subjectively this is cleaner and more beautiful.
There&rsquo;s fewer lines of code.
You don&rsquo;t have this extraneous detail of building an empty DataFrame.
And objectively the pandorable way is faster, as we&rsquo;ll test next.</p>
<p>We&rsquo;ll define two functions for building an identical DataFrame. The first <code>append_df</code>, creates an empty DataFrame and appends to it. The second, <code>concat_df</code>,  creates many DataFrames, and concatenates them at the end. We also write a short decorator that runs the functions a handful of times and records the results.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>size_per <span style="color:#f92672">=</span> <span style="color:#ae81ff">5000</span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>cols <span style="color:#f92672">=</span> list(<span style="color:#e6db74">&#39;abcd&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">timed</span>(n<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Running a microbenchmark. Never use this.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">deco</span>(func):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>            timings <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(n):
</span></span><span style="display:flex;"><span>                t0 <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>                func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>                t1 <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>                timings<span style="color:#f92672">.</span>append(t1 <span style="color:#f92672">-</span> t0)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> timings
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> deco
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@timed</span>(<span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">append_df</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    The pythonic (bad) way
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(columns<span style="color:#f92672">=</span>cols)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N):
</span></span><span style="display:flex;"><span>        df<span style="color:#f92672">.</span>append(pd<span style="color:#f92672">.</span>DataFrame(np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randn(size_per, <span style="color:#ae81ff">4</span>), columns<span style="color:#f92672">=</span>cols))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@timed</span>(<span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">concat_df</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    The pandorabe (good) way
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    dfs <span style="color:#f92672">=</span> [pd<span style="color:#f92672">.</span>DataFrame(np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randn(size_per, <span style="color:#ae81ff">4</span>), columns<span style="color:#f92672">=</span>cols)
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(N)]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pd<span style="color:#f92672">.</span>concat(dfs, ignore_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>t_append <span style="color:#f92672">=</span> append_df()
</span></span><span style="display:flex;"><span>t_concat <span style="color:#f92672">=</span> concat_df()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timings <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#34;Append&#34;</span>: t_append, <span style="color:#e6db74">&#34;Concat&#34;</span>: t_concat})
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">.</span>stack()
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#ae81ff">0</span>: <span style="color:#e6db74">&#39;Time (s)&#39;</span>,
</span></span><span style="display:flex;"><span>                              <span style="color:#e6db74">&#39;level_1&#39;</span>: <span style="color:#e6db74">&#39;Method&#39;</span>}))
</span></span><span style="display:flex;"><span>timings<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>level_0</th>
      <th>Method</th>
      <th>Time (s)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>Append</td>
      <td>0.171326</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>Concat</td>
      <td>0.096445</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>Append</td>
      <td>0.155903</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>Concat</td>
      <td>0.095105</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2</td>
      <td>Append</td>
      <td>0.155185</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>boxplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Method&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Time (s)&#39;</span>, data<span style="color:#f92672">=</span>timings)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>tight_layout()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_4_performance_6_0.png" alt="png"  />
</p>
<h2 id="datatypes">Datatypes</h2>
<p>The pandas type system essentially <a href="http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html">NumPy&rsquo;s</a> with a few extensions (<code>categorical</code>, <code>datetime64</code> with timezone, <code>timedelta64</code>).
An advantage of the DataFrame over a 2-dimensional NumPy array is that the DataFrame can have columns of various types within a single table.
That said, each column should have a specific dtype; you don&rsquo;t want to be mixing bools with ints with strings within a single column.
For one thing, this is slow.
It forces the column to be have an <code>object</code> dtype (the fallback python-object container type), which means you don&rsquo;t get any of the type-specific optimizations in pandas or NumPy.
For another, it means you&rsquo;re probably violating the maxims of tidy data, which we&rsquo;ll discuss next time.</p>
<p>When should you have <code>object</code> columns?
There are a few places where the NumPy / pandas type system isn&rsquo;t as rich as you might like.
There&rsquo;s no integer NA (at the moment anyway), so if you have any missing values, represented by <code>NaN</code>, your otherwise integer column will be floats.
There&rsquo;s also no <code>date</code> dtype (distinct from <code>datetime</code>).
Consider the needs of your application: can you treat an integer <code>1</code> as <code>1.0</code>?
Can you treat <code>date(2016, 1, 1)</code> as <code>datetime(2016, 1, 1, 0, 0)</code>?
In my experience, this is rarely a problem other than when writing to something with a stricter schema like a database.
But at that point it&rsquo;s fine to cast to one of the less performant types, since you&rsquo;re just not doing numeric operations anymore.</p>
<p>The last case of <code>object</code> dtype data is text data.
Pandas doesn&rsquo;t have any fixed-width string dtypes, so you&rsquo;re stuck with python objects.
There is an important exception here, and that&rsquo;s low-cardinality text data, for which you&rsquo;ll want to use the <code>category</code> dtype (see below).</p>
<p>If you have object data (either strings or python objects) that needs to be converted, checkout the <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/generated/pandas.to_numeric.html"><code>to_numeric</code></a>, <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/generated/pandas.to_datetime.html"><code>to_datetime</code></a> and <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/generated/pandas.to_timedelta.html"><code>to_timedelta</code></a> methods.</p>
<h2 id="iteration-apply-and-vectorization">Iteration, Apply, And Vectorization</h2>
<p>We know that <a href="https://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/">&ldquo;Python is slow&rdquo;</a> (scare  quotes since that statement is too broad to be meaningful).
There are various steps that can be taken to improve your code&rsquo;s performance from relatively simple changes, to rewriting your code in a lower-level language, to trying to parallelize it.
And while you might have many options, there&rsquo;s typically an order you would proceed in.</p>
<p>First (and I know it&rsquo;s cliché to say so, but still) benchmark your code.
Make sure you actually need to spend time optimizing it.
There are <a href="https://github.com/nvdv/vprof">many</a> <a href="https://jiffyclub.github.io/snakeviz/">options</a> <a href="https://github.com/rkern/line_profiler">for</a> <a href="https://docs.python.org/3.5/library/timeit.html">benchmarking</a> and visualizing where things are slow.</p>
<p>Second, consider your algorithm.
Make sure you aren&rsquo;t doing more work than you need to.
A common one I see is doing a full sort on an array, just to select the <code>N</code> largest or smallest items.
Pandas has methods for that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;data/347136217_T_ONTIME.csv&#34;</span>)
</span></span><span style="display:flex;"><span>delays <span style="color:#f92672">=</span> df[<span style="color:#e6db74">&#39;DEP_DELAY&#39;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Select the 5 largest delays</span>
</span></span><span style="display:flex;"><span>delays<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">5</span>)<span style="color:#f92672">.</span>sort_values()
</span></span></code></pre></div><pre><code>112623    1480.0
158136    1545.0
152911    1934.0
60246     1970.0
59719     2755.0
Name: DEP_DELAY, dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>delays<span style="color:#f92672">.</span>nsmallest(<span style="color:#ae81ff">5</span>)<span style="color:#f92672">.</span>sort_values()
</span></span></code></pre></div><pre><code>300895   -59.0
235921   -58.0
197897   -56.0
332533   -56.0
344542   -55.0
Name: DEP_DELAY, dtype: float64
</code></pre>
<p>We follow up the <code>nlargest</code> or <code>nsmallest</code> with a sort (the result of <code>nlargest/smallest</code> is unordered), but it&rsquo;s much easier to sort 5 items that 500,000. The timings bear this out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>timeit delays<span style="color:#f92672">.</span>sort_values()<span style="color:#f92672">.</span>tail(<span style="color:#ae81ff">5</span>)
</span></span></code></pre></div><pre><code>31 ms ± 1.05 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>timeit delays<span style="color:#f92672">.</span>nlargest(<span style="color:#ae81ff">5</span>)<span style="color:#f92672">.</span>sort_values()
</span></span></code></pre></div><pre><code>7.87 ms ± 113 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p>&ldquo;Use the right algorithm&rdquo; is easy to say, but harder to apply in practice since you have to actually figure out the best algorithm to use.
That one comes down to experience.</p>
<p>Assuming you&rsquo;re at a spot that needs optimizing, and you&rsquo;ve got the correct algorithm, <em>and</em> there isn&rsquo;t a readily available optimized version of what you need in pandas/numpy/scipy/scikit-learn/statsmodels/&hellip;, then what?</p>
<p>The first place to turn is probably a vectorized NumPy implementation.
Vectorization here means operating directly on arrays, rather than looping over lists scalars.
This is generally much less work than rewriting it in something like Cython, and you can get pretty good results just by making <em>effective</em> use of NumPy and pandas.
While not every operation can be vectorized, many can.</p>
<p>Let&rsquo;s work through an example calculating the <a href="https://en.wikipedia.org/wiki/Great-circle_distance">Great-circle distance</a> between airports.
Grab the table of airport latitudes and longitudes from the <a href="http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=288&amp;DB_Short_Name=Aviation%20Support%20Tables">BTS website</a> and extract it to a CSV.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> utils <span style="color:#f92672">import</span> download_airports
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> zipfile
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#34;data/airports.csv.zip&#34;</span>):
</span></span><span style="display:flex;"><span>    download_airports()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coord <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;data/airports.csv.zip&#34;</span>, index_col<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;AIRPORT&#39;</span>],
</span></span><span style="display:flex;"><span>                     usecols<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;AIRPORT&#39;</span>, <span style="color:#e6db74">&#39;LATITUDE&#39;</span>, <span style="color:#e6db74">&#39;LONGITUDE&#39;</span>])
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>groupby(level<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)<span style="color:#f92672">.</span>first()
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>sample(n<span style="color:#f92672">=</span><span style="color:#ae81ff">500</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>sort_index())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>coord<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>LATITUDE</th>
      <th>LONGITUDE</th>
    </tr>
    <tr>
      <th>AIRPORT</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>8F3</th>
      <td>33.623889</td>
      <td>-101.240833</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>58.457500</td>
      <td>-154.023333</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>60.482222</td>
      <td>-146.582222</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>63.541667</td>
      <td>-150.993889</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>59.331667</td>
      <td>-135.896667</td>
    </tr>
  </tbody>
</table>
</div>
<p>For whatever reason, suppose we&rsquo;re interested in all the pairwise distances (I&rsquo;ve limited it to just a sample of 500 airports to make this manageable.
In the real world you <em>probably</em> don&rsquo;t need <em>all</em> the pairwise distances and would be better off with a <a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KDTree.html">tree</a>. Remember: think about what you actually need, and find the right algorithm for that).</p>
<p>MultiIndexes have an alternative <code>from_product</code> constructor for getting the <a href="https://en.wikipedia.org/wiki/Cartesian_product">Cartesian product</a> of the arrays you pass in.
We&rsquo;ll give it <code>coords.index</code> twice (to get its Cartesian product with itself).
That gives a MultiIndex of all the combination.
With some minor reshaping of <code>coords</code> we&rsquo;ll have a DataFrame with all the latitude/longitude pairs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>idx <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>MultiIndex<span style="color:#f92672">.</span>from_product([coord<span style="color:#f92672">.</span>index, coord<span style="color:#f92672">.</span>index],
</span></span><span style="display:flex;"><span>                                 names<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dest&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pairs <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([coord<span style="color:#f92672">.</span>add_suffix(<span style="color:#e6db74">&#39;_1&#39;</span>)<span style="color:#f92672">.</span>reindex(idx, level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;origin&#39;</span>),
</span></span><span style="display:flex;"><span>                   coord<span style="color:#f92672">.</span>add_suffix(<span style="color:#e6db74">&#39;_2&#39;</span>)<span style="color:#f92672">.</span>reindex(idx, level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dest&#39;</span>)],
</span></span><span style="display:flex;"><span>                  axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>pairs<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>LATITUDE_1</th>
      <th>LONGITUDE_1</th>
      <th>LATITUDE_2</th>
      <th>LONGITUDE_2</th>
    </tr>
    <tr>
      <th>origin</th>
      <th>dest</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">8F3</th>
      <th>8F3</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>33.623889</td>
      <td>-101.240833</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>58.457500</td>
      <td>-154.023333</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>60.482222</td>
      <td>-146.582222</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>63.541667</td>
      <td>-150.993889</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>59.331667</td>
      <td>-135.896667</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>idx <span style="color:#f92672">=</span> idx[idx<span style="color:#f92672">.</span>get_level_values(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;=</span> idx<span style="color:#f92672">.</span>get_level_values(<span style="color:#ae81ff">1</span>)]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>len(idx)
</span></span></code></pre></div><pre><code>125250
</code></pre>
<p>We&rsquo;ll break that down a bit, but don&rsquo;t lose sight of the real target: our great-circle distance calculation.</p>
<p>The <code>add_suffix</code> (and <code>add_prefix</code>) method is handy for quickly renaming the columns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coord<span style="color:#f92672">.</span>add_suffix(<span style="color:#e6db74">&#39;_1&#39;</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>LATITUDE_1</th>
      <th>LONGITUDE_1</th>
    </tr>
    <tr>
      <th>AIRPORT</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>8F3</th>
      <td>33.623889</td>
      <td>-101.240833</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>58.457500</td>
      <td>-154.023333</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>60.482222</td>
      <td>-146.582222</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>63.541667</td>
      <td>-150.993889</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>59.331667</td>
      <td>-135.896667</td>
    </tr>
  </tbody>
</table>
</div>
<p>Alternatively you could use the more general <code>.rename</code> like <code>coord.rename(columns=lambda x: x + '_1')</code>.</p>
<p>Next, we have the <code>reindex</code>.
Like I mentioned in the prior chapter, indexes are crucial to pandas.
<code>.reindex</code> is all about aligning a Series or DataFrame to a given index.
In this case we use <code>.reindex</code> to align our original DataFrame to the new
MultiIndex of combinations.
By default, the output will have the original value if that index label was already present, and <code>NaN</code> otherwise.
If we just called <code>coord.reindex(idx)</code>, with no additional arguments, we&rsquo;d get a DataFrame of all <code>NaN</code>s.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coord<span style="color:#f92672">.</span>reindex(idx)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>LATITUDE</th>
      <th>LONGITUDE</th>
    </tr>
    <tr>
      <th>origin</th>
      <th>dest</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">8F3</th>
      <th>8F3</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
<p>That&rsquo;s because there weren&rsquo;t any values of <code>idx</code> that were in <code>coord.index</code>,
which makes sense since <code>coord.index</code> is just a regular one-level Index, while <code>idx</code> is a MultiIndex.
We use the <code>level</code> keyword to handle the transition from the original single-level Index, to the two-leveled <code>idx</code>.</p>
<blockquote>
<p><code>level</code> : int or name</p>
</blockquote>
<p>Broadcast across a level, matching Index values on the
passed MultiIndex level</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>coord<span style="color:#f92672">.</span>reindex(idx, level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dest&#39;</span>)<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>LATITUDE</th>
      <th>LONGITUDE</th>
    </tr>
    <tr>
      <th>origin</th>
      <th>dest</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">8F3</th>
      <th>8F3</th>
      <td>33.623889</td>
      <td>-101.240833</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>58.457500</td>
      <td>-154.023333</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>60.482222</td>
      <td>-146.582222</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>63.541667</td>
      <td>-150.993889</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>59.331667</td>
      <td>-135.896667</td>
    </tr>
  </tbody>
</table>
</div>
<p>If you ever need to do an operation that mixes regular single-level indexes with Multilevel Indexes, look for a level keyword argument.
For example, all the arithmatic methods (<code>.mul</code>, <code>.add</code>, etc.) have them.</p>
<p>This is a bit wasteful since the distance from airport <code>A</code> to <code>B</code> is the same as <code>B</code> to <code>A</code>.
We could easily fix this with a <code>idx = idx[idx.get_level_values(0) &lt;= idx.get_level_values(1)]</code>, but we&rsquo;ll ignore that for now.</p>
<p>Quick tangent, I got some&hellip; let&rsquo;s say skepticism, on my last piece about the value of indexes.
Here&rsquo;s an alternative version for the skeptics</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> product, chain
</span></span><span style="display:flex;"><span>coord2 <span style="color:#f92672">=</span> coord<span style="color:#f92672">.</span>reset_index()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> product(coord2<span style="color:#f92672">.</span>add_suffix(<span style="color:#e6db74">&#39;_1&#39;</span>)<span style="color:#f92672">.</span>itertuples(index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>),
</span></span><span style="display:flex;"><span>            coord2<span style="color:#f92672">.</span>add_suffix(<span style="color:#e6db74">&#39;_2&#39;</span>)<span style="color:#f92672">.</span>itertuples(index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>))
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> [list(chain<span style="color:#f92672">.</span>from_iterable(z)) <span style="color:#66d9ef">for</span> z <span style="color:#f92672">in</span> x]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df2 <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>DataFrame(y, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;LATITUDE_1&#39;</span>, <span style="color:#e6db74">&#39;LONGITUDE_1&#39;</span>,
</span></span><span style="display:flex;"><span>                                <span style="color:#e6db74">&#39;dest&#39;</span>, <span style="color:#e6db74">&#39;LATITUDE_1&#39;</span>, <span style="color:#e6db74">&#39;LONGITUDE_2&#39;</span>])
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">.</span>set_index([<span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dest&#39;</span>]))
</span></span><span style="display:flex;"><span>df2<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>LATITUDE_1</th>
      <th>LONGITUDE_1</th>
      <th>LATITUDE_1</th>
      <th>LONGITUDE_2</th>
    </tr>
    <tr>
      <th>origin</th>
      <th>dest</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">8F3</th>
      <th>8F3</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>33.623889</td>
      <td>-101.240833</td>
    </tr>
    <tr>
      <th>A03</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>58.457500</td>
      <td>-154.023333</td>
    </tr>
    <tr>
      <th>A09</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>60.482222</td>
      <td>-146.582222</td>
    </tr>
    <tr>
      <th>A18</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>63.541667</td>
      <td>-150.993889</td>
    </tr>
    <tr>
      <th>A24</th>
      <td>33.623889</td>
      <td>-101.240833</td>
      <td>59.331667</td>
      <td>-135.896667</td>
    </tr>
  </tbody>
</table>
</div>
<p>It&rsquo;s also readable (it&rsquo;s Python after all), though a bit slower.
To me the <code>.reindex</code> method seems more natural.
My thought process was, &ldquo;I need all the combinations of origin &amp; destination (<code>MultiIndex.from_product</code>).
Now I need to align this original DataFrame to this new MultiIndex (<code>coords.reindex</code>).&rdquo;</p>
<p>With that diversion out of the way, let&rsquo;s turn back to our great-circle distance calculation.
Our first implementation is pure python.
The algorithm itself isn&rsquo;t too important, all that matters is that we&rsquo;re doing math operations on scalars.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gcd_py</span>(lat1, lng1, lat2, lng2):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate great circle distance between two points.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    http://www.johndcook.com/blog/python_longitude_latitude/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Parameters
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ----------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    lat1, lng1, lat2, lng2: float
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    distance:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      distance from ``(lat1, lng1)`` to ``(lat2, lng2)`` in kilometers.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># python2 users will have to use ascii identifiers (or upgrade)</span>
</span></span><span style="display:flex;"><span>    degrees_to_radians <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>pi <span style="color:#f92672">/</span> <span style="color:#ae81ff">180.0</span>
</span></span><span style="display:flex;"><span>    ϕ1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">90</span> <span style="color:#f92672">-</span> lat1) <span style="color:#f92672">*</span> degrees_to_radians
</span></span><span style="display:flex;"><span>    ϕ2 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">90</span> <span style="color:#f92672">-</span> lat2) <span style="color:#f92672">*</span> degrees_to_radians
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    θ1 <span style="color:#f92672">=</span> lng1 <span style="color:#f92672">*</span> degrees_to_radians
</span></span><span style="display:flex;"><span>    θ2 <span style="color:#f92672">=</span> lng2 <span style="color:#f92672">*</span> degrees_to_radians
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    cos <span style="color:#f92672">=</span> (math<span style="color:#f92672">.</span>sin(ϕ1) <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>sin(ϕ2) <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>cos(θ1 <span style="color:#f92672">-</span> θ2) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>           math<span style="color:#f92672">.</span>cos(ϕ1) <span style="color:#f92672">*</span> math<span style="color:#f92672">.</span>cos(ϕ2))
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># round to avoid precision issues on identical points causing ValueErrors</span>
</span></span><span style="display:flex;"><span>    cos <span style="color:#f92672">=</span> round(cos, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>    arc <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>acos(cos)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> arc <span style="color:#f92672">*</span> <span style="color:#ae81ff">6373</span>  <span style="color:#75715e"># radius of earth, in kilometers</span>
</span></span></code></pre></div><p>The second implementation uses NumPy.
Aside from numpy having a builtin <code>deg2rad</code> convenience function (which is probably a bit slower than multiplying by a constant $\frac{\pi}{180}$), basically all we&rsquo;ve done is swap the <code>math</code> prefix for <code>np</code>.
Thanks to NumPy&rsquo;s broadcasting, we can write code that works on scalars or arrays of conformable shape.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gcd_vec</span>(lat1, lng1, lat2, lng2):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Calculate great circle distance.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    http://www.johndcook.com/blog/python_longitude_latitude/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Parameters
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    ----------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    lat1, lng1, lat2, lng2: float or array of float
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Returns
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    -------
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    distance:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      distance from ``(lat1, lng1)`` to ``(lat2, lng2)`` in kilometers.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># python2 users will have to use ascii identifiers</span>
</span></span><span style="display:flex;"><span>    ϕ1 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>deg2rad(<span style="color:#ae81ff">90</span> <span style="color:#f92672">-</span> lat1)
</span></span><span style="display:flex;"><span>    ϕ2 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>deg2rad(<span style="color:#ae81ff">90</span> <span style="color:#f92672">-</span> lat2)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    θ1 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>deg2rad(lng1)
</span></span><span style="display:flex;"><span>    θ2 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>deg2rad(lng2)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    cos <span style="color:#f92672">=</span> (np<span style="color:#f92672">.</span>sin(ϕ1) <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>sin(ϕ2) <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>cos(θ1 <span style="color:#f92672">-</span> θ2) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>           np<span style="color:#f92672">.</span>cos(ϕ1) <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>cos(ϕ2))
</span></span><span style="display:flex;"><span>    arc <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arccos(cos)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> arc <span style="color:#f92672">*</span> <span style="color:#ae81ff">6373</span>
</span></span></code></pre></div><p>To use the python version on our DataFrame, we can either iterate&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>Series([gcd_py(<span style="color:#f92672">*</span>x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> pairs<span style="color:#f92672">.</span>itertuples(index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)],
</span></span><span style="display:flex;"><span>          index<span style="color:#f92672">=</span>pairs<span style="color:#f92672">.</span>index)
</span></span></code></pre></div><pre><code>CPU times: user 833 ms, sys: 12.7 ms, total: 846 ms
Wall time: 847 ms





origin  dest
8F3     8F3         0.000000
        A03      4744.967448
        A09      4407.533212
        A18      4744.593127
        A24      3820.092688
                    ...     
ZZU     YUY     12643.665960
        YYL     13687.592278
        ZBR      4999.647307
        ZXO     14925.531303
        ZZU         0.000000
Length: 250000, dtype: float64
</code></pre>
<p>Or use <code>DataFrame.apply</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> pairs<span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> x: gcd_py(x[<span style="color:#e6db74">&#39;LATITUDE_1&#39;</span>], x[<span style="color:#e6db74">&#39;LONGITUDE_1&#39;</span>],
</span></span><span style="display:flex;"><span>                                 x[<span style="color:#e6db74">&#39;LATITUDE_2&#39;</span>], x[<span style="color:#e6db74">&#39;LONGITUDE_2&#39;</span>]), axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>);
</span></span></code></pre></div><pre><code>CPU times: user 14.4 s, sys: 61.2 ms, total: 14.4 s
Wall time: 14.4 s
</code></pre>
<p>But as you can see, you don&rsquo;t want to use apply, especially with <code>axis=1</code> (calling the function on each row).  It&rsquo;s doing a lot more work handling dtypes in the background, and trying to infer the correct output shape that are pure overhead in this case. On top of that, it has to essentially use a for loop internally.</p>
<p>You <em>rarely</em> want to use <code>DataFrame.apply</code> and almost never should use it with <code>axis=1</code>. Better to write functions that take arrays, and pass those in directly. Like we did with the vectorized version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%%</span>time
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> gcd_vec(pairs[<span style="color:#e6db74">&#39;LATITUDE_1&#39;</span>], pairs[<span style="color:#e6db74">&#39;LONGITUDE_1&#39;</span>],
</span></span><span style="display:flex;"><span>            pairs[<span style="color:#e6db74">&#39;LATITUDE_2&#39;</span>], pairs[<span style="color:#e6db74">&#39;LONGITUDE_2&#39;</span>])
</span></span></code></pre></div><pre><code>CPU times: user 31.1 ms, sys: 26.4 ms, total: 57.5 ms
Wall time: 37.2 ms


/Users/taugspurger/miniconda3/envs/modern-pandas/lib/python3.6/site-packages/ipykernel_launcher.py:24: RuntimeWarning: invalid value encountered in arccos
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>r<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><pre><code>origin  dest
8F3     8F3        0.000000
        A03     4744.967484
        A09     4407.533240
        A18     4744.593111
        A24     3820.092639
dtype: float64
</code></pre>
<p>I try not to use the word &ldquo;easy&rdquo; when teaching, but that optimization was easy right?
Why then, do I come across uses of <code>apply</code>, in my code and others&rsquo;, even when the vectorized version is available?
The difficulty lies in knowing about broadcasting, and seeing where to apply it.</p>
<p>For example, the README for <a href="https://github.com/CamDavidsonPilon/lifetimes">lifetimes</a> (by Cam Davidson Pilon, also author of <a href="https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers">Bayesian Methods for Hackers</a>, <a href="https://github.com/CamDavidsonPilon/lifelines">lifelines</a>, and <a href="https://dataorigami.net">Data Origami</a>) used to have an example of passing <a href="https://github.com/CamDavidsonPilon/lifetimes/blob/5b4f7de0720413b6951ac0a4b0082bd50255a231/lifetimes/estimation.py#L249">this method</a> into a <code>DataFrame.apply</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data<span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> r: bgf<span style="color:#f92672">.</span>conditional_expected_number_of_purchases_up_to_time(
</span></span><span style="display:flex;"><span>    t, r[<span style="color:#e6db74">&#39;frequency&#39;</span>], r[<span style="color:#e6db74">&#39;recency&#39;</span>], r[<span style="color:#e6db74">&#39;T&#39;</span>]), axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>If you look at the function <a href="https://github.com/CamDavidsonPilon/lifetimes/blob/5b4f7de0720413b6951ac0a4b0082bd50255a231/lifetimes/estimation.py#L249">I linked to</a>, it&rsquo;s doing a fairly complicated computation involving a negative log likelihood and the Gamma function from <code>scipy.special</code>.
But crucially, it was already vectorized.
We were able to change the example to just pass the arrays (Series in this case) into the function, rather than applying the function to each row.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>bgf<span style="color:#f92672">.</span>conditional_expected_number_of_purchases_up_to_time(
</span></span><span style="display:flex;"><span>    t, data[<span style="color:#e6db74">&#39;frequency&#39;</span>], data[<span style="color:#e6db74">&#39;recency&#39;</span>], data[<span style="color:#e6db74">&#39;T&#39;</span>]
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This got us another 30x speedup on the example dataset.
I bring this up because it&rsquo;s very natural to have to translate an equation to code and think, &ldquo;Ok now I need to apply this function to each row&rdquo;, so you reach for <code>DataFrame.apply</code>.
See if you can just pass in the NumPy array or Series itself instead.</p>
<p>Not all operations this easy to vectorize.
Some operations are iterative by nature, and rely on the results of surrounding computations to proceed. In cases like this you can hope that one of the scientific python libraries has implemented it efficiently for you, or write your own solution using Numba / C / Cython / Fortran.</p>
<p>Other examples take a bit more thought or knowledge to vectorize.
Let&rsquo;s look at <a href="http://nbviewer.jupyter.org/github/jreback/pydata2015-london/blob/master/notebooks/idioms.ipynb">this</a>
example, taken from Jeff Reback&rsquo;s PyData London talk, that groupwise normalizes a dataset by subtracting the mean and dividing by the standard deviation for each group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_frame</span>(n, n_groups):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># just setup code, not benchmarking this</span>
</span></span><span style="display:flex;"><span>    stamps <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>date_range(<span style="color:#e6db74">&#39;20010101&#39;</span>, periods<span style="color:#f92672">=</span>n, freq<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ms&#39;</span>)
</span></span><span style="display:flex;"><span>    random<span style="color:#f92672">.</span>shuffle(stamps<span style="color:#f92672">.</span>values)    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;name&#39;</span>: np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>,n_groups,size<span style="color:#f92672">=</span>n),
</span></span><span style="display:flex;"><span>                         <span style="color:#e6db74">&#39;stamp&#39;</span>: stamps,
</span></span><span style="display:flex;"><span>                         <span style="color:#e6db74">&#39;value&#39;</span>: np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>,n,size<span style="color:#f92672">=</span>n),
</span></span><span style="display:flex;"><span>                         <span style="color:#e6db74">&#39;value2&#39;</span>: np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randn(n)})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> create_frame(<span style="color:#ae81ff">1000000</span>,<span style="color:#ae81ff">10000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f_apply</span>(df):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Typical transform</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;name&#39;</span>)<span style="color:#f92672">.</span>value2<span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> x: (x<span style="color:#f92672">-</span>x<span style="color:#f92672">.</span>mean())<span style="color:#f92672">/</span>x<span style="color:#f92672">.</span>std())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f_unwrap</span>(df):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># &#34;unwrapped&#34;</span>
</span></span><span style="display:flex;"><span>    g <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;name&#39;</span>)<span style="color:#f92672">.</span>value2
</span></span><span style="display:flex;"><span>    v <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>value2
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (v<span style="color:#f92672">-</span>g<span style="color:#f92672">.</span>transform(np<span style="color:#f92672">.</span>mean))<span style="color:#f92672">/</span>g<span style="color:#f92672">.</span>transform(np<span style="color:#f92672">.</span>std)
</span></span></code></pre></div><p>Timing it we see that the &ldquo;unwrapped&rdquo; version, get&rsquo;s quite a bit better performance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>timeit f_apply(df)
</span></span></code></pre></div><pre><code>4.28 s ± 161 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>timeit f_unwrap(df)
</span></span></code></pre></div><pre><code>53.3 ms ± 1.97 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
<p>Pandas GroupBy objects intercept calls for common functions like mean, sum, etc. and substitutes them with optimized Cython versions.
So the unwrapped <code>.transform(np.mean)</code> and <code>.transform(np.std)</code> are fast, while the <code>x.mean</code> and <code>x.std</code> in the <code>.apply(lambda x: x - x.mean()/x.std())</code> aren&rsquo;t.</p>
<p><code>Groupby.apply</code> is always going to be around, beacuse it offers maximum flexibility. If you need to <a href="http://stackoverflow.com/q/35924126/1889400">fit a model on each group and create additional columns in the process</a>, it can handle that. It just might not be the fastest (which may be OK sometimes).</p>
<p>This last example is admittedly niche.
I&rsquo;d like to think that there aren&rsquo;t too many places in pandas where the natural thing to do <code>.transform((x - x.mean()) / x.std())</code> is slower than the less obvious alternative.
Ideally the user wouldn&rsquo;t have to know about GroupBy having special fast implementations of common methods.
But that&rsquo;s where we are now.</p>
<h2 id="categoricals">Categoricals</h2>
<p>Thanks to some great work by <a href="https://twitter.com/janschulz">Jan Schulz</a>, <a href="https://twitter.com/janschulz">Jeff Reback</a>, and others, pandas 0.15 gained a new <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/categorical.html">Categorical</a> data type. Categoricals are nice for many reasons beyond just efficiency, but we&rsquo;ll focus on that here.</p>
<p>Categoricals are an efficient way of representing data (typically strings) that have a low <em>cardinality</em>, i.e. relatively few distinct values relative to the size of the array. Internally, a Categorical stores the categories once, and an array of <code>codes</code>, which are just integers that indicate which category belongs there. Since it&rsquo;s cheaper to store a <code>code</code> than a <code>category</code>, we save on memory (shown next).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series(np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>choice(list(string<span style="color:#f92672">.</span>ascii_letters), <span style="color:#ae81ff">100000</span>))
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{:0.2f}</span><span style="color:#e6db74"> KB&#39;</span><span style="color:#f92672">.</span>format(s<span style="color:#f92672">.</span>memory_usage(index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span>))
</span></span></code></pre></div><pre><code>800.00 KB
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{:0.2f}</span><span style="color:#e6db74"> KB&#39;</span><span style="color:#f92672">.</span>format(c<span style="color:#f92672">.</span>memory_usage(index<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000</span>))
</span></span></code></pre></div><pre><code>102.98 KB
</code></pre>
<p>Beyond saving memory, having codes and a fixed set of categories offers up a bunch of algorithmic optimizations that pandas and others can take advantage of.</p>
<p><a href="https://twitter.com/mrocklin">Matthew Rocklin</a> has a very nice <a href="http://matthewrocklin.com/blog/work/2015/06/18/Categoricals">post</a> on using categoricals, and optimizing code in general.</p>
<h2 id="going-further">Going Further</h2>
<p>The pandas documentation has a section on <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/enhancingperf.html">enhancing performance</a>, focusing on using Cython or <code>numba</code> to speed up a computation. I&rsquo;ve focused more on the lower-hanging fruit of picking the right algorithm, vectorizing your code, and using pandas or numpy more effetively. There are further optimizations availble if these aren&rsquo;t enough.</p>
<h2 id="summary">Summary</h2>
<p>This post was more about how to make effective use of numpy and pandas, than writing your own highly-optimized code.
In my day-to-day work of data analysis it&rsquo;s not worth the time to write and compile a cython extension.
I&rsquo;d rather rely on pandas to be fast at what matters (label lookup on large arrays, factorizations for groupbys and merges, numerics).
If you want to learn more about what pandas does to make things fast, checkout Jeff Tratner&rsquo; talk from PyData Seattle <a href="http://www.jeffreytratner.com/slides/pandas-under-the-hood-pydata-seattle-2015.pdf">talk</a> on pandas&rsquo; internals.</p>
<p>Next time we&rsquo;ll look at a differnt kind of optimization: using the Tidy Data principles to facilitate efficient data analysis.</p>
]]></content:encoded></item><item><title>Modern Pandas (Part 2): Method Chaining</title><link>https://tomaugspurger.github.io/posts/method-chaining/</link><pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/method-chaining/</guid><description>This is part 2 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Method Chaining Method chaining, where you call methods on an object one after another, is in vogue at the moment. It&amp;rsquo;s always been a style of programming that&amp;rsquo;s been possible with pandas, and over the past several releases, we&amp;rsquo;ve added methods that enable even more chaining.</description><content:encoded><![CDATA[<hr>
<p>This is part 2 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<h1 id="method-chaining">Method Chaining</h1>
<p>Method chaining, where you call methods on an object one after another, is in vogue at the moment.
It&rsquo;s always been a style of programming that&rsquo;s been possible with pandas,
and over the past several releases, we&rsquo;ve added methods that enable even more chaining.</p>
<ul>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html">assign</a> (0.16.0): For adding new columns to a DataFrame in a chain (inspired by dplyr&rsquo;s <code>mutate</code>)</li>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html">pipe</a> (0.16.2): For including user-defined methods in method chains.</li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/whatsnew.html#changes-to-rename">rename</a> (0.18.0): For altering axis names (in additional to changing the actual labels as before).</li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/whatsnew.html#window-functions-are-now-methods">Window methods</a> (0.18): Took the top-level <code>pd.rolling_*</code> and <code>pd.expanding_*</code> functions and made them <code>NDFrame</code> methods with a <code>groupby</code>-like API.</li>
<li><a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/whatsnew.html#resample-api">Resample</a> (0.18.0) Added a new <code>groupby</code>-like API</li>
<li><a href="https://github.com/pydata/pandas/pull/12539">.where/mask/Indexers accept Callables</a> (0.18.1): In the next release you&rsquo;ll be able to pass a callable to the indexing methods, to be evaluated within the DataFrame&rsquo;s context (like <code>.query</code>, but with code instead of strings).</li>
</ul>
<p>My scripts will typically start off with large-ish chain at the start getting things into a manageable state.
It&rsquo;s good to have the bulk of your munging done with right away so you can start to do Science™:</p>
<p>Here&rsquo;s a quick example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ticks&#39;</span>, context<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;talk&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> prep
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read</span>(fp):
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> (pd<span style="color:#f92672">.</span>read_csv(fp)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>str<span style="color:#f92672">.</span>lower)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>drop(<span style="color:#e6db74">&#39;unnamed: 36&#39;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>pipe(extract_city_name)
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>pipe(time_to_datetime, [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;arr_time&#39;</span>, <span style="color:#e6db74">&#39;crs_arr_time&#39;</span>, <span style="color:#e6db74">&#39;crs_dep_time&#39;</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span>assign(fl_date<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>to_datetime(x[<span style="color:#e6db74">&#39;fl_date&#39;</span>]),
</span></span><span style="display:flex;"><span>                    dest<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;dest&#39;</span>]),
</span></span><span style="display:flex;"><span>                    origin<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;origin&#39;</span>]),
</span></span><span style="display:flex;"><span>                    tail_num<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;tail_num&#39;</span>]),
</span></span><span style="display:flex;"><span>                    unique_carrier<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;unique_carrier&#39;</span>]),
</span></span><span style="display:flex;"><span>                    cancellation_code<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: pd<span style="color:#f92672">.</span>Categorical(x[<span style="color:#e6db74">&#39;cancellation_code&#39;</span>])))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">extract_city_name</span>(df):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Chicago, IL -&gt; Chicago for origin_city_name and dest_city_name
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;origin_city_name&#39;</span>, <span style="color:#e6db74">&#39;dest_city_name&#39;</span>]
</span></span><span style="display:flex;"><span>    city <span style="color:#f92672">=</span> df[cols]<span style="color:#f92672">.</span>apply(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>extract(<span style="color:#e6db74">&#34;(.*), \w</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">&#34;</span>, expand<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>))
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>    df[[<span style="color:#e6db74">&#39;origin_city_name&#39;</span>, <span style="color:#e6db74">&#39;dest_city_name&#39;</span>]] <span style="color:#f92672">=</span> city
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">time_to_datetime</span>(df, columns):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Combine all time items into datetimes.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    2014-01-01,0914 -&gt; 2014-01-01 09:14:00
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>copy()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">converter</span>(col):
</span></span><span style="display:flex;"><span>        timepart <span style="color:#f92672">=</span> (col<span style="color:#f92672">.</span>astype(str)
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;\.0$&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)  <span style="color:#75715e"># NaNs force float dtype</span>
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>pad(<span style="color:#ae81ff">4</span>, fillchar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0&#39;</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> pd<span style="color:#f92672">.</span>to_datetime(df[<span style="color:#e6db74">&#39;fl_date&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>                               timepart<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>slice(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>),
</span></span><span style="display:flex;"><span>                               errors<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;coerce&#39;</span>)
</span></span><span style="display:flex;"><span>    df[columns] <span style="color:#f92672">=</span> df[columns]<span style="color:#f92672">.</span>apply(converter)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data/flights.h5&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(output):
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> read(<span style="color:#e6db74">&#34;data/627361791_T_ONTIME.csv&#34;</span>)
</span></span><span style="display:flex;"><span>    df<span style="color:#f92672">.</span>to_hdf(output, <span style="color:#e6db74">&#39;flights&#39;</span>, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(output, <span style="color:#e6db74">&#39;flights&#39;</span>, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>info()
</span></span></code></pre></div><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 450017 entries, 0 to 450016
Data columns (total 33 columns):
fl_date                  450017 non-null datetime64[ns]
unique_carrier           450017 non-null category
airline_id               450017 non-null int64
tail_num                 449378 non-null category
fl_num                   450017 non-null int64
origin_airport_id        450017 non-null int64
origin_airport_seq_id    450017 non-null int64
origin_city_market_id    450017 non-null int64
origin                   450017 non-null category
origin_city_name         450017 non-null object
dest_airport_id          450017 non-null int64
dest_airport_seq_id      450017 non-null int64
dest_city_market_id      450017 non-null int64
dest                     450017 non-null category
dest_city_name           450017 non-null object
crs_dep_time             450017 non-null datetime64[ns]
dep_time                 441445 non-null datetime64[ns]
dep_delay                441476 non-null float64
taxi_out                 441244 non-null float64
wheels_off               441244 non-null float64
wheels_on                440746 non-null float64
taxi_in                  440746 non-null float64
crs_arr_time             450017 non-null datetime64[ns]
arr_time                 440555 non-null datetime64[ns]
arr_delay                439645 non-null float64
cancelled                450017 non-null float64
cancellation_code        8886 non-null category
carrier_delay            97699 non-null float64
weather_delay            97699 non-null float64
nas_delay                97699 non-null float64
security_delay           97699 non-null float64
late_aircraft_delay      97699 non-null float64
unnamed: 32              0 non-null float64
dtypes: category(5), datetime64[ns](5), float64(13), int64(8), object(2)
memory usage: 103.2+ MB
</code></pre>
<p>I find method chains readable, though some people don&rsquo;t.
Both the code and the flow of execution are from top to bottom, and the function parameters are always near the function itself, unlike with heavily nested function calls.</p>
<p>My favorite example demonstrating this comes from <a href="http://trestletech.com/wp-content/uploads/2015/07/dplyr.pdf">Jeff Allen</a> (pdf). Compare these two ways of telling the same story:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-R" data-lang="R"><span style="display:flex;"><span><span style="color:#a6e22e">tumble_after</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">broke</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fell_down</span>(
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">went_up</span>(jack_jill, <span style="color:#e6db74">&#34;hill&#34;</span>), <span style="color:#e6db74">&#34;water&#34;</span>),
</span></span><span style="display:flex;"><span>            jack),
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;crown&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;jill&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>and</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-R" data-lang="R"><span style="display:flex;"><span>jack_jill <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">went_up</span>(<span style="color:#e6db74">&#34;hill&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;water&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fell_down</span>(<span style="color:#e6db74">&#34;jack&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">broke</span>(<span style="color:#e6db74">&#34;crown&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tumble_after</span>(<span style="color:#e6db74">&#34;jill&#34;</span>)
</span></span></code></pre></div><p>Even if you weren&rsquo;t aware that in R <code>%&gt;%</code> (pronounced <em>pipe</em>) calls the function on the right with the thing on the left as an argument, you can still make out what&rsquo;s going on. Compare that with the first style, where you need to unravel the code to figure out the order of execution and which arguments are being passed where.</p>
<p>Admittedly, you probably wouldn&rsquo;t write the first one.
It&rsquo;d be something like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>on_hill <span style="color:#f92672">=</span> went_up(jack_jill, <span style="color:#e6db74">&#39;hill&#39;</span>)
</span></span><span style="display:flex;"><span>with_water <span style="color:#f92672">=</span> fetch(on_hill, <span style="color:#e6db74">&#39;water&#39;</span>)
</span></span><span style="display:flex;"><span>fallen <span style="color:#f92672">=</span> fell_down(with_water, <span style="color:#e6db74">&#39;jack&#39;</span>)
</span></span><span style="display:flex;"><span>broken <span style="color:#f92672">=</span> broke(fallen, <span style="color:#e6db74">&#39;jack&#39;</span>)
</span></span><span style="display:flex;"><span>after <span style="color:#f92672">=</span> tmple_after(broken, <span style="color:#e6db74">&#39;jill&#39;</span>)
</span></span></code></pre></div><p>I don&rsquo;t like this version because I have to spend time coming up with appropriate names for variables.
That&rsquo;s bothersome when we don&rsquo;t <em>really</em> care about the <code>on_hill</code> variable. We&rsquo;re just passing it into the next step.</p>
<p>A fourth way of writing the same story may be available. Suppose you owned a <code>JackAndJill</code> object, and could define the methods on it. Then you&rsquo;d have something like R&rsquo;s <code>%&gt;%</code> example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>jack_jill <span style="color:#f92672">=</span> JackAndJill()
</span></span><span style="display:flex;"><span>(jack_jill<span style="color:#f92672">.</span>went_up(<span style="color:#e6db74">&#39;hill&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>fetch(<span style="color:#e6db74">&#39;water&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>fell_down(<span style="color:#e6db74">&#39;jack&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>broke(<span style="color:#e6db74">&#39;crown&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>tumble_after(<span style="color:#e6db74">&#39;jill&#39;</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>But the problem is you don&rsquo;t own the <code>ndarray</code> or <code>DataFrame</code> or <a href="http://xarray.pydata.org/en/stable/data-structures.html#dataarray"><code>DataArray</code></a>, and the exact method you want may not exist.
Monekypatching on your own methods is fragile.
It&rsquo;s not easy to correctly subclass pandas&rsquo; DataFrame to extend it with your own methods.
Composition, where you create a class that holds onto a DataFrame internally, may be fine for your own code, but it won&rsquo;t interact well with the rest of the ecosystem so your code will be littered with lines extracting and repacking the underlying DataFrame.</p>
<p>Perhaps you could submit a pull request to pandas implementing your method.
But then you&rsquo;d need to convince the maintainers that it&rsquo;s broadly useful enough to merit its inclusion (and worth their time to maintain it). And <code>DataFrame</code> has something like 250+ methods, so we&rsquo;re reluctant to add more.</p>
<p>Enter <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pipe.html"><code>DataFrame.pipe</code></a>. All the benefits of having your specific function as a method on the DataFrame, without us having to maintain it, and without it overloading the already large pandas API. A win for everyone.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>jack_jill <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame()
</span></span><span style="display:flex;"><span>(jack_jill<span style="color:#f92672">.</span>pipe(went_up, <span style="color:#e6db74">&#39;hill&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>pipe(fetch, <span style="color:#e6db74">&#39;water&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>pipe(fell_down, <span style="color:#e6db74">&#39;jack&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>pipe(broke, <span style="color:#e6db74">&#39;crown&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>pipe(tumble_after, <span style="color:#e6db74">&#39;jill&#39;</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>This really is just right-to-left function execution. The first argument to <code>pipe</code>, a callable, is called with the DataFrame on the left as its first argument, and any additional arguments you specify.</p>
<p>I hope the analogy to data analysis code is clear.
Code is read more often than it is written.
When you or your coworkers or research partners have to go back in two months to update your script, having the story of raw data to results be told as clearly as possible will save you time.</p>
<h2 id="costs">Costs</h2>
<p>One drawback to excessively long chains is that debugging can be harder.
If something looks wrong at the end, you don&rsquo;t have intermediate values to inspect. There&rsquo;s a close parallel here to python&rsquo;s generators. Generators are great for keeping memory consumption down, but they can be hard to debug since values are consumed.</p>
<p>For my typical exploratory workflow, this isn&rsquo;t really a big problem. I&rsquo;m working with a single dataset that isn&rsquo;t being updated, and the path from raw data to usuable data isn&rsquo;t so large that I can&rsquo;t drop an <code>import pdb; pdb.set_trace()</code> in the middle of my code to poke around.</p>
<p>For large workflows, you&rsquo;ll probably want to move away from pandas to something more structured, like <a href="http://pythonhosted.org/airflow/">Airflow</a> or <a href="http://luigi.readthedocs.org/en/stable/index.html">Luigi</a>.</p>
<p>When writing medium sized <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">ETL</a> jobs in python that will be run repeatedly, I&rsquo;ll use decorators to inspect and log properties about the DataFrames at each step of the process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> wraps
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> logging
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">log_shape</span>(func):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(func)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (func<span style="color:#f92672">.</span>__name__, result<span style="color:#f92672">.</span>shape))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">log_dtypes</span>(func):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(func)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (func<span style="color:#f92672">.</span>__name__, result<span style="color:#f92672">.</span>dtypes))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@log_shape</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@log_dtypes</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">load</span>(fp):
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(fp, index_col<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, parse_dates<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@log_shape</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@log_dtypes</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update_events</span>(df, new_events):
</span></span><span style="display:flex;"><span>    df<span style="color:#f92672">.</span>loc[new_events<span style="color:#f92672">.</span>index, <span style="color:#e6db74">&#39;foo&#39;</span>] <span style="color:#f92672">=</span> new_events
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span></code></pre></div><p>This plays nicely with <a href="http://engarde.readthedocs.org"><code>engarde</code></a>, a little library I wrote to validate data as it flows through the pipeline (it essentialy turns those logging statements into excpetions if something looks wrong).</p>
<h2 id="inplace">Inplace?</h2>
<p>Most pandas methods have an <code>inplace</code> keyword that&rsquo;s <code>False</code> by default.
In general, you shouldn&rsquo;t do inplace operations.</p>
<p>First, if you like method chains then you simply can&rsquo;t use inplace since the return value is <code>None</code>, terminating the chain.</p>
<p>Second, I suspect people have a mental model of <code>inplace</code> operations happening, you know, inplace. That is, extra memory doesn&rsquo;t need to be allocated for the result. <a href="http://stackoverflow.com/a/22533110">But that might not actually be true</a>.
Quoting Jeff Reback from that answer</p>
<blockquote>
<p>Their is <strong>no guarantee</strong> that an inplace operation is actually faster. Often they are actually the same operation that works on a copy, but the top-level reference is reassigned.</p>
</blockquote>
<p>That is, the pandas code might look something like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dataframe_method</span>(self, inplace<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>):
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>copy()  <span style="color:#75715e"># regardless of inplace</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> inplace:
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_update_inplace(data)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result
</span></span></code></pre></div><p>There&rsquo;s a lot of defensive copying in pandas.
Part of this comes down to pandas being built on top of NumPy, and not having full control over how memory is handled and shared.
We saw it above when we defined our own functions <code>extract_city_name</code> and <code>time_to_datetime</code>.
Without the <code>copy</code>, adding the columns would modify the input DataFrame, which just isn&rsquo;t polite.</p>
<p>Finally, inplace operations don&rsquo;t make sense in projects like <a href="http://www.ibis-project.org">ibis</a> or <a href="http://dask.pydata.org/en/latest/">dask</a>, where you&rsquo;re manipulating expressions or building up a DAG of tasks to be executed, rather than manipulating the data directly.</p>
<h2 id="application">Application</h2>
<p>I feel like we haven&rsquo;t done much coding, mostly just me shouting from the top of a soapbox (sorry about that).
Let&rsquo;s do some exploratory analysis.</p>
<p>What does the daily flight pattern look like?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>(df<span style="color:#f92672">.</span>dropna(subset<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;unique_carrier&#39;</span>])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>loc[df[<span style="color:#e6db74">&#39;unique_carrier&#39;</span>]
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">.</span>isin(df[<span style="color:#e6db74">&#39;unique_carrier&#39;</span>]<span style="color:#f92672">.</span>value_counts()<span style="color:#f92672">.</span>index[:<span style="color:#ae81ff">5</span>])]
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;dep_time&#39;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#75715e"># TimeGrouper to resample &amp; groupby at once</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;unique_carrier&#39;</span>, pd<span style="color:#f92672">.</span>TimeGrouper(<span style="color:#e6db74">&#34;H&#34;</span>)])
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>fl_num<span style="color:#f92672">.</span>count()
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>unstack(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>fillna(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>rolling(<span style="color:#ae81ff">24</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>rename_axis(<span style="color:#e6db74">&#34;Flights per Day&#34;</span>, axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">.</span>plot()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_2_method_chaining_8_0.png" alt="png"  />
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> statsmodels.api <span style="color:#66d9ef">as</span> sm
</span></span></code></pre></div><pre><code>/Users/taugspurger/miniconda3/envs/modern-pandas/lib/python3.6/site-packages/statsmodels/compat/pandas.py:56: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.
  from pandas.core import datetools
</code></pre>
<p>Does a plane with multiple flights on the same day get backed up, causing later flights to be delayed more?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>config InlineBackend<span style="color:#f92672">.</span>figure_format <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;png&#39;</span>
</span></span><span style="display:flex;"><span>flights <span style="color:#f92672">=</span> (df[[<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>, <span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>sort_values(<span style="color:#e6db74">&#39;dep_time&#39;</span>)
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>loc[<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>dep_delay <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">500</span>]
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">.</span>assign(turn <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> x:
</span></span><span style="display:flex;"><span>                x<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>])
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>dep_time
</span></span><span style="display:flex;"><span>                 <span style="color:#f92672">.</span>transform(<span style="color:#e6db74">&#39;rank&#39;</span>)<span style="color:#f92672">.</span>astype(int)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>boxplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;turn&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dep_delay&#39;</span>, data<span style="color:#f92672">=</span>flights, ax<span style="color:#f92672">=</span>ax)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_ylim(<span style="color:#f92672">-</span><span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">50</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_2_method_chaining_11_0.png" alt="png"  />
</p>
<p>Doesn&rsquo;t really look like it. Maybe other planes are swapped in when one gets delayed,
but we don&rsquo;t have data on <em>scheduled</em> flights per plane.</p>
<p>Do flights later in the day have longer delays?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>(df[[<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>, <span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>assign(hour<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>dep_time<span style="color:#f92672">.</span>dt<span style="color:#f92672">.</span>hour)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;5 &lt; dep_delay &lt; 600&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>pipe((sns<span style="color:#f92672">.</span>boxplot, <span style="color:#e6db74">&#39;data&#39;</span>), <span style="color:#e6db74">&#39;hour&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>despine()
</span></span></code></pre></div><p><img loading="lazy" src="/images/modern_2_method_chaining_13_0.png" alt="png"  />
</p>
<p>There could be something here. I didn&rsquo;t show it here since I filtered them out,
but the vast majority of flights do leave on time.</p>
<p>Thanks for reading!
This section was a bit more abstract, since we were talking about styles
of coding rather than how to actually accomplish tasks.
I&rsquo;m sometimes guilty of putting too much work into making my data wrangling code look nice and feel correct, at the expense of actually analyzing the data.
This isn&rsquo;t a competition to have the best or cleanest pandas code; pandas is always just a means to the end that is your research or business problem.
Thanks for indulging me.
Next time we&rsquo;ll talk about a much more practical topic: performance.</p>
]]></content:encoded></item><item><title>Modern Pandas (Part 1)</title><link>https://tomaugspurger.github.io/posts/modern-1-intro/</link><pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/modern-1-intro/</guid><description>This is part 1 in my series on writing modern idiomatic pandas.
Modern Pandas Method Chaining Indexes Fast Pandas Tidy Data Visualization Time Series Scaling Effective Pandas Introduction This series is about how to make effective use of pandas, a data analysis library for the Python programming language. It&amp;rsquo;s targeted at an intermediate level: people who have some experience with pandas, but are looking to improve.
Prior Art There are many great resources for learning pandas; this is not one of them.</description><content:encoded><![CDATA[<hr>
<p>This is part 1 in my series on writing modern idiomatic pandas.</p>
<ul>
<li><a href="/posts/modern-1-intro">Modern Pandas</a></li>
<li><a href="/posts/method-chaining">Method Chaining</a></li>
<li><a href="/posts/modern-3-indexes">Indexes</a></li>
<li><a href="/posts/modern-4-performance">Fast Pandas</a></li>
<li><a href="/posts/modern-5-tidy">Tidy Data</a></li>
<li><a href="/posts/modern-6-visualization">Visualization</a></li>
<li><a href="/posts/modern-7-timeseries">Time Series</a></li>
<li><a href="/posts/modern-8-scaling">Scaling</a></li>
</ul>
<hr>
<h1 id="effective-pandas">Effective Pandas</h1>
<h2 id="introduction">Introduction</h2>
<p>This series is about how to make effective use of <a href="http://pandas.pydata.org">pandas</a>, a data analysis library for the Python programming language.
It&rsquo;s targeted at an intermediate level: people who have some experience with pandas, but are looking to improve.</p>
<h2 id="prior-art">Prior Art</h2>
<p>There are many great resources for learning pandas; this is not one of them.
For beginners, I typically recommend <a href="https://twitter.com/gjreda">Greg Reda&rsquo;s</a> <a href="http://gregreda.com/2013/10/26/intro-to-pandas-data-structures/">3-part introduction</a>, especially if they&rsquo;re familiar with SQL. Of course, there&rsquo;s the pandas <a href="http://pandas.pydata.org/">documentation</a> itself. I gave <a href="https://www.youtube.com/watch?v=otCriSKVV_8">a talk</a> at PyData Seattle targeted as an introduction if you prefer video form. Wes McKinney&rsquo;s <a href="http://shop.oreilly.com/product/0636920023784.do">Python for Data Analysis</a> is still the goto book (and is also a really good introduction to NumPy as well). Jake VanderPlas&rsquo;s <a href="http://shop.oreilly.com/product/0636920034919.do">Python Data Science Handbook</a>, in early release, is great too.
Kevin Markham has a <a href="http://www.dataschool.io/easier-data-analysis-with-pandas/">video series</a> for beginners learning pandas.</p>
<p>With all those resources (and many more that I&rsquo;ve slighted through omission), why write another? Surely the law of diminishing returns is kicking in by now.
Still, I thought there was room for a guide that is up to date (as of March 2016) and emphasizes idiomatic pandas code (code that is <em>pandorable</em>).
This series probably won&rsquo;t be appropriate for people completely new to python
or NumPy and pandas.
By luck, this first post happened to cover topics that are relatively introductory,
so read some of the linked material and come back, or <a href="https://twitter.com/tomaugspurger">let me know</a> if you
have questions.</p>
<h2 id="get-the-data">Get the Data</h2>
<p>We&rsquo;ll be working with <a href="http://www.transtats.bts.gov/databases.asp?Mode_ID=1&amp;Mode_Desc=Aviation&amp;Subject_ID2=0">flight delay data</a> from the BTS (R users can install Hadley&rsquo;s <a href="https://github.com/hadley/nycflights13">NYCFlights13</a> dataset for similar data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> zipfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> int(os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;MODERN_PANDAS_EPUB&#34;</span>, <span style="color:#ae81ff">0</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">import</span> prep
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Referer&#39;</span>: <span style="color:#e6db74">&#39;https://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236&amp;DB_Short_Name=On-Time&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Origin&#39;</span>: <span style="color:#e6db74">&#39;https://www.transtats.bts.gov&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;Content-Type&#39;</span>: <span style="color:#e6db74">&#39;application/x-www-form-urlencoded&#39;</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>params <span style="color:#f92672">=</span> (
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#39;Table_ID&#39;</span>, <span style="color:#e6db74">&#39;236&#39;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#39;Has_Group&#39;</span>, <span style="color:#e6db74">&#39;3&#39;</span>),
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#39;Is_Zipped&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;modern-1-url.txt&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>os<span style="color:#f92672">.</span>makedirs(<span style="color:#e6db74">&#39;data&#39;</span>, exist_ok<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>dest <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;data/flights.csv.zip&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(dest):
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;https://www.transtats.bts.gov/DownLoad_Table.asp&#39;</span>,
</span></span><span style="display:flex;"><span>                      headers<span style="color:#f92672">=</span>headers, params<span style="color:#f92672">=</span>params, data<span style="color:#f92672">=</span>data, stream<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data/flights.csv.zip&#34;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> chunk <span style="color:#f92672">in</span> r<span style="color:#f92672">.</span>iter_content(chunk_size<span style="color:#f92672">=</span><span style="color:#ae81ff">102400</span>): 
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> chunk:
</span></span><span style="display:flex;"><span>                f<span style="color:#f92672">.</span>write(chunk)
</span></span></code></pre></div><p>That download returned a ZIP file.
There&rsquo;s an open <a href="https://github.com/pydata/pandas/pull/12175">Pull Request</a> for automatically decompressing ZIP archives with a single CSV,
but for now we have to extract it ourselves and then read it in.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>zf <span style="color:#f92672">=</span> zipfile<span style="color:#f92672">.</span>ZipFile(<span style="color:#e6db74">&#34;data/flights.csv.zip&#34;</span>)
</span></span><span style="display:flex;"><span>fp <span style="color:#f92672">=</span> zf<span style="color:#f92672">.</span>extract(zf<span style="color:#f92672">.</span>filelist[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>filename, path<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;data/&#39;</span>)
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(fp, parse_dates<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;FL_DATE&#34;</span>])<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>str<span style="color:#f92672">.</span>lower)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>info()
</span></span></code></pre></div><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 450017 entries, 0 to 450016
Data columns (total 33 columns):
fl_date                  450017 non-null datetime64[ns]
unique_carrier           450017 non-null object
airline_id               450017 non-null int64
tail_num                 449378 non-null object
fl_num                   450017 non-null int64
origin_airport_id        450017 non-null int64
origin_airport_seq_id    450017 non-null int64
origin_city_market_id    450017 non-null int64
origin                   450017 non-null object
origin_city_name         450017 non-null object
dest_airport_id          450017 non-null int64
dest_airport_seq_id      450017 non-null int64
dest_city_market_id      450017 non-null int64
dest                     450017 non-null object
dest_city_name           450017 non-null object
crs_dep_time             450017 non-null int64
dep_time                 441476 non-null float64
dep_delay                441476 non-null float64
taxi_out                 441244 non-null float64
wheels_off               441244 non-null float64
wheels_on                440746 non-null float64
taxi_in                  440746 non-null float64
crs_arr_time             450017 non-null int64
arr_time                 440746 non-null float64
arr_delay                439645 non-null float64
cancelled                450017 non-null float64
cancellation_code        8886 non-null object
carrier_delay            97699 non-null float64
weather_delay            97699 non-null float64
nas_delay                97699 non-null float64
security_delay           97699 non-null float64
late_aircraft_delay      97699 non-null float64
unnamed: 32              0 non-null float64
dtypes: datetime64[ns](1), float64(15), int64(10), object(7)
memory usage: 113.3+ MB
</code></pre>
<h2 id="indexing">Indexing</h2>
<p>Or, <em>explicit is better than implicit</em>.
By my count, 7 of the top-15 voted pandas questions on <a href="http://stackoverflow.com/questions/tagged/pandas?sort=votes&amp;pageSize=15">Stackoverflow</a> are about indexing. This seems as good a place as any to start.</p>
<p>By indexing, we mean the selection of subsets of a DataFrame or Series.
<code>DataFrames</code> (and to a lesser extent, <code>Series</code>) provide a difficult set of challenges:</p>
<ul>
<li>Like lists, you can index by location.</li>
<li>Like dictionaries, you can index by label.</li>
<li>Like NumPy arrays, you can index by boolean masks.</li>
<li>Any of these indexers could be scalar indexes, or they could be arrays, or they could be <code>slice</code>s.</li>
<li>Any of these should work on the index (row labels) or columns of a DataFrame.</li>
<li>And any of these should work on hierarchical indexes.</li>
</ul>
<p>The complexity of pandas&rsquo; indexing is a microcosm for the complexity of the pandas API in general.
There&rsquo;s a reason for the complexity (well, most of it), but that&rsquo;s not <em>much</em> consolation while you&rsquo;re learning.
Still, all of these ways of indexing really are useful enough to justify their inclusion in the library.</p>
<h2 id="slicing">Slicing</h2>
<p>Or, <em>explicit is better than implicit</em>.</p>
<p>By my count, 7 of the top-15 voted pandas questions on <a href="http://stackoverflow.com/questions/tagged/pandas?sort=votes&amp;pageSize=15">Stackoverflow</a> are about slicing. This seems as good a place as any to start.</p>
<p>Brief history digression: For years the preferred method for row and/or column selection was <code>.ix</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>ix[<span style="color:#ae81ff">10</span>:<span style="color:#ae81ff">15</span>, [<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>]]
</span></span></code></pre></div><pre><code>/Users/taugspurger/Envs/blog/lib/python3.6/site-packages/ipykernel_launcher.py:1: DeprecationWarning: 
.ix is deprecated. Please use
.loc for label based indexing or
.iloc for positional indexing

See the documentation here:
http://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate_ix
  &quot;&quot;&quot;Entry point for launching an IPython kernel.
</code></pre>
<div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>tail_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>10</th>
      <td>2017-01-01</td>
      <td>N756AA</td>
    </tr>
    <tr>
      <th>11</th>
      <td>2017-01-01</td>
      <td>N807AA</td>
    </tr>
    <tr>
      <th>12</th>
      <td>2017-01-01</td>
      <td>N755AA</td>
    </tr>
    <tr>
      <th>13</th>
      <td>2017-01-01</td>
      <td>N951AA</td>
    </tr>
    <tr>
      <th>14</th>
      <td>2017-01-01</td>
      <td>N523AA</td>
    </tr>
    <tr>
      <th>15</th>
      <td>2017-01-01</td>
      <td>N155AA</td>
    </tr>
  </tbody>
</table>
</div>
<p>As you can see, this method is now deprecated. Why&rsquo;s that? This simple little operation hides some complexity. What if, rather than our default <code>range(n)</code> index, we had an integer index like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># filter the warning for now on</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> warnings
</span></span><span style="display:flex;"><span>warnings<span style="color:#f92672">.</span>simplefilter(<span style="color:#e6db74">&#34;ignore&#34;</span>, <span style="color:#a6e22e">DeprecationWarning</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>first <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;airline_id&#39;</span>)[[<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;unique_carrier&#39;</span>]]<span style="color:#f92672">.</span>first()
</span></span><span style="display:flex;"><span>first<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>unique_carrier</th>
    </tr>
    <tr>
      <th>airline_id</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19393</th>
      <td>2017-01-01</td>
      <td>WN</td>
    </tr>
    <tr>
      <th>19690</th>
      <td>2017-01-01</td>
      <td>HA</td>
    </tr>
    <tr>
      <th>19790</th>
      <td>2017-01-01</td>
      <td>DL</td>
    </tr>
    <tr>
      <th>19805</th>
      <td>2017-01-01</td>
      <td>AA</td>
    </tr>
    <tr>
      <th>19930</th>
      <td>2017-01-01</td>
      <td>AS</td>
    </tr>
  </tbody>
</table>
</div>
<p>Can you predict ahead of time what our slice from above will give when passed to <code>.ix</code>?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>first<span style="color:#f92672">.</span>ix[<span style="color:#ae81ff">10</span>:<span style="color:#ae81ff">15</span>, [<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>tail_num</th>
    </tr>
    <tr>
      <th>airline_id</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>
<p>Surprise, an empty DataFrame! Which in data analysis is rarely a good thing. What happened?</p>
<p>We had an integer index, so the call to <code>.ix</code> used its label-based mode. It was looking for integer <em>labels</em> between 10:15 (inclusive). It didn&rsquo;t find any. Since we sliced a range it returned an empty DataFrame, rather than raising a KeyError.</p>
<p>By way of contrast, suppose we had a string index, rather than integers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>first <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;unique_carrier&#39;</span>)<span style="color:#f92672">.</span>first()
</span></span><span style="display:flex;"><span>first<span style="color:#f92672">.</span>ix[<span style="color:#ae81ff">10</span>:<span style="color:#ae81ff">15</span>, [<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>tail_num</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>VX</th>
      <td>2017-01-01</td>
      <td>N846VA</td>
    </tr>
    <tr>
      <th>WN</th>
      <td>2017-01-01</td>
      <td>N955WN</td>
    </tr>
  </tbody>
</table>
</div>
<p>And it works again! Now that we had a string index, <code>.ix</code> used its positional-mode. It looked for <em>rows</em> 10-15 (exclusive on the right).</p>
<p>But you can&rsquo;t reliably predict what the outcome of the slice will be ahead of time. It&rsquo;s on the <em>reader</em> of the code (probably your future self) to know the dtypes so you can reckon whether <code>.ix</code> will use label indexing (returning the empty DataFrame) or positional indexing (like the last example).
In general, methods whose behavior depends on the data, like <code>.ix</code> dispatching to label-based indexing on integer Indexes but location-based indexing on non-integer, are hard to use correctly. We&rsquo;ve been trying to stamp them out in pandas.</p>
<p>Since pandas 0.12, these tasks have been cleanly separated into two methods:</p>
<ol>
<li><code>.loc</code> for label-based indexing</li>
<li><code>.iloc</code> for positional indexing</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>first<span style="color:#f92672">.</span>loc[[<span style="color:#e6db74">&#39;AA&#39;</span>, <span style="color:#e6db74">&#39;AS&#39;</span>, <span style="color:#e6db74">&#39;DL&#39;</span>], [<span style="color:#e6db74">&#39;fl_date&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>tail_num</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AA</th>
      <td>2017-01-01</td>
      <td>N153AA</td>
    </tr>
    <tr>
      <th>AS</th>
      <td>2017-01-01</td>
      <td>N557AS</td>
    </tr>
    <tr>
      <th>DL</th>
      <td>2017-01-01</td>
      <td>N942DL</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>first<span style="color:#f92672">.</span>iloc[[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>], [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>fl_date</th>
      <th>airline_id</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>AA</th>
      <td>2017-01-01</td>
      <td>19805</td>
    </tr>
    <tr>
      <th>AS</th>
      <td>2017-01-01</td>
      <td>19930</td>
    </tr>
    <tr>
      <th>DL</th>
      <td>2017-01-01</td>
      <td>19790</td>
    </tr>
  </tbody>
</table>
</div>
<p><code>.ix</code> is deprecated, but will hang around for a little while.
But if you&rsquo;ve been using <code>.ix</code> out of habit, or if you didn&rsquo;t know any better, maybe give <code>.loc</code> and <code>.iloc</code> a shot. I&rsquo;d recommend carefully updating your code to decide if you&rsquo;ve been using positional or label indexing, and choose the appropriate indexer. For the intrepid reader, Joris Van den Bossche (a core pandas dev) <a href="https://github.com/pydata/pandas/issues/9595">compiled a great overview</a> of the pandas <code>__getitem__</code> API.
A later post in this series will go into more detail on using Indexes effectively;
they are useful objects in their own right, but for now we&rsquo;ll move on to a closely related topic.</p>
<h2 id="settingwithcopy">SettingWithCopy</h2>
<p>Pandas used to get <em>a lot</em> of questions about assignments seemingly not working. We&rsquo;ll take <a href="http://stackoverflow.com/q/16553298/1889400">this StackOverflow</a> question as a representative question.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>f <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;a&#39;</span>:[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>], <span style="color:#e6db74">&#39;b&#39;</span>:[<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">30</span>,<span style="color:#ae81ff">40</span>,<span style="color:#ae81ff">50</span>]})
</span></span><span style="display:flex;"><span>f
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>40</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>50</td>
    </tr>
  </tbody>
</table>
</div>
<p>The user wanted to take the rows of <code>b</code> where <code>a</code> was 3 or less, and set them equal to <code>b / 10</code>
We&rsquo;ll use boolean indexing to select those rows <code>f['a'] &lt;= 3</code>,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># ignore the context manager for now</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> pd<span style="color:#f92672">.</span>option_context(<span style="color:#e6db74">&#39;mode.chained_assignment&#39;</span>, <span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    f[f[<span style="color:#e6db74">&#39;a&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>][<span style="color:#e6db74">&#39;b&#39;</span>] <span style="color:#f92672">=</span> f[f[<span style="color:#e6db74">&#39;a&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span> ][<span style="color:#e6db74">&#39;b&#39;</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>f
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>40</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>50</td>
    </tr>
  </tbody>
</table>
</div>
<p>And nothing happened. Well, something did happen, but nobody witnessed it. If an object without any references is modified, does it make a sound?</p>
<p>The warning I silenced above with the context manager links to <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy">an explanation</a> that&rsquo;s quite helpful. I&rsquo;ll summarize the high points here.</p>
<p>The &ldquo;failure&rdquo; to update <code>f</code> comes down to what&rsquo;s called <em>chained indexing</em>, a practice to be avoided.
The &ldquo;chained&rdquo; comes from indexing multiple times, one after another, rather than one single indexing operation.
Above we had two operations on the left-hand side, one <code>__getitem__</code> and one <code>__setitem__</code> (in python, the square brackets are syntactic sugar for <code>__getitem__</code> or <code>__setitem__</code> if it&rsquo;s for assignment). So <code>f[f['a'] &lt;= 3]['b']</code> becomes</p>
<ol>
<li><code>getitem</code>: <code>f[f['a'] &lt;= 3]</code></li>
<li><code>setitem</code>: <code>_['b'] = ...</code>  # using <code>_</code> to represent the result of 1.</li>
</ol>
<p>In general, pandas can&rsquo;t guarantee whether that first <code>__getitem__</code> returns a view or a copy of the underlying data.
The changes <em>will</em> be made to the thing I called <code>_</code> above, the result of the <code>__getitem__</code> in <code>1</code>.
But we don&rsquo;t know that <code>_</code> shares the same memory as our original <code>f</code>.
And so we can&rsquo;t be sure that whatever changes are being made to <code>_</code> will be reflected in <code>f</code>.</p>
<p>Done properly, you would write</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>f<span style="color:#f92672">.</span>loc[f[<span style="color:#e6db74">&#39;a&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;b&#39;</span>] <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>loc[f[<span style="color:#e6db74">&#39;a&#39;</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;b&#39;</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>f
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>40.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>50.0</td>
    </tr>
  </tbody>
</table>
</div>
<p>Now this is all in a single call to <code>__setitem__</code> and pandas can ensure that the assignment happens properly.</p>
<p>The rough rule is any time you see back-to-back square brackets, <code>][</code>, you&rsquo;re in asking for trouble. Replace that with a <code>.loc[..., ...]</code> and you&rsquo;ll be set.</p>
<p>The other bit of advice is that a SettingWithCopy warning is raised when the <em>assignment</em> is made.
The potential copy could be made earlier in your code.</p>
<h2 id="multidimensional-indexing">Multidimensional Indexing</h2>
<p>MultiIndexes might just be my favorite feature of pandas.
They let you represent higher-dimensional datasets in a familiar two-dimensional table, which my brain can sometimes handle.
Each additional level of the MultiIndex represents another dimension.
The cost of this is somewhat harder label indexing.</p>
<p>My very first bug report to pandas, back in <a href="https://github.com/pydata/pandas/issues/2207">November 2012</a>,
was about indexing into a MultiIndex.
I bring it up now because I genuinely couldn&rsquo;t tell whether the result I got was a bug or not.
Also, from that bug report</p>
<blockquote>
<p>Sorry if this isn&rsquo;t actually a bug. Still very new to python. Thanks!</p>
</blockquote>
<p>Adorable.</p>
<p>That operation was made much easier by <a href="http://pandas.pydata.org/pandas-docs/version/0.18.0/whatsnew.html#multiindexing-using-slicers">this</a> addition in 2014, which lets you slice arbitrary levels of a MultiIndex..
Let&rsquo;s make a MultiIndexed DataFrame to work with.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>hdf <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>set_index([<span style="color:#e6db74">&#39;unique_carrier&#39;</span>, <span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dest&#39;</span>, <span style="color:#e6db74">&#39;tail_num&#39;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#39;fl_date&#39;</span>])<span style="color:#f92672">.</span>sort_index()
</span></span><span style="display:flex;"><span>hdf[hdf<span style="color:#f92672">.</span>columns[:<span style="color:#ae81ff">4</span>]]<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>airline_id</th>
      <th>fl_num</th>
      <th>origin_airport_id</th>
      <th>origin_airport_seq_id</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th>origin</th>
      <th>dest</th>
      <th>tail_num</th>
      <th>fl_date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">AA</th>
      <th rowspan="5" valign="top">ABQ</th>
      <th rowspan="5" valign="top">DFW</th>
      <th rowspan="2" valign="top">N3ABAA</th>
      <th>2017-01-15</th>
      <td>19805</td>
      <td>2611</td>
      <td>10140</td>
      <td>1014003</td>
    </tr>
    <tr>
      <th>2017-01-29</th>
      <td>19805</td>
      <td>1282</td>
      <td>10140</td>
      <td>1014003</td>
    </tr>
    <tr>
      <th>N3AEAA</th>
      <th>2017-01-11</th>
      <td>19805</td>
      <td>2511</td>
      <td>10140</td>
      <td>1014003</td>
    </tr>
    <tr>
      <th>N3AJAA</th>
      <th>2017-01-24</th>
      <td>19805</td>
      <td>2511</td>
      <td>10140</td>
      <td>1014003</td>
    </tr>
    <tr>
      <th>N3AVAA</th>
      <th>2017-01-11</th>
      <td>19805</td>
      <td>1282</td>
      <td>10140</td>
      <td>1014003</td>
    </tr>
  </tbody>
</table>
</div>
<p>And just to clear up some terminology, the <em>levels</em> of a MultiIndex are the
former column names (<code>unique_carrier</code>, <code>origin</code>&hellip;).
The labels are the actual values in a level, (<code>'AA'</code>, <code>'ABQ'</code>, &hellip;).
Levels can be referred to by name or position, with 0 being the outermost level.</p>
<p>Slicing the outermost index level is pretty easy, we just use our regular <code>.loc[row_indexer, column_indexer]</code>. We&rsquo;ll select the columns <code>dep_time</code> and <code>dep_delay</code> where the carrier was American Airlines, Delta, or US Airways.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>hdf<span style="color:#f92672">.</span>loc[[<span style="color:#e6db74">&#39;AA&#39;</span>, <span style="color:#e6db74">&#39;DL&#39;</span>, <span style="color:#e6db74">&#39;US&#39;</span>], [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>dep_time</th>
      <th>dep_delay</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th>origin</th>
      <th>dest</th>
      <th>tail_num</th>
      <th>fl_date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="30" valign="top">AA</th>
      <th rowspan="30" valign="top">ABQ</th>
      <th rowspan="30" valign="top">DFW</th>
      <th rowspan="2" valign="top">N3ABAA</th>
      <th>2017-01-15</th>
      <td>500.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2017-01-29</th>
      <td>757.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N3AEAA</th>
      <th>2017-01-11</th>
      <td>1451.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th>N3AJAA</th>
      <th>2017-01-24</th>
      <td>1502.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>N3AVAA</th>
      <th>2017-01-11</th>
      <td>752.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N3AWAA</th>
      <th>2017-01-27</th>
      <td>1550.0</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N3AXAA</th>
      <th>2017-01-16</th>
      <td>1524.0</td>
      <td>24.0</td>
    </tr>
    <tr>
      <th>2017-01-17</th>
      <td>757.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N3BJAA</th>
      <th>2017-01-25</th>
      <td>823.0</td>
      <td>23.0</td>
    </tr>
    <tr>
      <th>N3BPAA</th>
      <th>2017-01-11</th>
      <td>1638.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3BTAA</th>
      <th>2017-01-26</th>
      <td>753.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3BYAA</th>
      <th>2017-01-18</th>
      <td>1452.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N3CAAA</th>
      <th>2017-01-23</th>
      <td>453.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3CBAA</th>
      <th>2017-01-13</th>
      <td>1456.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N3CDAA</th>
      <th>2017-01-12</th>
      <td>1455.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-28</th>
      <td>758.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>N3CEAA</th>
      <th>2017-01-21</th>
      <td>455.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N3CGAA</th>
      <th>2017-01-18</th>
      <td>759.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N3CWAA</th>
      <th>2017-01-27</th>
      <td>1638.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3CXAA</th>
      <th>2017-01-31</th>
      <td>752.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N3DBAA</th>
      <th>2017-01-19</th>
      <td>1637.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N3DMAA</th>
      <th>2017-01-13</th>
      <td>1638.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3DRAA</th>
      <th>2017-01-27</th>
      <td>753.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N3DVAA</th>
      <th>2017-01-09</th>
      <td>1636.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th>N3DYAA</th>
      <th>2017-01-10</th>
      <td>1633.0</td>
      <td>-12.0</td>
    </tr>
    <tr>
      <th>N3ECAA</th>
      <th>2017-01-15</th>
      <td>753.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N3EDAA</th>
      <th>2017-01-09</th>
      <td>1450.0</td>
      <td>-10.0</td>
    </tr>
    <tr>
      <th>2017-01-10</th>
      <td>753.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N3ENAA</th>
      <th>2017-01-24</th>
      <td>756.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>2017-01-26</th>
      <td>1533.0</td>
      <td>33.0</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="30" valign="top">DL</th>
      <th rowspan="30" valign="top">XNA</th>
      <th rowspan="30" valign="top">ATL</th>
      <th>N921AT</th>
      <th>2017-01-20</th>
      <td>1156.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N924DL</th>
      <th>2017-01-30</th>
      <td>555.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N925DL</th>
      <th>2017-01-12</th>
      <td>551.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N929AT</th>
      <th>2017-01-08</th>
      <td>1155.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>2017-01-31</th>
      <td>1139.0</td>
      <td>-20.0</td>
    </tr>
    <tr>
      <th>N932AT</th>
      <th>2017-01-12</th>
      <td>1158.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N938AT</th>
      <th>2017-01-26</th>
      <td>1204.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N940AT</th>
      <th>2017-01-18</th>
      <td>1157.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>2017-01-19</th>
      <td>1200.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>N943DL</th>
      <th>2017-01-22</th>
      <td>555.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N950DL</th>
      <th>2017-01-19</th>
      <td>558.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>N952DL</th>
      <th>2017-01-18</th>
      <td>556.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N953DL</th>
      <th>2017-01-31</th>
      <td>558.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>N956DL</th>
      <th>2017-01-17</th>
      <td>554.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N961AT</th>
      <th>2017-01-14</th>
      <td>1233.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N964AT</th>
      <th>2017-01-27</th>
      <td>1155.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N966DL</th>
      <th>2017-01-23</th>
      <td>559.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N968DL</th>
      <th>2017-01-29</th>
      <td>555.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N969DL</th>
      <th>2017-01-11</th>
      <td>556.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N976DL</th>
      <th>2017-01-09</th>
      <td>622.0</td>
      <td>22.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N977AT</th>
      <th>2017-01-24</th>
      <td>1202.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2017-01-25</th>
      <td>1149.0</td>
      <td>-10.0</td>
    </tr>
    <tr>
      <th>N977DL</th>
      <th>2017-01-21</th>
      <td>603.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N979AT</th>
      <th>2017-01-15</th>
      <td>1238.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>2017-01-22</th>
      <td>1155.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N983AT</th>
      <th>2017-01-11</th>
      <td>1148.0</td>
      <td>-11.0</td>
    </tr>
    <tr>
      <th>N988DL</th>
      <th>2017-01-26</th>
      <td>556.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N989DL</th>
      <th>2017-01-25</th>
      <td>555.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N990DL</th>
      <th>2017-01-15</th>
      <td>604.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N995AT</th>
      <th>2017-01-16</th>
      <td>1152.0</td>
      <td>-7.0</td>
    </tr>
  </tbody>
</table>
<p>142945 rows × 2 columns</p>
</div>
<p>So far, so good. What if you wanted to select the rows whose origin was Chicago O&rsquo;Hare (<code>ORD</code>) or Des Moines International Airport (DSM).
Well, <code>.loc</code> wants <code>[row_indexer, column_indexer]</code> so let&rsquo;s wrap the two elements of our row indexer (the list of carriers and the list of origins) in a tuple to make it a single unit:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>hdf<span style="color:#f92672">.</span>loc[([<span style="color:#e6db74">&#39;AA&#39;</span>, <span style="color:#e6db74">&#39;DL&#39;</span>, <span style="color:#e6db74">&#39;US&#39;</span>], [<span style="color:#e6db74">&#39;ORD&#39;</span>, <span style="color:#e6db74">&#39;DSM&#39;</span>]), [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>dep_time</th>
      <th>dep_delay</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th>origin</th>
      <th>dest</th>
      <th>tail_num</th>
      <th>fl_date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="30" valign="top">AA</th>
      <th rowspan="30" valign="top">DSM</th>
      <th rowspan="30" valign="top">DFW</th>
      <th>N424AA</th>
      <th>2017-01-23</th>
      <td>1324.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N426AA</th>
      <th>2017-01-25</th>
      <td>541.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N437AA</th>
      <th>2017-01-13</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>2017-01-23</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N438AA</th>
      <th>2017-01-11</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N439AA</th>
      <th>2017-01-24</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>2017-01-31</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N4UBAA</th>
      <th>2017-01-18</th>
      <td>1323.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N4WNAA</th>
      <th>2017-01-27</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XBAA</th>
      <th>2017-01-09</th>
      <td>536.0</td>
      <td>-14.0</td>
    </tr>
    <tr>
      <th>N4XEAA</th>
      <th>2017-01-21</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N4XFAA</th>
      <th>2017-01-31</th>
      <td>1320.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XGAA</th>
      <th>2017-01-28</th>
      <td>1337.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2017-01-30</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XJAA</th>
      <th>2017-01-20</th>
      <td>552.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2017-01-21</th>
      <td>1320.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N4XKAA</th>
      <th>2017-01-26</th>
      <td>1323.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XMAA</th>
      <th>2017-01-16</th>
      <td>1423.0</td>
      <td>56.0</td>
    </tr>
    <tr>
      <th>2017-01-19</th>
      <td>1321.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XPAA</th>
      <th>2017-01-09</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-14</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XTAA</th>
      <th>2017-01-10</th>
      <td>1355.0</td>
      <td>28.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XUAA</th>
      <th>2017-01-13</th>
      <td>1330.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2017-01-14</th>
      <td>1319.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N4XVAA</th>
      <th>2017-01-28</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XXAA</th>
      <th>2017-01-15</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-16</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XYAA</th>
      <th>2017-01-18</th>
      <td>559.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4YCAA</th>
      <th>2017-01-26</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-27</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="30" valign="top">DL</th>
      <th rowspan="30" valign="top">ORD</th>
      <th rowspan="30" valign="top">SLC</th>
      <th>N316NB</th>
      <th>2017-01-23</th>
      <td>1332.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N317NB</th>
      <th>2017-01-09</th>
      <td>1330.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>2017-01-11</th>
      <td>1345.0</td>
      <td>7.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N319NB</th>
      <th>2017-01-17</th>
      <td>1353.0</td>
      <td>15.0</td>
    </tr>
    <tr>
      <th>2017-01-22</th>
      <td>1331.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N320NB</th>
      <th>2017-01-13</th>
      <td>1332.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N321NB</th>
      <th>2017-01-19</th>
      <td>1419.0</td>
      <td>41.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N323NB</th>
      <th>2017-01-01</th>
      <td>1732.0</td>
      <td>57.0</td>
    </tr>
    <tr>
      <th>2017-01-02</th>
      <td>1351.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>N324NB</th>
      <th>2017-01-16</th>
      <td>1337.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N326NB</th>
      <th>2017-01-24</th>
      <td>1332.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>2017-01-26</th>
      <td>1349.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>N329NB</th>
      <th>2017-01-06</th>
      <td>1422.0</td>
      <td>32.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N330NB</th>
      <th>2017-01-04</th>
      <td>1344.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>2017-01-12</th>
      <td>1343.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>N335NB</th>
      <th>2017-01-31</th>
      <td>1336.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>N338NB</th>
      <th>2017-01-29</th>
      <td>1355.0</td>
      <td>17.0</td>
    </tr>
    <tr>
      <th>N347NB</th>
      <th>2017-01-08</th>
      <td>1338.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>N348NB</th>
      <th>2017-01-10</th>
      <td>1355.0</td>
      <td>17.0</td>
    </tr>
    <tr>
      <th>N349NB</th>
      <th>2017-01-30</th>
      <td>1333.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N352NW</th>
      <th>2017-01-06</th>
      <td>1857.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>N354NW</th>
      <th>2017-01-04</th>
      <td>1844.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N356NW</th>
      <th>2017-01-02</th>
      <td>1640.0</td>
      <td>20.0</td>
    </tr>
    <tr>
      <th>N358NW</th>
      <th>2017-01-05</th>
      <td>1856.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>N360NB</th>
      <th>2017-01-25</th>
      <td>1354.0</td>
      <td>16.0</td>
    </tr>
    <tr>
      <th>N365NB</th>
      <th>2017-01-18</th>
      <td>1350.0</td>
      <td>12.0</td>
    </tr>
    <tr>
      <th>N368NB</th>
      <th>2017-01-27</th>
      <td>1351.0</td>
      <td>13.0</td>
    </tr>
    <tr>
      <th>N370NB</th>
      <th>2017-01-20</th>
      <td>1355.0</td>
      <td>17.0</td>
    </tr>
    <tr>
      <th>N374NW</th>
      <th>2017-01-03</th>
      <td>1846.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N987AT</th>
      <th>2017-01-08</th>
      <td>1914.0</td>
      <td>29.0</td>
    </tr>
  </tbody>
</table>
<p>5582 rows × 2 columns</p>
</div>
<p>Now try to do any flight from ORD or DSM, not just from those carriers.
This used to be a pain.
You might have to turn to the <code>.xs</code> method, or pass in <code>df.index.get_level_values(0)</code> and zip that up with the indexers your wanted, or maybe reset the index and do a boolean mask, and set the index again&hellip; ugh.</p>
<p>But now, you can use an <code>IndexSlice</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>hdf<span style="color:#f92672">.</span>loc[pd<span style="color:#f92672">.</span>IndexSlice[:, [<span style="color:#e6db74">&#39;ORD&#39;</span>, <span style="color:#e6db74">&#39;DSM&#39;</span>]], [<span style="color:#e6db74">&#39;dep_time&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span></code></pre></div><div>
<style>
    .dataframe thead tr:only-child th {
        text-align: right;
    }
<pre><code>.dataframe thead th {
    text-align: left;
}

.dataframe tbody tr th {
    vertical-align: top;
}
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th>dep_time</th>
      <th>dep_delay</th>
    </tr>
    <tr>
      <th>unique_carrier</th>
      <th>origin</th>
      <th>dest</th>
      <th>tail_num</th>
      <th>fl_date</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="30" valign="top">AA</th>
      <th rowspan="30" valign="top">DSM</th>
      <th rowspan="30" valign="top">DFW</th>
      <th>N424AA</th>
      <th>2017-01-23</th>
      <td>1324.0</td>
      <td>-3.0</td>
    </tr>
    <tr>
      <th>N426AA</th>
      <th>2017-01-25</th>
      <td>541.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N437AA</th>
      <th>2017-01-13</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>2017-01-23</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N438AA</th>
      <th>2017-01-11</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N439AA</th>
      <th>2017-01-24</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>2017-01-31</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N4UBAA</th>
      <th>2017-01-18</th>
      <td>1323.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th>N4WNAA</th>
      <th>2017-01-27</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XBAA</th>
      <th>2017-01-09</th>
      <td>536.0</td>
      <td>-14.0</td>
    </tr>
    <tr>
      <th>N4XEAA</th>
      <th>2017-01-21</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N4XFAA</th>
      <th>2017-01-31</th>
      <td>1320.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XGAA</th>
      <th>2017-01-28</th>
      <td>1337.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>2017-01-30</th>
      <td>542.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XJAA</th>
      <th>2017-01-20</th>
      <td>552.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>2017-01-21</th>
      <td>1320.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N4XKAA</th>
      <th>2017-01-26</th>
      <td>1323.0</td>
      <td>-4.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XMAA</th>
      <th>2017-01-16</th>
      <td>1423.0</td>
      <td>56.0</td>
    </tr>
    <tr>
      <th>2017-01-19</th>
      <td>1321.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XPAA</th>
      <th>2017-01-09</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-14</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XTAA</th>
      <th>2017-01-10</th>
      <td>1355.0</td>
      <td>28.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XUAA</th>
      <th>2017-01-13</th>
      <td>1330.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2017-01-14</th>
      <td>1319.0</td>
      <td>-8.0</td>
    </tr>
    <tr>
      <th>N4XVAA</th>
      <th>2017-01-28</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4XXAA</th>
      <th>2017-01-15</th>
      <td>1322.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-16</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N4XYAA</th>
      <th>2017-01-18</th>
      <td>559.0</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N4YCAA</th>
      <th>2017-01-26</th>
      <td>545.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-27</th>
      <td>544.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="30" valign="top">WN</th>
      <th rowspan="30" valign="top">DSM</th>
      <th rowspan="30" valign="top">STL</th>
      <th>N635SW</th>
      <th>2017-01-15</th>
      <td>1806.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>N645SW</th>
      <th>2017-01-22</th>
      <td>1800.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>N651SW</th>
      <th>2017-01-01</th>
      <td>1856.0</td>
      <td>61.0</td>
    </tr>
    <tr>
      <th>N654SW</th>
      <th>2017-01-21</th>
      <td>1156.0</td>
      <td>126.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N720WN</th>
      <th>2017-01-23</th>
      <td>605.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>2017-01-31</th>
      <td>603.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N724SW</th>
      <th>2017-01-30</th>
      <td>1738.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N734SA</th>
      <th>2017-01-20</th>
      <td>1839.0</td>
      <td>54.0</td>
    </tr>
    <tr>
      <th>N737JW</th>
      <th>2017-01-09</th>
      <td>605.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N747SA</th>
      <th>2017-01-27</th>
      <td>610.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>N7718B</th>
      <th>2017-01-18</th>
      <td>1736.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th>N772SW</th>
      <th>2017-01-31</th>
      <td>1738.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N7735A</th>
      <th>2017-01-11</th>
      <td>603.0</td>
      <td>-7.0</td>
    </tr>
    <tr>
      <th>N773SA</th>
      <th>2017-01-17</th>
      <td>1743.0</td>
      <td>-2.0</td>
    </tr>
    <tr>
      <th>N7749B</th>
      <th>2017-01-10</th>
      <td>1746.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">N781WN</th>
      <th>2017-01-02</th>
      <td>1909.0</td>
      <td>59.0</td>
    </tr>
    <tr>
      <th>2017-01-30</th>
      <td>605.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N7827A</th>
      <th>2017-01-14</th>
      <td>1644.0</td>
      <td>414.0</td>
    </tr>
    <tr>
      <th>N7833A</th>
      <th>2017-01-06</th>
      <td>659.0</td>
      <td>49.0</td>
    </tr>
    <tr>
      <th>N7882B</th>
      <th>2017-01-15</th>
      <td>901.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>N791SW</th>
      <th>2017-01-26</th>
      <td>1744.0</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <th>N903WN</th>
      <th>2017-01-13</th>
      <td>1908.0</td>
      <td>83.0</td>
    </tr>
    <tr>
      <th>N905WN</th>
      <th>2017-01-05</th>
      <td>605.0</td>
      <td>-5.0</td>
    </tr>
    <tr>
      <th>N944WN</th>
      <th>2017-01-02</th>
      <td>630.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>N949WN</th>
      <th>2017-01-01</th>
      <td>624.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>N952WN</th>
      <th>2017-01-29</th>
      <td>854.0</td>
      <td>-6.0</td>
    </tr>
    <tr>
      <th>N954WN</th>
      <th>2017-01-11</th>
      <td>1736.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th>N956WN</th>
      <th>2017-01-06</th>
      <td>1736.0</td>
      <td>-9.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">NaN</th>
      <th>2017-01-16</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2017-01-17</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>19466 rows × 2 columns</p>
</div>
<p>The <code>:</code> says include every label in this level.
The <code>IndexSlice</code> object is just sugar for the actual python <code>slice</code> object needed to remove slice each level.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>IndexSlice[:, [<span style="color:#e6db74">&#39;ORD&#39;</span>, <span style="color:#e6db74">&#39;DSM&#39;</span>]]
</span></span></code></pre></div><pre><code>(slice(None, None, None), ['ORD', 'DSM'])
</code></pre>
<p>We&rsquo;ll talk more about working with Indexes (including MultiIndexes) in a later post. I have an unproven thesis that they&rsquo;re underused because <code>IndexSlice</code> is underused, causing people to think they&rsquo;re more unwieldy than they actually are. But let&rsquo;s close out part one.</p>
<h2 id="wrapup">WrapUp</h2>
<p>This first post covered Indexing, a topic that&rsquo;s central to pandas.
The power provided by the DataFrame comes with some unavoidable complexities.
Best practices (using <code>.loc</code> and <code>.iloc</code>) will spare you many a headache.
We then toured a couple of commonly misunderstood sub-topics, setting with copy and Hierarchical Indexing.</p>
]]></content:encoded></item><item><title>Practical Pandas Part 3 - Exploratory Data Analysis</title><link>https://tomaugspurger.github.io/posts/pp03/</link><pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pp03/</guid><description>Welcome back. As a reminder:
In part 1 we got dataset with my cycling data from last year merged and stored in an HDF5 store In part 2 we did some cleaning and augmented the cycling data with data from http://forecast.io. You can find the full source code and data at this project&amp;rsquo;s GitHub repo.
Today we&amp;rsquo;ll use pandas, seaborn, and matplotlib to do some exploratory data analysis. For fun, we&amp;rsquo;ll make some maps at the end using folium.</description><content:encoded><![CDATA[<p>Welcome back. As a reminder:</p>
<ul>
<li>In <a href="http://tomaugspurger.github.io/blog/2014/08/26/practical-pandas-part-1-reading-the-data/">part 1</a> we got dataset with my cycling data from last year merged and stored in an HDF5 store</li>
<li>In <a href="http://tomaugspurger.github.io/blog/2014/09/04/practical-pandas-part-2-more-tidying-more-data-and-merging/">part 2</a> we did some cleaning and augmented the cycling data with data from <a href="http://forecast.io">http://forecast.io</a>.</li>
</ul>
<p>You can find the full source code and data at this project&rsquo;s <a href="https://github.com/tomaugspurger/practicalpandas">GitHub repo</a>.</p>
<p>Today we&rsquo;ll use pandas, seaborn, and
matplotlib to do some exploratory data analysis.
For fun, we&rsquo;ll make some maps at the end using <a href="https://folium.readthedocs.org/en/latest/">folium</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;data&#39;</span>, <span style="color:#e6db74">&#39;cycle_store.h5&#39;</span>), key<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;with_weather&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>time</th>
      <th>ride_time_secs</th>
      <th>stopped_time_secs</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>elevation_feet</th>
      <th>distance_miles</th>
      <th>speed_mph</th>
      <th>pace_secs</th>
      <th>average_speed_mph</th>
      <th>average_pace_secs</th>
      <th>ascent_feet</th>
      <th>descent_feet</th>
      <th>calories</th>
      <th>ride_id</th>
      <th>time_adj</th>
      <th>apparentTemperature</th>
      <th>cloudCover</th>
      <th>dewPoint</th>
      <th>humidity</th>
      <th>icon</th>
      <th>precipIntensity</th>
      <th>precipProbability</th>
      <th>precipType</th>
      <th>pressure</th>
      <th>summary</th>
      <th>temperature</th>
      <th>visibility</th>
      <th>windBearing</th>
      <th>windSpeed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-08-01 12:07:10</td>
      <td>  1.1</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:10</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-08-01 12:07:17</td>
      <td>  8.2</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:17</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-08-01 12:07:22</td>
      <td> 13.2</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:22</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-08-01 12:07:27</td>
      <td> 18.2</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
      <td>2013-08-01 07:07:27</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-08-01 12:07:40</td>
      <td> 31.2</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
      <td>2013-08-01 07:07:40</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
  </tbody>
</table>
</div>
<p>Upon further inspection, it looks like some of our rows are duplicated.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>duplicated()<span style="color:#f92672">.</span>sum()
</span></span></code></pre></div><pre><code>2
</code></pre>
<p>The problem is actually a bit more severe than that. The app I used to collect the data sometimes records multiple observations per second, but only reports the results at the second frequency.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>duplicated()<span style="color:#f92672">.</span>sum()
</span></span></code></pre></div><pre><code>114
</code></pre>
<p>What to do here? We could drop change the frequency to micro- or nano-second resolution, and add, say, a half-second onto the duplicated observations.</p>
<p>Since this is just for fun though, I&rsquo;m going to do the easy thing and throw out the duplicates (in real life you&rsquo;ll want to make sure this doesn&rsquo;t affect your analysis).
Then we can set the <code>time</code> column to be our index, which will make our later analysis a bit simpler.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop_duplicates(subset<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;time&#39;</span>])<span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;time&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>is_unique
</span></span></code></pre></div><pre><code>True
</code></pre>
<p>Because of a <a href="https://github.com/pydata/pandas/issues/8189">bug</a> in pandas, we lost our timzone information when we filled in our missing values. Until that&rsquo;s fixed we&rsquo;ll have to manually add back the timezone info and convert. The actual values stored were UTC (which is good practice whenever you have timezone-aware timestamps), it just doesn&rsquo;t <em>know</em> that it&rsquo;s UTC.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>tz_localize(<span style="color:#e6db74">&#39;UTC&#39;</span>)<span style="color:#f92672">.</span>tz_convert(<span style="color:#e6db74">&#39;US/Central&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ride_time_secs</th>
      <th>stopped_time_secs</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>elevation_feet</th>
      <th>distance_miles</th>
      <th>speed_mph</th>
      <th>pace_secs</th>
      <th>average_speed_mph</th>
      <th>average_pace_secs</th>
      <th>ascent_feet</th>
      <th>descent_feet</th>
      <th>calories</th>
      <th>ride_id</th>
      <th>time_adj</th>
      <th>apparentTemperature</th>
      <th>cloudCover</th>
      <th>dewPoint</th>
      <th>humidity</th>
      <th>icon</th>
      <th>precipIntensity</th>
      <th>precipProbability</th>
      <th>precipType</th>
      <th>pressure</th>
      <th>summary</th>
      <th>temperature</th>
      <th>visibility</th>
      <th>windBearing</th>
      <th>windSpeed</th>
    </tr>
    <tr>
      <th>time</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2013-08-01 07:07:10-05:00</th>
      <td>  1.1</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:10</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>2013-08-01 07:07:17-05:00</th>
      <td>  8.2</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:17</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>2013-08-01 07:07:22-05:00</th>
      <td> 13.2</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:22</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>2013-08-01 07:07:27-05:00</th>
      <td> 18.2</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
      <td>2013-08-01 07:07:27</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
    <tr>
      <th>2013-08-01 07:07:40-05:00</th>
      <td> 31.2</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
      <td>2013-08-01 07:07:40</td>
      <td> 61.62</td>
      <td> 0</td>
      <td> 58.66</td>
      <td> 0.9</td>
      <td> clear-day</td>
      <td> 0</td>
      <td> 0</td>
      <td> NaN</td>
      <td> 1017.62</td>
      <td> Clear</td>
      <td> 61.62</td>
      <td> 8.89</td>
      <td> 282</td>
      <td> 2.77</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="timelines">Timelines</h3>
<p>We&rsquo;ll store the <strong>time</strong> part of the <code>DatetimeIndex</code> in a column called <code>time</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;time&#39;</span>] <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>time
</span></span></code></pre></div><p>With these, let&rsquo;s plot how far along I was in my ride (<code>distance_miles</code>) at the time of day.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="pp03_files/pp03_15_0.png" alt="png"  />
</p>
<p>There&rsquo;s a couple problems. First of all, the data are split into morning and afternoon.
Let&rsquo;s create a new, boolean, column indicating whether the ride took place in the morning or afternoon.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;is_morning&#39;</span>] <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>time <span style="color:#f92672">&lt;</span> datetime<span style="color:#f92672">.</span>time(<span style="color:#ae81ff">12</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> df[df<span style="color:#f92672">.</span>is_morning]<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="pp03_files/pp03_18_0.png" alt="png"  />
</p>
<p>Better, but this still isn&rsquo;t quite what we want. When we call <code>.plot(x=..., y=...)</code> the data are sorted before being plotted. This means that an observation from one ride gets mixed up with another. So we&rsquo;ll need to group by ride, and <em>then</em> plot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>axes <span style="color:#f92672">=</span> df[df<span style="color:#f92672">.</span>is_morning]<span style="color:#f92672">.</span>groupby(df<span style="color:#f92672">.</span>ride_id)<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>,
</span></span><span style="display:flex;"><span>                                                  y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>,
</span></span><span style="display:flex;"><span>                                                  color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>                                                  figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>))
</span></span></code></pre></div><p><img loading="lazy" src="pp03_files/pp03_20_0.png" alt="png"  />
</p>
<p>Much better. Groupby is one of the most powerful operations in pandas, and it pays to understand it well. Here&rsquo;s the same thing for the evening.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>axes <span style="color:#f92672">=</span> df[<span style="color:#f92672">~</span>df<span style="color:#f92672">.</span>is_morning]<span style="color:#f92672">.</span>groupby(df<span style="color:#f92672">.</span>ride_id)<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>,
</span></span><span style="display:flex;"><span>                                                   y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>,
</span></span><span style="display:flex;"><span>                                                   color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>                                                   figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>))
</span></span></code></pre></div><p><img loading="lazy" src="pp03_files/pp03_22_0.png" alt="png"  />
</p>
<p>Fun. The horizontal distance is the length of time it took me to make the ride. The starting point on the horizontal axis conveys the time that I set out.
I like this chart because it also conveys the start time of each ride.
The plot shows that the morning ride typically took longer, but we can verify that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ride_time <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;ride_id&#39;</span>, <span style="color:#e6db74">&#39;is_morning&#39;</span>])[<span style="color:#e6db74">&#39;ride_time_secs&#39;</span>]<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;max&#39;</span>)
</span></span><span style="display:flex;"><span>mean_time <span style="color:#f92672">=</span> ride_time<span style="color:#f92672">.</span>groupby(level<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>mean()<span style="color:#f92672">.</span>rename(
</span></span><span style="display:flex;"><span>    index<span style="color:#f92672">=</span>{<span style="color:#66d9ef">True</span>: <span style="color:#e6db74">&#39;morning&#39;</span>, <span style="color:#66d9ef">False</span>: <span style="color:#e6db74">&#39;evening&#39;</span>})
</span></span><span style="display:flex;"><span>mean_time <span style="color:#f92672">/</span> <span style="color:#ae81ff">60</span>
</span></span></code></pre></div><pre><code>is_morning
evening       30.761667
morning       29.362716
Name: ride_time_secs, dtype: float64
</code></pre>
<p>So the morning ride is typically shorter! But I think I know what&rsquo;s going on. We were misleading with our plot earlier since the range of the horizontal axis weren&rsquo;t identical. Always check the axis!</p>
<p>At risk of <a href="https://groups.google.com/forum/#!topic/ggplot2/tImExPZg61o">raising the ire</a> of Hadley Whickham, we&rsquo;ll plot these on the same plot, with a secondary x-axis. (I think its OK in this case since the second is just a transformation – a 10 hour or so shift – of the first).</p>
<p>We&rsquo;ll plot evening first, use matplotlib&rsquo;s <code>twinx</code> method, and plot the morning on the second axes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig, ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>morning_color <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>xkcd_rgb[<span style="color:#e6db74">&#39;amber&#39;</span>]
</span></span><span style="display:flex;"><span>evening_color <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>xkcd_rgb[<span style="color:#e6db74">&#39;dusty purple&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>_ <span style="color:#f92672">=</span> df[<span style="color:#f92672">~</span>df<span style="color:#f92672">.</span>is_morning]<span style="color:#f92672">.</span>groupby(df<span style="color:#f92672">.</span>ride_id)<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>,
</span></span><span style="display:flex;"><span>    color<span style="color:#f92672">=</span>evening_color, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span>    ax<span style="color:#f92672">=</span>ax, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.9</span>, grid<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>ax2 <span style="color:#f92672">=</span> ax<span style="color:#f92672">.</span>twiny()
</span></span><span style="display:flex;"><span>_ <span style="color:#f92672">=</span> df[df<span style="color:#f92672">.</span>is_morning]<span style="color:#f92672">.</span>groupby(df<span style="color:#f92672">.</span>ride_id)<span style="color:#f92672">.</span>plot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;distance_miles&#39;</span>,
</span></span><span style="display:flex;"><span>    color<span style="color:#f92672">=</span>morning_color, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>),
</span></span><span style="display:flex;"><span>    ax<span style="color:#f92672">=</span>ax2, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">.9</span>, grid<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create fake lines for our custom legend.</span>
</span></span><span style="display:flex;"><span>morning_legend <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>Line2D([<span style="color:#ae81ff">0</span>], [<span style="color:#ae81ff">0</span>], color<span style="color:#f92672">=</span>morning_color)
</span></span><span style="display:flex;"><span>evening_legend <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>Line2D([<span style="color:#ae81ff">0</span>], [<span style="color:#ae81ff">0</span>], color<span style="color:#f92672">=</span>evening_color)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>legend([morning_legend, evening_legend], [<span style="color:#e6db74">&#39;Morning&#39;</span>, <span style="color:#e6db74">&#39;Evening&#39;</span>])
</span></span></code></pre></div><pre><code>&lt;matplotlib.legend.Legend at 0x115640198&gt;
</code></pre>
<p><img loading="lazy" src="pp03_files/pp03_26_1.png" alt="png"  />
</p>
<p>There&rsquo;s a bit of boilerplate at the end. pandas tries to add a legend element for each ride ID. It doesn&rsquo;t know that we only care whether it&rsquo;s morning or evening. So instead we just fake it, creating two lines thate are invisible, and labeling them appropriately.</p>
<p>Anyway, we&rsquo;ve accomplished our original goal. The steeper slope on the evening rides show that they typically took me less time. I guess I wasn&rsquo;t too excited to get to school in the morning. The joys of being a grad student.</p>
<p>I&rsquo;m sure I&rsquo;m not the only one noticing that long evening ride sticking out from the rest. Let&rsquo;s note it&rsquo;s ride ID and follow up. We need the <code>ride_id</code> so groupby that. It&rsquo;s the longest ride so take the <code>max</code> of the distance. And we want the <code>ride_id</code> of the maximum distance, so take the <code>argmax</code> of that. These last three sentances can be beautifully chained together into a single line that reads like poetry.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>long_ride_id <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;ride_id&#39;</span>)[<span style="color:#e6db74">&#39;distance_miles&#39;</span>]<span style="color:#f92672">.</span>max()<span style="color:#f92672">.</span>argmax()
</span></span><span style="display:flex;"><span>long_ride_id
</span></span></code></pre></div><pre><code>22
</code></pre>
<h3 id="cartography">Cartography</h3>
<p>We&rsquo;ll use <a href="https://github.com/wrobstory/folium">Folium</a> to do a bit of map plotting.
If you&rsquo;re using python3 (like I am) you&rsquo;ll need to use <a href="https://github.com/wrobstory/folium/pull/21">this pull request</a> from <a href="https://github.com/tbicr">tbicr</a>,
or just clone the master of <a href="https://github.com/tomaugspurger/folium">my fork</a>, where I&rsquo;ve merged the changes.</p>
<p>Since this is a practical pandas post, and not an intro to <code>folium</code>, I won&rsquo;t delve into the details here. The basics are that we initialize a <code>Map</code> with some coordinates and tiles, and then add <code>line</code>s to that map. The <code>line</code>s will come from the latitude and longitude columns of our DataFrame.</p>
<p>Here&rsquo;s a small helper function from <a href="https://github.com/birdage">birdage</a> to <a href="http://nbviewer.ipython.org/github/birdage/folium/blob/arrow_marker/examples/test_folium_wms.ipynb">inline</a> the map in the notebook. This allows it to be viewable (and interactive) on nbviewer. For the blog post I&rsquo;m linking them to `</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">inline_map</span>(map):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Embeds the HTML source of the map directly into the IPython notebook.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    This method will not work if the map depends on any files (json data). Also this uses
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    the HTML5 srcdoc attribute, which may not be supported in all browsers.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span> IPython.display <span style="color:#f92672">import</span> HTML
</span></span><span style="display:flex;"><span>    map<span style="color:#f92672">.</span>_build_map()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> HTML(<span style="color:#e6db74">&#39;&lt;iframe srcdoc=&#34;</span><span style="color:#e6db74">{srcdoc}</span><span style="color:#e6db74">&#34; style=&#34;width: 100%; height: 510px; border: none&#34;&gt;&lt;/iframe&gt;&#39;</span><span style="color:#f92672">.</span>format(srcdoc<span style="color:#f92672">=</span>map<span style="color:#f92672">.</span>HTML<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;&#34;&#39;</span>, <span style="color:#e6db74">&#39;&amp;quot;&#39;</span>)))
</span></span></code></pre></div><p>I&rsquo;ve plotted two rides, a hopefully representative ride (#42) and the long ride from above.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> folium
</span></span><span style="display:flex;"><span>folium<span style="color:#f92672">.</span>initialize_notebook()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>lat, lon <span style="color:#f92672">=</span> df[[<span style="color:#e6db74">&#39;latitude&#39;</span>, <span style="color:#e6db74">&#39;longitude&#39;</span>]]<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>mp <span style="color:#f92672">=</span> folium<span style="color:#f92672">.</span>Map(location<span style="color:#f92672">=</span>(lat, lon), tiles<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;OpenStreetMap&#39;</span>, zoom_start<span style="color:#f92672">=</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>mp<span style="color:#f92672">.</span>line(locations<span style="color:#f92672">=</span>df<span style="color:#f92672">.</span>loc[df<span style="color:#f92672">.</span>ride_id <span style="color:#f92672">==</span> <span style="color:#ae81ff">42</span>, [<span style="color:#e6db74">&#39;latitude&#39;</span>, <span style="color:#e6db74">&#39;longitude&#39;</span>]]<span style="color:#f92672">.</span>values)
</span></span><span style="display:flex;"><span>mp<span style="color:#f92672">.</span>line(locations<span style="color:#f92672">=</span>df<span style="color:#f92672">.</span>loc[df<span style="color:#f92672">.</span>ride_id <span style="color:#f92672">==</span> long_ride_id, [<span style="color:#e6db74">&#39;latitude&#39;</span>, <span style="color:#e6db74">&#39;longitude&#39;</span>]]<span style="color:#f92672">.</span>values,
</span></span><span style="display:flex;"><span>        line_color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#800026&#39;</span>)
</span></span><span style="display:flex;"><span>inline_map(mp)
</span></span></code></pre></div><link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
<style>
    .leaflet-popup-content {
        color: black !important;
    }
<pre><code>.leaflet-control-zoom-in {
    text-decoration: none !important;
}

.leaflet-control-zoom-out {
    text-decoration: none !important;
}
</code></pre>
<p></style></p>
<script>

  var folium_event = new CustomEvent(
    "folium_libs_loaded",
    {bubbles: true, cancelable: true}
  );

  var load_folium_charts = function(){
    window.dispatchEvent(folium_event);
  };

 var load_folium_libs = function(){
    console.log('Loading all Folium libraries...')
    $.getScript("http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js", function(){
      $.getScript('https://wrobstory.github.io/leaflet-dvf/leaflet-dvf.markers.min.js', function(){
          if (window['vg'] === undefined){
            $.getScript("http://wrobstory.github.io/vega/vega.v1.3.3.js", function(){
              load_folium_charts();
          });
        } else {
          load_folium_charts();
        }
      });
    });
  };

 if(typeof define === "function" && define.amd){
      var load_paths = {
        paths: {
          topojson:'http://d3js.org/topojson.v1.min',
          queue: 'http://d3js.org/queue.v1.min',
          d3: 'http://d3js.org/d3.v3.min'
        }
      };
      var libs = ['d3', 'queue', 'topojson'];
      for (var i=0; i < libs.length; i++){
        lib = libs[i]
        if (window[lib] !== undefined){
          delete load_paths.paths[lib]
        };
      };
      if (Object.keys(load_paths.paths).length != 0){
        require.config(load_paths);
        require(["queue"], function(queue){
          window.queue = queue;
        });
        require(["d3"], function(d3){
            console.log('Loading from require.js...')
            window.d3 = d3;
            require(["topojson"], function(topojson){
                window.topojson = topojson;
                load_folium_libs();
            });
        });
      } else {
        load_folium_libs();
      }

 }else{
      console.log('Require.js not found!');
      throw "Require.js not found!"
 };

</script>
<iframe srcdoc="<!DOCTYPE html>
<head>
   <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
   <link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css&quot; />
   <script src=&quot;http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js&quot;></script>
   <style>

      #map {
        position:absolute;
        top:0;
        bottom:0;
        right:0;
        left:0;
      }

   </style>
</head>
<body>
   <div class=&quot;folium-map&quot; id=&quot;folium_2bd5aee1bb9b4df18bcdcf3ab95655ed&quot; style=&quot;width: 960px; height: 500px&quot;></div>
   <script>

      

      var map = L.map('folium_2bd5aee1bb9b4df18bcdcf3ab95655ed').setView([41.6832673402, -91.5761171896], 13);

      L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 18,
          attribution: 'Map data (c) <a href=&quot;http://openstreetmap.org&quot;>OpenStreetMap</a> contributors'
      }).addTo(map);

      

      
      var latLngs = [ [41.7040185, -91.6098567],  [41.7040247, -91.6098774],  [41.7040617, -91.6098611],  [41.704097, -91.6100858],  [41.7044743, -91.6100461],  [41.7047787, -91.6098716],  [41.7049737, -91.6099166],  [41.7050227, -91.6098694],  [41.7051545, -91.6098862],  [41.7052711, -91.6099434],  [41.7057657, -91.6099556],  [41.7059239, -91.6099811],  [41.7061382, -91.6099622],  [41.7062995, -91.6099874],  [41.7063511, -91.6100849],  [41.706822, -91.6100725],  [41.7073366, -91.6100589],  [41.7078121, -91.6100464],  [41.7082628, -91.6100345],  [41.7084253, -91.6100168],  [41.7084375, -91.6093639],  [41.7084486, -91.6092576],  [41.7084967, -91.609175],  [41.7085109, -91.6089928],  [41.7084932, -91.608887],  [41.7082933, -91.60885],  [41.7083414, -91.6084017],  [41.7083968, -91.6082379],  [41.7083576, -91.607709],  [41.7084316, -91.6076349],  [41.7084309, -91.6075469],  [41.7083278, -91.6074547],  [41.7082756, -91.6071335],  [41.7082711, -91.6064798],  [41.7084203, -91.6063812],  [41.7084148, -91.6057711],  [41.7084091, -91.6051362],  [41.7084071, -91.6049141],  [41.70813, -91.6046784],  [41.7080787, -91.6045434],  [41.7080606, -91.6040062],  [41.7080081, -91.6036359],  [41.7079497, -91.6034955],  [41.7075148, -91.6030542],  [41.7070915, -91.6026826],  [41.7066714, -91.6023155],  [41.7063283, -91.6020181],  [41.7062227, -91.6014017],  [41.7058841, -91.6009321],  [41.7055431, -91.6005105],  [41.7052567, -91.6001492],  [41.7049921, -91.5996031],  [41.7047816, -91.5990337],  [41.7046672, -91.598705],  [41.704746, -91.5985261],  [41.7047072, -91.5983595],  [41.7046409, -91.5982849],  [41.7046228, -91.5978566],  [41.704292, -91.598048],  [41.7043005, -91.5974882],  [41.7042794, -91.5972733],  [41.7043003, -91.5971423],  [41.7041976, -91.596635],  [41.703997, -91.5965142],  [41.703924, -91.5966084],  [41.7036948, -91.5965982],  [41.7034904, -91.596495],  [41.7031638, -91.5965212],  [41.7027955, -91.5967164],  [41.7024824, -91.5972869],  [41.7021569, -91.5974608],  [41.702074, -91.5974058],  [41.7019934, -91.5974094],  [41.70177, -91.5972961],  [41.7016178, -91.5971021],  [41.7015374, -91.5967661],  [41.7015221, -91.5965607],  [41.7015028, -91.5965722],  [41.701494, -91.5965365],  [41.7014411, -91.5964636],  [41.7013207, -91.5963108],  [41.7012975, -91.5964637],  [41.7012228, -91.5964175],  [41.7009499, -91.5958674],  [41.7009014, -91.5957528],  [41.7008308, -91.5956784],  [41.7006703, -91.5953461],  [41.7002222, -91.5949745],  [41.6997183, -91.5947741],  [41.6992334, -91.5946161],  [41.6991787, -91.594552],  [41.6990262, -91.5945243],  [41.6986377, -91.5942992],  [41.6985096, -91.5941232],  [41.6983108, -91.5940602],  [41.6982695, -91.5941612],  [41.6983654, -91.5944124],  [41.6982234, -91.5943285],  [41.698208, -91.5942925],  [41.6981258, -91.5943542],  [41.6976762, -91.5942794],  [41.6972875, -91.5942231],  [41.6968581, -91.594019],  [41.6968003, -91.5940313],  [41.6966012, -91.5939206],  [41.6965563, -91.5938408],  [41.6961423, -91.5935698],  [41.6960179, -91.5934844],  [41.6957562, -91.5934336],  [41.6955953, -91.5933485],  [41.6955634, -91.5932793],  [41.695567, -91.5931809],  [41.6956794, -91.5930157],  [41.6960961, -91.5925588],  [41.6962462, -91.5922241],  [41.6963055, -91.5915288],  [41.6963185, -91.5908592],  [41.6963168, -91.5902196],  [41.6962973, -91.5895927],  [41.696231, -91.5890609],  [41.6960659, -91.588401],  [41.6959191, -91.587813],  [41.6958271, -91.587445],  [41.6955923, -91.5869039],  [41.6953044, -91.5864383],  [41.6952369, -91.5864721],  [41.6949321, -91.5859828],  [41.6948785, -91.5858875],  [41.6948466, -91.5857164],  [41.6947835, -91.5855732],  [41.6947945, -91.5854746],  [41.6946647, -91.584858],  [41.694697, -91.5842206],  [41.6948061, -91.5835936],  [41.6948514, -91.5830363],  [41.6946016, -91.5829127],  [41.6943116, -91.5828493],  [41.6942663, -91.5826876],  [41.6937861, -91.5825785],  [41.6934706, -91.5825278],  [41.6933775, -91.5826542],  [41.6928937, -91.582648],  [41.6925661, -91.5826833],  [41.692115, -91.5826219],  [41.6916556, -91.5825846],  [41.6914145, -91.5825555],  [41.6908955, -91.5823492],  [41.6905421, -91.582111],  [41.6901323, -91.5819321],  [41.6897251, -91.5818955],  [41.6892105, -91.5819128],  [41.6887366, -91.581918],  [41.688259, -91.5819095],  [41.6877991, -91.5819146],  [41.6875099, -91.58186],  [41.6874134, -91.5818051],  [41.6870397, -91.5817878],  [41.6869797, -91.5818122],  [41.6868985, -91.5815696],  [41.6864067, -91.5814222],  [41.6858887, -91.5812516],  [41.6853773, -91.5811546],  [41.6848759, -91.5811106],  [41.6843968, -91.5810685],  [41.683935, -91.5810148],  [41.6834597, -91.5809511],  [41.6829786, -91.5808883],  [41.6825235, -91.5808199],  [41.6824928, -91.5808098],  [41.6824236, -91.5808679],  [41.6820285, -91.5805603],  [41.681835, -91.5804778],  [41.6818019, -91.5803858],  [41.6816187, -91.5801489],  [41.6815981, -91.5800639],  [41.6812286, -91.5797137],  [41.6810476, -91.5794701],  [41.6809628, -91.5791977],  [41.6808935, -91.578504],  [41.6808428, -91.5780473],  [41.6803795, -91.5780208],  [41.6799099, -91.5780302],  [41.679417, -91.5780434],  [41.6789265, -91.5780565],  [41.6784491, -91.5780692],  [41.6779669, -91.578084],  [41.6774374, -91.5781005],  [41.6769786, -91.5781147],  [41.6764018, -91.5781396],  [41.6759463, -91.5781716],  [41.6754844, -91.5782042],  [41.6749831, -91.5782395],  [41.6748134, -91.5782515],  [41.6746828, -91.577641],  [41.6746141, -91.5768788],  [41.6745548, -91.5762295],  [41.6744933, -91.5755869],  [41.6744309, -91.5749539],  [41.6743664, -91.5743299],  [41.6743015, -91.5737312],  [41.6742363, -91.5730771],  [41.6741688, -91.5723995],  [41.6741063, -91.5717472],  [41.6740494, -91.5711258],  [41.6739871, -91.5704471],  [41.6739249, -91.569768],  [41.6738636, -91.5691278],  [41.6737949, -91.5684624],  [41.6737302, -91.5678038],  [41.6737037, -91.5675026],  [41.6736533, -91.5673835],  [41.673648, -91.5670979],  [41.6735707, -91.5669698],  [41.6735318, -91.5664608],  [41.6734183, -91.565967],  [41.6732409, -91.565788],  [41.6729345, -91.5657923],  [41.6725707, -91.5657811],  [41.6725479, -91.5656411],  [41.6720547, -91.5656322],  [41.6715938, -91.5656238],  [41.6711207, -91.5656153],  [41.6706294, -91.5656064],  [41.6701209, -91.5655974],  [41.6696393, -91.5655889],  [41.6692797, -91.5655913],  [41.6690574, -91.5656967],  [41.6688885, -91.5658655],  [41.6688171, -91.565978],  [41.668932, -91.5660504],  [41.6688946, -91.5659525],  [41.6689725, -91.5658389],  [41.6687444, -91.5652539],  [41.668508, -91.5646934],  [41.6682608, -91.5641089],  [41.6680669, -91.5636503],  [41.667836, -91.5636093],  [41.6677777, -91.5636385],  [41.6676435, -91.5630476],  [41.6674015, -91.5624592],  [41.667354, -91.5623917],  [41.6671834, -91.5624152],  [41.6671799, -91.5622179],  [41.6669752, -91.56161],  [41.6668075, -91.5610459],  [41.6667622, -91.5609862],  [41.6665441, -91.5604466],  [41.6663707, -91.5600473],  [41.6661013, -91.559474],  [41.6660568, -91.5593098],  [41.6659644, -91.5591754],  [41.665943, -91.5591066],  [41.6659512, -91.5589589],  [41.6659975, -91.5588816],  [41.6659479, -91.5585749],  [41.6659112, -91.5585043],  [41.6657381, -91.5578915],  [41.6656938, -91.5577355],  [41.6657071, -91.557632],  [41.6655774, -91.5570351],  [41.6654772, -91.5564126],  [41.6654291, -91.5560189],  [41.6652459, -91.5556515],  [41.6652593, -91.5555929],  [41.6651763, -91.5554083],  [41.6651338, -91.5553884],  [41.6651104, -91.5552784],  [41.6650329, -91.5551857],  [41.6650138, -91.555103],  [41.664858, -91.555159],  [41.6646473, -91.5551042],  [41.6642971, -91.5547259],  [41.6641692, -91.5544095],  [41.6640371, -91.5538187],  [41.6637708, -91.5532911],  [41.6636842, -91.5529604],  [41.6636422, -91.5523782],  [41.663653, -91.5520279],  [41.6636225, -91.5517893],  [41.6635603, -91.5516205],  [41.663525, -91.551373],  [41.6634407, -91.5507661],  [41.6633059, -91.5502012],  [41.6632131, -91.549971],  [41.6628497, -91.5495642],  [41.6625161, -91.5491226],  [41.6626765, -91.548475],  [41.6628793, -91.5479109],  [41.6630932, -91.5473118],  [41.6632545, -91.5467211],  [41.6633068, -91.546407],  [41.6632063, -91.5463172],  [41.6632788, -91.5459773],  [41.6632436, -91.545352],  [41.6632222, -91.5451022],  [41.6632344, -91.5447113],  [41.6631943, -91.5444971],  [41.6632055, -91.5442618],  [41.6631885, -91.5441912],  [41.663204, -91.5441436],  [41.6631904, -91.5440724],  [41.6630711, -91.5438946],  [41.6629595, -91.5437898],  [41.6626629, -91.5437571],  [41.6624412, -91.5438346],  [41.6623438, -91.5438166],  [41.6622679, -91.5436262],  [41.6617796, -91.5436959],  [41.6616132, -91.5436163],  [41.6614517, -91.5434105],  [41.6613147, -91.5430771],  [41.6612573, -91.5427565],  [41.6612561, -91.5422962],  [41.6611246, -91.5421455],  [41.6611827, -91.5414644],  [41.6612021, -91.5410069],  [41.66127, -91.5409197],  [41.6612737, -91.5402698],  [41.6612763, -91.5396291],  [41.6612804, -91.5389433],  [41.6612846, -91.5383136],  [41.6612968, -91.5380053],  [41.6614463, -91.5376815],  [41.6616237, -91.5376675],  [41.6616714, -91.5378357],  [41.661905, -91.5378129],  [41.6620745, -91.5378178],  [41.6622994, -91.5378011],  [41.6623941, -91.5378336],  [41.6624435, -91.5376353],  [41.6625119, -91.5376326],  [41.6625031, -91.5373085],  [41.6625778, -91.5372548],  [41.6626179, -91.5370721],  [41.6625967, -91.5370359],  [41.662596, -91.5370717],  [41.6626446, -91.5367287],  [41.6625686, -91.536164],  [41.6625466, -91.5355342],  [41.6626026, -91.5353601],  [41.6626183, -91.5354012],  [41.6625689, -91.5354621],  [41.6625421, -91.5355164],  [41.6625869, -91.5352465],  [41.6625869, -91.5352465], ];
var line_1 = L.polyline(latLngs,{



});
      map.addLayer(line_1);
      
      var latLngs = [ [41.6623876, -91.5356115],  [41.6624474, -91.5355907],  [41.66254, -91.5355243],  [41.6625843, -91.5355506],  [41.6625489, -91.5355262],  [41.6624778, -91.5355944],  [41.6624935, -91.5357922],  [41.6626208, -91.5355288],  [41.6626187, -91.5364023],  [41.6628475, -91.5363741],  [41.6627157, -91.536091],  [41.6629928, -91.535874],  [41.6629159, -91.5361285],  [41.6629884, -91.5360375],  [41.6630981, -91.5360667],  [41.6630835, -91.5361833],  [41.66356, -91.5364347],  [41.663621, -91.5364408],  [41.6640406, -91.5359486],  [41.6639811, -91.535757],  [41.6639486, -91.5362143],  [41.663798, -91.5368259],  [41.6624207, -91.5379239],  [41.6627171, -91.5378849],  [41.6625764, -91.5379736],  [41.6627221, -91.5373658],  [41.6624901, -91.5379393],  [41.6623318, -91.5376397],  [41.6620682, -91.5382019],  [41.6619732, -91.5378646],  [41.6619988, -91.53764],  [41.6618566, -91.5376646],  [41.6617693, -91.5376017],  [41.6618559, -91.538149],  [41.6618112, -91.5381298],  [41.6614159, -91.5435992],  [41.6614342, -91.5436931],  [41.6619951, -91.544111],  [41.6622222, -91.5442614],  [41.6631853, -91.5436118],  [41.6632018, -91.5436133],  [41.6632024, -91.5439337],  [41.6633029, -91.5452354],  [41.6632772, -91.5460662],  [41.6632699, -91.5461765],  [41.6633771, -91.5467525],  [41.6632218, -91.5473165],  [41.6629825, -91.5478525],  [41.6629332, -91.5479403],  [41.6626139, -91.5482507],  [41.6633737, -91.5504187],  [41.6633925, -91.5504759],  [41.663609, -91.5501818],  [41.6638243, -91.550559],  [41.6636388, -91.5505748],  [41.6637849, -91.5508832],  [41.6638593, -91.5517058],  [41.6642324, -91.5522043],  [41.6641208, -91.5529415],  [41.6641396, -91.5533356],  [41.6643261, -91.5536833],  [41.6647566, -91.5541517],  [41.6650706, -91.5545228],  [41.6655526, -91.5553432],  [41.665566, -91.5555408],  [41.6657971, -91.5566471],  [41.6657824, -91.5567524],  [41.6657156, -91.556857],  [41.6658329, -91.5570078],  [41.6659099, -91.557561],  [41.6653453, -91.5554293],  [41.6656518, -91.5565078],  [41.6658267, -91.5571649],  [41.6665338, -91.5594799],  [41.6664737, -91.5589733],  [41.666342, -91.5585351],  [41.6665123, -91.5591875],  [41.6667355, -91.5597535],  [41.6666799, -91.5597379],  [41.6670592, -91.5606786],  [41.6673419, -91.5612533],  [41.6675806, -91.5614816],  [41.6678876, -91.5624845],  [41.6682414, -91.5629508],  [41.6683787, -91.5631541],  [41.6688215, -91.5642861],  [41.6689328, -91.5644817],  [41.6692259, -91.565233],  [41.6691682, -91.5659974],  [41.6691551, -91.5662451],  [41.6691178, -91.5664409],  [41.6693339, -91.5668045],  [41.6696093, -91.5654894],  [41.6696415, -91.5652533],  [41.6688721, -91.5647596],  [41.6685153, -91.5648391],  [41.6687705, -91.5650378],  [41.6693489, -91.5658028],  [41.6689838, -91.5654082],  [41.6689608, -91.5653871],  [41.6688705, -91.5661216],  [41.6686937, -91.5650981],  [41.6695992, -91.5656215],  [41.6695933, -91.5655683],  [41.6694723, -91.5658328],  [41.6702192, -91.5658327],  [41.6707517, -91.5671439],  [41.6704455, -91.5659139],  [41.6706636, -91.5657275],  [41.6712418, -91.5655553],  [41.6719255, -91.5656104],  [41.6725195, -91.5655302],  [41.6729605, -91.5657592],  [41.6728561, -91.5657196],  [41.6734837, -91.5663445],  [41.6739355, -91.5664227],  [41.674067, -91.5668285],  [41.6739521, -91.5674388],  [41.6737724, -91.5682561],  [41.6736844, -91.568472],  [41.6740124, -91.5683537],  [41.6739106, -91.5687202],  [41.6739467, -91.5703841],  [41.6739945, -91.5717298],  [41.673964, -91.5718768],  [41.6739777, -91.572124],  [41.6740846, -91.5725659],  [41.6741315, -91.5729897],  [41.6742923, -91.5731603],  [41.6741199, -91.5737152],  [41.6746686, -91.5742899],  [41.6747043, -91.5755689],  [41.6747841, -91.5764079],  [41.6744575, -91.5761456],  [41.6743423, -91.5762346],  [41.6747373, -91.5771268],  [41.6746932, -91.5777507],  [41.6748148, -91.5783803],  [41.6749135, -91.5784567],  [41.6750249, -91.5783679],  [41.6755387, -91.5786453],  [41.6764737, -91.5790037],  [41.6766859, -91.5790525],  [41.6773336, -91.5786161],  [41.6773628, -91.5783246],  [41.677759, -91.578211],  [41.6782059, -91.5782983],  [41.6784034, -91.5778607],  [41.6788183, -91.5781131],  [41.6791397, -91.5780422],  [41.6790018, -91.5777982],  [41.6789226, -91.5778868],  [41.6796863, -91.5780932],  [41.6797639, -91.5780657],  [41.6803405, -91.5783399],  [41.6802292, -91.5783391],  [41.6801976, -91.5778584],  [41.6803457, -91.5781818],  [41.6808797, -91.5783102],  [41.681033, -91.5785538],  [41.6810475, -91.5789917],  [41.6808914, -91.57917],  [41.6810668, -91.5794632],  [41.681122, -91.579771],  [41.6811793, -91.579891],  [41.6813318, -91.5800766],  [41.6816977, -91.5804318],  [41.6827349, -91.5800568],  [41.6831214, -91.5805875],  [41.6834615, -91.5804978],  [41.6835342, -91.5807646],  [41.6836281, -91.5807543],  [41.6846467, -91.5809528],  [41.6848034, -91.5809694],  [41.6853494, -91.5811704],  [41.6854077, -91.5812314],  [41.6860069, -91.5813288],  [41.6862914, -91.5814158],  [41.686843, -91.5813853],  [41.6872761, -91.5813961],  [41.6874584, -91.5815176],  [41.6877733, -91.5814985],  [41.6876656, -91.5815308],  [41.6876238, -91.5815933],  [41.6883401, -91.5814161],  [41.688638, -91.5813326],  [41.6892108, -91.5814594],  [41.6894242, -91.5815475],  [41.6905048, -91.5822267],  [41.6912262, -91.5816436],  [41.6912569, -91.5815637],  [41.6911322, -91.5827121],  [41.691132, -91.5828594],  [41.6909033, -91.5831586],  [41.6926404, -91.5816558],  [41.6926901, -91.5816912],  [41.6931146, -91.5824815],  [41.6927947, -91.5828271],  [41.693101, -91.5826289],  [41.6931406, -91.5825247],  [41.6932213, -91.5817619],  [41.6932155, -91.5816577],  [41.694034, -91.5819771],  [41.694669, -91.5828998],  [41.694676, -91.5829331],  [41.6948252, -91.5830077],  [41.6950801, -91.5838268],  [41.6947727, -91.5852124],  [41.6946728, -91.5858758],  [41.6948407, -91.5862545],  [41.6954215, -91.5868699],  [41.6959143, -91.5877356],  [41.6960545, -91.5883468],  [41.6962507, -91.5887577],  [41.6963079, -91.5896979],  [41.6962324, -91.5901234],  [41.6962679, -91.5906647],  [41.6963754, -91.5911908],  [41.6963881, -91.5910554],  [41.6963065, -91.5914256],  [41.6962831, -91.5923276],  [41.6956556, -91.593383],  [41.6954534, -91.5937166],  [41.6955122, -91.5934886],  [41.695695, -91.5932209],  [41.6958366, -91.5932183],  [41.6964519, -91.5927702],  [41.6966377, -91.5928023],  [41.6967076, -91.593044],  [41.6967521, -91.5930026],  [41.6966661, -91.5935489],  [41.6966531, -91.5943386],  [41.6974142, -91.5941872],  [41.6973398, -91.5944071],  [41.697992, -91.5940318],  [41.6986931, -91.5936389],  [41.6992488, -91.594381],  [41.6997898, -91.5943514],  [41.6999854, -91.5944551],  [41.7006118, -91.5946376],  [41.7007248, -91.5946798],  [41.7006096, -91.5954845],  [41.7005921, -91.5955096],  [41.7006308, -91.5959094],  [41.7010431, -91.595911],  [41.7008684, -91.5961039],  [41.7004991, -91.5966359],  [41.7004359, -91.596758],  [41.7008338, -91.5965059],  [41.7007458, -91.5966205],  [41.7048983, -91.6006873],  [41.7049724, -91.6008524],  [41.707815, -91.602025],  [41.7079416, -91.600631],  [41.7080314, -91.5996969],  [41.7077236, -91.6017145],  [41.7076741, -91.6020292],  [41.7077843, -91.6020899],  [41.7077255, -91.6021831],  [41.7081938, -91.6039285],  [41.708438, -91.6048024],  [41.7088159, -91.6056468],  [41.7085359, -91.604853],  [41.7086836, -91.6053514],  [41.7087148, -91.6057667],  [41.7086875, -91.6060176],  [41.7087511, -91.6059411],  [41.7090593, -91.6089832],  [41.7100711, -91.6086843],  [41.7094109, -91.6092009],  [41.7089792, -91.610494],  [41.7089772, -91.6103223],  [41.7075435, -91.6111376],  [41.7072188, -91.6112031],  [41.7079533, -91.6102301],  [41.7080595, -91.6100489],  [41.7075406, -91.6098588],  [41.7070678, -91.6100008],  [41.7057599, -91.6101508],  [41.7056339, -91.6101638],  [41.7055264, -91.6102467],  [41.7054473, -91.6101104],  [41.7053622, -91.6101138],  [41.7051102, -91.6102205],  [41.7045968, -91.6102198],  [41.7043354, -91.6102022],  [41.7041922, -91.6101698],  [41.7041602, -91.6098432],  [41.7041602, -91.6098432], ];
var line_2 = L.polyline(latLngs,{
color: '#800026',


});
      map.addLayer(line_2);
      

      

      

   </script>
</body>" style="width: 100%; height: 510px; border: none"></iframe>
<p>So you pan around a bit, it looks like the GPS receiver on my phone was just going crazy.
But without visualizing the data (as a map), there&rsquo;d be no way to know that.</p>
<p>For fun, we can plot all the rides.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>mp_all <span style="color:#f92672">=</span> folium<span style="color:#f92672">.</span>Map(location<span style="color:#f92672">=</span>(lat, lon), tiles<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;OpenStreetMap&#39;</span>, zoom_start<span style="color:#f92672">=</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ride_id <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>ride_id<span style="color:#f92672">.</span>unique():
</span></span><span style="display:flex;"><span>    mp_all<span style="color:#f92672">.</span>line(locations<span style="color:#f92672">=</span>df<span style="color:#f92672">.</span>loc[df<span style="color:#f92672">.</span>ride_id <span style="color:#f92672">==</span> ride_id, [<span style="color:#e6db74">&#39;latitude&#39;</span>, <span style="color:#e6db74">&#39;longitude&#39;</span>]]<span style="color:#f92672">.</span>values,
</span></span><span style="display:flex;"><span>            line_weight<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, line_color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;#111&#39;</span>, line_opacity<span style="color:#f92672">=</span><span style="color:#ae81ff">.3</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>inline_map(mp_all)
</span></span></code></pre></div><iframe srcdoc="<!DOCTYPE html>
<head>
   <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
   <link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css&quot; />
   <script src=&quot;http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js&quot;></script>
   <style>

      #map {
        position:absolute;
        top:0;
        bottom:0;
        right:0;
        left:0;
      }

   </style>
</head>
<body>
   <div class=&quot;folium-map&quot; id=&quot;folium_2346e2ed519e48b3bb1900a33ecb2bbf&quot; style=&quot;width: 960px; height: 500px&quot;></div>
   <script>

      

      var map = L.map('folium_2346e2ed519e48b3bb1900a33ecb2bbf').setView([41.6832673402, -91.5761171896], 13);

      L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 18,
          attribution: 'Map data (c) <a href=&quot;http://openstreetmap.org&quot;>OpenStreetMap</a> contributors'
      }).addTo(map);

      

      
      var latLngs = [ [41.703753, -91.6098923],  [41.7038251, -91.6098346],  [41.7038578, -91.609814],  [41.7039434, -91.6100896],  [41.7043809, -91.6102577],  [41.704459, -91.6102856],  [41.704936, -91.6103164],  [41.705232, -91.6103162],  [41.7053368, -91.6102481],  [41.7057974, -91.6102698],  [41.7062798, -91.6101873],  [41.706742, -91.6101308],  [41.7072075, -91.6101479],  [41.707687, -91.610108],  [41.7081371, -91.6101125],  [41.7082872, -91.610094],  [41.7083684, -91.6099481],  [41.7084533, -91.6093233],  [41.708503, -91.6087069],  [41.7085107, -91.6083976],  [41.708425, -91.6077685],  [41.7084386, -91.6071023],  [41.7084399, -91.6064329],  [41.7084391, -91.6058214],  [41.7084403, -91.6052201],  [41.7085148, -91.6045688],  [41.7086624, -91.6039355],  [41.7087852, -91.6033528],  [41.7088572, -91.6029606],  [41.7083931, -91.6028005],  [41.7079405, -91.6026203],  [41.7074744, -91.6023732],  [41.707199, -91.602183],  [41.7071578, -91.6021295],  [41.7071007, -91.6014266],  [41.7070437, -91.6008275],  [41.7069142, -91.6002154],  [41.7068478, -91.5995836],  [41.7068277, -91.5993727],  [41.7069093, -91.598723],  [41.7069092, -91.5980983],  [41.7068968, -91.5976674],  [41.7066811, -91.5971161],  [41.7066222, -91.5965662],  [41.7065552, -91.5963973],  [41.7063738, -91.5962318],  [41.706209, -91.5961984],  [41.7060335, -91.5962307],  [41.7055955, -91.5965532],  [41.7054654, -91.5966131],  [41.7050642, -91.5965268],  [41.7045793, -91.5964957],  [41.7042049, -91.5965401],  [41.7037996, -91.5965392],  [41.7035409, -91.5963461],  [41.7031443, -91.5963437],  [41.7028226, -91.5965075],  [41.7027268, -91.5965824],  [41.702437, -91.5971374],  [41.7022934, -91.5972924],  [41.7021235, -91.597374],  [41.7018789, -91.597362],  [41.7017594, -91.5972762],  [41.7016001, -91.5969523],  [41.7014086, -91.5963984],  [41.7010371, -91.5962431],  [41.7009526, -91.5960591],  [41.7008371, -91.5954531],  [41.7007905, -91.5953285],  [41.7006371, -91.5951239],  [41.700173, -91.5947956],  [41.6996371, -91.5946382],  [41.6991556, -91.5945312],  [41.6986824, -91.5944224],  [41.6982048, -91.5942988],  [41.6977305, -91.5942589],  [41.6972482, -91.5941116],  [41.6967755, -91.593893],  [41.6963249, -91.5936198],  [41.6959007, -91.5933862],  [41.6956171, -91.5932868],  [41.6956786, -91.5930364],  [41.6960974, -91.5926167],  [41.6961792, -91.5925337],  [41.6962988, -91.5923005],  [41.696374, -91.5920566],  [41.6964198, -91.5914316],  [41.6964362, -91.5907453],  [41.6964441, -91.5901178],  [41.6964039, -91.5894959],  [41.6962888, -91.5889127],  [41.6961507, -91.5882792],  [41.696019, -91.5876796],  [41.6957748, -91.5871228],  [41.6954671, -91.5866423],  [41.695156, -91.5861726],  [41.6948935, -91.5856073],  [41.6947695, -91.5849883],  [41.6947544, -91.5843555],  [41.6948244, -91.5837398],  [41.6949004, -91.5831311],  [41.6948865, -91.5829012],  [41.69473, -91.5828086],  [41.6942409, -91.5827166],  [41.6937792, -91.5826086],  [41.6932869, -91.5825223],  [41.6928087, -91.5825305],  [41.6923165, -91.5825315],  [41.6918575, -91.5825255],  [41.6913942, -91.5824209],  [41.6909366, -91.5822945],  [41.6904801, -91.582083],  [41.6900348, -91.5819151],  [41.6895347, -91.5818296],  [41.6890796, -91.5818528],  [41.688566, -91.5818345],  [41.6881069, -91.5818208],  [41.6876529, -91.581795],  [41.6871723, -91.5816564],  [41.6867299, -91.5814867],  [41.6862714, -91.5813352],  [41.6858001, -91.581151],  [41.6853301, -91.5810717],  [41.6848486, -91.5810257],  [41.6843629, -91.5809982],  [41.6838944, -91.5809705],  [41.6833755, -91.5809223],  [41.6829114, -91.5808943],  [41.6824626, -91.5808445],  [41.6820427, -91.5806011],  [41.6816972, -91.5801678],  [41.6813224, -91.5797714],  [41.6810886, -91.5793975],  [41.6809896, -91.5789585],  [41.6809602, -91.5783335],  [41.680732, -91.5779274],  [41.680636, -91.5778961],  [41.6801051, -91.5780043],  [41.6795608, -91.5780466],  [41.6790823, -91.5780637],  [41.6786073, -91.5780527],  [41.6781394, -91.5780655],  [41.6776069, -91.5781087],  [41.6771047, -91.578107],  [41.6765931, -91.5781072],  [41.6761219, -91.5781426],  [41.6756007, -91.5781733],  [41.6750971, -91.5781931],  [41.6749306, -91.5782316],  [41.674845, -91.5781911],  [41.6746843, -91.5776351],  [41.6746613, -91.5769701],  [41.6746271, -91.5763714],  [41.6745762, -91.5757253],  [41.6745278, -91.5751003],  [41.674478, -91.5744735],  [41.674427, -91.5738041],  [41.6743809, -91.5731584],  [41.6743106, -91.5724777],  [41.6742477, -91.5717946],  [41.6741753, -91.5711],  [41.6741151, -91.5704048],  [41.6740332, -91.5697464],  [41.6739675, -91.5691449],  [41.6738969, -91.5684888],  [41.6738482, -91.5678557],  [41.6737862, -91.5671607],  [41.6736954, -91.5666142],  [41.6735438, -91.5660228],  [41.6734974, -91.5657972],  [41.6730161, -91.5656369],  [41.6725064, -91.565598],  [41.6720192, -91.5655675],  [41.6714989, -91.5655578],  [41.671031, -91.5655576],  [41.6705354, -91.5655888],  [41.6700532, -91.5655682],  [41.6695493, -91.5655871],  [41.6692372, -91.5657544],  [41.6692092, -91.5654898],  [41.6691499, -91.5654886],  [41.6689008, -91.5656237],  [41.66881, -91.5655408],  [41.6686163, -91.564957],  [41.6684218, -91.5643333],  [41.6682302, -91.5636998],  [41.6680009, -91.5631137],  [41.6677525, -91.5625738],  [41.6675037, -91.5620418],  [41.667249, -91.5614961],  [41.6670195, -91.5609258],  [41.6668043, -91.5603841],  [41.6665521, -91.5598203],  [41.6662866, -91.5592841],  [41.6660722, -91.5587177],  [41.6659197, -91.5581143],  [41.6657143, -91.5575542],  [41.6655641, -91.5569679],  [41.6654428, -91.5563475],  [41.6653873, -91.5557277],  [41.6652454, -91.5551225],  [41.6649332, -91.5546304],  [41.6645795, -91.5541931],  [41.6643214, -91.5536934],  [41.6640468, -91.5533226],  [41.663924, -91.5526828],  [41.6638006, -91.5521031],  [41.6636871, -91.5514889],  [41.6635899, -91.5508511],  [41.6633878, -91.5502305],  [41.6630533, -91.549754],  [41.6626752, -91.5493383],  [41.662598, -91.5491254],  [41.6625934, -91.548895],  [41.6627904, -91.5482568],  [41.6630127, -91.5476604],  [41.6632078, -91.5470408],  [41.6633387, -91.5464474],  [41.6634021, -91.5458401],  [41.6634201, -91.5452097],  [41.6634203, -91.5445887],  [41.6634184, -91.5439228],  [41.6633866, -91.5437828],  [41.6631712, -91.5436041],  [41.6626729, -91.5435585],  [41.6623016, -91.5436368],  [41.6620357, -91.5435992],  [41.6616384, -91.5436374],  [41.6614868, -91.5435747],  [41.661324, -91.5432129],  [41.6613288, -91.5427594],  [41.6613929, -91.5424268],  [41.661357, -91.5419893],  [41.6613094, -91.5413552],  [41.6613149, -91.5407039],  [41.6613221, -91.540091],  [41.6613307, -91.5394669],  [41.6613327, -91.5387909],  [41.6613384, -91.5381672],  [41.6613514, -91.5377497],  [41.6614463, -91.537653],  [41.6619218, -91.5376876],  [41.6623047, -91.5377673],  [41.6624769, -91.5376832],  [41.662596, -91.5373645],  [41.6626109, -91.5367242],  [41.662639, -91.5361427],  [41.662623, -91.5361216],  [41.6627093, -91.5355409],  [41.6625678, -91.5354593],  [41.6625272, -91.5354017],  [41.6625272, -91.5354017], ];
var line_1 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_1);
      
      var latLngs = [ [41.6618719, -91.5340052],  [41.6623564, -91.5350519],  [41.6623564, -91.5350519],  [41.6624279, -91.5351582],  [41.6625365, -91.5350649],  [41.6623077, -91.535037],  [41.6624398, -91.5350142],  [41.6625544, -91.5352289],  [41.6625604, -91.5358579],  [41.6626118, -91.5361448],  [41.6630881, -91.5361887],  [41.6635452, -91.5362696],  [41.6635878, -91.5362933],  [41.6634997, -91.5370018],  [41.6635082, -91.5374557],  [41.6634247, -91.5376561],  [41.6632767, -91.5376957],  [41.6628821, -91.5375294],  [41.6627515, -91.5375528],  [41.6623186, -91.5375402],  [41.661826, -91.5375805],  [41.6614835, -91.5375858],  [41.661419, -91.5376184],  [41.661318, -91.53784],  [41.6612773, -91.5384756],  [41.6612899, -91.5390816],  [41.6612882, -91.5397158],  [41.6612905, -91.5403691],  [41.6612794, -91.5410265],  [41.6612724, -91.5416405],  [41.6612674, -91.542003],  [41.6612465, -91.5419995],  [41.6612658, -91.5426309],  [41.661384, -91.5432164],  [41.6616077, -91.5436107],  [41.6620849, -91.5437123],  [41.6625094, -91.5436994],  [41.6629627, -91.5437733],  [41.6631277, -91.5438788],  [41.6632014, -91.5441205],  [41.6631591, -91.5447881],  [41.663142, -91.5450479],  [41.6631392, -91.545614],  [41.6632235, -91.5462498],  [41.6631631, -91.546958],  [41.663013, -91.5475455],  [41.662792, -91.5481604],  [41.662569, -91.5487768],  [41.6625135, -91.5489727],  [41.6625062, -91.5491922],  [41.6625761, -91.5494144],  [41.6629266, -91.5498714],  [41.6633048, -91.5502014],  [41.6635034, -91.5507621],  [41.6635932, -91.551395],  [41.6636922, -91.5520009],  [41.6637841, -91.5526499],  [41.6639675, -91.5532802],  [41.6642147, -91.5538186],  [41.6645054, -91.5543297],  [41.6648078, -91.5547808],  [41.6651491, -91.5553317],  [41.6652596, -91.5555698],  [41.6653661, -91.5562364],  [41.6653825, -91.5564676],  [41.6655334, -91.5571093],  [41.6657122, -91.5577465],  [41.6658947, -91.5583516],  [41.6660361, -91.5589826],  [41.6662454, -91.5595637],  [41.6664929, -91.560095],  [41.666725, -91.5606357],  [41.666967, -91.5611665],  [41.6671948, -91.5617058],  [41.6674145, -91.5622507],  [41.6676137, -91.562797],  [41.6678391, -91.5633879],  [41.6680523, -91.563994],  [41.668307, -91.5645862],  [41.6685416, -91.5651562],  [41.6687612, -91.5656962],  [41.6689624, -91.5661388],  [41.6690076, -91.5661344],  [41.6694065, -91.5658051],  [41.6698841, -91.5656725],  [41.670338, -91.5656997],  [41.6708276, -91.5657012],  [41.6712992, -91.5656974],  [41.6717963, -91.5657436],  [41.6722818, -91.5657225],  [41.6727616, -91.5657145],  [41.6732328, -91.5657604],  [41.6734054, -91.5658077],  [41.6734689, -91.5659118],  [41.6734905, -91.5664142],  [41.6736954, -91.5668142],  [41.6737478, -91.5674559],  [41.6738021, -91.5680903],  [41.6738514, -91.5687278],  [41.673912, -91.5694003],  [41.6739888, -91.5700129],  [41.6740828, -91.5706209],  [41.6741459, -91.5712512],  [41.6741985, -91.5718497],  [41.6742656, -91.5724555],  [41.6742888, -91.5730591],  [41.6743271, -91.5737014],  [41.6743798, -91.5743074],  [41.6744523, -91.5749034],  [41.6745194, -91.5755505],  [41.6745711, -91.5761629],  [41.6746634, -91.5767574],  [41.6747119, -91.5773953],  [41.6747527, -91.5780043],  [41.6748497, -91.5782154],  [41.675332, -91.5782607],  [41.6758399, -91.5782671],  [41.6763029, -91.5782257],  [41.6767912, -91.5782094],  [41.6772835, -91.5782157],  [41.677762, -91.5782076],  [41.6782498, -91.5781963],  [41.6787469, -91.5781248],  [41.6792302, -91.5781414],  [41.6797146, -91.5781218],  [41.680211, -91.5781197],  [41.6806825, -91.5781576],  [41.6808357, -91.5782302],  [41.680945, -91.578851],  [41.6810599, -91.5794668],  [41.6813763, -91.5799218],  [41.6816329, -91.5802101],  [41.6817086, -91.5803935],  [41.6821423, -91.5807076],  [41.6826032, -91.5809311],  [41.6830631, -91.5810015],  [41.6835369, -91.5810288],  [41.6840176, -91.5810624],  [41.6844936, -91.5810979],  [41.6850086, -91.5811437],  [41.6854627, -91.5811815],  [41.6859511, -91.5812133],  [41.6864016, -91.5813436],  [41.6868257, -91.5815552],  [41.6872604, -91.5817637],  [41.6877271, -91.5819053],  [41.6882165, -91.5819238],  [41.6886753, -91.5819704],  [41.6891541, -91.5820122],  [41.6896559, -91.5820328],  [41.6901301, -91.5821356],  [41.6905675, -91.5822914],  [41.6908314, -91.5823975],  [41.6912971, -91.5824931],  [41.6917937, -91.582606],  [41.6922485, -91.5826283],  [41.6927259, -91.5825937],  [41.6932396, -91.5825908],  [41.6937406, -91.5826652],  [41.6942021, -91.5827547],  [41.6946813, -91.5829018],  [41.6948348, -91.5829613],  [41.6948885, -91.5834221],  [41.6948043, -91.5840468],  [41.6946926, -91.5847384],  [41.6947136, -91.5852729],  [41.6947665, -91.5855328],  [41.6950423, -91.5861346],  [41.6953764, -91.5865933],  [41.695702, -91.5870791],  [41.6959826, -91.5877079],  [41.6961532, -91.5884013],  [41.6962914, -91.589044],  [41.6963878, -91.5895592],  [41.6963349, -91.5902319],  [41.6963192, -91.5908885],  [41.696327, -91.5914914],  [41.6963272, -91.592129],  [41.6961285, -91.5926025],  [41.6957195, -91.5929944],  [41.6956589, -91.5933175],  [41.6960857, -91.5935551],  [41.6965585, -91.5938396],  [41.6969997, -91.5940582],  [41.6974469, -91.5942628],  [41.6979158, -91.594313],  [41.6983733, -91.5944239],  [41.6988739, -91.5945284],  [41.6993305, -91.5946327],  [41.6997751, -91.5947605],  [41.7002176, -91.594957],  [41.7006474, -91.5952248],  [41.7009122, -91.5957636],  [41.7010527, -91.5962822],  [41.7014307, -91.5964052],  [41.7015715, -91.5966375],  [41.701663, -91.5970613],  [41.7018314, -91.5973351],  [41.7021286, -91.5974566],  [41.7023453, -91.5974091],  [41.7025717, -91.5972123],  [41.7027793, -91.5967591],  [41.7029543, -91.5965758],  [41.7034102, -91.5964209],  [41.703843, -91.5966363],  [41.7043113, -91.5965808],  [41.7047676, -91.5965789],  [41.7049126, -91.5966073],  [41.7050559, -91.5966972],  [41.7054266, -91.596764],  [41.7055255, -91.5967565],  [41.7059653, -91.5964559],  [41.7061909, -91.5963651],  [41.7064498, -91.5964488],  [41.7065388, -91.5965911],  [41.7066029, -91.5971625],  [41.7068447, -91.5977483],  [41.7068574, -91.5984033],  [41.7068479, -91.5990166],  [41.7067684, -91.5996578],  [41.7068408, -91.6002746],  [41.707007, -91.6008882],  [41.7070767, -91.601542],  [41.7071328, -91.6021471],  [41.7075198, -91.6024986],  [41.7079827, -91.6027193],  [41.7084572, -91.6028991],  [41.7089376, -91.6029883],  [41.7090166, -91.603011],  [41.7090496, -91.6032714],  [41.7089084, -91.6039193],  [41.7087337, -91.6045612],  [41.7086094, -91.6051379],  [41.7086462, -91.6057986],  [41.7086541, -91.6064444],  [41.7086488, -91.6070637],  [41.7086334, -91.6077125],  [41.7085409, -91.6083306],  [41.7084984, -91.608957],  [41.708503, -91.6095995],  [41.708508, -91.6098128],  [41.7084386, -91.609978],  [41.7083246, -91.610067],  [41.7078038, -91.6100907],  [41.7073052, -91.6100784],  [41.7068065, -91.6100583],  [41.7062967, -91.610063],  [41.7058252, -91.6100629],  [41.7053275, -91.6100357],  [41.704807, -91.610042],  [41.7043068, -91.6100699],  [41.7040914, -91.6100197],  [41.7040656, -91.609912],  [41.7040656, -91.609912], ];
var line_2 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_2);
      
      var latLngs = [ [41.6957181, -91.5932751],  [41.695751, -91.5932776],  [41.6956561, -91.5932152],  [41.6956671, -91.5930298],  [41.6960455, -91.5925431],  [41.6962729, -91.5921531],  [41.6963162, -91.59146],  [41.6963104, -91.5908415],  [41.6963236, -91.5901929],  [41.696306, -91.5895734],  [41.6961992, -91.5889442],  [41.6960572, -91.5883095],  [41.6959336, -91.5877097],  [41.6957309, -91.5871703],  [41.6954527, -91.5866723],  [41.6951183, -91.5862323],  [41.6948434, -91.5857028],  [41.6946829, -91.5850541],  [41.6946527, -91.5844199],  [41.6947601, -91.5837922],  [41.6948515, -91.5831984],  [41.6948731, -91.5829573],  [41.6944117, -91.582821],  [41.6939507, -91.582737],  [41.6934304, -91.5826565],  [41.6929107, -91.5826313],  [41.6924588, -91.5826265],  [41.6919452, -91.5825748],  [41.691474, -91.582587],  [41.691037, -91.5824332],  [41.6905493, -91.5822386],  [41.6901068, -91.5820457],  [41.6896224, -91.5819796],  [41.6891437, -91.5819636],  [41.6886722, -91.581942],  [41.6881871, -91.5819155],  [41.687722, -91.5818996],  [41.6872021, -91.5817582],  [41.6867575, -91.5816311],  [41.6862677, -91.5814173],  [41.6858039, -91.5812447],  [41.6853071, -91.5811757],  [41.6848108, -91.5811531],  [41.6843586, -91.5811105],  [41.6838244, -91.5810838],  [41.6833696, -91.5810386],  [41.6829166, -91.5809931],  [41.6824614, -91.5809147],  [41.6820184, -91.5806239],  [41.6817575, -91.5804149],  [41.6814988, -91.5800423],  [41.6810974, -91.5796564],  [41.6809274, -91.5793189],  [41.680833, -91.5786525],  [41.680792, -91.5783105],  [41.6806657, -91.5781257],  [41.6801754, -91.5781755],  [41.6796928, -91.5782177],  [41.6792168, -91.5782297],  [41.6787669, -91.5782489],  [41.6782928, -91.5782545],  [41.6778383, -91.5782398],  [41.6773704, -91.5782839],  [41.6768838, -91.5782838],  [41.6764249, -91.5783098],  [41.6759341, -91.5783053],  [41.6754574, -91.5783409],  [41.6750022, -91.5783293],  [41.6748501, -91.5782992],  [41.6747416, -91.5781511],  [41.6746353, -91.5775356],  [41.6745627, -91.5769365],  [41.6745019, -91.5763079],  [41.6744629, -91.5756634],  [41.6744055, -91.5750351],  [41.6743555, -91.5744074],  [41.6742866, -91.5738047],  [41.6742192, -91.573185],  [41.6742013, -91.5729009],  [41.6741328, -91.572716],  [41.6740868, -91.572055],  [41.6740653, -91.5714348],  [41.6739978, -91.5708292],  [41.6739022, -91.5702039],  [41.6738491, -91.5694979],  [41.6737852, -91.5688581],  [41.6737156, -91.5681888],  [41.6736617, -91.5675017],  [41.6735815, -91.5668399],  [41.673532, -91.5664819],  [41.6734469, -91.5658536],  [41.6734266, -91.5657911],  [41.6729283, -91.5656834],  [41.6724695, -91.5656672],  [41.6719946, -91.5656776],  [41.6714931, -91.5656664],  [41.6710292, -91.5656605],  [41.6705384, -91.5656636],  [41.6700727, -91.5656671],  [41.6695726, -91.565703],  [41.6693046, -91.5658389],  [41.6692904, -91.5659304],  [41.6689647, -91.5661363],  [41.6687822, -91.5655777],  [41.6685296, -91.5649871],  [41.6682763, -91.5644265],  [41.6680563, -91.5638232],  [41.6678306, -91.5632717],  [41.6675746, -91.562696],  [41.6673692, -91.5621241],  [41.667141, -91.5615307],  [41.6669203, -91.5609905],  [41.6666856, -91.5604254],  [41.6664565, -91.5599061],  [41.6662144, -91.5593584],  [41.6659788, -91.5588213],  [41.6658431, -91.5581829],  [41.6656755, -91.5575984],  [41.6655346, -91.5569662],  [41.6654526, -91.5565853],  [41.6652874, -91.5559598],  [41.6651471, -91.5553209],  [41.6650497, -91.5550657],  [41.6647971, -91.554687],  [41.6646736, -91.554695],  [41.6644972, -91.5544944],  [41.66443, -91.5544484],  [41.6642789, -91.5538759],  [41.6640043, -91.5533535],  [41.6637755, -91.5528119],  [41.6636664, -91.5521706],  [41.6635761, -91.551559],  [41.6634789, -91.5509408],  [41.6633315, -91.5502856],  [41.6630787, -91.5499084],  [41.6626397, -91.5494961],  [41.6625313, -91.5493085],  [41.6624915, -91.5490799],  [41.6625964, -91.5484649],  [41.6628213, -91.5478981],  [41.6630124, -91.5473233],  [41.6631727, -91.5467607],  [41.6632698, -91.5461335],  [41.6633041, -91.5455219],  [41.663317, -91.5451988],  [41.6634065, -91.5446063],  [41.6633459, -91.5438696],  [41.6632483, -91.54371],  [41.6632441, -91.5435777],  [41.6628045, -91.5437903],  [41.6623075, -91.5438919],  [41.6621277, -91.5439247],  [41.6619899, -91.5440314],  [41.6617097, -91.5440256],  [41.6616248, -91.543995],  [41.6614889, -91.5438527],  [41.6612437, -91.5432878],  [41.6611387, -91.5426889],  [41.6611885, -91.5426197],  [41.6611639, -91.5419616],  [41.6611887, -91.5412905],  [41.661214, -91.5406197],  [41.6612519, -91.5399961],  [41.661233, -91.5392929],  [41.6612272, -91.5386062],  [41.6612502, -91.5379791],  [41.6612928, -91.5378147],  [41.6617724, -91.5377678],  [41.6622379, -91.5377629],  [41.6624139, -91.537717],  [41.6625325, -91.5371081],  [41.6625635, -91.5364982],  [41.6626021, -91.5358886],  [41.6625879, -91.5352709],  [41.6625705, -91.5351654],  [41.6626367, -91.535091],  [41.6626367, -91.535091], ];
var line_3 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_3);
      
      var latLngs = [ [41.7040151, -91.6096464],  [41.7040313, -91.609658],  [41.704082, -91.6099126],  [41.7040345, -91.6099355],  [41.7040735, -91.609933],  [41.7040926, -91.6100682],  [41.7041598, -91.6100835],  [41.7041556, -91.6101219],  [41.7046189, -91.6101216],  [41.7050151, -91.6100202],  [41.7055075, -91.610037],  [41.7059737, -91.6100193],  [41.7064598, -91.610018],  [41.7069156, -91.6099968],  [41.7074192, -91.6099812],  [41.7078848, -91.6099463],  [41.7083259, -91.6099471],  [41.7084155, -91.6097427],  [41.7084519, -91.6090661],  [41.7084568, -91.6084573],  [41.7084001, -91.607855],  [41.7083577, -91.6071836],  [41.7083297, -91.6065761],  [41.7083042, -91.6059712],  [41.7082957, -91.6052989],  [41.7083883, -91.6046737],  [41.7085518, -91.6040791],  [41.7087329, -91.6034386],  [41.7088504, -91.6029178],  [41.7088429, -91.6028663],  [41.708358, -91.6028187],  [41.7079047, -91.6026696],  [41.7074781, -91.6024662],  [41.7071778, -91.6022581],  [41.7070877, -91.6020525],  [41.7070237, -91.6014159],  [41.7069614, -91.6008137],  [41.7067977, -91.6002038],  [41.706734, -91.5995925],  [41.7067992, -91.598972],  [41.7068713, -91.5982727],  [41.7068773, -91.5976665],  [41.706848, -91.5975047],  [41.706685, -91.597218],  [41.7065527, -91.5965904],  [41.7064754, -91.5964402],  [41.7063638, -91.5963348],  [41.7059863, -91.5963401],  [41.7057481, -91.5966211],  [41.7052732, -91.5967391],  [41.7048194, -91.5965517],  [41.7043596, -91.5965522],  [41.7038772, -91.5966666],  [41.7035378, -91.5964203],  [41.7034594, -91.5963887],  [41.7030522, -91.5964903],  [41.7027862, -91.5966929],  [41.7025007, -91.5972327],  [41.7023435, -91.5974133],  [41.7022445, -91.597473],  [41.7019552, -91.5974304],  [41.7017251, -91.597228],  [41.7015546, -91.596626],  [41.7013936, -91.5963366],  [41.7010694, -91.5962776],  [41.700959, -91.5961362],  [41.7008017, -91.5955704],  [41.7005747, -91.5951681],  [41.7001114, -91.5948536],  [41.6999266, -91.5947538],  [41.699455, -91.5946717],  [41.6989757, -91.5945913],  [41.6984853, -91.5945563],  [41.6980499, -91.59435],  [41.6975881, -91.5942608],  [41.6971499, -91.594111],  [41.6967122, -91.5939175],  [41.6962702, -91.5936637],  [41.6958096, -91.5934222],  [41.6956035, -91.5933315],  [41.6956616, -91.5930082],  [41.696034, -91.5925494],  [41.6961791, -91.5923806],  [41.696274, -91.5921627],  [41.6963144, -91.5914845],  [41.6963095, -91.5908141],  [41.6963122, -91.5901524],  [41.6962949, -91.5895416],  [41.6961728, -91.5889395],  [41.6960329, -91.5883521],  [41.6958886, -91.5877665],  [41.6957142, -91.5872082],  [41.6954334, -91.5867024],  [41.6951186, -91.5862544],  [41.6948332, -91.5857625],  [41.6946686, -91.5851663],  [41.6946274, -91.5845138],  [41.6947254, -91.5838773],  [41.6948461, -91.5832733],  [41.694891, -91.582963],  [41.6944163, -91.582793],  [41.6939174, -91.5826866],  [41.69342, -91.5825933],  [41.6929187, -91.5826141],  [41.6924597, -91.582636],  [41.6919928, -91.5826382],  [41.691494, -91.5826083],  [41.6910073, -91.5824376],  [41.6905578, -91.5822413],  [41.6901028, -91.5820532],  [41.6895932, -91.5819855],  [41.6891178, -91.5819234],  [41.688642, -91.5819011],  [41.6881313, -91.5818484],  [41.6876556, -91.5818532],  [41.687173, -91.5817407],  [41.6867152, -91.5816005],  [41.6862341, -91.5814115],  [41.6857184, -91.5812473],  [41.6852068, -91.5811688],  [41.6847352, -91.5811136],  [41.6842097, -91.5811],  [41.683685, -91.5810564],  [41.6832319, -91.5810227],  [41.6827602, -91.5810043],  [41.6823212, -91.580827],  [41.6818987, -91.5805429],  [41.6817773, -91.5804752],  [41.6814502, -91.5799828],  [41.6810464, -91.5795901],  [41.6809056, -91.5790007],  [41.6808224, -91.5783902],  [41.6807237, -91.577993],  [41.6806137, -91.5779046],  [41.6801017, -91.5781443],  [41.6796095, -91.5782239],  [41.6791142, -91.5782066],  [41.6786202, -91.5781951],  [41.6780986, -91.5782443],  [41.6776005, -91.5782937],  [41.6770714, -91.5783447],  [41.6765413, -91.5783713],  [41.6760345, -91.5783341],  [41.6755141, -91.5783512],  [41.6750227, -91.5783967],  [41.6749137, -91.5783707],  [41.6747633, -91.5782305],  [41.6746251, -91.5776188],  [41.6745744, -91.576999],  [41.6745325, -91.5763337],  [41.6744789, -91.575688],  [41.6744276, -91.5750235],  [41.6743963, -91.574357],  [41.6743176, -91.5737612],  [41.6742289, -91.5730695],  [41.6741603, -91.5724262],  [41.6740813, -91.5717619],  [41.6740144, -91.571081],  [41.6739672, -91.5704366],  [41.6739245, -91.569822],  [41.6738663, -91.5691926],  [41.6738124, -91.5685718],  [41.6737227, -91.5679559],  [41.6736515, -91.5673376],  [41.6735743, -91.5666559],  [41.6734723, -91.565972],  [41.6734424, -91.5658408],  [41.6733556, -91.5657704],  [41.672859, -91.5657255],  [41.6724081, -91.5656953],  [41.6718975, -91.5656805],  [41.671432, -91.5656818],  [41.6709547, -91.5656295],  [41.670458, -91.5656554],  [41.6699699, -91.565664],  [41.6694899, -91.5657231],  [41.669362, -91.5657922],  [41.6693559, -91.5658955],  [41.6692266, -91.5659067],  [41.669092, -91.5660425],  [41.6690148, -91.5661484],  [41.6688468, -91.5656594],  [41.6685974, -91.565118],  [41.6683462, -91.5645645],  [41.6680957, -91.5639726],  [41.6678772, -91.5634313],  [41.6676255, -91.5628249],  [41.6673921, -91.5622338],  [41.6671729, -91.5617023],  [41.6669405, -91.5610978],  [41.6667278, -91.5605269],  [41.6664778, -91.56001],  [41.6662366, -91.5594857],  [41.6660291, -91.558948],  [41.6659572, -91.5587189],  [41.6658325, -91.5580958],  [41.6656257, -91.5575141],  [41.6654403, -91.5568959],  [41.6653175, -91.5563464],  [41.6653114, -91.5557022],  [41.6651684, -91.5551261],  [41.6648711, -91.5547555],  [41.6648104, -91.5546122],  [41.6645151, -91.554477],  [41.6642155, -91.5539681],  [41.6641022, -91.5537916],  [41.6638384, -91.5533895],  [41.6637201, -91.5527863],  [41.6636704, -91.5521652],  [41.6635757, -91.5515778],  [41.6634794, -91.5509432],  [41.6633371, -91.5503197],  [41.6631359, -91.5500111],  [41.6627588, -91.5496305],  [41.6626237, -91.5494632],  [41.6625326, -91.5492546],  [41.6624954, -91.5490159],  [41.6626592, -91.5483578],  [41.6628679, -91.5477548],  [41.6630789, -91.5471574],  [41.663253, -91.5465264],  [41.6633036, -91.5459137],  [41.6633046, -91.5452653],  [41.6633341, -91.5451187],  [41.663246, -91.5447404],  [41.6633432, -91.5440997],  [41.6632387, -91.5437255],  [41.6632502, -91.54368],  [41.6627797, -91.5437245],  [41.6623112, -91.5437636],  [41.6618434, -91.5438644],  [41.6616815, -91.5438993],  [41.6614502, -91.5437591],  [41.6611806, -91.543306],  [41.6611168, -91.5429229],  [41.6611428, -91.5422125],  [41.6611617, -91.5415897],  [41.6611906, -91.5409378],  [41.6612311, -91.5402507],  [41.661229, -91.5395601],  [41.6612361, -91.538903],  [41.6612517, -91.5382237],  [41.6612447, -91.5378391],  [41.6613052, -91.5376815],  [41.6614299, -91.5376119],  [41.6619016, -91.5376006],  [41.6623711, -91.5375965],  [41.6625054, -91.5374818],  [41.6625402, -91.5368828],  [41.6625152, -91.5362531],  [41.6626063, -91.5356161],  [41.6625947, -91.5352016],  [41.6625947, -91.5352016], ];
var line_4 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_4);
      
      var latLngs = [ [41.6627826, -91.5350182],  [41.6627742, -91.5351068],  [41.6627229, -91.5357062],  [41.6627101, -91.5360432],  [41.6631701, -91.5361735],  [41.6635104, -91.5361978],  [41.6636028, -91.5363251],  [41.6635946, -91.5369436],  [41.6636061, -91.5373099],  [41.6634908, -91.5377714],  [41.6633776, -91.5377998],  [41.6628864, -91.5377432],  [41.6623665, -91.5376966],  [41.6618692, -91.537631],  [41.6615139, -91.537628],  [41.6613816, -91.537718],  [41.6613198, -91.5379035],  [41.6613135, -91.5385574],  [41.661293, -91.5391618],  [41.6612806, -91.5398514],  [41.661281, -91.5405421],  [41.6612483, -91.5412087],  [41.6612678, -91.5418148],  [41.661289, -91.5420523],  [41.6612588, -91.5420132],  [41.661265, -91.5425725],  [41.6612553, -91.5431847],  [41.6615546, -91.5435735],  [41.661995, -91.5437537],  [41.6624882, -91.5437456],  [41.6629774, -91.5437948],  [41.6631704, -91.5438537],  [41.6632364, -91.5440629],  [41.6631521, -91.5446996],  [41.6631126, -91.5453496],  [41.6631992, -91.5460613],  [41.6631882, -91.5467559],  [41.6630659, -91.5473563],  [41.6628422, -91.5479873],  [41.6626231, -91.5485319],  [41.6624935, -91.5488769],  [41.6624877, -91.5491097],  [41.6625568, -91.5493818],  [41.6628972, -91.5498196],  [41.6632795, -91.5502452],  [41.6634398, -91.550631],  [41.663555, -91.5512444],  [41.6636527, -91.5518731],  [41.663683, -91.5524821],  [41.663864, -91.5531171],  [41.6641267, -91.5536094],  [41.6644385, -91.5541135],  [41.6645893, -91.5544835],  [41.6649576, -91.5549552],  [41.6652215, -91.5555063],  [41.6653183, -91.5561044],  [41.6654138, -91.5566994],  [41.6654957, -91.5571836],  [41.6656855, -91.5577725],  [41.6658524, -91.5583989],  [41.6659912, -91.5590255],  [41.6662023, -91.5595868],  [41.6664449, -91.5601052],  [41.6667124, -91.5606907],  [41.6669409, -91.5612479],  [41.667184, -91.5618335],  [41.6674302, -91.5624274],  [41.6676755, -91.5630127],  [41.6679099, -91.5635667],  [41.6681474, -91.5641578],  [41.6683669, -91.564758],  [41.6685942, -91.5653326],  [41.6688404, -91.565923],  [41.6689108, -91.5661198],  [41.6693198, -91.5658483],  [41.6697989, -91.5656612],  [41.6702502, -91.5656775],  [41.6707291, -91.5656753],  [41.6712167, -91.5656847],  [41.6716858, -91.5656747],  [41.6721423, -91.5656919],  [41.672643, -91.5657175],  [41.6731016, -91.565743],  [41.6733877, -91.5658132],  [41.6734487, -91.5659007],  [41.6735012, -91.5664563],  [41.6736366, -91.5667282],  [41.673736, -91.5673995],  [41.6737776, -91.5680864],  [41.6738419, -91.5687726],  [41.6738928, -91.5694325],  [41.6739584, -91.5700458],  [41.6740364, -91.5706878],  [41.6740709, -91.5713107],  [41.6741405, -91.571911],  [41.6742045, -91.5725238],  [41.6742671, -91.5731775],  [41.6743686, -91.5737888],  [41.6744365, -91.5743899],  [41.67449, -91.575031],  [41.6745372, -91.5756935],  [41.6745682, -91.5763279],  [41.6746275, -91.5769539],  [41.6746807, -91.5775502],  [41.6748125, -91.5781533],  [41.6753094, -91.5781808],  [41.6758134, -91.578138],  [41.6762873, -91.578137],  [41.6767802, -91.5780943],  [41.6772852, -91.5780823],  [41.677772, -91.5780689],  [41.6782279, -91.5780766],  [41.6787133, -91.5780746],  [41.6792019, -91.5780906],  [41.6796756, -91.578098],  [41.680168, -91.5780649],  [41.6806183, -91.578046],  [41.6807721, -91.5780674],  [41.6808576, -91.5781583],  [41.6809548, -91.5787724],  [41.6810111, -91.5793922],  [41.6813616, -91.579852],  [41.6817098, -91.5801653],  [41.6818049, -91.5803635],  [41.6822092, -91.5806728],  [41.682653, -91.5808654],  [41.6831007, -91.58093],  [41.6835881, -91.5809617],  [41.6840574, -91.5809908],  [41.6845131, -91.5810547],  [41.6850197, -91.5810995],  [41.6854822, -91.581136],  [41.6859459, -91.5811986],  [41.6863996, -91.5813612],  [41.6868536, -91.5815496],  [41.6872946, -91.5816855],  [41.6877663, -91.5817961],  [41.6882534, -91.5818305],  [41.6887221, -91.5818247],  [41.6891916, -91.5818467],  [41.6896669, -91.5818563],  [41.6901282, -91.5819195],  [41.6904079, -91.5819917],  [41.6908661, -91.5822505],  [41.6913509, -91.5824896],  [41.6918009, -91.582591],  [41.6923095, -91.5825918],  [41.6927773, -91.5825807],  [41.6932337, -91.5825746],  [41.6937171, -91.5826146],  [41.6941855, -91.5826908],  [41.6945357, -91.5827885],  [41.6948688, -91.5828818],  [41.6948822, -91.5831139],  [41.6947986, -91.5837108],  [41.6946743, -91.584346],  [41.6946494, -91.5850127],  [41.6947697, -91.5855928],  [41.6950942, -91.5861397],  [41.6954391, -91.5865979],  [41.6957262, -91.5870811],  [41.6959736, -91.5877286],  [41.6961429, -91.5884184],  [41.6962831, -91.5890221],  [41.6963594, -91.5894594],  [41.6963536, -91.5901152],  [41.6963565, -91.5907492],  [41.696374, -91.5913826],  [41.6963621, -91.5920045],  [41.6962675, -91.5923408],  [41.6959262, -91.5927925],  [41.6955793, -91.5932449],  [41.6955914, -91.5933403],  [41.6960548, -91.5935105],  [41.6964858, -91.5937384],  [41.6968994, -91.5939828],  [41.6973365, -91.5941961],  [41.6978293, -91.5942976],  [41.698321, -91.5944052],  [41.6987989, -91.5945191],  [41.699304, -91.5946644],  [41.6997824, -91.5947709],  [41.7002259, -91.5949397],  [41.700646, -91.5952206],  [41.7008864, -91.5957317],  [41.7010265, -91.5962439],  [41.7014038, -91.5964039],  [41.7015135, -91.5965942],  [41.7016248, -91.5970133],  [41.7017811, -91.5972883],  [41.7019545, -91.5974157],  [41.7021651, -91.5974705],  [41.7024487, -91.5973453],  [41.7026521, -91.597065],  [41.702863, -91.596647],  [41.7030892, -91.5965052],  [41.7035625, -91.5964075],  [41.7039203, -91.5966268],  [41.7043679, -91.5965102],  [41.7048453, -91.5965645],  [41.7053567, -91.5967288],  [41.7055264, -91.5967288],  [41.7060112, -91.5963937],  [41.7061766, -91.5963356],  [41.706454, -91.5963987],  [41.7065723, -91.5965551],  [41.7066687, -91.5971648],  [41.7068443, -91.5976546],  [41.7068493, -91.5982793],  [41.7068234, -91.5989287],  [41.7067722, -91.5995956],  [41.7068063, -91.6002319],  [41.7069624, -91.6008003],  [41.7070093, -91.6014528],  [41.7070654, -91.6020903],  [41.7071699, -91.6022852],  [41.7076213, -91.6025517],  [41.7080651, -91.6027085],  [41.7085653, -91.6028707],  [41.7088513, -91.6029656],  [41.7090057, -91.6033915],  [41.7088731, -91.6039934],  [41.7087067, -91.6046195],  [41.7085975, -91.6052383],  [41.7086276, -91.6058676],  [41.7086176, -91.6064698],  [41.7086147, -91.6070835],  [41.7086348, -91.6076977],  [41.7085771, -91.6083677],  [41.7085857, -91.6089049],  [41.7085225, -91.6095208],  [41.7085324, -91.6098043],  [41.7083895, -91.6099949],  [41.7079293, -91.6101091],  [41.7074399, -91.6100707],  [41.7069734, -91.6100492],  [41.7065048, -91.61006],  [41.7059999, -91.610071],  [41.7054961, -91.610082],  [41.7050136, -91.6100836],  [41.7045158, -91.6101189],  [41.704134, -91.6100886],  [41.7040704, -91.6100178],  [41.7040567, -91.6099261],  [41.7040567, -91.6099261], ];
var line_5 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_5);
      
      var latLngs = [ [41.7088237, -91.6027578],  [41.7089036, -91.6025837],  [41.7089336, -91.6024121],  [41.7089899, -91.6023885],  [41.7089468, -91.602583],  [41.70899, -91.6025773],  [41.7089733, -91.6025665],  [41.7089882, -91.6025116],  [41.7084474, -91.6026008],  [41.7083499, -91.6026016],  [41.7082012, -91.6025776],  [41.7081255, -91.6025122],  [41.7080811, -91.6025114],  [41.7078179, -91.6023497],  [41.7076729, -91.6023792],  [41.7073032, -91.6022042],  [41.7072177, -91.6020973],  [41.7071192, -91.6017552],  [41.7071484, -91.6012499],  [41.7071364, -91.6008642],  [41.7071167, -91.6007803],  [41.7070597, -91.600692],  [41.7070014, -91.6004341],  [41.706916, -91.6000762],  [41.7069192, -91.5998595],  [41.7069422, -91.59976],  [41.7069353, -91.5996272],  [41.7068143, -91.5993118],  [41.7068808, -91.5988797],  [41.7068753, -91.598769],  [41.7068359, -91.5986675],  [41.7068315, -91.5985435],  [41.7067787, -91.5979176],  [41.7066542, -91.5973326],  [41.7066125, -91.5970432],  [41.7064581, -91.5968526],  [41.706415, -91.5966697],  [41.706364, -91.5963382],  [41.706336, -91.5962687],  [41.7061913, -91.5962102],  [41.7060255, -91.5960052],  [41.7059815, -91.5958421],  [41.7058556, -91.5958528],  [41.7056761, -91.595959],  [41.7055915, -91.596057],  [41.705369, -91.5960485],  [41.70532, -91.5962018],  [41.7051611, -91.5963814],  [41.7050393, -91.5964109],  [41.7050149, -91.5963517],  [41.7049718, -91.5964705],  [41.7049228, -91.5964905],  [41.7048952, -91.596547],  [41.7048341, -91.5964742],  [41.7048086, -91.5964741],  [41.7047559, -91.5963678],  [41.7046796, -91.5962885],  [41.7046273, -91.5964725],  [41.7043792, -91.5965621],  [41.7043243, -91.5965464],  [41.7042839, -91.5965663],  [41.7038805, -91.5965108],  [41.7038261, -91.5965621],  [41.7037298, -91.5965474],  [41.7036563, -91.5965853],  [41.703424, -91.5964843],  [41.7033217, -91.5965087],  [41.7032718, -91.5964846],  [41.7029392, -91.5965409],  [41.7027376, -91.596622],  [41.7026398, -91.5966999],  [41.7025829, -91.5968717],  [41.7024672, -91.5970043],  [41.7024312, -91.5971285],  [41.7023666, -91.59723],  [41.7020315, -91.597484],  [41.7017183, -91.597512],  [41.7013005, -91.5974238],  [41.7012256, -91.5972348],  [41.7013167, -91.5970785],  [41.7013078, -91.5969253],  [41.7013721, -91.5968522],  [41.7013215, -91.5965096],  [41.7011802, -91.59638],  [41.701228, -91.5963777],  [41.7011552, -91.5963475],  [41.7013511, -91.5964246],  [41.7013259, -91.5964963],  [41.7013409, -91.5963463],  [41.7014253, -91.5962928],  [41.7012558, -91.5963567],  [41.7013155, -91.5963167],  [41.7009506, -91.5962081],  [41.7008306, -91.5958553],  [41.7007984, -91.5956354],  [41.7006036, -91.5953288],  [41.7001919, -91.5950844],  [41.6998314, -91.5948175],  [41.6993773, -91.5946723],  [41.6992306, -91.5946411],  [41.6991892, -91.5945861],  [41.6988853, -91.5945169],  [41.6986087, -91.5943811],  [41.6985256, -91.5944004],  [41.6985066, -91.5943384],  [41.6983082, -91.5943244],  [41.6982499, -91.5942787],  [41.6977802, -91.594268],  [41.6974211, -91.5942841],  [41.6973379, -91.5942345],  [41.6971913, -91.5940614],  [41.6967377, -91.5939657],  [41.6963058, -91.5936197],  [41.6958747, -91.5933911],  [41.6957084, -91.593342],  [41.6955988, -91.5933221],  [41.6956238, -91.5931193],  [41.6959363, -91.592725],  [41.6961475, -91.5924603],  [41.6962446, -91.5922279],  [41.6963031, -91.5916046],  [41.6963188, -91.5909882],  [41.6963171, -91.5903318],  [41.6963086, -91.5897271],  [41.6962337, -91.5890774],  [41.6960785, -91.588452],  [41.6960391, -91.5882949],  [41.6960974, -91.5881935],  [41.6960235, -91.5880614],  [41.6960074, -91.5878093],  [41.6960168, -91.5876642],  [41.6959227, -91.5875185],  [41.6959147, -91.5874712],  [41.6958257, -91.5873598],  [41.6958022, -91.5872891],  [41.695677, -91.5871406],  [41.6954133, -91.5866181],  [41.695043, -91.5862381],  [41.6949138, -91.5859473],  [41.6947659, -91.5854962],  [41.6947683, -91.5853964],  [41.6946596, -91.5847435],  [41.6946596, -91.5846697],  [41.6946995, -91.5845887],  [41.6947085, -91.5845096],  [41.6946683, -91.5843768],  [41.6947443, -91.5840655],  [41.6947175, -91.5835951],  [41.694858, -91.5833754],  [41.6948989, -91.5830829],  [41.6948867, -91.5830444],  [41.6946849, -91.5829925],  [41.6945807, -91.5828404],  [41.6944537, -91.5827506],  [41.6940742, -91.5827862],  [41.6939463, -91.5826152],  [41.6935667, -91.5825378],  [41.6932793, -91.5825838],  [41.6932048, -91.5825555],  [41.6927133, -91.5826158],  [41.6926243, -91.5826336],  [41.6925676, -91.5825294],  [41.6920783, -91.5825337],  [41.6918683, -91.5825546],  [41.6916682, -91.5825239],  [41.6915488, -91.5825446],  [41.6911138, -91.5823754],  [41.691041, -91.5822986],  [41.6908965, -91.5822837],  [41.6907737, -91.5822127],  [41.6906188, -91.5821902],  [41.6904916, -91.5820336],  [41.6900736, -91.5818465],  [41.6899216, -91.5818222],  [41.6896965, -91.5818736],  [41.6891732, -91.5818393],  [41.6886956, -91.5818339],  [41.6884674, -91.5818325],  [41.6883961, -91.5817168],  [41.6882114, -91.5817089],  [41.6881347, -91.5817363],  [41.6878811, -91.5817089],  [41.6877787, -91.5817965],  [41.6873159, -91.5816956],  [41.6868696, -91.5815599],  [41.6863525, -91.581405],  [41.6858469, -91.5812384],  [41.6853917, -91.5811558],  [41.6848816, -91.581111],  [41.6843627, -91.5810655],  [41.684195, -91.5810508],  [41.6840711, -91.5809772],  [41.6837634, -91.5808588],  [41.6837031, -91.5809829],  [41.6832399, -91.580923],  [41.6827555, -91.5808592],  [41.682277, -91.5807001],  [41.6820206, -91.5805568],  [41.6818494, -91.5804006],  [41.6818211, -91.5804296],  [41.681742, -91.5802721],  [41.6817114, -91.5801461],  [41.6816018, -91.5799992],  [41.681535, -91.5800046],  [41.6811528, -91.5796329],  [41.6810192, -91.5794016],  [41.6809629, -91.579198],  [41.6809007, -91.5785761],  [41.6808523, -91.5780892],  [41.6804995, -91.5780168],  [41.6800089, -91.5780225],  [41.6795174, -91.5780363],  [41.6789871, -91.5780513],  [41.6785086, -91.5780648],  [41.6784503, -91.5780664],  [41.6784185, -91.5784172],  [41.6783645, -91.578378],  [41.6783383, -91.5784331],  [41.6782019, -91.5782356],  [41.6781454, -91.5782666],  [41.6779429, -91.5780828],  [41.6774471, -91.578099],  [41.6769511, -91.5781153],  [41.6764515, -91.5781318],  [41.6759203, -91.5781684],  [41.6754207, -91.5782029],  [41.6749278, -91.5782369],  [41.6748777, -91.5782403],  [41.6748523, -91.5783571],  [41.6747631, -91.5783673],  [41.6746626, -91.5782092],  [41.674637, -91.577796],  [41.6745909, -91.5776489],  [41.674588, -91.5775587],  [41.674659, -91.5774268],  [41.6745987, -91.5767097],  [41.6745338, -91.5760008],  [41.6745106, -91.5757616],  [41.6747371, -91.5756558],  [41.6747312, -91.5753866],  [41.6746643, -91.5752072],  [41.6744518, -91.5751655],  [41.6743895, -91.5745509],  [41.6743121, -91.5738257],  [41.6742438, -91.5731516],  [41.6741758, -91.57247],  [41.6741113, -91.5718018],  [41.6740498, -91.5711309],  [41.6740378, -91.5709999],  [41.6741245, -91.5708725],  [41.6739856, -91.5701903],  [41.6739042, -91.5695878],  [41.6738435, -91.5689323],  [41.6738113, -91.5686194],  [41.6738532, -91.5686409],  [41.6738446, -91.5684575],  [41.6743977, -91.5682523],  [41.6743658, -91.568154],  [41.6743484, -91.5679159],  [41.6743179, -91.5678114],  [41.6740578, -91.5675865],  [41.673883, -91.5670756],  [41.6737577, -91.5667836],  [41.6737507, -91.5666741],  [41.6737108, -91.5666222],  [41.6737249, -91.5665267],  [41.673648, -91.5662297],  [41.6736814, -91.5660259],  [41.6736377, -91.5658331],  [41.6736058, -91.5657794],  [41.6735127, -91.5657527],  [41.6735506, -91.5657381],  [41.6730757, -91.5656266],  [41.6725891, -91.565601],  [41.6725475, -91.5655885],  [41.6725511, -91.5655406],  [41.6720807, -91.5654512],  [41.6719484, -91.5654212],  [41.6718818, -91.565444],  [41.6714171, -91.5653835],  [41.6709199, -91.5655426],  [41.6704454, -91.5655778],  [41.6699289, -91.565594],  [41.6695463, -91.5655872],  [41.6694962, -91.5656479],  [41.6694248, -91.5656706],  [41.6693606, -91.5655872],  [41.669184, -91.5656059],  [41.6692633, -91.5658421],  [41.6693442, -91.5658823],  [41.6693617, -91.565788],  [41.6692323, -91.5655036],  [41.6691611, -91.565532],  [41.6691548, -91.565504],  [41.669188, -91.5655031],  [41.6689984, -91.5655568],  [41.668774, -91.5657642],  [41.6686977, -91.5656673],  [41.6686668, -91.5653915],  [41.6685567, -91.5651213],  [41.6684055, -91.564896],  [41.668344, -91.5647275],  [41.6682435, -91.5641904],  [41.6682219, -91.5638888],  [41.6680996, -91.5637223],  [41.6680892, -91.5635454],  [41.6680317, -91.5633381],  [41.6678127, -91.5629503],  [41.6678339, -91.5628498],  [41.6677575, -91.562769],  [41.667773, -91.5626686],  [41.6675409, -91.562089],  [41.6673088, -91.5616077],  [41.6671277, -91.5610044],  [41.666949, -91.5606273],  [41.6668087, -91.5602585],  [41.6664797, -91.5597735],  [41.6662554, -91.5592417],  [41.6660471, -91.5586812],  [41.666034, -91.5586459],  [41.6660003, -91.5586501],  [41.6659569, -91.5584867],  [41.6659845, -91.5583598],  [41.6659431, -91.5581327],  [41.6657251, -91.5577035],  [41.6655804, -91.5570494],  [41.6654837, -91.5564555],  [41.6654638, -91.5563082],  [41.6653432, -91.5562266],  [41.6653272, -91.5561797],  [41.665355, -91.5561264],  [41.6653628, -91.5560005],  [41.6654241, -91.5559256],  [41.6654134, -91.5557413],  [41.6652047, -91.5552966],  [41.6649587, -91.5547648],  [41.6646378, -91.5542976],  [41.6644936, -91.5540846],  [41.6642737, -91.5539867],  [41.6641331, -91.5534158],  [41.6638545, -91.5528689],  [41.6638965, -91.5527994],  [41.6639407, -91.5524554],  [41.6638805, -91.5518503],  [41.663757, -91.551264],  [41.6636702, -91.5509641],  [41.6636337, -91.5506017],  [41.6635964, -91.5505296],  [41.6633891, -91.5504926],  [41.6632133, -91.5499739],  [41.6628419, -91.5495556],  [41.6625158, -91.5491222],  [41.6626703, -91.548493],  [41.6628797, -91.5479084],  [41.6629431, -91.5477338],  [41.6630245, -91.5476649],  [41.6631312, -91.5472548],  [41.663307, -91.5467714],  [41.6633263, -91.5465398],  [41.663372, -91.5464003],  [41.6633464, -91.5463409],  [41.6634407, -91.5462149],  [41.6634718, -91.5460937],  [41.6634364, -91.5460457],  [41.6634746, -91.5459734],  [41.6634756, -91.54591],  [41.6635816, -91.5457914],  [41.663542, -91.5457405],  [41.6635513, -91.5456291],  [41.6635347, -91.5455139],  [41.6635558, -91.5452874],  [41.663585, -91.545231],  [41.6635944, -91.5450004],  [41.6633496, -91.5449594],  [41.6633392, -91.5447125],  [41.6636437, -91.5446252],  [41.6637643, -91.5443707],  [41.663684, -91.5440397],  [41.6635755, -91.5438931],  [41.6635493, -91.5438208],  [41.663272, -91.5438682],  [41.6631855, -91.5437019],  [41.6629551, -91.5435522],  [41.6624559, -91.5435997],  [41.6619358, -91.5436776],  [41.6616964, -91.5436738],  [41.6614477, -91.5434044],  [41.6612663, -91.5428447],  [41.6612592, -91.5421469],  [41.6612639, -91.5416897],  [41.6612988, -91.5416213],  [41.6613365, -91.5410193],  [41.6613798, -91.5406611],  [41.661357, -91.5403687],  [41.6613722, -91.5402686],  [41.6613451, -91.5397228],  [41.6613044, -91.5396099],  [41.661309, -91.5394897],  [41.6612473, -91.5393954],  [41.6612513, -91.5389716],  [41.6612809, -91.5388681],  [41.6612851, -91.538242],  [41.6612891, -91.5376682],  [41.6617406, -91.5376629],  [41.6618539, -91.5376584],  [41.6619162, -91.5375956],  [41.6622817, -91.5375642],  [41.662301, -91.5376409],  [41.6627519, -91.5376217],  [41.6628075, -91.5376192],  [41.6627155, -91.5371979],  [41.6626807, -91.5371171],  [41.6627517, -91.5368748],  [41.6626784, -91.5362687],  [41.662338, -91.535839],  [41.6624076, -91.5354919],  [41.6625427, -91.5354269],  [41.6625713, -91.535122],  [41.662635, -91.5351236],  [41.662651, -91.5351586],  [41.6627205, -91.5351954], ];
var line_6 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_6);
      
      var latLngs = [ [41.6624695, -91.5495004],  [41.6625315, -91.5493446],  [41.6625135, -91.5491867],  [41.6624983, -91.5493696],  [41.662568, -91.5494831],  [41.6628999, -91.5497289],  [41.6632218, -91.5499021],  [41.6634199, -91.5502026],  [41.6634656, -91.5504075],  [41.6634925, -91.550448],  [41.6635762, -91.5509181],  [41.6635803, -91.5510987],  [41.6636674, -91.5517683],  [41.6637035, -91.5521426],  [41.6637621, -91.552389],  [41.6637536, -91.552572],  [41.6638302, -91.552823],  [41.6638974, -91.5531456],  [41.6639891, -91.5533777],  [41.664079, -91.5534116],  [41.6641426, -91.5533944],  [41.6641793, -91.5534934],  [41.6643398, -91.5536973],  [41.6652501, -91.5554724],  [41.6652662, -91.5557397],  [41.6653182, -91.5558961],  [41.6653215, -91.5561453],  [41.6655778, -91.5567696],  [41.6657746, -91.5574173],  [41.6659421, -91.5580336],  [41.6661518, -91.5586257],  [41.6663693, -91.5592141],  [41.666406, -91.5593107],  [41.6662393, -91.5595099],  [41.6664163, -91.5598294],  [41.6665774, -91.5601832],  [41.666669, -91.560458],  [41.6666903, -91.5604161],  [41.6667198, -91.5605514],  [41.6669644, -91.5610034],  [41.667197, -91.5616411],  [41.667447, -91.5622513],  [41.667482, -91.5624439],  [41.6675732, -91.5626165],  [41.6677711, -91.5631121],  [41.6678609, -91.5634275],  [41.6678468, -91.563443],  [41.667921, -91.563385],  [41.6679825, -91.5636923],  [41.6682344, -91.5640724],  [41.6682374, -91.5641514],  [41.6683719, -91.5641987],  [41.6684958, -91.5644442],  [41.6686088, -91.5645341],  [41.668717, -91.5646984],  [41.6688027, -91.5647238],  [41.6691225, -91.5652312],  [41.6692382, -91.5654281],  [41.6692994, -91.5654179],  [41.6693462, -91.5654573],  [41.669331, -91.5656215],  [41.6691599, -91.5656901],  [41.6690788, -91.5656232],  [41.6690686, -91.5657115],  [41.6691091, -91.5657148],  [41.6691284, -91.5655945],  [41.6692521, -91.5659553],  [41.6694466, -91.5658462],  [41.6694986, -91.5657248],  [41.6695561, -91.5657316],  [41.6697343, -91.5656779],  [41.66978, -91.5656249],  [41.6698798, -91.5656655],  [41.6699679, -91.5656294],  [41.6704545, -91.5656462],  [41.6709226, -91.5656407],  [41.6713063, -91.5656252],  [41.6715116, -91.5656417],  [41.6717977, -91.5656252],  [41.6719497, -91.5656719],  [41.6719941, -91.5656024],  [41.6724083, -91.5656203],  [41.6726041, -91.5656642],  [41.6727841, -91.5656269],  [41.6732451, -91.5657385],  [41.6733804, -91.5657998],  [41.6734537, -91.5659427],  [41.6734641, -91.5661076],  [41.6735925, -91.5661679],  [41.673598, -91.5662373],  [41.6734856, -91.5663365],  [41.6735584, -91.5667606],  [41.6736447, -91.5668196],  [41.6736853, -91.5672931],  [41.6737392, -91.5673622],  [41.673686, -91.5673013],  [41.6737228, -91.5677191],  [41.6737837, -91.5678075],  [41.6737712, -91.568001],  [41.6738105, -91.5686529],  [41.6738627, -91.569286],  [41.6739008, -91.5693737],  [41.6739169, -91.5696689],  [41.6739506, -91.5697647],  [41.6739363, -91.5698403],  [41.6739788, -91.569914],  [41.674018, -91.5703274],  [41.6740822, -91.570618],  [41.6741257, -91.570672],  [41.6741122, -91.5709211],  [41.6740064, -91.5712618],  [41.6740586, -91.5712833],  [41.6740799, -91.571338],  [41.6740728, -91.5715001],  [41.6741007, -91.5715691],  [41.6741919, -91.5716968],  [41.6741998, -91.5719263],  [41.6742351, -91.5719992],  [41.6742209, -91.5720713],  [41.6742615, -91.572247],  [41.6742856, -91.5727761],  [41.6743486, -91.5730962],  [41.6743389, -91.5733664],  [41.6743228, -91.5734829],  [41.6743575, -91.5737161],  [41.6744067, -91.5738208],  [41.6743917, -91.5740819],  [41.6744298, -91.5742948],  [41.6744277, -91.5744087],  [41.6744702, -91.5745298],  [41.6745087, -91.5748081],  [41.6744897, -91.5748901],  [41.6745353, -91.5753718],  [41.6745397, -91.5760206],  [41.674593, -91.576621],  [41.6746087, -91.5769068],  [41.6745813, -91.5771401],  [41.6745737, -91.5773733],  [41.674656, -91.5773947],  [41.6747476, -91.5780051],  [41.6748055, -91.5782206],  [41.6752791, -91.5782127],  [41.675732, -91.5781814],  [41.6762442, -91.5781461],  [41.6766015, -91.5781215],  [41.676714, -91.5782319],  [41.6771287, -91.5782255],  [41.6773135, -91.5782636],  [41.6774745, -91.5782026],  [41.6778134, -91.578272],  [41.6778646, -91.5781995],  [41.6783231, -91.5782111],  [41.6787572, -91.5781527],  [41.6788425, -91.5781088],  [41.6789217, -91.5781135],  [41.6792151, -91.5780626],  [41.6793815, -91.5780938],  [41.6794767, -91.5780569],  [41.6795937, -91.5780837],  [41.6797822, -91.5780289],  [41.6798183, -91.5780773],  [41.6802971, -91.5780721],  [41.6807474, -91.578113],  [41.6808773, -91.5781851],  [41.6809879, -91.5787892],  [41.6810394, -91.5794143],  [41.6811719, -91.5797487],  [41.6812954, -91.5797821],  [41.681446, -91.579954],  [41.6818618, -91.5803312],  [41.681864, -91.5804044],  [41.6819186, -91.5804743],  [41.6819931, -91.5804871],  [41.6820065, -91.5805506],  [41.6823326, -91.5808372],  [41.6824118, -91.5807761],  [41.6828602, -91.5808739],  [41.6830645, -91.5809003],  [41.6832447, -91.5807108],  [41.6832996, -91.5809307],  [41.6837907, -91.5809948],  [41.6842752, -91.5810578],  [41.6847313, -91.5810979],  [41.6851899, -91.5811381],  [41.68543, -91.5811592],  [41.6854661, -91.5809739],  [41.6855007, -91.5810189],  [41.6856543, -91.5810154],  [41.6858396, -91.5811298],  [41.6859436, -91.5812245],  [41.6860006, -91.5811854],  [41.6862759, -91.5813367],  [41.686417, -91.5812138],  [41.6866529, -91.581321],  [41.6870555, -91.581667],  [41.687098, -91.5816564],  [41.6871636, -91.581691],  [41.6872823, -91.581673],  [41.6875233, -91.5817546],  [41.6875803, -91.5816008],  [41.68762, -91.5816128],  [41.6875981, -91.5819106],  [41.6876807, -91.5818412],  [41.688056, -91.5818142],  [41.6880296, -91.5817811],  [41.6880405, -91.5818116],  [41.688497, -91.5818726],  [41.6889748, -91.5818529],  [41.6892666, -91.5818846],  [41.6893287, -91.5818437],  [41.689632, -91.5818442],  [41.6897085, -91.5818857],  [41.6898018, -91.5818586],  [41.6905859, -91.5819665],  [41.6906834, -91.582052],  [41.6907094, -91.5821417],  [41.6910877, -91.5823462],  [41.6910817, -91.5821532],  [41.6912861, -91.582416],  [41.6914679, -91.5824995],  [41.6914945, -91.5824745],  [41.6916658, -91.582586],  [41.6921696, -91.582636],  [41.6923522, -91.5826093],  [41.6924897, -91.5826052],  [41.6925567, -91.5825295],  [41.6930556, -91.5825251],  [41.6935504, -91.5825358],  [41.6936419, -91.5825798],  [41.6937549, -91.582538],  [41.69404, -91.5827219],  [41.6941081, -91.5826522],  [41.6946187, -91.582769],  [41.6948983, -91.582833],  [41.6949304, -91.5830598],  [41.694973, -91.58304],  [41.6949741, -91.5831797],  [41.6951856, -91.5835048],  [41.6953071, -91.5837581],  [41.6952456, -91.5841573],  [41.6953076, -91.5843292],  [41.6953239, -91.5844961],  [41.6952724, -91.5848668],  [41.6951746, -91.5850323],  [41.6952534, -91.5854238],  [41.695217, -91.5855442],  [41.694958, -91.5858939],  [41.6951845, -91.5862652],  [41.6960736, -91.5879834],  [41.6962119, -91.5883932],  [41.6961338, -91.5886728],  [41.6962651, -91.58927],  [41.6963139, -91.5898963],  [41.6963176, -91.5905247],  [41.6963115, -91.5913327],  [41.6962874, -91.5919429],  [41.6962479, -91.592218],  [41.696055, -91.5926175],  [41.6959049, -91.5927993],  [41.6959143, -91.5928384],  [41.6957126, -91.5931579],  [41.6957982, -91.5934748],  [41.6959292, -91.5934908],  [41.6959021, -91.5934305],  [41.6963385, -91.5936286],  [41.696756, -91.5939384],  [41.6971753, -91.5941837],  [41.6976172, -91.5943454],  [41.6981458, -91.5943356],  [41.6983403, -91.5942811],  [41.6984483, -91.5943514],  [41.6985269, -91.5943318],  [41.6987483, -91.5945782],  [41.6988204, -91.5945438],  [41.6988723, -91.5944825],  [41.6993556, -91.5946586],  [41.6996403, -91.594776],  [41.6999723, -91.5948326],  [41.7004259, -91.5950975],  [41.7005724, -91.5951752],  [41.7007592, -91.5954074],  [41.7008419, -91.595568],  [41.7008246, -91.5955764],  [41.7009727, -91.5959513],  [41.7010057, -91.595946],  [41.7010233, -91.5960061],  [41.7009938, -91.5960066],  [41.7010121, -91.5960419],  [41.7009885, -91.5960853],  [41.7011117, -91.5963414],  [41.7014745, -91.5965195],  [41.7015468, -91.5966105],  [41.7018177, -91.5971796],  [41.701866, -91.5972738],  [41.7020749, -91.5974444],  [41.7023662, -91.5975436],  [41.7025187, -91.5975378],  [41.7025055, -91.5974084],  [41.7025801, -91.5973448],  [41.702596, -91.5972638],  [41.7026884, -91.5970918],  [41.7027446, -91.5968659],  [41.7030193, -91.596529],  [41.7031374, -91.5965419],  [41.7031891, -91.5965131],  [41.7031788, -91.5964687],  [41.7031804, -91.5965082],  [41.7032412, -91.5965423],  [41.703319, -91.5965141],  [41.7033249, -91.5964121],  [41.7033803, -91.5962804],  [41.7033323, -91.5961504],  [41.7034348, -91.5962087],  [41.7037666, -91.5966368],  [41.7039235, -91.5967725],  [41.7043913, -91.596691],  [41.7045729, -91.596965],  [41.7045896, -91.5970271],  [41.7045566, -91.5972382],  [41.7045959, -91.59729],  [41.7045574, -91.5974006],  [41.7046154, -91.5975835],  [41.7046161, -91.5976985],  [41.7046973, -91.5978802],  [41.7047425, -91.5983482],  [41.7049535, -91.5988665],  [41.7050418, -91.5992206],  [41.705164, -91.599493],  [41.7054037, -91.6000045],  [41.7057723, -91.6004601],  [41.7058445, -91.6005728],  [41.7057689, -91.6007893],  [41.7061366, -91.601245],  [41.706253, -91.6015106],  [41.7063297, -91.6015383],  [41.7063415, -91.6020337],  [41.7067138, -91.6023719],  [41.7069659, -91.6025015],  [41.7069858, -91.6025904],  [41.7073891, -91.6029427],  [41.7075591, -91.6031083],  [41.7076055, -91.6031156],  [41.7078186, -91.6033966],  [41.7078393, -91.6034784],  [41.7079753, -91.6035649],  [41.7080389, -91.6038485],  [41.7079959, -91.6039275],  [41.7080606, -91.6040038],  [41.7080984, -91.6046188],  [41.7082737, -91.60483],  [41.7087029, -91.6050264],  [41.7085198, -91.6053159],  [41.7085088, -91.6059399],  [41.7085078, -91.6059988],  [41.7087305, -91.6060747],  [41.7087639, -91.6064717],  [41.7087425, -91.6065641],  [41.708764, -91.6066291],  [41.7087277, -91.6072528],  [41.7087523, -91.6073146],  [41.7087355, -91.6078862],  [41.7087139, -91.6079204],  [41.7087267, -91.6079417],  [41.7086987, -91.6079725],  [41.7086461, -91.6080075],  [41.7085834, -91.6084521],  [41.7086408, -91.6085649],  [41.708595, -91.6086338],  [41.7085883, -91.6087013],  [41.7087045, -91.6087673],  [41.7086992, -91.6088491],  [41.7084819, -91.6089739],  [41.7084346, -91.60939],  [41.7087545, -91.6095246],  [41.7087136, -91.6096357],  [41.7087096, -91.6099097],  [41.7086474, -91.6099812],  [41.708561, -91.6099595],  [41.7083747, -91.6099869],  [41.7082895, -91.6100338],  [41.7081841, -91.6100366],  [41.7080838, -91.6099974],  [41.707588, -91.6100836],  [41.7071206, -91.6101513],  [41.7069914, -91.610138],  [41.7068667, -91.6101907],  [41.7067454, -91.6101802],  [41.7062562, -91.6102066],  [41.7061838, -91.610176],  [41.7056575, -91.6101975],  [41.7055044, -91.610202],  [41.7054332, -91.6101109],  [41.7049621, -91.6101319],  [41.7045647, -91.610149],  [41.7039083, -91.6101884],  [41.704071, -91.6101778],  [41.7040642, -91.6099535],  [41.7040642, -91.6099535], ];
var line_7 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_7);
      
      var latLngs = [ [41.7040827, -91.6099027],  [41.7040692, -91.6099064],  [41.7040058, -91.6099473],  [41.7040837, -91.6101291],  [41.7045438, -91.6101066],  [41.7050322, -91.6100736],  [41.7052627, -91.6101227],  [41.7057135, -91.6100452],  [41.705873, -91.6100597],  [41.7059602, -91.6100224],  [41.7060303, -91.6100507],  [41.7064871, -91.6100079],  [41.7068705, -91.6100019],  [41.7069476, -91.6099735],  [41.7072239, -91.6100096],  [41.7073532, -91.6099842],  [41.7074306, -91.6099999],  [41.7075037, -91.6100545],  [41.7080162, -91.610041],  [41.7084142, -91.6100305],  [41.708462, -91.6099179],  [41.7084371, -91.6097032],  [41.708467, -91.6096063],  [41.7084278, -91.6094442],  [41.7084818, -91.6089829],  [41.7084611, -91.6084427],  [41.7084787, -91.6083052],  [41.7084237, -91.6083768],  [41.708361, -91.6083588],  [41.7083215, -91.6083943],  [41.7084161, -91.6081327],  [41.7083158, -91.6075868],  [41.7084304, -91.6075012],  [41.7084152, -91.6068342],  [41.708425, -91.6068959],  [41.7084189, -91.6062213],  [41.7084131, -91.6055828],  [41.7084076, -91.6049659],  [41.708158, -91.6047113],  [41.7081025, -91.6046286],  [41.7080606, -91.6040269],  [41.7080086, -91.6036379],  [41.7079337, -91.6034757],  [41.7075151, -91.6030544],  [41.7072558, -91.6028263],  [41.7071286, -91.6029321],  [41.7069677, -91.6028012],  [41.7070123, -91.6026136],  [41.7066104, -91.6022625],  [41.7062917, -91.6019952],  [41.7062424, -91.6014628],  [41.7061922, -91.6013291],  [41.7058155, -91.600847],  [41.7054471, -91.6003898],  [41.7054472, -91.6002514],  [41.7051361, -91.5997539],  [41.7050783, -91.5996912],  [41.7049832, -91.5992892],  [41.7047432, -91.5987327],  [41.7047237, -91.5986606],  [41.7046278, -91.5985114],  [41.7045773, -91.5982002],  [41.7045928, -91.598105],  [41.7045505, -91.5976301],  [41.7043501, -91.5971941],  [41.7042968, -91.5968454],  [41.7041877, -91.5965769],  [41.7040915, -91.5965064],  [41.7039717, -91.5965478],  [41.703855, -91.5965147],  [41.70385, -91.5967498],  [41.7036662, -91.5965604],  [41.7035719, -91.5966297],  [41.7035569, -91.5967868],  [41.7035037, -91.5968779],  [41.7035368, -91.5970556],  [41.7035061, -91.5971184],  [41.7033205, -91.5972675],  [41.7033276, -91.5973107],  [41.7031624, -91.5971541],  [41.7029202, -91.5973154],  [41.7027384, -91.5973508],  [41.7026072, -91.5972993],  [41.7024062, -91.597415],  [41.7018926, -91.5973923],  [41.7017896, -91.5974564],  [41.7017448, -91.597448],  [41.70163, -91.5972267],  [41.7016247, -91.5970543],  [41.7014991, -91.5968204],  [41.7015047, -91.5967759],  [41.7014731, -91.5967604],  [41.7014516, -91.5966517],  [41.7014318, -91.5966381],  [41.7014393, -91.5966071],  [41.7013285, -91.5964767],  [41.7011596, -91.5967874],  [41.7010775, -91.5967902],  [41.7008307, -91.5962172],  [41.7007954, -91.5959181],  [41.7005053, -91.5953657],  [41.7002236, -91.5949691],  [41.6998933, -91.5947026],  [41.6995833, -91.594638],  [41.6991466, -91.5943754],  [41.6989681, -91.5942498],  [41.6988407, -91.5942449],  [41.6987583, -91.594136],  [41.6986879, -91.5941688],  [41.6986483, -91.5941522],  [41.6986401, -91.5942451],  [41.6984755, -91.5945294],  [41.6984198, -91.5945377],  [41.6983122, -91.5944105],  [41.6980941, -91.594425],  [41.6978229, -91.5944085],  [41.6976577, -91.5942976],  [41.6976059, -91.5942828],  [41.6975273, -91.5941982],  [41.6973882, -91.5941627],  [41.6969593, -91.5941624],  [41.6964483, -91.5939504],  [41.6961926, -91.5937389],  [41.6959448, -91.5936342],  [41.695765, -91.5936442],  [41.6956238, -91.5934695],  [41.6955721, -91.593442],  [41.6955046, -91.5933163],  [41.6956421, -91.5930262],  [41.6958386, -91.5927844],  [41.6959395, -91.5927466],  [41.6961058, -91.5925421],  [41.6962464, -91.5922237],  [41.6963027, -91.5916162],  [41.6963189, -91.590992],  [41.6963171, -91.590337],  [41.6963039, -91.5896712],  [41.6962224, -91.589031],  [41.6961059, -91.5884374],  [41.6959264, -91.5879076],  [41.6957719, -91.5873015],  [41.6957385, -91.5871141],  [41.6954729, -91.5866167],  [41.6950942, -91.5862155],  [41.6948559, -91.5858661],  [41.6947733, -91.5856409],  [41.6948123, -91.5855241],  [41.6946705, -91.5849296],  [41.6946918, -91.58426],  [41.6947504, -91.5838818],  [41.6948001, -91.5837031],  [41.6948996, -91.5830826],  [41.6949097, -91.5829551],  [41.6947689, -91.5828144],  [41.6946632, -91.5827782],  [41.6941663, -91.5828425],  [41.6941069, -91.5828293],  [41.6940763, -91.5826449],  [41.693594, -91.582541],  [41.6934449, -91.5825258],  [41.6933817, -91.5827005],  [41.6928973, -91.5826482],  [41.6928286, -91.5826564],  [41.6927575, -91.5825277],  [41.6922603, -91.5825321],  [41.6917811, -91.5825314],  [41.6913281, -91.5824622],  [41.6908746, -91.5822318],  [41.6904224, -91.5819809],  [41.6899124, -91.581873],  [41.6894192, -91.5818462],  [41.6890132, -91.5818357],  [41.6889545, -91.5819855],  [41.6884176, -91.5819961],  [41.6883019, -91.5820007],  [41.6882388, -91.5818273],  [41.6877496, -91.5817927],  [41.6872786, -91.581685],  [41.6867684, -91.5815335],  [41.6862839, -91.5813831],  [41.6857602, -91.5812153],  [41.6852818, -91.5811462],  [41.6847711, -91.5811014],  [41.6843198, -91.5810618],  [41.6837841, -91.5809939],  [41.6833133, -91.5809325],  [41.6828451, -91.5808719],  [41.6826054, -91.5808369],  [41.68254, -91.580998],  [41.6825004, -91.581031],  [41.6822018, -91.5808515],  [41.6820625, -91.5807302],  [41.6820223, -91.5805254],  [41.6819357, -91.5806772],  [41.6816767, -91.5804717],  [41.6815325, -91.5802577],  [41.6815817, -91.5800486],  [41.6812092, -91.579692],  [41.6810217, -91.5794079],  [41.6809647, -91.5792045],  [41.6809013, -91.5785827],  [41.68085, -91.578285],  [41.6805697, -91.5780404],  [41.6802832, -91.5780426],  [41.6801679, -91.5782773],  [41.6796785, -91.5783411],  [41.6794969, -91.578381],  [41.6794032, -91.5780396],  [41.6789059, -91.5780536],  [41.6784541, -91.5780663],  [41.677949, -91.5780826],  [41.6774836, -91.5780978],  [41.6769775, -91.5781144],  [41.6765184, -91.5781272],  [41.6759669, -91.5781652],  [41.6754762, -91.5781991],  [41.6750165, -91.5782308],  [41.6748141, -91.5782447],  [41.6746809, -91.5776253],  [41.674663, -91.5774692],  [41.6745914, -91.5773444],  [41.6744993, -91.5766559],  [41.6743965, -91.5764239],  [41.6744352, -91.5763419],  [41.6743976, -91.5761729],  [41.6743937, -91.5758991],  [41.674403, -91.5753649],  [41.6743543, -91.5752277],  [41.6743245, -91.5748672],  [41.674312, -91.5743741],  [41.6743202, -91.574059],  [41.6742323, -91.5736243],  [41.6740159, -91.5730642],  [41.6739709, -91.5728661],  [41.6742011, -91.5727234],  [41.6741342, -91.5720525],  [41.6740791, -91.5714504],  [41.6740164, -91.5707661],  [41.67396, -91.570151],  [41.6738969, -91.5694626],  [41.6738266, -91.5687667],  [41.6737575, -91.5681046],  [41.6736962, -91.5674175],  [41.6736409, -91.566772],  [41.673588, -91.5661126],  [41.6735765, -91.5659691],  [41.6735028, -91.5658987],  [41.6734645, -91.5657594],  [41.6732896, -91.5657598],  [41.6732345, -91.5657353],  [41.672796, -91.5658652],  [41.6727351, -91.5658376],  [41.6725644, -91.5659093],  [41.6720722, -91.5658076],  [41.6719749, -91.5658266],  [41.6718196, -91.5657903],  [41.671803, -91.5657184],  [41.6715523, -91.5657843],  [41.6710932, -91.5657665],  [41.6706181, -91.5657278],  [41.6705484, -91.565737],  [41.6703694, -91.5657017],  [41.6701503, -91.5657372],  [41.6700828, -91.5655967],  [41.6696261, -91.5655886],  [41.6692061, -91.5656894],  [41.6692985, -91.5655903],  [41.6692899, -91.5658043],  [41.6690656, -91.5662035],  [41.6689806, -91.566181],  [41.668881, -91.5657428],  [41.668749, -91.5655077],  [41.6685799, -91.5652266],  [41.668669, -91.5650762],  [41.6684294, -91.5645076],  [41.668194, -91.5639509],  [41.6679599, -91.5633972],  [41.6677343, -91.5628615],  [41.6675106, -91.5623285],  [41.6672849, -91.5617814],  [41.6670459, -91.5611999],  [41.6668054, -91.5605733],  [41.6665796, -91.5600007],  [41.6663443, -91.5594625],  [41.6661686, -91.5594759],  [41.6660686, -91.5592549],  [41.6658391, -91.5589653],  [41.6659125, -91.5586808],  [41.6659546, -91.5587038],  [41.6661747, -91.5584137],  [41.6661745, -91.5583654],  [41.6662073, -91.5582754],  [41.6661015, -91.5582526],  [41.6660619, -91.558094],  [41.665937, -91.5579245],  [41.6657671, -91.5574407],  [41.6656999, -91.5573721],  [41.6656533, -91.5573596],  [41.6655441, -91.5570492],  [41.6654478, -91.5568013],  [41.6655183, -91.5564727],  [41.6654702, -91.5564026],  [41.6654219, -91.5563833],  [41.6654028, -91.5562601],  [41.6653628, -91.5560965],  [41.6653553, -91.5558797],  [41.6653965, -91.5557795],  [41.6653452, -91.5556946],  [41.665359, -91.5555417],  [41.6652278, -91.5553952],  [41.6651987, -91.5552283],  [41.6649844, -91.5549208],  [41.6646479, -91.5544855],  [41.6643111, -91.5540304],  [41.6640344, -91.5535418],  [41.6638443, -91.5532968],  [41.6637784, -91.5531021],  [41.663743, -91.5530606],  [41.6637017, -91.5528212],  [41.6638061, -91.5526908],  [41.6636909, -91.5521077],  [41.663575, -91.5514952],  [41.6634633, -91.5508911],  [41.6633122, -91.5502162],  [41.6632343, -91.5500233],  [41.6628798, -91.5495963],  [41.6625329, -91.5491476],  [41.6625163, -91.5491229],  [41.6626077, -91.5486744],  [41.6628284, -91.5480499],  [41.6629118, -91.547769],  [41.6629727, -91.5476747],  [41.6629865, -91.5475936],  [41.6630676, -91.547486],  [41.6630671, -91.5473702],  [41.6632457, -91.546847],  [41.6632559, -91.546668],  [41.6632923, -91.5465917],  [41.6632931, -91.5465144],  [41.6633292, -91.5464269],  [41.6633148, -91.5463683],  [41.663327, -91.5462841],  [41.6633085, -91.5455891],  [41.6633067, -91.5454405],  [41.6633335, -91.545353],  [41.6632936, -91.545078],  [41.6632318, -91.5448449],  [41.6631854, -91.5448458],  [41.6632296, -91.5447059],  [41.6631317, -91.5441505],  [41.6630467, -91.5438464],  [41.6629113, -91.5437192],  [41.6625932, -91.5437229],  [41.6621593, -91.5439829],  [41.6618196, -91.5439737],  [41.6615605, -91.5437779],  [41.6615728, -91.5435761],  [41.6613062, -91.5430453],  [41.6612642, -91.5428243],  [41.66126, -91.5421068],  [41.6610773, -91.5419236],  [41.6611827, -91.5413138],  [41.6611912, -91.5406473],  [41.6612047, -91.5402047],  [41.6612744, -91.5400919],  [41.6612769, -91.5394796],  [41.6612809, -91.5388636],  [41.6612853, -91.5382188],  [41.6612859, -91.538116],  [41.6612278, -91.5380121],  [41.6612534, -91.5375875],  [41.6613841, -91.5374322],  [41.6615423, -91.5372516],  [41.6616233, -91.5373612],  [41.6616976, -91.5372703],  [41.6617584, -91.537126],  [41.6618456, -91.537139],  [41.6619801, -91.5372788],  [41.6621442, -91.5373487],  [41.6620952, -91.5374969],  [41.6620311, -91.537588],  [41.6620752, -91.5376486],  [41.6622902, -91.5376208],  [41.6621418, -91.5380341],  [41.6621266, -91.5380313],  [41.6621783, -91.5379425],  [41.6623469, -91.5373831],  [41.6624425, -91.537068],  [41.6624272, -91.536941],  [41.6625845, -91.5367846],  [41.6625573, -91.536431],  [41.6624716, -91.5361933],  [41.6625357, -91.5359332],  [41.662524, -91.5352665],  [41.6625227, -91.5351829],  [41.6624971, -91.5352326],  [41.662789, -91.535142], ];
var line_8 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_8);
      
      var latLngs = [ [41.6626336, -91.5358744],  [41.6626186, -91.5358896],  [41.6627329, -91.5360473],  [41.66277, -91.5361856],  [41.6632636, -91.536071],  [41.6636427, -91.5360705],  [41.6636848, -91.5361357],  [41.6636948, -91.5364121],  [41.6637901, -91.5367023],  [41.663801, -91.5370476],  [41.6636369, -91.5375809],  [41.6634604, -91.5377398],  [41.6632825, -91.537774],  [41.663236, -91.5375998],  [41.6631451, -91.5378094],  [41.6627049, -91.5377762],  [41.6626611, -91.5376259],  [41.6621733, -91.5376459],  [41.6617161, -91.5376638],  [41.6613496, -91.5376699],  [41.6612844, -91.5383399],  [41.66128, -91.5390078],  [41.6613138, -91.5391167],  [41.66127, -91.5394763],  [41.6613009, -91.5396506],  [41.6612737, -91.540257],  [41.661273, -91.5404246],  [41.6613018, -91.5405159],  [41.661298, -91.5406963],  [41.6613222, -91.540763],  [41.6612953, -91.5408998],  [41.6612945, -91.5413414],  [41.6612663, -91.5413886],  [41.6612593, -91.5420165],  [41.6612555, -91.5419925],  [41.6612291, -91.5420477],  [41.6612139, -91.5421458],  [41.6612265, -91.5420378],  [41.6612767, -91.5421645],  [41.66127, -91.5427839],  [41.6612832, -91.5429149],  [41.6613186, -91.5429811],  [41.6612926, -91.5431727],  [41.6614124, -91.5433696],  [41.6615559, -91.5434221],  [41.6615559, -91.543513],  [41.6615973, -91.5435477],  [41.6616115, -91.5436255],  [41.662071, -91.5437421],  [41.6625449, -91.5436124],  [41.6629098, -91.543574],  [41.6630162, -91.5435203],  [41.663289, -91.5438524],  [41.6634392, -91.5444128],  [41.6634552, -91.5446474],  [41.6634898, -91.5447415],  [41.6634671, -91.5449868],  [41.6633554, -91.545098],  [41.663364, -91.5457486],  [41.6633029, -91.546437],  [41.6631572, -91.5471207],  [41.6629341, -91.5477585],  [41.6627363, -91.5483062],  [41.6626092, -91.54867],  [41.6625353, -91.5488011],  [41.6625262, -91.5490117],  [41.6626037, -91.549313],  [41.6629536, -91.549711],  [41.66314, -91.5498867],  [41.6631854, -91.5499621],  [41.663335, -91.5501272],  [41.6635299, -91.5507007],  [41.6635346, -91.5507947],  [41.6635578, -91.5508262],  [41.6636716, -91.5514397],  [41.6638257, -91.5520995],  [41.6638717, -91.5524675],  [41.6639378, -91.552636],  [41.6639542, -91.5530007],  [41.6639977, -91.5531624],  [41.6640411, -91.5532309],  [41.6640499, -91.5533097],  [41.6641585, -91.5535216],  [41.6641608, -91.5536328],  [41.6644954, -91.5541494],  [41.6648539, -91.5546725],  [41.6651431, -91.5551869],  [41.665308, -91.5555781],  [41.66545, -91.5562503],  [41.6654685, -91.556401],  [41.6655803, -91.5564982],  [41.6657091, -91.5571255],  [41.6658453, -91.5577094],  [41.6660236, -91.558263],  [41.6662367, -91.5588637],  [41.666451, -91.5594292],  [41.666533, -91.5596434],  [41.6663991, -91.5598218],  [41.6666534, -91.5603257],  [41.6667715, -91.5605768],  [41.6668995, -91.5609739],  [41.6671665, -91.561451],  [41.667372, -91.5620419],  [41.6675018, -91.5623346],  [41.6676433, -91.5627435],  [41.66779, -91.5630234],  [41.6678489, -91.5632465],  [41.6679142, -91.5632892],  [41.6681381, -91.5638187],  [41.6683807, -91.5643885],  [41.6686193, -91.5649578],  [41.6688446, -91.5654954],  [41.668913, -91.5656586],  [41.6690269, -91.5657053],  [41.6690095, -91.5655919],  [41.6691517, -91.5654992],  [41.6691543, -91.5655753],  [41.6691898, -91.5655844],  [41.6691711, -91.5656488],  [41.6692457, -91.5657916],  [41.6695032, -91.5655701],  [41.66961, -91.5655726],  [41.6696947, -91.5655353],  [41.6701516, -91.5655863],  [41.670681, -91.5656073],  [41.6711404, -91.5655311],  [41.6712147, -91.5655199],  [41.6716611, -91.5656251],  [41.6720781, -91.5656326],  [41.6725481, -91.5654903],  [41.6725472, -91.5655252],  [41.673016, -91.5656611],  [41.6733307, -91.565701],  [41.6733969, -91.5657317],  [41.6734346, -91.5658717],  [41.6734414, -91.566204],  [41.6736022, -91.566289],  [41.6736364, -91.566631],  [41.6737322, -91.5668053],  [41.6736499, -91.5668844],  [41.673706, -91.5675283],  [41.6737654, -91.5681801],  [41.6738396, -91.5688938],  [41.6739128, -91.5696365],  [41.6739907, -91.5704861],  [41.674, -91.5705881],  [41.6736504, -91.5707746],  [41.673453, -91.5710599],  [41.6736698, -91.5710194],  [41.6737358, -91.5710623],  [41.6737696, -91.5712779],  [41.6738321, -91.5713483],  [41.6739231, -91.5715336],  [41.6739108, -91.5716196],  [41.674006, -91.5716792],  [41.6740483, -91.5718754],  [41.6741928, -91.5720492],  [41.6741872, -91.5722145],  [41.6741613, -91.5722639],  [41.6741683, -91.572374],  [41.6741244, -91.572478],  [41.6741639, -91.5724781],  [41.6741478, -91.5725278],  [41.674188, -91.5726558],  [41.6741694, -91.5729055],  [41.6741482, -91.5730473],  [41.6741214, -91.5733604],  [41.6740934, -91.573456],  [41.6740943, -91.5735494],  [41.6741453, -91.5736259],  [41.6742019, -91.5739261],  [41.6742588, -91.5739829],  [41.6742394, -91.5740294],  [41.6742666, -91.5740938],  [41.6742639, -91.5741837],  [41.6742951, -91.5742261],  [41.6742798, -91.5743485],  [41.6744476, -91.5746814],  [41.6744456, -91.5747381],  [41.674415, -91.5747868],  [41.6744849, -91.5749633],  [41.674443, -91.5750736],  [41.6744946, -91.5751431],  [41.6744892, -91.5752018],  [41.6745073, -91.575208],  [41.6745616, -91.5756624],  [41.6745561, -91.5757642],  [41.6745182, -91.5758394],  [41.6745272, -91.5759303],  [41.6746246, -91.5759977],  [41.674682, -91.5765448],  [41.6745909, -91.5766254],  [41.6746091, -91.5768244],  [41.6747346, -91.5768943],  [41.6747487, -91.5775809],  [41.6746878, -91.5776802],  [41.6747834, -91.5781421],  [41.6747594, -91.5782197],  [41.6747987, -91.5782629],  [41.6748776, -91.5782456],  [41.6747641, -91.5785051],  [41.6747249, -91.5781873],  [41.6748993, -91.5782319],  [41.6753589, -91.5782505],  [41.675487, -91.578312],  [41.6755857, -91.5783233],  [41.6756436, -91.5781875],  [41.676103, -91.5781558],  [41.6765703, -91.5781236],  [41.6770626, -91.5781116],  [41.677554, -91.5780955],  [41.6779914, -91.5780812],  [41.6780409, -91.5781672],  [41.6780652, -91.578145],  [41.678217, -91.5781968],  [41.6782384, -91.5781543],  [41.6783261, -91.5781292],  [41.6784994, -91.5781735],  [41.6788927, -91.5781687],  [41.6791101, -91.5780985],  [41.6791642, -91.5781044],  [41.6792051, -91.5780451],  [41.67967, -91.578032],  [41.6801513, -91.5780185],  [41.6802075, -91.5780169],  [41.6803259, -91.5781189],  [41.6806596, -91.5780567],  [41.6807621, -91.5780834],  [41.6808242, -91.5780361],  [41.6808731, -91.5781041],  [41.6808875, -91.5782466],  [41.6809326, -91.5785476],  [41.6811302, -91.5780699],  [41.6811556, -91.5781149],  [41.6811412, -91.5780749],  [41.6811443, -91.5781814],  [41.681118, -91.5782223],  [41.6811258, -91.5783739],  [41.6810473, -91.5787497],  [41.6811208, -91.5793923],  [41.6814251, -91.5798797],  [41.6816312, -91.5800532],  [41.6817193, -91.5802905],  [41.6821571, -91.58062],  [41.6825183, -91.580817],  [41.6830544, -91.580899],  [41.6835523, -91.5809634],  [41.6840601, -91.5810321],  [41.6845157, -91.5810789],  [41.6850137, -91.5811226],  [41.6851572, -91.5811577],  [41.6855104, -91.5810929],  [41.6859731, -91.5812373],  [41.6859923, -91.5812867],  [41.6864547, -91.5814288],  [41.6869265, -91.5815038],  [41.6871532, -91.5815619],  [41.6876196, -91.5816654],  [41.688074, -91.5817187],  [41.6883693, -91.5817096],  [41.6888223, -91.5818403],  [41.6890781, -91.5818764],  [41.6891323, -91.5818369],  [41.6896094, -91.5818549],  [41.6896856, -91.5819052],  [41.6900243, -91.5819166],  [41.6900971, -91.5819441],  [41.6901845, -91.5819085],  [41.6903119, -91.5819414],  [41.6903867, -91.5819989],  [41.690594, -91.581883],  [41.6907782, -91.5820967],  [41.6908837, -91.5821452],  [41.6909106, -91.5822512],  [41.6910471, -91.5823247],  [41.6914211, -91.5824148],  [41.6914927, -91.5824585],  [41.6917463, -91.5824856],  [41.6918329, -91.5825201],  [41.6918833, -91.5824854],  [41.692377, -91.58242],  [41.6928488, -91.582451],  [41.6933058, -91.5824484],  [41.6938029, -91.5825103],  [41.6942818, -91.5826882],  [41.6944965, -91.5827425],  [41.6947054, -91.5828461],  [41.6948604, -91.5828573],  [41.6949933, -91.5829932],  [41.6949638, -91.5835726],  [41.6947861, -91.5836468],  [41.6946868, -91.584298],  [41.6946636, -91.5848452],  [41.694783, -91.5854419],  [41.6950361, -91.5860258],  [41.69535, -91.5865036],  [41.6956784, -91.5870891],  [41.6958234, -91.5874357],  [41.6959714, -91.5880248],  [41.6961386, -91.5886918],  [41.6962656, -91.5892726],  [41.6963148, -91.589927],  [41.696317, -91.5903047],  [41.6963438, -91.5902601],  [41.6966812, -91.5903568],  [41.6967082, -91.5904128],  [41.6966601, -91.5904469],  [41.6966563, -91.5905304],  [41.6963181, -91.590713],  [41.6963105, -91.5913666],  [41.696282, -91.5920001],  [41.6962693, -91.5922862],  [41.6962514, -91.592202],  [41.6960981, -91.5925556],  [41.6958893, -91.5928036],  [41.6957228, -91.5929286],  [41.6957345, -91.5929902],  [41.6956391, -91.5931758],  [41.6956546, -91.5932285],  [41.695565, -91.5933994],  [41.69572, -91.5934228],  [41.6957298, -91.5933564],  [41.6960145, -91.5933964],  [41.696443, -91.5937336],  [41.6967126, -91.5938941],  [41.696775, -91.5938225],  [41.6967393, -91.59364],  [41.6967414, -91.5937688],  [41.6971361, -91.5941558],  [41.6974741, -91.5943367],  [41.6977221, -91.5943976],  [41.6981419, -91.5943977],  [41.6981974, -91.594369],  [41.6983035, -91.5943798],  [41.6983945, -91.5943307],  [41.6987567, -91.5944093],  [41.6989642, -91.5945182],  [41.6991847, -91.5945738],  [41.6992793, -91.5945407],  [41.699439, -91.5946323],  [41.6995943, -91.5946785],  [41.6996983, -91.5947897],  [41.6997403, -91.5947282],  [41.6998449, -91.5948157],  [41.6998913, -91.5947936],  [41.7001214, -91.5948406],  [41.7004573, -91.5951563],  [41.7004835, -91.595209],  [41.7005791, -91.5952423],  [41.7007602, -91.5954269],  [41.7007921, -91.5954164],  [41.7008627, -91.5954981],  [41.7008754, -91.5954231],  [41.700944, -91.595426],  [41.7010218, -91.5954828],  [41.7011104, -91.5954151],  [41.7011335, -91.5957623],  [41.7010845, -91.5957524],  [41.7011115, -91.5959071],  [41.7010882, -91.5958794],  [41.7011169, -91.5962926],  [41.7015006, -91.5965136],  [41.7016004, -91.5966824],  [41.7016503, -91.5968758],  [41.7016912, -91.5968877],  [41.7017668, -91.5970051],  [41.7018537, -91.5970226],  [41.7019211, -91.5970719],  [41.7021939, -91.5970193],  [41.7022375, -91.5971104],  [41.7022634, -91.5969717],  [41.7024156, -91.5969582],  [41.7026749, -91.5970873],  [41.702783, -91.5970093],  [41.702725, -91.5968958],  [41.7028863, -91.5967374],  [41.702957, -91.5967046],  [41.7031329, -91.5964527],  [41.7031412, -91.5964045],  [41.703236, -91.5963803],  [41.7032766, -91.596404],  [41.7036532, -91.5964365],  [41.7038781, -91.5966448],  [41.7042364, -91.5965397],  [41.704381, -91.5967051],  [41.704426, -91.5968293],  [41.7044558, -91.5971571],  [41.7046769, -91.5977762],  [41.7047069, -91.5978979],  [41.7046989, -91.597983],  [41.7047527, -91.598385],  [41.7048672, -91.5987915],  [41.7049132, -91.5988587],  [41.704914, -91.598993],  [41.7049631, -91.5991036],  [41.7050893, -91.5994485],  [41.7051228, -91.5996353],  [41.7052201, -91.5997603],  [41.7051399, -91.5999308],  [41.7052335, -91.6001094],  [41.7053658, -91.6000312],  [41.7055223, -91.6002625],  [41.7057852, -91.6005662],  [41.7059647, -91.6008872],  [41.7059578, -91.6010235],  [41.7060011, -91.6010771],  [41.7060735, -91.6010313],  [41.7062485, -91.6013453],  [41.7062191, -91.6013909],  [41.7062536, -91.601513],  [41.7063195, -91.601554],  [41.7063442, -91.6016771],  [41.7063811, -91.6021538],  [41.7065963, -91.6022677],  [41.7066896, -91.6022864],  [41.7070583, -91.6026638],  [41.707431, -91.6029794],  [41.7077412, -91.6033084],  [41.7079755, -91.6035425],  [41.7080599, -91.6039977],  [41.7080916, -91.6045977],  [41.708271, -91.6048276],  [41.7084055, -91.604911],  [41.7086682, -91.6050119],  [41.7085214, -91.6052265],  [41.7085127, -91.6057218],  [41.7087, -91.6058225],  [41.7086925, -91.6060617],  [41.7087296, -91.606351],  [41.7087132, -91.6064202],  [41.7087702, -91.6070371],  [41.7087756, -91.6071967],  [41.708825, -91.6073708],  [41.7087823, -91.607726],  [41.7087987, -91.60789],  [41.7088458, -91.6078776],  [41.7087837, -91.6079017],  [41.70879, -91.6079336],  [41.708746, -91.6079715],  [41.7086754, -91.608032],  [41.7086811, -91.6086873],  [41.7086869, -91.6087718],  [41.708478, -91.6088886],  [41.7084263, -91.6095407],  [41.708425, -91.6100132],  [41.7079516, -91.6100427],  [41.707786, -91.6100471],  [41.7076961, -91.6101173],  [41.707196, -91.6101342],  [41.7067284, -91.6101218],  [41.7062671, -91.6101269],  [41.7060947, -91.6101233],  [41.7056246, -91.610104],  [41.705132, -91.610143],  [41.7048357, -91.6101502],  [41.7046621, -91.6101265],  [41.7043731, -91.6102151],  [41.7042796, -91.6102131],  [41.7042106, -91.6101686],  [41.7039903, -91.6101699],  [41.7040035, -91.6100117],  [41.7039863, -91.6099872],  [41.7041089, -91.6098739],  [41.7040457, -91.6098756],  [41.7040604, -91.6098323], ];
var line_9 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_9);
      
      var latLngs = [ [41.7041965, -91.6099353],  [41.7042061, -91.6099341],  [41.7041555, -91.6099515],  [41.7042276, -91.6102329],  [41.7046878, -91.6102031],  [41.7051382, -91.6102112],  [41.7053116, -91.6101904],  [41.7057949, -91.6101126],  [41.7062624, -91.6100597],  [41.706751, -91.6099981],  [41.7072193, -91.610028],  [41.7076759, -91.6100219],  [41.708184, -91.6100289],  [41.708424, -91.6100303],  [41.7084243, -91.6096878],  [41.7084581, -91.6096051],  [41.7084698, -91.6089541],  [41.7084718, -91.6083809],  [41.7085752, -91.6083032],  [41.7084598, -91.6082484],  [41.7084141, -91.60829],  [41.7086269, -91.6082737],  [41.70865, -91.6079686],  [41.7087, -91.6075361],  [41.7087724, -91.6073701],  [41.7087717, -91.607295],  [41.7088352, -91.6071881],  [41.7088621, -91.6069253],  [41.7088482, -91.606834],  [41.7088862, -91.6065199],  [41.7088301, -91.606198],  [41.7088256, -91.6057603],  [41.7087954, -91.6053187],  [41.7087684, -91.6051139],  [41.7083884, -91.6049537],  [41.7081255, -91.604577],  [41.7080663, -91.6039581],  [41.7079978, -91.603481],  [41.7079253, -91.6034409],  [41.7077165, -91.6032526],  [41.7076052, -91.6031003],  [41.7072091, -91.602807],  [41.70696, -91.6026197],  [41.7065764, -91.6022738],  [41.7064199, -91.6021458],  [41.7062705, -91.6018855],  [41.706284, -91.6018032],  [41.7062544, -91.6016271],  [41.7062615, -91.60144],  [41.7060955, -91.6009254],  [41.7060378, -91.6008183],  [41.7058905, -91.6006751],  [41.705837, -91.6005861],  [41.7056595, -91.6006535],  [41.7053244, -91.6002375],  [41.7050393, -91.5997207],  [41.704837, -91.5991812],  [41.7046532, -91.5986252],  [41.7046383, -91.5980166],  [41.7046382, -91.5979344],  [41.7046703, -91.5978259],  [41.7046395, -91.5976512],  [41.7045298, -91.5973805],  [41.7044928, -91.59711],  [41.7043379, -91.59658],  [41.7042186, -91.5965329],  [41.7040331, -91.5965832],  [41.7039203, -91.5966701],  [41.7037495, -91.5965828],  [41.7036773, -91.5964851],  [41.7034111, -91.5963977],  [41.703023, -91.5964707],  [41.7027269, -91.5966966],  [41.7024081, -91.5972177],  [41.7022587, -91.5973333],  [41.7020253, -91.5973375],  [41.7017391, -91.5972231],  [41.701589, -91.5968394],  [41.7015642, -91.5965928],  [41.7015112, -91.5965262],  [41.7015243, -91.5964254],  [41.7013591, -91.5962493],  [41.7010426, -91.5962214],  [41.7010072, -91.5961601],  [41.7009921, -91.5960667],  [41.7008399, -91.5955311],  [41.7006486, -91.5952206],  [41.7002379, -91.5948729],  [41.6998595, -91.5946685],  [41.6993331, -91.5945486],  [41.6988885, -91.5944456],  [41.6987381, -91.5944352],  [41.6986493, -91.5943739],  [41.6984405, -91.594374],  [41.6979891, -91.5942167],  [41.697953, -91.5941879],  [41.697871, -91.5940107],  [41.6978371, -91.5939817],  [41.697792, -91.5940481],  [41.6977546, -91.5940366],  [41.6974928, -91.5941412],  [41.6973762, -91.594212],  [41.6972296, -91.5941656],  [41.6971859, -91.5940878],  [41.6969789, -91.5940383],  [41.6965554, -91.5938093],  [41.6963492, -91.5936721],  [41.6960236, -91.593463],  [41.6957544, -91.5933788],  [41.6956104, -91.5933128],  [41.6956119, -91.5931809],  [41.6958936, -91.5927737],  [41.696092, -91.5925645],  [41.6962421, -91.592234],  [41.6963052, -91.5915359],  [41.6963185, -91.5908784],  [41.6963168, -91.5902426],  [41.6963013, -91.5896394],  [41.696231, -91.589061],  [41.6962797, -91.5889646],  [41.6962473, -91.5888257],  [41.6961847, -91.5887801],  [41.6961634, -91.5887217],  [41.6961684, -91.5885437],  [41.6962421, -91.5883528],  [41.6960692, -91.5880268],  [41.6959078, -91.5874283],  [41.6958567, -91.5873425],  [41.6958208, -91.587197],  [41.6958222, -91.5871057],  [41.6955026, -91.586635],  [41.6952015, -91.5863891],  [41.6950343, -91.586015],  [41.6949468, -91.5857426],  [41.6948259, -91.5855169],  [41.6946952, -91.5850885],  [41.6946673, -91.5847518],  [41.6947239, -91.5841339],  [41.6947669, -91.5840608],  [41.6948643, -91.5835468],  [41.6948981, -91.5834916],  [41.6950662, -91.5834554],  [41.6950426, -91.5832003],  [41.6950037, -91.5829962],  [41.6948466, -91.5827117],  [41.6946168, -91.5827223],  [41.6944367, -91.5828245],  [41.6939253, -91.5827134],  [41.6935101, -91.5825975],  [41.6934332, -91.5825251],  [41.6929343, -91.5825262],  [41.6924596, -91.5825304],  [41.6922299, -91.5825324],  [41.6921576, -91.5825764],  [41.6920257, -91.582543],  [41.6917557, -91.5825856],  [41.6912587, -91.5824299],  [41.690987, -91.5822649],  [41.6905261, -91.5820376],  [41.6904047, -91.5819722],  [41.690178, -91.581955],  [41.6898885, -91.5818514],  [41.6896837, -91.5817253],  [41.6896009, -91.5816174],  [41.6895878, -91.5817712],  [41.6894403, -91.5818467],  [41.6891337, -91.581837],  [41.6890817, -91.5819014],  [41.6886137, -91.5818549],  [41.6881305, -91.5818238],  [41.6876443, -91.5817766],  [41.6871766, -91.5816559],  [41.6867068, -91.5815177],  [41.6862281, -91.5813654],  [41.685782, -91.5812211],  [41.6852465, -91.5811431],  [41.6847864, -91.5811027],  [41.6843335, -91.5810629],  [41.6838522, -91.5810034],  [41.6833336, -91.5809351],  [41.6828254, -91.5808694],  [41.6823756, -91.5807567],  [41.6819353, -91.5804573],  [41.6816097, -91.5799934],  [41.6813759, -91.5798116],  [41.6811509, -91.5794752],  [41.6810562, -91.5791563],  [41.6809643, -91.5792032],  [41.6808975, -91.5785437],  [41.6808453, -91.5780194],  [41.6803349, -91.5780168],  [41.6798733, -91.5780263],  [41.6793417, -91.5780413],  [41.6788794, -91.5780543],  [41.6784014, -91.5780678],  [41.6779475, -91.5780826],  [41.6774891, -91.5780977],  [41.6769435, -91.5781155],  [41.6764757, -91.5781301],  [41.6760112, -91.5781622],  [41.6755447, -91.5781943],  [41.6750526, -91.5782283],  [41.6748165, -91.5782446],  [41.6746879, -91.5776139],  [41.6746844, -91.5771339],  [41.6746315, -91.5767728],  [41.6745563, -91.5761072],  [41.674498, -91.5755018],  [41.6744528, -91.5748979],  [41.67441, -91.5742635],  [41.6744033, -91.5740898],  [41.6743376, -91.5740539],  [41.6743131, -91.5738349],  [41.6743567, -91.5737542],  [41.6743015, -91.5732623],  [41.6742979, -91.5726551],  [41.6742795, -91.5725653],  [41.6741788, -91.5724996],  [41.6741562, -91.5722725],  [41.6742396, -91.5721535],  [41.6741204, -91.5715202],  [41.6740754, -91.5714096],  [41.6740198, -91.5708039],  [41.673954, -91.570086],  [41.6739072, -91.5693951],  [41.6738501, -91.568763],  [41.6738231, -91.5687327],  [41.6737529, -91.5680598],  [41.6737002, -91.5674625],  [41.6736361, -91.5667124],  [41.6735875, -91.5661062],  [41.673567, -91.5658497],  [41.6734637, -91.565813],  [41.6733519, -91.5656849],  [41.6729205, -91.5656252],  [41.6727322, -91.5656799],  [41.672209, -91.5656394],  [41.6717672, -91.5656308],  [41.6716042, -91.5655484],  [41.6714486, -91.5656095],  [41.6709874, -91.5655945],  [41.6708112, -91.5655311],  [41.6707369, -91.5656082],  [41.6704314, -91.5655987],  [41.670368, -91.5656372],  [41.6698619, -91.5656264],  [41.6694341, -91.5656973],  [41.6692514, -91.5658142],  [41.6691459, -91.5654389],  [41.6691953, -91.5654938],  [41.6691557, -91.5654511],  [41.668862, -91.565587],  [41.6687948, -91.5654779],  [41.668784, -91.5653584],  [41.6686612, -91.5647538],  [41.6685557, -91.5645738],  [41.668425, -91.5645244],  [41.6681984, -91.5639501],  [41.6680469, -91.5636303],  [41.6679716, -91.5635792],  [41.6678508, -91.5630816],  [41.6678275, -91.5629375],  [41.6677502, -91.5627843],  [41.6674969, -91.5623317],  [41.6673889, -91.5619183],  [41.6672838, -91.5618061],  [41.6671633, -91.561495],  [41.6668926, -91.5609639],  [41.6666744, -91.5603712],  [41.6664669, -91.5597611],  [41.666207, -91.55931],  [41.6660065, -91.5587502],  [41.6659738, -91.5586384],  [41.6659986, -91.558578],  [41.6659383, -91.5581769],  [41.6657254, -91.557578],  [41.6656749, -91.5573681],  [41.6655386, -91.5570129],  [41.6654573, -91.5563799],  [41.6654646, -91.5563256],  [41.665395, -91.5562742],  [41.6653936, -91.5561494],  [41.6653669, -91.5560807],  [41.6653709, -91.5556551],  [41.6652494, -91.555156],  [41.6648957, -91.5547201],  [41.6647342, -91.5544882],  [41.6646834, -91.5542849],  [41.6643233, -91.5538742],  [41.6642539, -91.553423],  [41.6639635, -91.552962],  [41.6638507, -91.5524931],  [41.6637562, -91.5524449],  [41.6638267, -91.5523721],  [41.6637154, -91.5517633],  [41.6637177, -91.5515863],  [41.6636012, -91.551268],  [41.6635244, -91.5512283],  [41.6634298, -91.5507075],  [41.6634259, -91.550581],  [41.6632327, -91.5501237],  [41.6630548, -91.5499838],  [41.6626906, -91.5495487],  [41.6626938, -91.5493823],  [41.6625159, -91.5491222],  [41.6626528, -91.5485435],  [41.6628665, -91.5479449],  [41.6630905, -91.5473196],  [41.6632046, -91.5469975],  [41.6632962, -91.5465597],  [41.6632726, -91.5463301],  [41.6633837, -91.5457756],  [41.6634091, -91.5457514],  [41.6634517, -91.545111],  [41.6634776, -91.5446909],  [41.6633932, -91.5445356],  [41.6633839, -91.5444111],  [41.6632788, -91.5441168],  [41.663295, -91.5440357],  [41.6632744, -91.543958],  [41.6632736, -91.5437178],  [41.6631761, -91.5437277],  [41.6629578, -91.5436085],  [41.6628306, -91.5435971],  [41.6626642, -91.5437083],  [41.6626202, -91.5436896],  [41.66214, -91.5437691],  [41.6620758, -91.5437914],  [41.6616286, -91.5435998],  [41.6614495, -91.5434072],  [41.6612661, -91.5428434],  [41.6612537, -91.5426491],  [41.6613423, -91.5426254],  [41.6613381, -91.5424966],  [41.6613378, -91.5423901],  [41.6612739, -91.5421706],  [41.661266, -91.5415412],  [41.6612705, -91.5408519],  [41.6612738, -91.5402351],  [41.6612765, -91.5395838],  [41.6612804, -91.538943],  [41.6612845, -91.5383293],  [41.6612879, -91.5378381],  [41.6613506, -91.5376709],  [41.6615651, -91.5376694],  [41.661604, -91.537645],  [41.6620939, -91.5376485],  [41.6622238, -91.5376444],  [41.6622144, -91.5377032],  [41.6625312, -91.5376736],  [41.662623, -91.5375255],  [41.6626899, -91.5368897],  [41.6626769, -91.5362873],  [41.6627328, -91.5360778],  [41.662799, -91.5359981],  [41.6627171, -91.5355959],  [41.6627688, -91.5352985],  [41.6627152, -91.5350796],  [41.6626474, -91.5350778],  [41.6624662, -91.535178],  [41.6624951, -91.5352524],  [41.6626934, -91.5351866],  [41.6627854, -91.5350545], ];
var line_10 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_10);
      
      var latLngs = [ [41.7041779, -91.6100281],  [41.7041779, -91.6100281],  [41.7040395, -91.61006],  [41.7040007, -91.6099673],  [41.7040565, -91.6099834],  [41.7040897, -91.6099052],  [41.704035, -91.6098684],  [41.7040274, -91.6099796],  [41.704171, -91.6101361],  [41.7045276, -91.610138],  [41.7047412, -91.6100983],  [41.705024, -91.6101044],  [41.7051633, -91.6100602],  [41.7056361, -91.610077],  [41.7059406, -91.6100701],  [41.7061155, -91.6100456],  [41.7061667, -91.6100656],  [41.7063005, -91.6100162],  [41.7066445, -91.6099897],  [41.7067403, -91.6100239],  [41.7070973, -91.6100253],  [41.7075503, -91.6100003],  [41.7079122, -91.610035],  [41.7083884, -91.6100312],  [41.7084231, -91.6100144],  [41.7084244, -91.6093844],  [41.7085045, -91.6087659],  [41.7084883, -91.6085421],  [41.708507, -91.6084265],  [41.7084118, -91.6083793],  [41.7084138, -91.6081364],  [41.7084392, -91.6079818],  [41.7084054, -91.6073802],  [41.7084267, -91.6070852],  [41.708395, -91.6069719],  [41.7083626, -91.6064437],  [41.7083719, -91.6058341],  [41.7083554, -91.6053502],  [41.7084032, -91.6050449],  [41.7083845, -91.6048644],  [41.7082825, -91.6047729],  [41.7082065, -91.6047683],  [41.7080816, -91.6045558],  [41.708036, -91.6037819],  [41.7079341, -91.6034764],  [41.7075292, -91.6030671],  [41.7071424, -91.6027272],  [41.7067196, -91.6023579],  [41.7063252, -91.6020155],  [41.7062208, -91.6013959],  [41.7058646, -91.6009079],  [41.7054815, -91.6004325],  [41.7051474, -91.5999453],  [41.7049009, -91.5993544],  [41.7046914, -91.5987938],  [41.7046671, -91.5987046],  [41.7047568, -91.5985394],  [41.7046726, -91.5981799],  [41.7046735, -91.5980873],  [41.7046381, -91.5979931],  [41.7046429, -91.5973503],  [41.704645, -91.5972336],  [41.7045856, -91.5971644],  [41.7044902, -91.5967254],  [41.7043663, -91.5965498],  [41.7042322, -91.5964132],  [41.7040928, -91.5964467],  [41.7039227, -91.5965416],  [41.7038677, -91.5965465],  [41.7034673, -91.5962705],  [41.7032673, -91.5963506],  [41.7030513, -91.5963976],  [41.7029468, -91.596458],  [41.702876, -91.5965735],  [41.7026844, -91.596768],  [41.7024454, -91.5972097],  [41.7021858, -91.5974288],  [41.7021088, -91.5974249],  [41.7020374, -91.5972471],  [41.7018211, -91.5970913],  [41.7018618, -91.5971739],  [41.7017273, -91.597037],  [41.7015405, -91.5964903],  [41.7011, -91.5963273],  [41.701011, -91.5962859],  [41.7009439, -91.5962186],  [41.7008611, -91.5956829],  [41.7007154, -91.5952334],  [41.7006701, -91.595011],  [41.7004698, -91.595031],  [41.700004, -91.5947339],  [41.6999246, -91.5946754],  [41.6997061, -91.5945985],  [41.6995983, -91.594608],  [41.6992518, -91.5943341],  [41.6987437, -91.5941232],  [41.6985874, -91.5940395],  [41.6984982, -91.5941099],  [41.698315, -91.5940811],  [41.6982369, -91.5941425],  [41.6983409, -91.5941141],  [41.6983299, -91.5941884],  [41.6982424, -91.5941648],  [41.6980052, -91.5942076],  [41.6975331, -91.5942283],  [41.6973257, -91.594159],  [41.696865, -91.5939165],  [41.6964084, -91.5937243],  [41.6959936, -91.5934688],  [41.695618, -91.593329],  [41.6957451, -91.5930222],  [41.6958679, -91.5929487],  [41.6961478, -91.5926021],  [41.6962559, -91.5923122],  [41.6962468, -91.5922227],  [41.6963049, -91.5915475],  [41.6963184, -91.5908368],  [41.6963168, -91.5902208],  [41.6962979, -91.5896],  [41.6962315, -91.5890641],  [41.6961702, -91.588818],  [41.6962062, -91.5887358],  [41.6960752, -91.5880822],  [41.6959233, -91.5874995],  [41.695708, -91.5869304],  [41.695354, -91.5865159],  [41.6950358, -91.5860269],  [41.6948787, -91.5856244],  [41.6947721, -91.5854083],  [41.6947008, -91.585006],  [41.6946845, -91.5848],  [41.6946588, -91.5847252],  [41.6946643, -91.5845559],  [41.6947023, -91.5844851],  [41.6947585, -91.5838722],  [41.6948555, -91.5833236],  [41.694958, -91.5828456],  [41.6947748, -91.5827622],  [41.6944773, -91.5827568],  [41.69433, -91.5827352],  [41.6938742, -91.5825987],  [41.6933736, -91.5825244],  [41.6929007, -91.5825265],  [41.6923859, -91.582531],  [41.6918991, -91.5825353],  [41.6916542, -91.582519],  [41.691589, -91.5825385],  [41.6913857, -91.582475],  [41.6912472, -91.5824027],  [41.6911113, -91.5823711],  [41.6910397, -91.5823156],  [41.6908621, -91.5822777],  [41.6904355, -91.5820362],  [41.6902382, -91.5819529],  [41.6900552, -91.5819934],  [41.6897895, -91.5819047],  [41.6897216, -91.5819197],  [41.689223, -91.5818479],  [41.6887389, -91.5818561],  [41.6884417, -91.5818311],  [41.6882757, -91.5818795],  [41.687759, -91.5818166],  [41.6874013, -91.5816923],  [41.6872876, -91.5816849],  [41.6868133, -91.5815147],  [41.6863694, -91.5814103],  [41.6858769, -91.5812474],  [41.685376, -91.5811544],  [41.6848556, -91.5811088],  [41.684357, -91.581065],  [41.683883, -91.5810076],  [41.6833687, -91.5809396],  [41.6828892, -91.5808776],  [41.6824232, -91.5807814],  [41.682153, -91.5806171],  [41.6820807, -91.5806145],  [41.681742, -91.5802705],  [41.6816601, -91.580147],  [41.6814886, -91.5800414],  [41.6814282, -91.5799041],  [41.6810658, -91.5795042],  [41.6810467, -91.5794662],  [41.6809453, -91.579406],  [41.6809007, -91.5787138],  [41.6808499, -91.5780655],  [41.6808453, -91.5780194],  [41.6803146, -91.5780168],  [41.6797754, -91.5780291],  [41.6792775, -91.5780431],  [41.6787999, -91.5780566],  [41.6781813, -91.578075],  [41.6777031, -91.5780907],  [41.6771976, -91.5781072],  [41.6766827, -91.5781215],  [41.6761793, -91.5781506],  [41.6756583, -91.5781865],  [41.6751684, -91.5782203],  [41.6748301, -91.5782436],  [41.6746673, -91.5776096],  [41.6746635, -91.5774607],  [41.6747136, -91.5772916],  [41.6746471, -91.5772723],  [41.6746629, -91.5769672],  [41.674587, -91.5762739],  [41.6745479, -91.5756359],  [41.6745474, -91.5754657],  [41.6744643, -91.5752923],  [41.6743979, -91.5746312],  [41.6743078, -91.5737877],  [41.6742475, -91.5731892],  [41.6741799, -91.572511],  [41.6741108, -91.5717961],  [41.6740506, -91.5711394],  [41.6739915, -91.5704946],  [41.6739327, -91.5698529],  [41.6738721, -91.5692114],  [41.6738077, -91.5685853],  [41.673731, -91.5678121],  [41.6737134, -91.5676124],  [41.6736556, -91.5674209],  [41.6736698, -91.5670144],  [41.6735977, -91.5665519],  [41.6735317, -91.5663428],  [41.6735142, -91.5658238],  [41.6734545, -91.565684],  [41.6731351, -91.5656085],  [41.673046, -91.5656507],  [41.6726332, -91.5655922],  [41.6724853, -91.5655196],  [41.6724533, -91.5655536],  [41.6723153, -91.5655352],  [41.6721534, -91.565581],  [41.6716526, -91.5655227],  [41.6714674, -91.5654936],  [41.6709917, -91.5655203],  [41.6707224, -91.5655818],  [41.6706336, -91.5655368],  [41.6705054, -91.5655459],  [41.6704136, -91.5655833],  [41.6702479, -91.5655216],  [41.6697975, -91.565582],  [41.6693986, -91.5656373],  [41.6692613, -91.5658051],  [41.6692, -91.5657525],  [41.6692139, -91.5653845],  [41.6688064, -91.5655777],  [41.668663, -91.5653317],  [41.6685087, -91.5651521],  [41.6685318, -91.5650225],  [41.6685054, -91.5649455],  [41.6685086, -91.5648606],  [41.6684439, -91.5647041],  [41.6684105, -91.5644629],  [41.6682062, -91.5639026],  [41.6679917, -91.5633461],  [41.6678521, -91.5630467],  [41.6676283, -91.5624901],  [41.6674871, -91.5622835],  [41.6672913, -91.5618088],  [41.6671834, -91.5616259],  [41.6669408, -91.5610375],  [41.6667405, -91.5604774],  [41.6665565, -91.5601037],  [41.6665152, -91.5599214],  [41.6664487, -91.5598776],  [41.6663582, -91.5595983],  [41.6662438, -91.5594203],  [41.6660452, -91.5588328],  [41.6659931, -91.5586891],  [41.6660295, -91.5585381],  [41.665948, -91.5582597],  [41.665963, -91.5582416],  [41.6659463, -91.5582553],  [41.6658412, -91.5578952],  [41.6656829, -91.5576464],  [41.6656886, -91.5575082],  [41.6655029, -91.5569538],  [41.6653855, -91.5563394],  [41.6653413, -91.5556992],  [41.6652555, -91.5552415],  [41.6649461, -91.5547783],  [41.6646653, -91.5542944],  [41.6644131, -91.554091],  [41.664245, -91.5535289],  [41.664056, -91.5529682],  [41.6638845, -91.5523679],  [41.6638264, -91.5520752],  [41.6636799, -91.5520494],  [41.663562, -91.5514269],  [41.6634499, -91.5508167],  [41.6633112, -91.5502135],  [41.6632129, -91.5499729],  [41.6628136, -91.5495235],  [41.6625181, -91.5491256],  [41.6623503, -91.5489415],  [41.662606, -91.5486811],  [41.6628222, -91.548067],  [41.6630249, -91.5475042],  [41.6632045, -91.5469494],  [41.6633198, -91.5463036],  [41.6633003, -91.5458506],  [41.6633557, -91.5457353],  [41.6633741, -91.5454299],  [41.6634769, -91.5450347],  [41.6634489, -91.5447744],  [41.6633385, -91.5446959],  [41.663313, -91.5440917],  [41.6632637, -91.5438442],  [41.6632263, -91.5437667],  [41.6632976, -91.543643],  [41.6632861, -91.5435669],  [41.662916, -91.5434838],  [41.6624076, -91.543606],  [41.6619319, -91.5436783],  [41.6617001, -91.5436753],  [41.6616303, -91.5436301],  [41.6616674, -91.5433021],  [41.661636, -91.543202],  [41.6613834, -91.5432764],  [41.6612573, -91.5427565],  [41.66126, -91.5421062],  [41.661266, -91.5414233],  [41.6612716, -91.5407114],  [41.6612748, -91.5400083],  [41.6612406, -91.5399072],  [41.6612867, -91.5392622],  [41.6612801, -91.5389901],  [41.6612441, -91.5388919],  [41.661251, -91.5387987],  [41.661231, -91.538713],  [41.6612594, -91.5383077],  [41.6612234, -91.5382464],  [41.6612269, -91.5379398],  [41.6613045, -91.5379282],  [41.6614064, -91.5378296],  [41.6614932, -91.5376586],  [41.6616245, -91.5376225],  [41.661691, -91.5376648],  [41.6621895, -91.5376453],  [41.6624756, -91.5376356],  [41.6625895, -91.5371362],  [41.6626102, -91.5366847],  [41.6626974, -91.5366107],  [41.6623189, -91.5365159],  [41.6622481, -91.5365458],  [41.6622835, -91.5364948],  [41.6624616, -91.5364978],  [41.6624884, -91.5364528],  [41.6625646, -91.5364139],  [41.6626874, -91.5358284],  [41.6625711, -91.535328],  [41.6625711, -91.535328], ];
var line_11 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_11);
      
      var latLngs = [ [41.6626762, -91.535126],  [41.6627033, -91.5352315],  [41.6626551, -91.5354663],  [41.6626925, -91.5360934],  [41.6627604, -91.5361434],  [41.663219, -91.5359794],  [41.6635329, -91.5360498],  [41.6635088, -91.5367486],  [41.6636329, -91.5368423],  [41.6636363, -91.5374675],  [41.6636369, -91.5375802],  [41.6631532, -91.5376036],  [41.6626823, -91.5376249],  [41.6625127, -91.5376326],  [41.6623427, -91.5377692],  [41.6621285, -91.5378043],  [41.661986, -91.5377709],  [41.6619218, -91.5376558],  [41.6618249, -91.5376596],  [41.6618222, -91.5378755],  [41.6617127, -91.5378162],  [41.6614612, -91.5378269],  [41.6614535, -91.5376741],  [41.661373, -91.5376709],  [41.6612873, -91.5379196],  [41.6612828, -91.5385802],  [41.6613481, -91.5386795],  [41.6613918, -91.5392587],  [41.6613714, -91.5393775],  [41.6612769, -91.5394787],  [41.6612741, -91.5401688],  [41.6612714, -91.540739],  [41.661315, -91.5414529],  [41.6613101, -91.5417406],  [41.6613174, -91.5420544],  [41.6614541, -91.5420394],  [41.6613602, -91.5425092],  [41.66135, -91.5426597],  [41.6612558, -91.5427311],  [41.6613532, -91.542779],  [41.6613775, -91.5429987],  [41.6615742, -91.5435487],  [41.6617555, -91.5437565],  [41.6622292, -91.5436343],  [41.6623948, -91.5436557],  [41.6628613, -91.5435462],  [41.6629391, -91.5434897],  [41.6629326, -91.5434528],  [41.663279, -91.5438752],  [41.6633551, -91.5440879],  [41.6633666, -91.5444567],  [41.6633375, -91.5446438],  [41.6633563, -91.5447672],  [41.6633733, -91.5453588],  [41.6634037, -91.5455395],  [41.6633673, -91.5456153],  [41.6633168, -91.546327],  [41.6632198, -91.546885],  [41.6632521, -91.5469973],  [41.6630901, -91.5476648],  [41.6628265, -91.5481746],  [41.6626787, -91.5483836],  [41.6625451, -91.5488782],  [41.662536, -91.5490071],  [41.6626311, -91.5493261],  [41.662828, -91.5495962],  [41.6630148, -91.5497986],  [41.6630773, -91.5498338],  [41.6633682, -91.5503179],  [41.6635331, -91.5507552],  [41.6635657, -91.5511262],  [41.6635118, -91.5511614],  [41.6636331, -91.5518024],  [41.6637869, -91.5525961],  [41.6639452, -91.5532134],  [41.6640121, -91.5533924],  [41.6641689, -91.5535716],  [41.6644181, -91.5540634],  [41.6647714, -91.5545565],  [41.6650652, -91.555011],  [41.6652917, -91.5555364],  [41.6653774, -91.5562088],  [41.6656109, -91.5566837],  [41.6657408, -91.5572692],  [41.6658871, -91.5578626],  [41.6660809, -91.5584251],  [41.6662996, -91.5590303],  [41.6665064, -91.5595739],  [41.6667385, -91.560181],  [41.6669252, -91.5607054],  [41.6671006, -91.5613329],  [41.6673313, -91.5619333],  [41.6675421, -91.562476],  [41.6676266, -91.5628247],  [41.6678537, -91.5633623],  [41.6680999, -91.563915],  [41.6683641, -91.5644671],  [41.6685836, -91.5650213],  [41.6688175, -91.5655468],  [41.6689545, -91.5658354],  [41.6689447, -91.5659115],  [41.6690091, -91.5660936],  [41.6691543, -91.5659018],  [41.6692556, -91.5658155],  [41.6694556, -91.5657417],  [41.6694965, -91.5656824],  [41.6696023, -91.5656087],  [41.6700167, -91.5655592],  [41.6704945, -91.5656023],  [41.6708738, -91.5656108],  [41.6709363, -91.5655879],  [41.6710178, -91.5656116],  [41.6711737, -91.565589],  [41.6716356, -91.5656188],  [41.6717832, -91.5655503],  [41.6722624, -91.5655894],  [41.6724927, -91.5655851],  [41.6725573, -91.5656239],  [41.6730507, -91.5656059],  [41.6732634, -91.565672],  [41.6733059, -91.5656234],  [41.6734765, -91.5656606],  [41.6735368, -91.5658044],  [41.6735166, -91.5658996],  [41.6735774, -91.5661475],  [41.6736488, -91.5668716],  [41.6736841, -91.5672801],  [41.6738276, -91.567803],  [41.6738097, -91.5679711],  [41.6738243, -91.5680666],  [41.6738479, -91.5684871],  [41.6738902, -91.5685698],  [41.6739116, -91.5689582],  [41.6739018, -91.5694948],  [41.6739938, -91.5700907],  [41.6740773, -91.570698],  [41.6740998, -91.5708614],  [41.6741667, -91.5714771],  [41.6742031, -91.5715317],  [41.6742448, -91.5717374],  [41.6742009, -91.5719318],  [41.674247, -91.5720984],  [41.6743238, -91.5726932],  [41.6742734, -91.5734493],  [41.6743612, -91.5742798],  [41.6743695, -91.5743596],  [41.6744323, -91.5744489],  [41.6745576, -91.5748832],  [41.6745853, -91.5754867],  [41.674633, -91.5760662],  [41.6746778, -91.5762172],  [41.6746667, -91.576328],  [41.6746912, -91.5764268],  [41.6746802, -91.5769523],  [41.6747214, -91.577084],  [41.6747549, -91.5774265],  [41.674668, -91.5775222],  [41.6747845, -91.578146],  [41.6748068, -91.5782252],  [41.6750276, -91.57823],  [41.6750673, -91.5781336],  [41.6755263, -91.5781538],  [41.6756572, -91.5781103],  [41.6757512, -91.5781409],  [41.6762398, -91.5780839],  [41.6766973, -91.5780304],  [41.6771664, -91.5780371],  [41.6775427, -91.5780167],  [41.6776993, -91.5779623],  [41.6777383, -91.5778683],  [41.6777502, -91.5779492],  [41.6782405, -91.5779774],  [41.6783943, -91.5779605],  [41.6788965, -91.5779737],  [41.6793876, -91.5779483],  [41.6798529, -91.57791],  [41.6803136, -91.5778913],  [41.6807648, -91.5779939],  [41.6808703, -91.5782489],  [41.6809651, -91.5789011],  [41.6811495, -91.5794673],  [41.6814134, -91.5798388],  [41.681428, -91.5798212],  [41.6814801, -91.5799432],  [41.6817865, -91.5803983],  [41.6820647, -91.5805405],  [41.6825312, -91.5808203],  [41.6830107, -91.5808934],  [41.6834821, -91.5809543],  [41.6839677, -91.5810193],  [41.6844404, -91.5810723],  [41.6848916, -91.5811119],  [41.6851406, -91.5811338],  [41.6852256, -91.5810236],  [41.685696, -91.5810931],  [41.6860434, -91.5811513],  [41.6861862, -91.5812193],  [41.6861916, -91.5811859],  [41.6864262, -91.5812693],  [41.6865674, -91.581405],  [41.6866016, -91.5813984],  [41.6866419, -91.5814971],  [41.6869235, -91.581578],  [41.6869854, -91.5815026],  [41.6874418, -91.5816723],  [41.6879198, -91.5817598],  [41.6883955, -91.581794],  [41.6888885, -91.5818073],  [41.6892133, -91.581793],  [41.6893604, -91.5818149],  [41.6893924, -91.5818454],  [41.6898441, -91.5818686],  [41.6903065, -91.5819399],  [41.6904717, -91.582007],  [41.6905769, -91.582],  [41.6910239, -91.5822618],  [41.6914539, -91.5824494],  [41.6918204, -91.5824636],  [41.6920699, -91.5824564],  [41.6925789, -91.5824631],  [41.6930454, -91.5825094],  [41.6934978, -91.5824832],  [41.6936932, -91.5824919],  [41.6941391, -91.5826366],  [41.6945835, -91.5827607],  [41.6947019, -91.5827876],  [41.6948609, -91.582866],  [41.6949119, -91.5830145],  [41.6949156, -91.5832888],  [41.694834, -91.5833631],  [41.6947202, -91.5840606],  [41.6946607, -91.5846224],  [41.6946843, -91.5850266],  [41.6948627, -91.5856602],  [41.6951245, -91.5861685],  [41.6954218, -91.5866065],  [41.695522, -91.5866675],  [41.6958154, -91.5871761],  [41.69587, -91.5872725],  [41.6958231, -91.5874347],  [41.6959991, -91.5881351],  [41.6961638, -91.5887925],  [41.6962817, -91.5894076],  [41.6963168, -91.5902147],  [41.6963184, -91.5908215],  [41.6963078, -91.5914542],  [41.6962732, -91.5920917],  [41.6962482, -91.5922168],  [41.6960654, -91.5926026],  [41.695724, -91.5930164],  [41.6957091, -91.5931829],  [41.6956638, -91.5933161],  [41.6961154, -91.5934871],  [41.6965462, -91.5937032],  [41.6969624, -91.5939439],  [41.697213, -91.5939281],  [41.6974716, -91.5941151],  [41.6979416, -91.5941112],  [41.698246, -91.5941641],  [41.6987265, -91.5942936],  [41.6990483, -91.5943811],  [41.6991961, -91.5943934],  [41.6996234, -91.5945911],  [41.7001149, -91.5947847],  [41.7005461, -91.5950891],  [41.7008149, -91.5954835],  [41.7009766, -91.5960781],  [41.7011348, -91.5963254],  [41.7014112, -91.5963514],  [41.7015426, -91.5964878],  [41.7016833, -91.5968363],  [41.7017359, -91.5972484],  [41.7018753, -91.5974006],  [41.7021168, -91.597485],  [41.7023559, -91.5973966],  [41.702603, -91.5972031],  [41.7026585, -91.5970005],  [41.7027704, -91.5967363],  [41.7030243, -91.5964496],  [41.7034841, -91.5963343],  [41.7038644, -91.596665],  [41.7041361, -91.5965263],  [41.7042919, -91.5966303],  [41.7044342, -91.5972792],  [41.7044511, -91.5973504],  [41.704554, -91.5975217],  [41.7045734, -91.5975956],  [41.7046393, -91.5976533],  [41.7046415, -91.5983462],  [41.7046754, -91.5987388],  [41.7048872, -91.5993172],  [41.7051152, -91.599883],  [41.7054364, -91.6003766],  [41.7057145, -91.6007218],  [41.705777, -91.6007169],  [41.7058134, -91.6007849],  [41.7061329, -91.6012436],  [41.7061959, -91.6012812],  [41.7062519, -91.6014428],  [41.7062862, -91.6019914],  [41.7066718, -91.6023161],  [41.706886, -91.6025788],  [41.7072961, -91.6029461],  [41.7076835, -91.6032736],  [41.7078513, -91.6033784],  [41.7079743, -91.6035402],  [41.7080603, -91.6040014],  [41.7080896, -91.604646],  [41.7082672, -91.6049079],  [41.7084319, -91.6048919],  [41.7085631, -91.6049977],  [41.7085897, -91.6051034],  [41.7086634, -91.6051976],  [41.7086391, -91.6052893],  [41.7087018, -91.6056794],  [41.7086487, -91.6057885],  [41.7085101, -91.6058683],  [41.7084993, -91.6064824],  [41.7084885, -91.6070914],  [41.708484, -91.6073492],  [41.7088083, -91.6074345],  [41.708803, -91.6077698],  [41.7087158, -91.6079322],  [41.7087281, -91.6081904],  [41.7086354, -91.6085553],  [41.7084678, -91.6086421],  [41.7084422, -91.6093134],  [41.7085897, -91.6098784],  [41.7085343, -91.6099644],  [41.7083866, -91.6100878],  [41.7082962, -91.6100851],  [41.7082098, -91.6100359],  [41.7077397, -91.6100483],  [41.707275, -91.6100605],  [41.7068204, -91.6100725],  [41.7064299, -91.6100935],  [41.7063233, -91.6100618],  [41.7059536, -91.6101027],  [41.7057203, -91.6101533],  [41.7052303, -91.6101276],  [41.7051548, -91.6101218],  [41.7051227, -91.6101641],  [41.7045892, -91.6101482],  [41.7040884, -91.6101766],  [41.7040276, -91.6101806],  [41.7040432, -91.6099377],  [41.7040676, -91.6099483],  [41.7040072, -91.6098787],  [41.7040072, -91.6098787], ];
var line_12 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_12);
      
      var latLngs = [ [41.7041042, -91.6098856],  [41.7040717, -91.6099249],  [41.7039973, -91.6099567],  [41.7040631, -91.6101185],  [41.7041682, -91.6101611],  [41.704635, -91.6100719],  [41.7051278, -91.6100306],  [41.7055776, -91.610061],  [41.706031, -91.6100823],  [41.706524, -91.6100415],  [41.7070035, -91.6100375],  [41.7071897, -91.6100064],  [41.7074922, -91.6100377],  [41.7080051, -91.6100159],  [41.7083276, -91.61001],  [41.7084301, -91.6098321],  [41.7084099, -91.6097756],  [41.7084625, -91.6091408],  [41.7084694, -91.6090839],  [41.7084363, -91.6090248],  [41.7084724, -91.6084161],  [41.7083893, -91.608313],  [41.7083842, -91.6079226],  [41.7084334, -91.607832],  [41.7084327, -91.607751],  [41.7083894, -91.6076896],  [41.70837, -91.607016],  [41.7083459, -91.6064109],  [41.7083452, -91.6062122],  [41.7083183, -91.6061306],  [41.7083371, -91.6055163],  [41.7083936, -91.6050826],  [41.7083784, -91.6050084],  [41.7081939, -91.6048589],  [41.7080654, -91.6044932],  [41.7080538, -91.6038789],  [41.7080202, -91.603553],  [41.7079427, -91.6034334],  [41.7075123, -91.6030775],  [41.7072477, -91.60288],  [41.7072214, -91.6027801],  [41.706796, -91.602364],  [41.706737, -91.6023109],  [41.7065599, -91.6022422],  [41.706398, -91.6021106],  [41.7063236, -91.6019913],  [41.7062879, -91.6018452],  [41.7060969, -91.6012401],  [41.7059429, -91.6008587],  [41.7058464, -91.6008415],  [41.7054666, -91.6003821],  [41.7053984, -91.6002276],  [41.7052295, -91.5999583],  [41.7050563, -91.5997599],  [41.70484, -91.5991893],  [41.7046848, -91.5987761],  [41.7045891, -91.5982204],  [41.7045948, -91.5979289],  [41.7045575, -91.5977477],  [41.7043277, -91.5971355],  [41.7042607, -91.5967962],  [41.7041556, -91.5966048],  [41.7041184, -91.5965811],  [41.703806, -91.5967056],  [41.7036913, -91.5966528],  [41.7036636, -91.5965557],  [41.7034654, -91.5963895],  [41.7032853, -91.5963492],  [41.7031577, -91.5964843],  [41.7029321, -91.5966215],  [41.7028391, -91.5966389],  [41.7026239, -91.5967863],  [41.7025432, -91.5969018],  [41.7024893, -91.5971321],  [41.7024586, -91.5974573],  [41.7023758, -91.5975456],  [41.7022604, -91.5975262],  [41.7021761, -91.597577],  [41.7017759, -91.5975431],  [41.7017502, -91.5974299],  [41.701664, -91.5972967],  [41.7014765, -91.59684],  [41.7014572, -91.5966797],  [41.7014046, -91.5966126],  [41.7013808, -91.5965368],  [41.7014111, -91.5965038],  [41.7013238, -91.5963485],  [41.7011852, -91.5963216],  [41.7010185, -91.5963297],  [41.7009299, -91.5962625],  [41.7009309, -91.5961587],  [41.7008156, -91.5958324],  [41.7007612, -91.5955314],  [41.700577, -91.5952246],  [41.7001268, -91.5949435],  [41.6999293, -91.5948232],  [41.699468, -91.5946857],  [41.6990722, -91.5945536],  [41.6987667, -91.5944188],  [41.698704, -91.5944245],  [41.6985768, -91.594287],  [41.6985585, -91.5944215],  [41.6983921, -91.5944181],  [41.6982743, -91.5943186],  [41.6982002, -91.5943749],  [41.6981525, -91.5943629],  [41.6981279, -91.5943162],  [41.698124, -91.5943956],  [41.698048, -91.5943517],  [41.6975797, -91.594377],  [41.6971226, -91.5942112],  [41.6966506, -91.5939252],  [41.6963604, -91.5937833],  [41.696133, -91.5936106],  [41.6957011, -91.5934202],  [41.6955912, -91.5934053],  [41.6954282, -91.5931236],  [41.6956922, -91.5930673],  [41.6960546, -91.592618],  [41.6962438, -91.59223],  [41.6963025, -91.5916243],  [41.6963185, -91.5908739],  [41.6963168, -91.5902399],  [41.6963091, -91.5897343],  [41.6962411, -91.5896546],  [41.6961637, -91.5890569],  [41.6959945, -91.5884359],  [41.695945, -91.5882305],  [41.6959972, -91.5881275],  [41.6958678, -91.5876111],  [41.6957621, -91.5875989],  [41.695585, -91.5870664],  [41.695433, -91.5869724],  [41.6951041, -91.5865039],  [41.6948414, -91.5859753],  [41.6947574, -91.5857693],  [41.6948495, -91.5856254],  [41.6946804, -91.584999],  [41.6946791, -91.5843584],  [41.6947343, -91.583967],  [41.6946929, -91.5838986],  [41.6947891, -91.5836459],  [41.6947601, -91.583605],  [41.6948084, -91.5834725],  [41.6947868, -91.5834358],  [41.694832, -91.5829762],  [41.6943723, -91.5828632],  [41.694309, -91.5828464],  [41.6942707, -91.5826894],  [41.6937721, -91.5825754],  [41.6932957, -91.5825239],  [41.692836, -91.582527],  [41.6923437, -91.5825314],  [41.6919349, -91.582535],  [41.691857, -91.5826464],  [41.6917271, -91.5826311],  [41.6914407, -91.582643],  [41.6911118, -91.5825231],  [41.6906598, -91.5821896],  [41.690515, -91.5820895],  [41.690147, -91.5819413],  [41.6896549, -91.5819425],  [41.6895322, -91.5819066],  [41.689029, -91.5818677],  [41.6885668, -91.581901],  [41.6881547, -91.5819087],  [41.688061, -91.5819491],  [41.6877901, -91.5819566],  [41.6873102, -91.5818362],  [41.6870816, -91.5818121],  [41.6866633, -91.5816261],  [41.6865806, -91.5814776],  [41.6861148, -91.5813285],  [41.6856633, -91.5811894],  [41.6851583, -91.5811353],  [41.6846883, -91.5810941],  [41.6841973, -91.581051],  [41.6837093, -91.5809837],  [41.6832308, -91.5809218],  [41.682827, -91.5808696],  [41.6827579, -91.5810181],  [41.6824735, -91.5810282],  [41.6824622, -91.580989],  [41.6820522, -91.5806965],  [41.681749, -91.5803902],  [41.6816633, -91.5802457],  [41.6815571, -91.5801326],  [41.6812923, -91.5799353],  [41.6809748, -91.5795132],  [41.6808909, -91.5792701],  [41.6807853, -91.5786492],  [41.6807695, -91.5785132],  [41.680878, -91.5783475],  [41.6808452, -91.5780176],  [41.6803099, -91.5780168],  [41.6797942, -91.5780285],  [41.6793234, -91.5780418],  [41.6788264, -91.5780558],  [41.6781777, -91.5780751],  [41.6776262, -91.5780932],  [41.6771178, -91.5781098],  [41.6766596, -91.5781215],  [41.6761517, -91.5781525],  [41.6756571, -91.5781866],  [41.6751785, -91.5782196],  [41.6748174, -91.5782445],  [41.6746831, -91.5776432],  [41.6746233, -91.5769788],  [41.6745671, -91.576364],  [41.6745572, -91.5762564],  [41.6744725, -91.5761662],  [41.6744205, -91.575519],  [41.6743676, -91.5748232],  [41.674305, -91.5741963],  [41.6743376, -91.5740535],  [41.6742706, -91.5734208],  [41.6742067, -91.5727793],  [41.6741427, -91.5721377],  [41.6740854, -91.5715184],  [41.6740748, -91.5714029],  [41.6739667, -91.5712382],  [41.6739249, -91.5710601],  [41.6739143, -91.5704391],  [41.673851, -91.5701263],  [41.6738121, -91.5694467],  [41.6738829, -91.5693163],  [41.6738148, -91.5686531],  [41.6737377, -91.5678883],  [41.6736707, -91.5671281],  [41.6736145, -91.5664431],  [41.6735583, -91.5658072],  [41.6733, -91.5656748],  [41.6732941, -91.5656953],  [41.6727769, -91.5656496],  [41.6725623, -91.5656417],  [41.6724846, -91.5657342],  [41.6721447, -91.5657173],  [41.6719275, -91.5657235],  [41.6714708, -91.5656955],  [41.6710166, -91.5656947],  [41.6705951, -91.5657118],  [41.6705449, -91.5656807],  [41.6701745, -91.5657338],  [41.6700515, -91.5657056],  [41.6699287, -91.5657186],  [41.6698504, -91.5655926],  [41.6693678, -91.5655868],  [41.6691335, -91.5656365],  [41.6690589, -91.5656956],  [41.6690811, -91.5660279],  [41.6689588, -91.5661382],  [41.6689589, -91.5659353],  [41.6687143, -91.5653514],  [41.6686579, -91.5652259],  [41.6686977, -91.5651447],  [41.6684702, -91.5646041],  [41.668249, -91.5640808],  [41.6680077, -91.5635102],  [41.6677481, -91.5628945],  [41.6675282, -91.5623704],  [41.6673105, -91.5618437],  [41.6671463, -91.5614441],  [41.6670405, -91.5614193],  [41.6669125, -91.5610378],  [41.666668, -91.5605139],  [41.6666244, -91.5604284],  [41.6666939, -91.560261],  [41.6664426, -91.5596888],  [41.666224, -91.5591573],  [41.6661064, -91.5591316],  [41.6659225, -91.5585525],  [41.6658498, -91.5580998],  [41.665722, -91.5579575],  [41.6657015, -91.5578762],  [41.6657392, -91.5577557],  [41.6656577, -91.5576997],  [41.6654766, -91.5571462],  [41.6655065, -91.5570253],  [41.6654567, -91.5569508],  [41.6654555, -91.5566788],  [41.6653196, -91.556227],  [41.6653173, -91.5558184],  [41.6652719, -91.5556433],  [41.6651919, -91.5553133],  [41.6651403, -91.5552619],  [41.665133, -91.5551893],  [41.6650774, -91.5551253],  [41.6650675, -91.555064],  [41.6649993, -91.5550004],  [41.6646679, -91.5545345],  [41.6643707, -91.5542086],  [41.6641472, -91.5536864],  [41.6638949, -91.5532408],  [41.6638341, -91.5531819],  [41.6637341, -91.5529536],  [41.6637254, -91.5527166],  [41.6637915, -91.552619],  [41.6636727, -91.5520111],  [41.6635603, -91.5514176],  [41.6634702, -91.5509296],  [41.6633496, -91.5508736],  [41.6632883, -91.5505663],  [41.6631116, -91.5501994],  [41.66274, -91.5498778],  [41.6625393, -91.5496193],  [41.6625036, -91.5494992],  [41.6623758, -91.5493621],  [41.6622843, -91.5491547],  [41.6623061, -91.5490448],  [41.6623768, -91.5489087],  [41.6625786, -91.5488009],  [41.6627613, -91.5482359],  [41.6629621, -91.5476812],  [41.6629152, -91.5475458],  [41.6631193, -91.5469734],  [41.6632594, -91.5463502],  [41.6632431, -91.5462896],  [41.6633296, -91.5458506],  [41.6633084, -91.5452375],  [41.6632738, -91.5451842],  [41.6632201, -91.5445873],  [41.6632074, -91.5445027],  [41.6633267, -91.5444143],  [41.6632879, -91.5439187],  [41.6630776, -91.5439725],  [41.6630037, -91.5438004],  [41.6628458, -91.5437192],  [41.6626849, -91.5438538],  [41.6624524, -91.5438969],  [41.6623768, -91.5436101],  [41.6618959, -91.5436842],  [41.6617382, -91.5436899],  [41.6614978, -91.5434808],  [41.6612956, -91.5430059],  [41.6612532, -91.5424377],  [41.6612633, -91.5417733],  [41.6611389, -91.5416447],  [41.6611298, -91.5415364],  [41.661158, -91.541474],  [41.6611617, -91.5413811],  [41.6611308, -91.5413393],  [41.6612337, -91.5407069],  [41.6612528, -91.5403011],  [41.6612004, -91.5396959],  [41.6611729, -91.5390915],  [41.6611867, -91.5390169],  [41.6611264, -91.5388148],  [41.6611227, -91.5387304],  [41.6612824, -91.5386479],  [41.6612857, -91.5381514],  [41.6611956, -91.5380888],  [41.6612055, -91.5377475],  [41.6614896, -91.5376425],  [41.6618806, -91.5376574],  [41.662295, -91.5376434],  [41.6623024, -91.5376616],  [41.6624622, -91.5375945],  [41.6624956, -91.5371629],  [41.6625285, -91.5365535],  [41.6625622, -91.5359277],  [41.6625671, -91.5355138],  [41.6625158, -91.5353413],  [41.6625484, -91.5352328],  [41.6626414, -91.53518],  [41.6626689, -91.5352276],  [41.6626718, -91.5352323], ];
var line_13 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_13);
      
      var latLngs = [ [41.6626713, -91.5352295],  [41.6626773, -91.5352421],  [41.6627297, -91.5358615],  [41.6628097, -91.5361437],  [41.6632957, -91.5361109],  [41.6635421, -91.5360789],  [41.6637639, -91.5364075],  [41.6638471, -91.5368461],  [41.6638406, -91.5369531],  [41.6636341, -91.5370684],  [41.6636369, -91.5375796],  [41.6631249, -91.5376048],  [41.6626107, -91.5376281],  [41.6621024, -91.5376487],  [41.661638, -91.5376669],  [41.6614534, -91.5376741],  [41.661287, -91.5379697],  [41.6612827, -91.5386019],  [41.6612785, -91.539224],  [41.6612752, -91.5398954],  [41.6612743, -91.5401201],  [41.6613685, -91.5402133],  [41.6613393, -91.5406654],  [41.6613635, -91.540729],  [41.6613618, -91.5408298],  [41.6613206, -91.5409521],  [41.6612902, -91.5415762],  [41.6612949, -91.5416533],  [41.6612636, -91.5417302],  [41.6612622, -91.5418883],  [41.6612943, -91.5419623],  [41.6613089, -91.5426076],  [41.6613033, -91.5427633],  [41.661271, -91.5427928],  [41.6613083, -91.5430329],  [41.6613632, -91.5431189],  [41.6613798, -91.5432039],  [41.66175, -91.5436141],  [41.6622139, -91.543616],  [41.6626759, -91.5435758],  [41.6629622, -91.5435291],  [41.6631339, -91.543608],  [41.6631781, -91.5436614],  [41.663173, -91.5436846],  [41.6633004, -91.5439782],  [41.6633366, -91.5446505],  [41.6633629, -91.545295],  [41.6633517, -91.5459566],  [41.6632693, -91.5466418],  [41.6630973, -91.5473003],  [41.6628898, -91.5478807],  [41.6626733, -91.5484841],  [41.6625338, -91.5490717],  [41.6628793, -91.5495958],  [41.6633611, -91.5501451],  [41.6633854, -91.5501977],  [41.6635272, -91.5504403],  [41.6635973, -91.5509377],  [41.6635817, -91.5510636],  [41.663612, -91.551262],  [41.6636522, -91.5513543],  [41.6637168, -91.5517268],  [41.6637132, -91.5518029],  [41.663744, -91.5518702],  [41.6637535, -91.5520371],  [41.663815, -91.5521703],  [41.6638463, -91.5523479],  [41.6638409, -91.5524684],  [41.6639737, -91.5530175],  [41.6639935, -91.5533044],  [41.6640189, -91.5533787],  [41.6641888, -91.5535559],  [41.6644184, -91.5540434],  [41.6646854, -91.5544099],  [41.6650154, -91.5549104],  [41.665285, -91.555519],  [41.6654771, -91.5559897],  [41.66551, -91.5562637],  [41.665661, -91.5569043],  [41.665797, -91.5575134],  [41.6660368, -91.5583002],  [41.6662411, -91.558876],  [41.66648, -91.559505],  [41.6667084, -91.5601016],  [41.6669161, -91.5606486],  [41.6670479, -91.5612048],  [41.667282, -91.5617743],  [41.667524, -91.5623603],  [41.6675596, -91.5624452],  [41.6675664, -91.5625493],  [41.6678132, -91.5631679],  [41.6679153, -91.5634071],  [41.6679286, -91.5635107],  [41.668236, -91.5637418],  [41.6683695, -91.5640843],  [41.6685299, -91.5646506],  [41.668669, -91.5649559],  [41.6688487, -91.5654858],  [41.6688391, -91.5655254],  [41.6692899, -91.5653811],  [41.6694678, -91.565317],  [41.6699535, -91.56535],  [41.6704527, -91.5653589],  [41.6709551, -91.5653679],  [41.6714514, -91.5653769],  [41.6718195, -91.565487],  [41.672274, -91.5655964],  [41.6727379, -91.565629],  [41.6730475, -91.5656187],  [41.6735068, -91.5657292],  [41.6735681, -91.5658635],  [41.6736193, -91.566503],  [41.6736748, -91.567174],  [41.673729, -91.5677894],  [41.6737672, -91.5680529],  [41.6738554, -91.5682077],  [41.6738993, -91.5685732],  [41.6738173, -91.568677],  [41.6738838, -91.5693252],  [41.673944, -91.5699762],  [41.6740045, -91.570637],  [41.6740445, -91.5710734],  [41.6741988, -91.5711215],  [41.6742562, -91.57176],  [41.6742993, -91.5723952],  [41.6743838, -91.5729923],  [41.6744546, -91.5736584],  [41.6744675, -91.5739741],  [41.6743372, -91.5740496],  [41.6743954, -91.5746072],  [41.6744986, -91.5746574],  [41.6745871, -91.5750926],  [41.6746204, -91.5755509],  [41.6746879, -91.5759234],  [41.6747208, -91.5765406],  [41.6747838, -91.5771468],  [41.6748787, -91.57781],  [41.6749414, -91.5780326],  [41.6747936, -91.5781786],  [41.6748026, -91.5782103],  [41.675195, -91.5782185],  [41.6752475, -91.5781377],  [41.6756574, -91.5781085],  [41.6757345, -91.5781813],  [41.6761949, -91.5781495],  [41.6767533, -91.5781215],  [41.6772524, -91.5781054],  [41.6775434, -91.5780959],  [41.6777435, -91.5780358],  [41.6781221, -91.5780773],  [41.6782048, -91.5781715],  [41.6782467, -91.5781524],  [41.6783306, -91.5780202],  [41.6784507, -91.5780855],  [41.6786373, -91.5781172],  [41.6790465, -91.578011],  [41.6790832, -91.5779178],  [41.6790479, -91.5778817],  [41.6791347, -91.577931],  [41.679359, -91.5779351],  [41.6795093, -91.5779787],  [41.6795753, -91.5780347],  [41.6800403, -91.5780216],  [41.6804626, -91.5780168],  [41.6805034, -91.5779592],  [41.6808021, -91.5779995],  [41.6809136, -91.5781747],  [41.6810289, -91.5787812],  [41.6811577, -91.5793629],  [41.6812555, -91.5796764],  [41.681492, -91.5798944],  [41.68155, -91.5799158],  [41.6816968, -91.5800684],  [41.6816875, -91.5801601],  [41.6817575, -91.580318],  [41.6821922, -91.5806447],  [41.6826042, -91.5808366],  [41.6831389, -91.5809099],  [41.6836102, -91.5809709],  [41.684083, -91.5810353],  [41.684544, -91.5810814],  [41.6850501, -91.5811258],  [41.685338, -91.5811511],  [41.6853963, -91.5810988],  [41.6857549, -91.5811278],  [41.685793, -91.581224],  [41.6861803, -91.5813501],  [41.6862388, -91.5812661],  [41.6867083, -91.5814133],  [41.6868716, -91.581438],  [41.686919, -91.5814697],  [41.686946, -91.5815855],  [41.6870345, -91.5816147],  [41.6871023, -91.5815505],  [41.687569, -91.5816563],  [41.688041, -91.5816657],  [41.6884923, -91.5817492],  [41.6889756, -91.5817844],  [41.689353, -91.5818031],  [41.6894128, -91.581846],  [41.689932, -91.5818742],  [41.6903949, -91.5819686],  [41.690821, -91.582203],  [41.6910962, -91.5823506],  [41.6911874, -91.58234],  [41.6913868, -91.582399],  [41.6915045, -91.5824821],  [41.6917716, -91.5825355],  [41.6918317, -91.5825066],  [41.6923215, -91.5825642],  [41.6927937, -91.5825405],  [41.6932941, -91.5825147],  [41.6937527, -91.5825261],  [41.6941977, -91.5826376],  [41.6944173, -91.5826264],  [41.6948855, -91.5828121],  [41.6949423, -91.5834161],  [41.6948136, -91.5834883],  [41.6947349, -91.5839632],  [41.6948619, -91.5840923],  [41.6948223, -91.5842354],  [41.6947477, -91.5848716],  [41.6947183, -91.584996],  [41.694746, -91.58525],  [41.6948455, -91.5854767],  [41.6949583, -91.5859624],  [41.6951912, -91.586276],  [41.6954114, -91.5865167],  [41.6955836, -91.5868186],  [41.6957093, -91.5869409],  [41.695692, -91.5871197],  [41.6959151, -91.5877999],  [41.6960604, -91.5883799],  [41.6962189, -91.5890127],  [41.6963052, -91.5896862],  [41.696317, -91.5903201],  [41.6964467, -91.5904232],  [41.6964339, -91.590625],  [41.6964773, -91.5907008],  [41.6964186, -91.5913126],  [41.6964185, -91.5913948],  [41.6963073, -91.5914702],  [41.6963016, -91.591652],  [41.6964444, -91.5917284],  [41.696432, -91.5920642],  [41.6962614, -91.5925121],  [41.6961304, -91.5926524],  [41.6960295, -91.592646],  [41.6958032, -91.5929051],  [41.6958133, -91.593003],  [41.6956684, -91.5932849],  [41.6961369, -91.5934057],  [41.6965529, -91.5937016],  [41.696994, -91.5939664],  [41.6974219, -91.5941932],  [41.6979171, -91.5942441],  [41.6983742, -91.5943412],  [41.6988635, -91.5944963],  [41.6989113, -91.5945324],  [41.6990141, -91.5945152],  [41.6995167, -91.5946383],  [41.6997297, -91.5947078],  [41.699872, -91.5947117],  [41.700305, -91.594888],  [41.7007071, -91.5951861],  [41.7009179, -91.5957424],  [41.7011215, -91.5962138],  [41.7014349, -91.5963216],  [41.7016455, -91.596748],  [41.7017322, -91.5970782],  [41.7018536, -91.5972763],  [41.7020573, -91.5973846],  [41.7021673, -91.5974111],  [41.7022823, -91.5974],  [41.7023783, -91.5973445],  [41.702446, -91.597251],  [41.7025289, -91.5971992],  [41.7028115, -91.5966714],  [41.702971, -91.5965009],  [41.7034029, -91.5963578],  [41.703825, -91.5966169],  [41.7039533, -91.596658],  [41.7041633, -91.5965241],  [41.7042447, -91.5965334],  [41.7043525, -91.5967992],  [41.704415, -91.5971418],  [41.7045147, -91.5972878],  [41.7045295, -91.5973663],  [41.7046782, -91.5978029],  [41.7047339, -91.5983066],  [41.7046419, -91.5983917],  [41.704684, -91.5987738],  [41.7049051, -91.5993658],  [41.7051229, -91.5998977],  [41.7052687, -91.6001661],  [41.7056348, -91.6006229],  [41.7059704, -91.6010391],  [41.7060786, -91.6011731],  [41.7061746, -91.6011399],  [41.7062795, -91.6013446],  [41.7063618, -91.6019657],  [41.7063866, -91.6020248],  [41.7065728, -91.6021518],  [41.7066985, -91.6022802],  [41.7067577, -91.6023046],  [41.7069853, -91.6025372],  [41.707012, -91.6026133],  [41.7073899, -91.6029434],  [41.7078083, -91.6033436],  [41.7079563, -91.6035061],  [41.7080606, -91.6040038],  [41.7080916, -91.6045979],  [41.7082732, -91.6048295],  [41.708653, -91.6050055],  [41.7085222, -91.6051836],  [41.7085114, -91.6057932],  [41.7085003, -91.6064225],  [41.7084884, -91.6070988],  [41.7084811, -91.607512],  [41.7085722, -91.6077408],  [41.7088968, -91.60779],  [41.7088657, -91.6078406],  [41.7087625, -91.6079565],  [41.7086448, -91.6084405],  [41.7084645, -91.6085425],  [41.7084491, -91.6092502],  [41.7084248, -91.609933],  [41.7084236, -91.6100303],  [41.7079169, -91.6100436],  [41.7073925, -91.6100574],  [41.7069731, -91.6100685],  [41.706856, -91.6101096],  [41.7063681, -91.6101306],  [41.7061628, -91.6101678],  [41.7061043, -91.610139],  [41.7058857, -91.610169],  [41.7053882, -91.610189],  [41.7051551, -91.6101727],  [41.7050846, -91.6101965],  [41.70501, -91.6101297],  [41.7045439, -91.6101497],  [41.7040836, -91.610177],  [41.7040358, -91.6101679],  [41.7040373, -91.6098646],  [41.704021, -91.6098588],  [41.7040312, -91.6098713],  [41.7039905, -91.6098623], ];
var line_14 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_14);
      
      var latLngs = [ [41.7040486, -91.6099079],  [41.7040816, -91.6099218],  [41.704123, -91.6100678],  [41.704602, -91.6100777],  [41.7049841, -91.6099608],  [41.7053568, -91.6101385],  [41.7055189, -91.6101356],  [41.705576, -91.6100838],  [41.7060302, -91.6100311],  [41.7064926, -91.6099988],  [41.7069777, -91.6099815],  [41.7074355, -91.6099269],  [41.7079444, -91.6099018],  [41.7081071, -91.6099326],  [41.7083454, -91.6098998],  [41.7084221, -91.6098233],  [41.7084416, -91.609319],  [41.7083908, -91.609253],  [41.7083951, -91.608614],  [41.708395, -91.6083746],  [41.7085134, -91.6084228],  [41.7084781, -91.6083827],  [41.7085376, -91.6083071],  [41.7084871, -91.6083233],  [41.7083937, -91.6082265],  [41.7083181, -91.6085418],  [41.7083661, -91.6082908],  [41.7083607, -91.6080597],  [41.7083268, -91.607954],  [41.7083234, -91.6078604],  [41.7084328, -91.6077632],  [41.7084311, -91.6075727],  [41.708334, -91.6074688],  [41.7083219, -91.6068372],  [41.7083116, -91.6062762],  [41.7084184, -91.6061619],  [41.7084126, -91.6055267],  [41.7084071, -91.6049138],  [41.7082699, -91.6048267],  [41.7080957, -91.6045139],  [41.7080166, -91.6038087],  [41.7079157, -91.6034591],  [41.7077011, -91.6032216],  [41.7075769, -91.6031451],  [41.7075201, -91.6030778],  [41.7074519, -91.6030645],  [41.7071507, -91.6027869],  [41.7070879, -91.6027818],  [41.7068354, -91.6025657],  [41.7067209, -91.6024268],  [41.7063896, -91.6021711],  [41.7063007, -91.6020589],  [41.7062847, -91.6019244],  [41.706248, -91.6018846],  [41.7062128, -91.6012896],  [41.7061692, -91.6011948],  [41.7060829, -91.6011785],  [41.7060877, -91.6010087],  [41.7057011, -91.6005719],  [41.7055803, -91.6005552],  [41.7052478, -91.6001333],  [41.7049808, -91.599571],  [41.7049366, -91.5994512],  [41.7049913, -91.5992991],  [41.7047788, -91.5987523],  [41.7046536, -91.5982574],  [41.7046566, -91.5976112],  [41.704433, -91.5969985],  [41.7043348, -91.5966756],  [41.7042737, -91.596548],  [41.7038909, -91.596469],  [41.7037843, -91.5963514],  [41.7037315, -91.596361],  [41.7035792, -91.5962568],  [41.7032692, -91.5962327],  [41.7029594, -91.5963401],  [41.7028542, -91.5963518],  [41.7026915, -91.5965392],  [41.7026038, -91.596599],  [41.7024393, -91.5968893],  [41.7023428, -91.5971633],  [41.7022193, -91.5973462],  [41.7019986, -91.5974571],  [41.7019099, -91.5974702],  [41.7018592, -91.5975153],  [41.7018211, -91.5974046],  [41.701603, -91.597039],  [41.7015665, -91.5967288],  [41.7014599, -91.5964532],  [41.701423, -91.5964712],  [41.7009718, -91.5962279],  [41.7009675, -91.5961198],  [41.7009236, -91.5960399],  [41.7008076, -91.5956088],  [41.7006848, -91.5953571],  [41.7004256, -91.5950906],  [41.7000005, -91.5948233],  [41.6998047, -91.5947353],  [41.6993289, -91.5946236],  [41.6991774, -91.5945681],  [41.6991223, -91.5945913],  [41.6990761, -91.5945491],  [41.6988175, -91.5944885],  [41.698731, -91.5944961],  [41.6985999, -91.5944196],  [41.698603, -91.5945103],  [41.6984745, -91.5944895],  [41.6984301, -91.594549],  [41.6982979, -91.594512],  [41.6981101, -91.5943917],  [41.6977967, -91.5942304],  [41.6974256, -91.5942615],  [41.6973274, -91.5942226],  [41.6972664, -91.594135],  [41.6967957, -91.5938791],  [41.6966638, -91.5938116],  [41.6964015, -91.5937857],  [41.6962461, -91.5936801],  [41.6959823, -91.593638],  [41.6959254, -91.5935946],  [41.695729, -91.5935842],  [41.6956446, -91.5935689],  [41.6956024, -91.5934432],  [41.6956065, -91.5932285],  [41.6957628, -91.5928961],  [41.6958452, -91.5928556],  [41.6960915, -91.5925652],  [41.696243, -91.5922319],  [41.696303, -91.5916065],  [41.6963186, -91.5908988],  [41.6963169, -91.5902673],  [41.696302, -91.5896484],  [41.6962411, -91.5891226],  [41.6961629, -91.5888471],  [41.6961162, -91.588805],  [41.6960705, -91.5885328],  [41.696089, -91.5883334],  [41.6960268, -91.5881408],  [41.6959827, -91.5878495],  [41.6959498, -91.5877786],  [41.6957945, -91.5872813],  [41.6954542, -91.5867928],  [41.6951735, -91.5863169],  [41.6949906, -91.5860725],  [41.6949572, -91.5859412],  [41.6947707, -91.585575],  [41.6946695, -91.5851051],  [41.6946287, -91.5850927],  [41.6945992, -91.5846822],  [41.6946745, -91.5842571],  [41.6948309, -91.5836743],  [41.694842, -91.5836215],  [41.694833, -91.5835117],  [41.6948626, -91.5833111],  [41.6948697, -91.5829358],  [41.6947909, -91.5828377],  [41.6947011, -91.582818],  [41.6945765, -91.5828772],  [41.6943511, -91.5828513],  [41.6942432, -91.5827907],  [41.6941924, -91.5827901],  [41.6941558, -91.5826631],  [41.6936427, -91.5825488],  [41.693313, -91.582524],  [41.693235, -91.5827491],  [41.692725, -91.5827669],  [41.6922173, -91.5827185],  [41.6917473, -91.582705],  [41.691245, -91.5826174],  [41.6908207, -91.5823919],  [41.6903487, -91.58214],  [41.6899964, -91.5820008],  [41.6899341, -91.582025],  [41.6897219, -91.5819404],  [41.6892766, -91.5820132],  [41.688878, -91.5819047],  [41.6884176, -91.5819132],  [41.6879158, -91.5818776],  [41.6873826, -91.5818568],  [41.6872808, -91.5817992],  [41.6871687, -91.5817955],  [41.6870399, -91.5817494],  [41.6869412, -91.5816742],  [41.6868253, -91.581636],  [41.6867284, -91.5815233],  [41.6862637, -91.5813767],  [41.6857977, -91.5812253],  [41.6853018, -91.5811479],  [41.6848504, -91.5811083],  [41.6843129, -91.5810611],  [41.6837962, -91.5809956],  [41.6833055, -91.5809315],  [41.6828323, -91.5808703],  [41.6823857, -91.5807621],  [41.6819714, -91.5804891],  [41.6819386, -91.5804654],  [41.6818947, -91.5805039],  [41.6818775, -91.580442],  [41.6817764, -91.580412],  [41.6816767, -91.5802886],  [41.681655, -91.580207],  [41.6812484, -91.5799211],  [41.6809963, -91.5796538],  [41.6808567, -91.579034],  [41.6807335, -91.5784162],  [41.6808709, -91.5782767],  [41.6808452, -91.578018],  [41.6803146, -91.5780168],  [41.680075, -91.578015],  [41.6799816, -91.5780888],  [41.6799053, -91.5780835],  [41.6798188, -91.5781398],  [41.6794399, -91.5781048],  [41.6790903, -91.5781752],  [41.6789988, -91.578051],  [41.6785178, -91.5780645],  [41.6779796, -91.5780816],  [41.6775059, -91.5780971],  [41.6770097, -91.5781134],  [41.6764998, -91.5781285],  [41.6760404, -91.5781602],  [41.675518, -91.5781962],  [41.6750337, -91.5782296],  [41.6748125, -91.5782448],  [41.6746843, -91.5776526],  [41.6746387, -91.5771562],  [41.6745255, -91.5769065],  [41.6745097, -91.5764903],  [41.674478, -91.5763397],  [41.6744891, -91.5761521],  [41.674475, -91.5754009],  [41.6743954, -91.5746076],  [41.6743125, -91.5738295],  [41.6743027, -91.5737419],  [41.6742531, -91.5736638],  [41.6742287, -91.5732442],  [41.6742268, -91.5730415],  [41.6742472, -91.5729553],  [41.6742371, -91.5727423],  [41.6741432, -91.5720624],  [41.6740868, -91.5715297],  [41.674092, -91.5714073],  [41.6740126, -91.5707247],  [41.6739519, -91.5700623],  [41.6738902, -91.5693893],  [41.6738284, -91.5687843],  [41.673762, -91.5681478],  [41.6737135, -91.5675675],  [41.6738565, -91.5673385],  [41.6738403, -91.5672415],  [41.6736242, -91.5669359],  [41.6735093, -91.5665277],  [41.673452, -91.566375],  [41.6734309, -91.5662066],  [41.6734478, -91.5658602],  [41.6732771, -91.5657305],  [41.6727827, -91.5657398],  [41.6724016, -91.5657024],  [41.6722873, -91.5656575],  [41.6718301, -91.5656281],  [41.6713619, -91.5656197],  [41.6708889, -91.5656111],  [41.6703975, -91.5656023],  [41.6698912, -91.5655933],  [41.6694038, -91.565585],  [41.6691615, -91.5656195],  [41.66891, -91.5658407],  [41.6690614, -91.5661136],  [41.6689046, -91.56606],  [41.6686998, -91.5654627],  [41.6686504, -91.5653373],  [41.6686416, -91.5652422],  [41.668727, -91.5648132],  [41.6685951, -91.5645032],  [41.6684384, -91.5643766],  [41.6683827, -91.5642935],  [41.6682764, -91.564294],  [41.6680623, -91.5638484],  [41.6680469, -91.5637592],  [41.6678006, -91.5631991],  [41.66778, -91.5630199],  [41.6676558, -91.5626598],  [41.6675827, -91.5625351],  [41.6675637, -91.5624355],  [41.6673174, -91.5618646],  [41.6671062, -91.5613685],  [41.6670345, -91.5611088],  [41.6667681, -91.5605433],  [41.6665244, -91.5599766],  [41.6662655, -91.5593968],  [41.666154, -91.5591427],  [41.6659932, -91.55888],  [41.6659389, -91.5587288],  [41.6659892, -91.5585664],  [41.6659786, -91.5584349],  [41.6657679, -91.5578996],  [41.6656212, -91.557364],  [41.6655277, -91.5571058],  [41.6655267, -91.5569069],  [41.665442, -91.5567322],  [41.6653601, -91.5561942],  [41.6653959, -91.5557385],  [41.6653336, -91.5553338],  [41.664976, -91.5554005],  [41.6650194, -91.5553242],  [41.6649907, -91.5552093],  [41.6649217, -91.5551289],  [41.6648705, -91.5551332],  [41.6646393, -91.5547368],  [41.6645127, -91.5546512],  [41.6643469, -91.5540753],  [41.6642718, -91.5538195],  [41.6641045, -91.5536608],  [41.6641441, -91.5536427],  [41.6640218, -91.5535279],  [41.6639863, -91.55352],  [41.6639954, -91.5532506],  [41.6638915, -91.5527573],  [41.6638138, -91.5527289],  [41.6637464, -91.5523968],  [41.6638267, -91.5523144],  [41.6637954, -91.5521954],  [41.6637727, -91.5519944],  [41.6636869, -91.5518565],  [41.66354, -91.5512432],  [41.6634505, -91.5508325],  [41.663457, -91.550744],  [41.6633886, -91.5504199],  [41.6632612, -91.5502095],  [41.6631882, -91.5501403],  [41.6632204, -91.5499906],  [41.6628476, -91.5495616],  [41.6625534, -91.5491783],  [41.6625326, -91.5490764],  [41.6626815, -91.5484606],  [41.6629014, -91.5478486],  [41.6630248, -91.5475046],  [41.6631869, -91.5469068],  [41.6632277, -91.5467148],  [41.6632224, -91.5464867],  [41.6632742, -91.5462485],  [41.6632782, -91.5459973],  [41.6633384, -91.5456747],  [41.6633158, -91.5453591],  [41.6633194, -91.545194],  [41.6632482, -91.544814],  [41.6632581, -91.5442774],  [41.6633155, -91.5441485],  [41.6632892, -91.5439232],  [41.6631759, -91.5436884],  [41.6629565, -91.5435526],  [41.6624565, -91.5435996],  [41.6620012, -91.5436668],  [41.6619533, -91.5439811],  [41.6619017, -91.5436833],  [41.6616967, -91.5436739],  [41.6615636, -91.5435819],  [41.6613896, -91.5432918],  [41.6612842, -91.5429523],  [41.6612554, -91.5423277],  [41.6612639, -91.541698],  [41.6612689, -91.5410622],  [41.6612702, -91.5404294],  [41.6611874, -91.540178],  [41.6612035, -91.5400343],  [41.6611725, -91.5397632],  [41.6613068, -91.5396815],  [41.6613171, -91.5394984],  [41.6612888, -91.5393743],  [41.6612839, -91.5392172],  [41.6615414, -91.5391736],  [41.6615881, -91.5390965],  [41.6614905, -91.5388572],  [41.6615508, -91.5387267],  [41.6614819, -91.538588],  [41.6612837, -91.538459],  [41.6612884, -91.5377675],  [41.6614535, -91.5376741],  [41.6617016, -91.5376644],  [41.6622423, -91.537746],  [41.6623455, -91.5378516],  [41.6623812, -91.5378345],  [41.66243, -91.5376358],  [41.662512, -91.5376326],  [41.6624943, -91.5370098],  [41.6624927, -91.5369531],  [41.6626004, -91.5369218],  [41.6625629, -91.5362953],  [41.6626096, -91.5360169],  [41.6627089, -91.5359019],  [41.6628549, -91.5358388],  [41.6628791, -91.5358026],  [41.6628499, -91.5357921],  [41.6628904, -91.5357746],  [41.6628305, -91.53569],  [41.6628108, -91.5355938],  [41.6627641, -91.5355426],  [41.662766, -91.5352384],  [41.6627711, -91.535209],  [41.6627507, -91.5352294],  [41.6627523, -91.5352308], ];
var line_15 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_15);
      
      var latLngs = [ [41.6624776, -91.5352044],  [41.6624763, -91.5351919],  [41.6624922, -91.5351113],  [41.6625936, -91.5353193],  [41.6625422, -91.5356813],  [41.6625854, -91.5362087],  [41.6627063, -91.5363218],  [41.6629961, -91.5363088],  [41.6631716, -91.5362684],  [41.6634103, -91.5363628],  [41.6636228, -91.5362718],  [41.6636821, -91.5363397],  [41.6636078, -91.5367904],  [41.6635134, -91.5370562],  [41.6634947, -91.5372164],  [41.6633094, -91.5373193],  [41.6628432, -91.537307],  [41.6625489, -91.5372672],  [41.6618644, -91.5364337],  [41.662257, -91.5369995],  [41.6622722, -91.5370316],  [41.6622949, -91.5370252],  [41.6623269, -91.5369335],  [41.6622181, -91.5367848],  [41.6622521, -91.5369583],  [41.662399, -91.5374515],  [41.6621324, -91.5375021],  [41.6621053, -91.537424],  [41.6618582, -91.5375124],  [41.6618529, -91.5375863],  [41.661754, -91.5375736],  [41.6616691, -91.5376657],  [41.6612987, -91.5376679],  [41.6612847, -91.5383068],  [41.661281, -91.5388505],  [41.6613182, -91.5390921],  [41.6612648, -91.539206],  [41.661237, -91.5398504],  [41.6612918, -91.540214],  [41.6612768, -91.5406076],  [41.6612114, -91.5408119],  [41.6610724, -91.5407666],  [41.6611272, -91.5409759],  [41.6611162, -91.541222],  [41.6611885, -91.5415472],  [41.6611718, -91.5418567],  [41.6612327, -91.5419699],  [41.6612602, -91.5419735],  [41.6611669, -91.5420724],  [41.6612094, -91.5423486],  [41.6611656, -91.5428894],  [41.6614293, -91.5433894],  [41.6618249, -91.5437431],  [41.6622926, -91.5437666],  [41.6625187, -91.5436932],  [41.6628007, -91.5439889],  [41.6628062, -91.5439584],  [41.6630222, -91.5440053],  [41.6631679, -91.5441233],  [41.6632537, -91.5445372],  [41.6632097, -91.5449028],  [41.6633497, -91.5449619],  [41.6633634, -91.5453131],  [41.6630731, -91.545412],  [41.6631282, -91.5460648],  [41.6631712, -91.5464596],  [41.6630939, -91.5470766],  [41.6631275, -91.5472122],  [41.6629, -91.5478526],  [41.662698, -91.5484135],  [41.6625669, -91.5488583],  [41.6625337, -91.5490719],  [41.6625929, -91.5492375],  [41.6628684, -91.549584],  [41.6628574, -91.5497668],  [41.6630628, -91.5499396],  [41.6631483, -91.5500647],  [41.6632264, -91.550084],  [41.6633772, -91.5504056],  [41.6634222, -91.550546],  [41.6634056, -91.5506294],  [41.6634662, -91.5509014],  [41.6634811, -91.5512799],  [41.6635705, -91.5518488],  [41.6636536, -91.5519106],  [41.6637049, -91.5521816],  [41.6636534, -91.55229],  [41.663795, -91.5529072],  [41.6638844, -91.5530266],  [41.6639007, -91.5531393],  [41.6640166, -91.5533598],  [41.6642101, -91.5535774],  [41.6644428, -91.5539599],  [41.6644573, -91.5540919],  [41.6647594, -91.5545396],  [41.6650657, -91.5550119],  [41.6652918, -91.5555364],  [41.6653881, -91.5562467],  [41.6654018, -91.5564107],  [41.6655785, -91.5564889],  [41.6657094, -91.5571269],  [41.665854, -91.5577442],  [41.6660427, -91.5583168],  [41.6662636, -91.5589356],  [41.6660148, -91.5592336],  [41.6660803, -91.5594039],  [41.6661936, -91.5595464],  [41.6662199, -91.559756],  [41.6663348, -91.5599304],  [41.6665807, -91.5604641],  [41.6667938, -91.5610168],  [41.6670341, -91.5615875],  [41.6672668, -91.5621436],  [41.6673338, -91.5623906],  [41.6675908, -91.5629192],  [41.6676199, -91.5630136],  [41.6677346, -91.5632412],  [41.6677117, -91.5633088],  [41.6677244, -91.563379],  [41.6680082, -91.5639608],  [41.6682978, -91.5645008],  [41.6684319, -91.5648272],  [41.6684493, -91.5649462],  [41.6684128, -91.5649675],  [41.6685183, -91.5651969],  [41.6685702, -91.5652457],  [41.6686399, -91.5654107],  [41.668793, -91.5656333],  [41.66876, -91.5657461],  [41.6689298, -91.5657099],  [41.6690422, -91.5660499],  [41.6689883, -91.5661297],  [41.6690624, -91.5661065],  [41.6690254, -91.5660851],  [41.6690549, -91.5661606],  [41.6692508, -91.5659927],  [41.6694132, -91.5657955],  [41.6696242, -91.5657065],  [41.669673, -91.5655894],  [41.6701545, -91.565598],  [41.6706433, -91.5656067],  [41.6711214, -91.5656153],  [41.671611, -91.5656241],  [41.6720948, -91.5656329],  [41.6725465, -91.5656411],  [41.673057, -91.5656649],  [41.6735065, -91.5657292],  [41.6737031, -91.5657789],  [41.6735808, -91.5660222],  [41.6736303, -91.5666406],  [41.6736842, -91.5672804],  [41.673656, -91.5675876],  [41.6737474, -91.5682298],  [41.6739275, -91.5688362],  [41.6739502, -91.5689838],  [41.6739313, -91.5690468],  [41.6739691, -91.5693882],  [41.6739576, -91.5694607],  [41.6740324, -91.5697766],  [41.6740461, -91.570091],  [41.6739917, -91.5702299],  [41.6739843, -91.5704386],  [41.6740403, -91.5704589],  [41.6740783, -91.570524],  [41.6740418, -91.570628],  [41.6740781, -91.5708929],  [41.6741481, -91.5712814],  [41.67413, -91.5716325],  [41.6740983, -91.5717497],  [41.6742354, -91.5723883],  [41.6742522, -91.5724328],  [41.6742458, -91.5725947],  [41.6742806, -91.5727934],  [41.6742353, -91.5730107],  [41.6742918, -91.5731353],  [41.6742399, -91.5733565],  [41.6742069, -91.5733981],  [41.6742385, -91.5734261],  [41.674228, -91.5734886],  [41.6742829, -91.5735447],  [41.6743569, -91.5742387],  [41.674436, -91.5742849],  [41.674424, -91.5744559],  [41.6744726, -91.5745781],  [41.6744195, -91.5748381],  [41.6744535, -91.5751831],  [41.6745269, -91.5752707],  [41.6745002, -91.5754929],  [41.6745291, -91.5756582],  [41.6745653, -91.5762891],  [41.6745837, -91.5766607],  [41.6746458, -91.5770173],  [41.6746491, -91.5775736],  [41.6747782, -91.578001],  [41.6747543, -91.5780377],  [41.6748123, -91.5782447],  [41.6749223, -91.5784691],  [41.6751387, -91.578298],  [41.6752651, -91.5782624],  [41.675377, -91.5783302],  [41.6754371, -91.5782233],  [41.6757561, -91.5781798],  [41.6758137, -91.5781446],  [41.6759385, -91.5781538],  [41.6760716, -91.5780753],  [41.6761456, -91.5780721],  [41.6762011, -91.5780369],  [41.676327, -91.5781327],  [41.6764556, -91.5781084],  [41.6765142, -91.5780388],  [41.6766706, -91.5780488],  [41.6767366, -91.5780873],  [41.6769871, -91.5780665],  [41.6770565, -91.5781353],  [41.6771599, -91.578032],  [41.6772683, -91.578027],  [41.6773171, -91.578066],  [41.6776717, -91.5781079],  [41.677839, -91.5780508],  [41.6779408, -91.5781851],  [41.6780525, -91.5782237],  [41.67816, -91.5781885],  [41.6782293, -91.5782395],  [41.6782225, -91.5783233],  [41.6782692, -91.5783223],  [41.6782952, -91.5783653],  [41.6783641, -91.578365],  [41.6784339, -91.5784196],  [41.6784692, -91.5783069],  [41.6785543, -91.5782952],  [41.6786085, -91.5783244],  [41.6786764, -91.5782395],  [41.6787758, -91.5782189],  [41.6788622, -91.5782825],  [41.6789952, -91.5782468],  [41.6790398, -91.578304],  [41.6791123, -91.5783404],  [41.6792335, -91.5783193],  [41.6792882, -91.5780428],  [41.6797494, -91.5780298],  [41.6802085, -91.5780169],  [41.6803471, -91.5780168],  [41.6803943, -91.5782443],  [41.6804457, -91.5782386],  [41.6808375, -91.5783464],  [41.6808665, -91.5784347],  [41.6809141, -91.5784295],  [41.6809749, -91.5785251],  [41.6809561, -91.5786932],  [41.6810738, -91.5789239],  [41.681034, -91.5791206],  [41.6812109, -91.5797271],  [41.6812296, -91.5799615],  [41.6813014, -91.5801182],  [41.6814405, -91.5801059],  [41.6815531, -91.5800216],  [41.6816851, -91.5801568],  [41.6817635, -91.5803341],  [41.682206, -91.5806544],  [41.6824639, -91.5807995],  [41.6829032, -91.5809264],  [41.6834305, -91.5809476],  [41.6840358, -91.5810288],  [41.6845101, -91.5810784],  [41.6850058, -91.581122],  [41.6854662, -91.5811628],  [41.6859199, -91.5812199],  [41.6860739, -91.5813143],  [41.6864032, -91.5813928],  [41.6865059, -91.5814757],  [41.6865723, -91.5814868],  [41.6866093, -91.5815376],  [41.6867159, -91.5815606],  [41.6867045, -91.5815171],  [41.6871886, -91.5816593],  [41.687459, -91.5817363],  [41.687458, -91.5819631],  [41.6874963, -91.5819792],  [41.6875803, -91.5818828],  [41.6877078, -91.5818803],  [41.687991, -91.5818085],  [41.6884574, -91.5818466],  [41.6888025, -91.5818343],  [41.6891298, -91.581892],  [41.6891929, -91.5818807],  [41.689239, -91.5819143],  [41.6893056, -91.5818431],  [41.689771, -91.5818639],  [41.6902216, -91.5819167],  [41.6906655, -91.5821175],  [41.6911328, -91.5823694],  [41.6914658, -91.5824973],  [41.6919307, -91.582535],  [41.6924403, -91.5825305],  [41.6929458, -91.5825261],  [41.6934266, -91.5825248],  [41.693704, -91.5825606],  [41.6937467, -91.5827541],  [41.6937899, -91.5828],  [41.693849, -91.5828064],  [41.6939292, -91.5826113],  [41.6943787, -91.5827141],  [41.6947915, -91.5828085],  [41.6947983, -91.5829205],  [41.6948383, -91.5829297],  [41.6949104, -91.5830759],  [41.6948748, -91.5835129],  [41.6947957, -91.5835915],  [41.6946896, -91.5842763],  [41.6946704, -91.5849289],  [41.6948315, -91.5855778],  [41.6951196, -91.5861606],  [41.6954414, -91.5866346],  [41.6957235, -91.5871953],  [41.695918, -91.5878117],  [41.6960777, -91.5884488],  [41.6962309, -91.5890604],  [41.6963036, -91.5896677],  [41.6963171, -91.5903232],  [41.6963189, -91.591002],  [41.696301, -91.5916736],  [41.6962489, -91.5922135],  [41.6960555, -91.5926167],  [41.6956988, -91.5930301],  [41.695641, -91.5930665],  [41.6956546, -91.5931275],  [41.6956065, -91.5932829],  [41.6960428, -91.5935176],  [41.6964542, -91.5938088],  [41.6969102, -91.594003],  [41.6973406, -91.5942124],  [41.6977679, -91.5943538],  [41.6982376, -91.5944197],  [41.6985555, -91.5944457],  [41.6988764, -91.5945407],  [41.6990272, -91.5945502],  [41.6991698, -91.594666],  [41.6993924, -91.5947686],  [41.6995847, -91.5948918],  [41.7000088, -91.5949132],  [41.7001806, -91.594969],  [41.7003287, -91.5950973],  [41.7003619, -91.5950986],  [41.7003889, -91.5951443],  [41.7005192, -91.5951897],  [41.7005595, -91.5952345],  [41.7005665, -91.5952995],  [41.7006911, -91.5954208],  [41.7007426, -91.595435],  [41.7008098, -91.595418],  [41.7007846, -91.5955157],  [41.7008395, -91.5955882],  [41.7008632, -91.5956768],  [41.7009006, -91.595712],  [41.7010831, -91.5962857],  [41.7014494, -91.5964122],  [41.7015533, -91.5966114],  [41.7016829, -91.5970265],  [41.7018988, -91.5973261],  [41.7019902, -91.597389],  [41.7020885, -91.5973838],  [41.7024372, -91.5974733],  [41.7025338, -91.5975352],  [41.7026114, -91.5974659],  [41.702681, -91.5972543],  [41.702789, -91.5972084],  [41.7029349, -91.5969341],  [41.702963, -91.5968407],  [41.702934, -91.5966547],  [41.702992, -91.5966404],  [41.7030345, -91.5965668],  [41.7030829, -91.5965915],  [41.7034074, -91.5964659],  [41.7034212, -91.596451],  [41.7034452, -91.5964931],  [41.7039164, -91.5965342],  [41.7043119, -91.5965119],  [41.7045094, -91.597124],  [41.7045399, -91.597269],  [41.7045324, -91.597419],  [41.7046193, -91.5976314],  [41.7046892, -91.5979518],  [41.7046837, -91.5980204],  [41.7048442, -91.5986212],  [41.7050162, -91.5991219],  [41.7048806, -91.5992995],  [41.7051105, -91.5998738],  [41.7054099, -91.6003437],  [41.7057484, -91.6007639],  [41.7061174, -91.6012212],  [41.7062568, -91.6015312],  [41.7062633, -91.6015955],  [41.7062993, -91.6016359],  [41.7063386, -91.6019052],  [41.7064877, -91.6021435],  [41.7068227, -91.6023773],  [41.7069753, -91.6025249],  [41.7070087, -91.6026104],  [41.7070519, -91.6026481],  [41.7071182, -91.6026548],  [41.7073638, -91.6028693],  [41.7077829, -91.6032537],  [41.707843, -91.6033014],  [41.7080477, -91.6036519],  [41.7080735, -91.6037356],  [41.7080647, -91.6044111],  [41.7081112, -91.6046492],  [41.7084053, -91.6049109],  [41.7086544, -91.6050061],  [41.7085219, -91.6051986],  [41.7085096, -91.6058967],  [41.7084988, -91.6065105],  [41.7084876, -91.607141],  [41.7084762, -91.6077904],  [41.7086314, -91.6078311],  [41.7086545, -91.6079046],  [41.7085428, -91.6085727],  [41.7084686, -91.6086644],  [41.7084814, -91.6089625],  [41.7084275, -91.609494],  [41.7085138, -91.6095965],  [41.7084786, -91.6097876],  [41.7083293, -91.6100432],  [41.7082538, -91.6100935],  [41.7081547, -91.6100406],  [41.7076799, -91.6100671],  [41.7072724, -91.6100897],  [41.7072239, -91.6101198],  [41.7067483, -91.6100492],  [41.706684, -91.610062],  [41.7066384, -91.6100328],  [41.7063413, -91.6100818],  [41.7062281, -91.6100471],  [41.7060339, -91.6100602],  [41.7059806, -91.6100947],  [41.7054503, -91.6101102],  [41.7053766, -91.6101131],  [41.7052975, -91.6100039],  [41.7049887, -91.6099859],  [41.7048477, -91.6100359],  [41.7044189, -91.6100159],  [41.7043441, -91.6101599],  [41.7040095, -91.6101818],  [41.7040032, -91.6101822], ];
var line_16 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_16);
      
      var latLngs = [ [41.7039919, -91.609942],  [41.7038393, -91.6098899],  [41.7039895, -91.6099596],  [41.7040117, -91.610096],  [41.7044892, -91.6100327],  [41.7049607, -91.6099617],  [41.7054319, -91.6100297],  [41.705475, -91.6100121],  [41.7055287, -91.6101074],  [41.7057212, -91.6101013],  [41.7057535, -91.61003],  [41.7062382, -91.6099664],  [41.7064251, -91.6099275],  [41.7066798, -91.6100079],  [41.7066533, -91.6099541],  [41.7068915, -91.6099624],  [41.7069728, -91.6098898],  [41.7074438, -91.6099216],  [41.7079725, -91.6099295],  [41.7083501, -91.6100322],  [41.7084243, -91.6097779],  [41.7084624, -91.6091413],  [41.7084756, -91.609034],  [41.708406, -91.6089559],  [41.708425, -91.6086012],  [41.708404, -91.6085803],  [41.7083563, -91.6079713],  [41.7083374, -91.6073136],  [41.7083399, -91.6066647],  [41.7082752, -91.6062093],  [41.7083004, -91.6055348],  [41.7083341, -91.6050977],  [41.708284, -91.6049593],  [41.7080453, -91.6046634],  [41.7079991, -91.6045232],  [41.7079947, -91.6039101],  [41.7079517, -91.603684],  [41.7078284, -91.6034924],  [41.7077741, -91.6035602],  [41.7076075, -91.6033129],  [41.7074533, -91.6032557],  [41.7073483, -91.6031642],  [41.7071433, -91.6028265],  [41.707097, -91.6027955],  [41.707082, -91.6026744],  [41.7066941, -91.6023356],  [41.7062867, -91.6019923],  [41.7061346, -91.6017419],  [41.7061509, -91.6016078],  [41.7061326, -91.6014971],  [41.7061361, -91.601228],  [41.7060235, -91.6011049],  [41.7056599, -91.600654],  [41.7056101, -91.6005922],  [41.7055203, -91.6003408],  [41.7053875, -91.6001114],  [41.7052923, -91.6000248],  [41.705015, -91.5994512],  [41.704811, -91.5988583],  [41.7046528, -91.5982484],  [41.7046026, -91.5979095],  [41.7045458, -91.5977502],  [41.7044964, -91.5974929],  [41.7042897, -91.5969061],  [41.7041836, -91.5966108],  [41.7040965, -91.5965856],  [41.7039071, -91.5967442],  [41.7038086, -91.5967753],  [41.7037439, -91.5968501],  [41.7037131, -91.5966574],  [41.7034731, -91.5964277],  [41.7033739, -91.5964833],  [41.7032794, -91.5964713],  [41.7029114, -91.5966031],  [41.7027408, -91.5967504],  [41.7025613, -91.5971773],  [41.7024076, -91.5973456],  [41.7021254, -91.5974887],  [41.7019519, -91.5975016],  [41.7019093, -91.5974508],  [41.7018433, -91.597424],  [41.7018078, -91.5973359],  [41.7017038, -91.5972292],  [41.7015427, -91.5966593],  [41.7014632, -91.5964372],  [41.7013367, -91.5963648],  [41.7009963, -91.5962863],  [41.7009294, -91.5961824],  [41.7007662, -91.5954786],  [41.7006773, -91.5953844],  [41.7005678, -91.5951878],  [41.7004969, -91.5951108],  [41.7003282, -91.5950091],  [41.6998562, -91.5948038],  [41.6996331, -91.5947659],  [41.6993828, -91.5946563],  [41.6989346, -91.5945173],  [41.698584, -91.5944108],  [41.6984824, -91.5944363],  [41.6981449, -91.5943402],  [41.6976984, -91.5941983],  [41.6972763, -91.5942182],  [41.6968179, -91.5939699],  [41.696406, -91.5938324],  [41.6961368, -91.5936043],  [41.6960203, -91.5935011],  [41.6955753, -91.5933261],  [41.6955401, -91.5931817],  [41.6956662, -91.5930944],  [41.6958016, -91.5929001],  [41.6959454, -91.5927686],  [41.6960349, -91.5926183],  [41.6961829, -91.5924439],  [41.6962981, -91.5917656],  [41.6963191, -91.59109],  [41.6963175, -91.5904726],  [41.6963096, -91.5897492],  [41.696272, -91.5894053],  [41.6961329, -91.5887754],  [41.6959627, -91.5881523],  [41.6958875, -91.5878754],  [41.6957763, -91.5873559],  [41.6957205, -91.5872768],  [41.6954612, -91.5867471],  [41.6950866, -91.5863917],  [41.6949332, -91.5861429],  [41.694756, -91.585727],  [41.6947547, -91.5855989],  [41.694798, -91.5854843],  [41.6946635, -91.5848425],  [41.6946942, -91.584241],  [41.694727, -91.5839664],  [41.6946977, -91.5838347],  [41.6948567, -91.5832387],  [41.6948786, -91.5829502],  [41.6948569, -91.5829005],  [41.6944163, -91.5828925],  [41.6943136, -91.5828585],  [41.6942775, -91.5826909],  [41.6939627, -91.5826189],  [41.6938898, -91.5827119],  [41.6935477, -91.582643],  [41.6930362, -91.5826368],  [41.6925254, -91.5826317],  [41.6920314, -91.5826183],  [41.6915515, -91.582628],  [41.6911502, -91.5824831],  [41.6907089, -91.5822248],  [41.6902397, -91.5820312],  [41.689756, -91.5819144],  [41.6895479, -91.5819609],  [41.689213, -91.5818866],  [41.6889143, -91.5818853],  [41.6886479, -91.5818477],  [41.6885436, -91.5818724],  [41.6880195, -91.5818606],  [41.6875121, -91.5818138],  [41.6871427, -91.581751],  [41.6870421, -91.5817086],  [41.6864929, -91.5814497],  [41.6860418, -91.5813036],  [41.685534, -91.5811697],  [41.6850466, -91.5811255],  [41.684532, -91.5810804],  [41.6840653, -91.5810329],  [41.6835382, -91.5809615],  [41.6830538, -91.5808989],  [41.6825798, -91.5808312],  [41.6821469, -91.5806129],  [41.6819576, -91.5804792],  [41.6818211, -91.5805189],  [41.6815034, -91.5800478],  [41.6813145, -91.5799689],  [41.6812223, -91.5798538],  [41.6810152, -91.5795399],  [41.6809955, -91.5794578],  [41.6810185, -91.5793996],  [41.680919, -91.5787603],  [41.6808484, -91.5780936],  [41.6806377, -91.5780168],  [41.6801155, -91.5780195],  [41.6796353, -91.578033],  [41.6791177, -91.5780476],  [41.6786229, -91.5780615],  [41.6781345, -91.5780765],  [41.678057, -91.5780791],  [41.6779868, -91.5782332],  [41.6774859, -91.5782607],  [41.6773677, -91.5782794],  [41.6772597, -91.5781052],  [41.6768023, -91.5781202],  [41.6763378, -91.5781396],  [41.6758506, -91.5781732],  [41.6753956, -91.5782046],  [41.6749314, -91.5782366],  [41.6748115, -91.5782418],  [41.6746841, -91.5776513],  [41.6746607, -91.577445],  [41.674596, -91.5773066],  [41.6745488, -91.5766804],  [41.6744886, -91.576004],  [41.6744538, -91.575492],  [41.6744165, -91.5748852],  [41.6744126, -91.5746361],  [41.6743443, -91.5741703],  [41.674286, -91.5740414],  [41.6742854, -91.5737492],  [41.6742344, -91.573575],  [41.6741991, -91.5729593],  [41.6741839, -91.5727321],  [41.6741541, -91.572622],  [41.6741579, -91.5724947],  [41.674056, -91.5718113],  [41.6739946, -91.5711787],  [41.6739398, -91.5705826],  [41.6738867, -91.56989],  [41.6738339, -91.5692161],  [41.6737945, -91.5688574],  [41.6737312, -91.568335],  [41.673734, -91.5678756],  [41.6736948, -91.5674454],  [41.6736668, -91.5673597],  [41.6736558, -91.5671638],  [41.6736141, -91.5669798],  [41.6736497, -91.5668822],  [41.6736421, -91.5667872],  [41.6734931, -91.5660331],  [41.6734959, -91.565797],  [41.6734432, -91.5657519],  [41.6734193, -91.5656921],  [41.6729494, -91.5656561],  [41.6724304, -91.565639],  [41.6719747, -91.5656307],  [41.6714659, -91.5656215],  [41.6709796, -91.5656127],  [41.6704959, -91.565604],  [41.6700426, -91.565596],  [41.6695381, -91.5655871],  [41.6692716, -91.5655922],  [41.6692987, -91.5659857],  [41.6692701, -91.5659917],  [41.6692676, -91.5659594],  [41.6689819, -91.5661483],  [41.6689269, -91.566124],  [41.6687481, -91.5655124],  [41.6685375, -91.5650832],  [41.6683239, -91.5645315],  [41.668236, -91.5643028],  [41.6681102, -91.5640707],  [41.6681038, -91.5639832],  [41.6679915, -91.5637762],  [41.6678043, -91.5632003],  [41.6675918, -91.5626527],  [41.6674004, -91.5622459],  [41.6671936, -91.5616341],  [41.6669774, -91.561071],  [41.6667354, -91.5605375],  [41.6664733, -91.5600028],  [41.6662433, -91.5595464],  [41.6661601, -91.559303],  [41.6660814, -91.5592217],  [41.6659293, -91.5585997],  [41.6657758, -91.5579914],  [41.6656767, -91.5577325],  [41.6657121, -91.5576489],  [41.6656257, -91.5576188],  [41.6655266, -91.5573403],  [41.6655313, -91.5572668],  [41.6656039, -91.5571624],  [41.6654955, -91.5565351],  [41.6654639, -91.5563094],  [41.6653099, -91.5561934],  [41.66527, -91.5557201],  [41.665345, -91.5554681],  [41.6652198, -91.5550435],  [41.6648749, -91.5547117],  [41.664895, -91.5546307],  [41.6647957, -91.5546806],  [41.6646737, -91.5546293],  [41.6645494, -91.5544282],  [41.6645632, -91.5543552],  [41.6645429, -91.5543172],  [41.6644645, -91.5542851],  [41.6641818, -91.5538075],  [41.6639578, -91.5535372],  [41.6639435, -91.5534155],  [41.6637783, -91.5530651],  [41.6637322, -91.5528095],  [41.6638068, -91.5526943],  [41.6636793, -91.552046],  [41.6635575, -91.5514029],  [41.6634734, -91.5509475],  [41.6634955, -91.5508397],  [41.6632753, -91.550253],  [41.6631929, -91.5500623],  [41.6630776, -91.549897],  [41.6629536, -91.5498612],  [41.6626388, -91.5495028],  [41.6625878, -91.549407],  [41.6625179, -91.5491252],  [41.6626065, -91.5486792],  [41.6628311, -91.5480426],  [41.6630383, -91.5474667],  [41.6632305, -91.5468387],  [41.6633319, -91.5461932],  [41.6633574, -91.545865],  [41.663331, -91.5454699],  [41.6633632, -91.5452335],  [41.6632897, -91.5446097],  [41.6632108, -91.5441414],  [41.6630851, -91.5437678],  [41.6630169, -91.5438103],  [41.6629232, -91.5437617],  [41.6628194, -91.5437757],  [41.6627495, -91.5437186],  [41.6626736, -91.5437306],  [41.6625839, -91.5437874],  [41.6624737, -91.5437683],  [41.6620082, -91.5438325],  [41.661914, -91.5436812],  [41.6616994, -91.543675],  [41.6615311, -91.5435254],  [41.6613569, -91.5432096],  [41.6612529, -91.5426148],  [41.6612612, -91.5419866],  [41.6612658, -91.5414505],  [41.661191, -91.5413542],  [41.661183, -91.5411091],  [41.6612121, -91.5404786],  [41.6612162, -91.5398432],  [41.6612759, -91.539733],  [41.6612792, -91.5391219],  [41.6612835, -91.5384788],  [41.6612869, -91.5379776],  [41.6611923, -91.5379723],  [41.6612003, -91.5379512],  [41.6612868, -91.5376293],  [41.6615218, -91.5376587],  [41.6619721, -91.5375935],  [41.6622511, -91.5376043],  [41.6623315, -91.5375253],  [41.6623923, -91.537543],  [41.662525, -91.5374146],  [41.6625544, -91.5368136],  [41.6625625, -91.5362028],  [41.6626549, -91.5355871],  [41.6625792, -91.5352752],  [41.6626254, -91.5352046], ];
var line_17 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_17);
      
      var latLngs = [ [41.6625938, -91.5352674],  [41.6625239, -91.5357219],  [41.6625178, -91.5359281],  [41.6628881, -91.5359764],  [41.6632179, -91.5357995],  [41.6634396, -91.5359161],  [41.6634794, -91.5360938],  [41.6635007, -91.5365541],  [41.6635599, -91.5367484],  [41.6636347, -91.5371694],  [41.6636369, -91.5375796],  [41.663371, -91.5382892],  [41.6631804, -91.5382635],  [41.6630563, -91.5383547],  [41.6629468, -91.538227],  [41.6629264, -91.5381502],  [41.6628983, -91.538134],  [41.6628015, -91.5380711],  [41.6625448, -91.5379319],  [41.6620542, -91.537908],  [41.6619651, -91.5378678],  [41.6617243, -91.5379317],  [41.6616354, -91.5378906],  [41.6614896, -91.5377518],  [41.6613888, -91.5381548],  [41.6615253, -91.5384028],  [41.6615537, -91.538517],  [41.661529, -91.5386348],  [41.6615426, -91.5387576],  [41.6615012, -91.5388777],  [41.6614644, -91.5392095],  [41.6614211, -91.5393221],  [41.6614085, -91.5394377],  [41.6613574, -91.5395328],  [41.6613364, -91.5396383],  [41.6613671, -91.5397536],  [41.6613663, -91.5398575],  [41.6614007, -91.5403751],  [41.6613523, -91.5405392],  [41.6613561, -91.5406231],  [41.6612878, -91.5411176],  [41.6613732, -91.5412124],  [41.661314, -91.5413224],  [41.6612109, -91.5419166],  [41.6612194, -91.5420114],  [41.6611421, -91.5421635],  [41.6611058, -91.5421807],  [41.6611142, -91.5421191],  [41.661382, -91.5420711],  [41.6613838, -91.5421201],  [41.6612017, -91.5422841],  [41.6611793, -91.542402],  [41.6612464, -91.5425323],  [41.6612569, -91.5426112],  [41.6612389, -91.5426738],  [41.6612667, -91.5427224],  [41.6613398, -91.543039],  [41.6613997, -91.5431117],  [41.6613831, -91.543208],  [41.661663, -91.5436263],  [41.6621304, -91.5436386],  [41.6625368, -91.5435978],  [41.6627803, -91.5436138],  [41.6629348, -91.5436942],  [41.6630818, -91.5436211],  [41.6631182, -91.5435989],  [41.6632204, -91.5437008],  [41.6633099, -91.5440478],  [41.6633392, -91.5447117],  [41.6633643, -91.545344],  [41.6633679, -91.5455144],  [41.6632467, -91.5455782],  [41.6633481, -91.5458532],  [41.66336, -91.5462308],  [41.6632832, -91.5466499],  [41.6632962, -91.5468158],  [41.6632012, -91.547204],  [41.6631566, -91.547308],  [41.6630724, -91.5473707],  [41.6628542, -91.5479789],  [41.662993, -91.5482045],  [41.663005, -91.5483077],  [41.6627144, -91.5488163],  [41.6626111, -91.5490669],  [41.6626517, -91.5493731],  [41.6628823, -91.5497177],  [41.6630248, -91.5497935],  [41.6630303, -91.5498401],  [41.6634178, -91.5502364],  [41.6634409, -91.55029],  [41.6634305, -91.5503805],  [41.6635726, -91.550895],  [41.6635578, -91.5510507],  [41.6636747, -91.5514526],  [41.6636734, -91.5515311],  [41.6637037, -91.5516657],  [41.6636244, -91.5517564],  [41.6637737, -91.5525313],  [41.6639224, -91.5531521],  [41.6640121, -91.5533924],  [41.6643399, -91.5539146],  [41.6646823, -91.5544265],  [41.6649922, -91.5548735],  [41.6652794, -91.5555047],  [41.6655382, -91.5560462],  [41.6655744, -91.55618],  [41.6655754, -91.5563281],  [41.6657143, -91.5569103],  [41.6658617, -91.5575625],  [41.6659565, -91.5580663],  [41.666151, -91.5586233],  [41.6663522, -91.559169],  [41.666557, -91.5597061],  [41.6667675, -91.5602573],  [41.6669151, -91.5606461],  [41.6669748, -91.5609651],  [41.6669554, -91.5610539],  [41.6671483, -91.5615008],  [41.6673865, -91.5620286],  [41.6674759, -91.5622458],  [41.6674629, -91.562308],  [41.667679, -91.5628852],  [41.6677415, -91.5630192],  [41.6678094, -91.5630405],  [41.6680372, -91.5635802],  [41.668295, -91.5641898],  [41.6685228, -91.5647284],  [41.6687621, -91.5652986],  [41.6689391, -91.5656443],  [41.6689487, -91.5656299],  [41.6690452, -91.5658738],  [41.6690947, -91.5661075],  [41.6690185, -91.5661088],  [41.6689657, -91.5661384],  [41.6689278, -91.5659264],  [41.6691934, -91.5656469],  [41.6692473, -91.5656202],  [41.6696677, -91.565625],  [41.6699672, -91.5655226],  [41.6702238, -91.5655995],  [41.670562, -91.5655859],  [41.6706664, -91.5656359],  [41.6708582, -91.5655961],  [41.6710036, -91.5656145],  [41.6712737, -91.5655331],  [41.6717556, -91.5656268],  [41.6718568, -91.5655963],  [41.6721696, -91.5656207],  [41.6725453, -91.565639],  [41.6725429, -91.5656149],  [41.6727666, -91.5656162],  [41.6728946, -91.5656393],  [41.6730834, -91.5655681],  [41.6732822, -91.5656229],  [41.6731932, -91.5656166],  [41.6735684, -91.5658675],  [41.6736224, -91.5665421],  [41.6736785, -91.5672164],  [41.673686, -91.5673008],  [41.6737529, -91.5673772],  [41.673775, -91.5674746],  [41.6737973, -91.567945],  [41.673833, -91.5681284],  [41.6738009, -91.5683402],  [41.6738835, -91.5685594],  [41.6738931, -91.5688068],  [41.6741005, -91.5687455],  [41.6741344, -91.5687671],  [41.6741469, -91.5690283],  [41.6740006, -91.5693141],  [41.6739809, -91.5695617],  [41.673948, -91.5696475],  [41.6739676, -91.5698234],  [41.6739605, -91.5699859],  [41.6740607, -91.5706404],  [41.6740865, -91.570693],  [41.6740682, -91.570778],  [41.6741112, -91.5711934],  [41.6742195, -91.5714564],  [41.6741616, -91.5714654],  [41.6742442, -91.5718672],  [41.6742692, -91.5719114],  [41.6742436, -91.5719891],  [41.6742736, -91.5722799],  [41.6742995, -91.5723312],  [41.6742749, -91.5729452],  [41.6743436, -91.5735214],  [41.6744429, -91.5738372],  [41.674429, -91.5739928],  [41.6744905, -91.574601],  [41.674465, -91.5751194],  [41.6745708, -91.5757401],  [41.6746235, -91.576086],  [41.6745509, -91.5761879],  [41.6746065, -91.576795],  [41.6746617, -91.5774556],  [41.6747541, -91.5780368],  [41.6748514, -91.5781252],  [41.6749115, -91.5782333],  [41.6749463, -91.5783577],  [41.6748817, -91.5784108],  [41.6749074, -91.5783637],  [41.6749455, -91.5783955],  [41.6754265, -91.5782032],  [41.6757411, -91.5781865],  [41.6759316, -91.578157],  [41.675962, -91.5781841],  [41.6761235, -91.5781262],  [41.6759302, -91.5781893],  [41.6759125, -91.5782368],  [41.6761764, -91.5782665],  [41.6763961, -91.5780728],  [41.6765081, -91.5779089],  [41.6769509, -91.5780327],  [41.6769845, -91.5779589],  [41.6771368, -91.5778707],  [41.6771527, -91.577917],  [41.6771361, -91.5779063],  [41.6771991, -91.57785],  [41.6772976, -91.5779333],  [41.6777772, -91.5779683],  [41.6782339, -91.5780508],  [41.6786268, -91.5779933],  [41.6788372, -91.5780906],  [41.678859, -91.5780352],  [41.6789974, -91.5780363],  [41.6790342, -91.5779949],  [41.6790773, -91.5780097],  [41.6791113, -91.5779833],  [41.6796164, -91.5780065],  [41.6798672, -91.578012],  [41.6803323, -91.5780087],  [41.6807039, -91.5779372],  [41.6809332, -91.5781047],  [41.6810037, -91.5787346],  [41.6810878, -91.5793251],  [41.6813621, -91.5797953],  [41.6816036, -91.5799662],  [41.6818552, -91.5800851],  [41.6818721, -91.5801457],  [41.6818623, -91.5802293],  [41.6821215, -91.5805],  [41.6821485, -91.580614],  [41.6825015, -91.5808118],  [41.6829879, -91.5808904],  [41.6835061, -91.5809574],  [41.6840344, -91.5810286],  [41.684496, -91.5810772],  [41.6849563, -91.5811176],  [41.6853513, -91.5811523],  [41.6854086, -91.5810681],  [41.685857, -91.5811288],  [41.686059, -91.5812231],  [41.6860894, -91.5813198],  [41.6861129, -91.5813278],  [41.6861635, -91.581218],  [41.6861911, -91.5812328],  [41.6861862, -91.5812758],  [41.6862747, -91.5813428],  [41.6867305, -91.5814159],  [41.687169, -91.5815609],  [41.6872694, -91.5816418],  [41.68761, -91.5817598],  [41.6877373, -91.5817002],  [41.6882231, -91.581751],  [41.6887059, -91.5818105],  [41.6892107, -91.5818473],  [41.6893027, -91.5818332],  [41.689297, -91.5818711],  [41.6893393, -91.581891],  [41.6898431, -91.5817999],  [41.6899265, -91.5817944],  [41.6899745, -91.5818769],  [41.6903954, -91.5819687],  [41.6906825, -91.5821269],  [41.6908159, -91.5820421],  [41.691219, -91.5823035],  [41.6913357, -91.5824037],  [41.6918182, -91.5825192],  [41.6921357, -91.5825508],  [41.6926251, -91.5825231],  [41.6931387, -91.5824861],  [41.693522, -91.5824672],  [41.6935782, -91.5825158],  [41.6937994, -91.5825447],  [41.6938578, -91.5825949],  [41.6941218, -91.5826553],  [41.6941814, -91.5825843],  [41.6946475, -91.5827206],  [41.6946694, -91.5827583],  [41.6947332, -91.5826949],  [41.6947998, -91.5826793],  [41.6949048, -91.5829015],  [41.6948929, -91.5834439],  [41.6948066, -91.5835289],  [41.6947101, -91.5841278],  [41.6946632, -91.5848359],  [41.6947432, -91.5853121],  [41.6949578, -91.5858936],  [41.6953294, -91.586474],  [41.6956422, -91.5870082],  [41.6958206, -91.5874288],  [41.6960068, -91.588166],  [41.696171, -91.5888213],  [41.6962845, -91.5894403],  [41.6963168, -91.5902378],  [41.6963185, -91.59087],  [41.6963051, -91.5915389],  [41.6962471, -91.5922216],  [41.6963335, -91.5923465],  [41.6962836, -91.5925193],  [41.6961103, -91.5927442],  [41.6959997, -91.5926793],  [41.695804, -91.5929041],  [41.6958043, -91.5930105],  [41.6956578, -91.593213],  [41.6956829, -91.5933303],  [41.6960901, -91.5934653],  [41.6964994, -91.5937263],  [41.6969418, -91.593977],  [41.6973823, -91.5942319],  [41.6978332, -91.5943241],  [41.6983093, -91.5943578],  [41.6984334, -91.5944127],  [41.6989448, -91.5944179],  [41.6993983, -91.5944814],  [41.699874, -91.5946175],  [41.7000222, -91.594711],  [41.7004191, -91.5950023],  [41.7006512, -91.5952142],  [41.7008848, -91.595737],  [41.7010498, -91.5962495],  [41.7014084, -91.5962991],  [41.7016108, -91.5969275],  [41.7018284, -91.5971553],  [41.7020457, -91.5971615],  [41.702149, -91.5972031],  [41.7022562, -91.597173],  [41.7023056, -91.5971197],  [41.7023743, -91.5971754],  [41.7026763, -91.596847],  [41.7027872, -91.5966446],  [41.7029018, -91.5964984],  [41.7031058, -91.5964142],  [41.703266, -91.596415],  [41.7035822, -91.5962592],  [41.7038812, -91.5966066],  [41.704206, -91.5965192],  [41.7044144, -91.5971137],  [41.7045757, -91.5975348],  [41.704649, -91.5976492],  [41.7047679, -91.5982921],  [41.7047838, -91.598419],  [41.7049898, -91.5990143],  [41.7052057, -91.5995916],  [41.70547, -91.6001499],  [41.7057502, -91.6005011],  [41.7056957, -91.6006985],  [41.7060523, -91.6011405],  [41.7062014, -91.6013503],  [41.7063488, -91.6019483],  [41.7067266, -91.6023157],  [41.7071017, -91.6026939],  [41.7072143, -91.6028279],  [41.7076052, -91.6031393],  [41.7079528, -91.6035014],  [41.7080217, -91.6036906],  [41.7080571, -91.6039721],  [41.7080606, -91.6042305],  [41.7081574, -91.6042742],  [41.7081459, -91.6043606],  [41.7081627, -91.60457],  [41.7082062, -91.604768],  [41.7083492, -91.6048776],  [41.7083737, -91.604851],  [41.7086309, -91.6051039],  [41.7086653, -91.6055186],  [41.7085154, -91.6055694],  [41.7085041, -91.6062076],  [41.7085012, -91.6063696],  [41.7087029, -91.6064598],  [41.7087542, -91.6071157],  [41.7088269, -91.6077389],  [41.7087969, -91.6078703],  [41.7088079, -91.6079228],  [41.7087768, -91.60788],  [41.7086263, -91.6081664],  [41.7086052, -91.6083213],  [41.7086244, -91.6085191],  [41.7085918, -91.6087051],  [41.7084738, -91.6087969],  [41.7084821, -91.6089792],  [41.7084251, -91.6095878],  [41.7084173, -91.6099411],  [41.7082361, -91.6100352],  [41.7077418, -91.6100482],  [41.70723, -91.6100617],  [41.7067491, -91.6100744],  [41.7064002, -91.6101261],  [41.7059501, -91.6101056],  [41.7057443, -91.6100699],  [41.7056808, -91.6100923],  [41.7055973, -91.6100792],  [41.7050818, -91.6101265],  [41.7046316, -91.6101468],  [41.7041811, -91.6101706],  [41.7040084, -91.6101819],  [41.7040097, -91.6099214],  [41.703974, -91.6098466],  [41.703976, -91.6098541], ];
var line_18 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_18);
      
      var latLngs = [ [41.7084044, -91.60996],  [41.7084223, -91.6099442],  [41.7084327, -91.6094226],  [41.7083966, -91.609276],  [41.7084816, -91.6089845],  [41.7084625, -91.6084856],  [41.7084086, -91.6084379],  [41.708436, -91.6083083],  [41.7084524, -91.6083114],  [41.7083926, -91.6082841],  [41.7084213, -91.6083917],  [41.7083413, -91.6079641],  [41.7083392, -91.6076622],  [41.7084311, -91.6075795],  [41.7084304, -91.6074992],  [41.7083234, -91.6074028],  [41.7083174, -91.6073175],  [41.708346, -91.6072074],  [41.7083441, -91.6068194],  [41.7083631, -91.6065084],  [41.7083382, -91.6063192],  [41.7082334, -91.606227],  [41.7082141, -91.6061364],  [41.7082394, -91.6060081],  [41.7082518, -91.6056226],  [41.7083418, -91.6051141],  [41.7082333, -91.6048012],  [41.7081455, -91.6047679],  [41.708099, -91.6046204],  [41.7080206, -91.604563],  [41.7079621, -91.6042915],  [41.7079592, -91.603783],  [41.7078648, -91.6034774],  [41.7078252, -91.6034376],  [41.7077509, -91.6034658],  [41.7076222, -91.6034116],  [41.7075127, -91.6033076],  [41.707495, -91.6032211],  [41.7072455, -91.6029614],  [41.7071109, -91.6027387],  [41.7068527, -91.602503],  [41.7064841, -91.6022201],  [41.7063246, -91.602015],  [41.7062426, -91.6014639],  [41.7061913, -91.601327],  [41.7058195, -91.600852],  [41.705478, -91.6004282],  [41.7054267, -91.6003645],  [41.7052548, -91.5999815],  [41.7052348, -91.599894],  [41.7049649, -91.5994647],  [41.7048853, -91.5992797],  [41.7048406, -91.5989686],  [41.7047152, -91.5986303],  [41.7047092, -91.5985376],  [41.7045728, -91.5978815],  [41.7045507, -91.5974965],  [41.70449, -91.5972944],  [41.7043723, -91.5970883],  [41.7043625, -91.5969343],  [41.7043313, -91.5967735],  [41.7041905, -91.5965371],  [41.7040925, -91.5964853],  [41.7039755, -91.596644],  [41.7038663, -91.5966732],  [41.7034539, -91.5963818],  [41.70317, -91.5963717],  [41.702912, -91.5964304],  [41.702825, -91.5965153],  [41.7026432, -91.5969055],  [41.7026056, -91.5970501],  [41.7024508, -91.5972988],  [41.7022974, -91.5973851],  [41.7020513, -91.5974422],  [41.701964, -91.5974136],  [41.7019018, -91.5973097],  [41.7019082, -91.5971789],  [41.7017525, -91.5970122],  [41.7017171, -91.596867],  [41.7016587, -91.5968431],  [41.7016566, -91.5967661],  [41.7015861, -91.5967204],  [41.7014483, -91.5963314],  [41.7009889, -91.5962881],  [41.7009482, -91.5962601],  [41.7008542, -91.5958451],  [41.7007205, -91.595456],  [41.7004731, -91.5951922],  [41.700285, -91.5951022],  [41.6999641, -91.5948112],  [41.6997573, -91.5947337],  [41.6993723, -91.5947292],  [41.6989214, -91.5945584],  [41.6987723, -91.5944761],  [41.698567, -91.5944161],  [41.6984446, -91.5944223],  [41.6984163, -91.5944384],  [41.6983797, -91.5944041],  [41.6983201, -91.5944654],  [41.6982383, -91.5944587],  [41.6982062, -91.5944084],  [41.6980126, -91.5944191],  [41.6979686, -91.5945428],  [41.6979298, -91.5945344],  [41.6978969, -91.5945034],  [41.6978742, -91.5943508],  [41.6977871, -91.5944039],  [41.6976073, -91.5943443],  [41.6972771, -91.5944276],  [41.6971799, -91.5944894],  [41.6970109, -91.5943773],  [41.6968977, -91.5942589],  [41.69649, -91.5940682],  [41.6964164, -91.5940761],  [41.6962826, -91.5939709],  [41.696232, -91.593866],  [41.6961599, -91.5938312],  [41.6959872, -91.5935435],  [41.6957619, -91.5936036],  [41.6957323, -91.5936347],  [41.6956845, -91.5936009],  [41.6956118, -91.5936253],  [41.6956875, -91.5934798],  [41.6956373, -91.5933635],  [41.6957905, -91.5930575],  [41.6957721, -91.5929475],  [41.6961211, -91.5925153],  [41.6962666, -91.5921315],  [41.6962833, -91.5919864],  [41.6962734, -91.5917512],  [41.6963209, -91.5916087],  [41.6962994, -91.5915105],  [41.6963279, -91.5913197],  [41.6963888, -91.5912645],  [41.6963191, -91.5910907],  [41.6963172, -91.5903782],  [41.6963091, -91.5897334],  [41.6962952, -91.5895674],  [41.6961647, -91.589455],  [41.6961499, -91.5892894],  [41.6961818, -91.589173],  [41.6960696, -91.5891363],  [41.6959906, -91.5889628],  [41.69606, -91.5886016],  [41.6960081, -91.5885331],  [41.6960025, -91.58839],  [41.6958501, -91.5877005],  [41.6958298, -91.587439],  [41.6956951, -91.5871061],  [41.6956438, -91.5870856],  [41.6953566, -91.5865737],  [41.6950352, -91.5860868],  [41.6949087, -91.5858504],  [41.6946999, -91.5853604],  [41.6947329, -91.5852625],  [41.6946601, -91.5846459],  [41.6946692, -91.5844666],  [41.6947439, -91.5837889],  [41.6948614, -91.5832076],  [41.6948572, -91.5829574],  [41.694548, -91.5828408],  [41.6944408, -91.5828824],  [41.6942029, -91.5828326],  [41.6941445, -91.5826605],  [41.6939066, -91.5826061],  [41.6938229, -91.5828172],  [41.6935973, -91.5827725],  [41.6933181, -91.5826688],  [41.6932387, -91.5826705],  [41.6931635, -91.5825242],  [41.6927236, -91.582528],  [41.6926558, -91.5826398],  [41.6925749, -91.5826355],  [41.6924347, -91.582682],  [41.6920641, -91.5826814],  [41.6915902, -91.5827056],  [41.6911332, -91.582549],  [41.6907792, -91.5823918],  [41.6907692, -91.5821747],  [41.6905477, -91.5820502],  [41.6903846, -91.5823138],  [41.690245, -91.5821846],  [41.6899558, -91.5820486],  [41.6898879, -91.5819793],  [41.6898161, -91.5820296],  [41.689816, -91.5820007],  [41.689631, -91.581897],  [41.6895826, -91.5819724],  [41.6894616, -91.5820075],  [41.6893276, -91.5819961],  [41.6891059, -91.5818893],  [41.6886197, -91.5819337],  [41.6881389, -91.5818797],  [41.6876916, -91.5818705],  [41.6871356, -91.5816442],  [41.6866474, -91.5814989],  [41.686184, -91.5813513],  [41.685731, -91.5812075],  [41.6852567, -91.581144],  [41.6847847, -91.5811025],  [41.6842819, -91.5810584],  [41.6837686, -91.5809918],  [41.6832631, -91.580926],  [41.6827778, -91.5808625],  [41.6823158, -91.5807233],  [41.6820071, -91.5805147],  [41.6819489, -91.5806155],  [41.6818243, -91.5805268],  [41.6817325, -91.5805393],  [41.6816, -91.5802921],  [41.6811888, -91.5799465],  [41.6810808, -91.5798899],  [41.6809383, -91.5797021],  [41.6808217, -91.5790491],  [41.6807959, -91.5786653],  [41.6808992, -91.5785613],  [41.6808873, -91.5784411],  [41.6802226, -91.5780305],  [41.6804354, -91.5780168],  [41.6803346, -91.5784919],  [41.6802197, -91.5785041],  [41.6801895, -91.578477],  [41.6798487, -91.578495],  [41.6797572, -91.5784326],  [41.6795812, -91.578424],  [41.6794851, -91.5780373],  [41.6789969, -91.578051],  [41.6785039, -91.5780649],  [41.6780243, -91.5780801],  [41.6774995, -91.5780973],  [41.6769874, -91.5781141],  [41.676502, -91.5781283],  [41.6759659, -91.5781653],  [41.6754487, -91.578201],  [41.6749851, -91.5782329],  [41.6748138, -91.5782447],  [41.6746785, -91.5776062],  [41.674615, -91.5768888],  [41.6745849, -91.5765588],  [41.6744825, -91.576477],  [41.6744705, -91.5763644],  [41.6744184, -91.5762462],  [41.6744247, -91.5757968],  [41.6743952, -91.5757305],  [41.6743246, -91.5750688],  [41.6742751, -91.5747543],  [41.6742617, -91.5743759],  [41.6741741, -91.5739418],  [41.6741612, -91.5732778],  [41.6741218, -91.5728474],  [41.674014, -91.5721712],  [41.6739936, -91.5719225],  [41.6740172, -91.5715426],  [41.6739617, -91.5713141],  [41.6739725, -91.570832],  [41.6739254, -91.5705214],  [41.6739749, -91.5703132],  [41.6739128, -91.5696357],  [41.6738436, -91.5689332],  [41.673779, -91.5683103],  [41.673721, -91.5676989],  [41.6736671, -91.5670872],  [41.6736124, -91.5664167],  [41.6735733, -91.5659291],  [41.6734816, -91.5658786],  [41.6734783, -91.5657248],  [41.673358, -91.5656639],  [41.672866, -91.565649],  [41.6723821, -91.5656381],  [41.6719238, -91.5656298],  [41.6713931, -91.5656202],  [41.6708962, -91.5656112],  [41.6703596, -91.5656016],  [41.6699036, -91.5655935],  [41.6698263, -91.5655922],  [41.6697552, -91.5656834],  [41.6694854, -91.5657462],  [41.6693107, -91.5659069],  [41.6691416, -91.5655044],  [41.6691239, -91.5654948],  [41.6691565, -91.5655065],  [41.6691183, -91.5654584],  [41.6689711, -91.5655457],  [41.6689525, -91.5654867],  [41.6685881, -91.5648834],  [41.6685156, -91.5647114],  [41.6683579, -91.5647227],  [41.6683177, -91.5646475],  [41.6683014, -91.5645553],  [41.6680822, -91.5643226],  [41.668029, -91.564117],  [41.6679636, -91.5640195],  [41.6678045, -91.5639698],  [41.667639, -91.5633342],  [41.6675323, -91.5627496],  [41.6675074, -91.5626802],  [41.667597, -91.5625344],  [41.6673732, -91.5619964],  [41.667148, -91.5614483],  [41.6669234, -91.5609018],  [41.6667349, -91.5603541],  [41.6664787, -91.559771],  [41.6662346, -91.5591856],  [41.666025, -91.5586301],  [41.6658225, -91.5580605],  [41.6656761, -91.557493],  [41.6656068, -91.557432],  [41.6655166, -91.5571892],  [41.6654169, -91.5571422],  [41.6653663, -91.556986],  [41.6651961, -91.5568802],  [41.6651442, -91.5567154],  [41.6651715, -91.5567441],  [41.6652243, -91.5564483],  [41.6651914, -91.5564041],  [41.6652607, -91.5560719],  [41.6652496, -91.5560241],  [41.6652897, -91.5558276],  [41.6652473, -91.5557373],  [41.6652441, -91.5556848],  [41.6652543, -91.5556481],  [41.6652307, -91.5556367],  [41.6651031, -91.5552145],  [41.6650271, -91.5551046],  [41.6648101, -91.5548871],  [41.6645098, -91.5544273],  [41.6642035, -91.5539725],  [41.6640545, -91.553818],  [41.663872, -91.5536842],  [41.6637081, -91.553279],  [41.6636734, -91.5531046],  [41.6635835, -91.5529499],  [41.6636138, -91.5527078],  [41.6636564, -91.5519255],  [41.6635333, -91.5512752],  [41.6634242, -91.5506778],  [41.6633762, -91.550436],  [41.6631513, -91.5499906],  [41.6630078, -91.549746],  [41.6628958, -91.5494623],  [41.6626726, -91.5493539],  [41.6625157, -91.5491219],  [41.6626526, -91.5485442],  [41.6628646, -91.5479502],  [41.6630713, -91.5473737],  [41.6632108, -91.5468297],  [41.6632319, -91.5466574],  [41.6632986, -91.5464664],  [41.6632482, -91.5464289],  [41.6632393, -91.5461527],  [41.6632977, -91.5458174],  [41.663246, -91.5452996],  [41.6632511, -91.5448264],  [41.6632082, -91.5445588],  [41.6631952, -91.5442637],  [41.6630924, -91.5437685],  [41.6631236, -91.5435459],  [41.6632232, -91.5437598],  [41.6632196, -91.5438133],  [41.6632612, -91.5434055],  [41.6632, -91.5432977],  [41.6627936, -91.5434541],  [41.6623688, -91.5436431],  [41.6618291, -91.5436952],  [41.6616632, -91.543655],  [41.6614485, -91.5434056],  [41.6613226, -91.5431061],  [41.6611936, -91.5430489],  [41.6611412, -91.5426882],  [41.6612391, -91.5425775],  [41.6611068, -91.5423983],  [41.6610855, -91.5422404],  [41.6610934, -91.5417997],  [41.6612664, -91.541377],  [41.6611339, -91.5412863],  [41.6611889, -91.5406415],  [41.6611711, -91.5400927],  [41.6611769, -91.5394756],  [41.6611331, -91.5391817],  [41.6611423, -91.5386541],  [41.6612116, -91.5385308],  [41.6612466, -91.5385137],  [41.6612566, -91.5382486],  [41.6612181, -91.5381616],  [41.6612867, -91.5380048],  [41.6612215, -91.5380262],  [41.6612866, -91.5380245],  [41.6612215, -91.5380262],  [41.6611923, -91.5380735],  [41.6611229, -91.5379481],  [41.6611746, -91.5377436],  [41.6612099, -91.5376898],  [41.6614928, -91.5374904],  [41.6619749, -91.5375254],  [41.6620555, -91.5375252],  [41.6624011, -91.537637],  [41.6623966, -91.537613],  [41.662454, -91.5376349],  [41.6624785, -91.5376114],  [41.6625011, -91.5373397],  [41.6624784, -91.5373156],  [41.6625772, -91.5367168],  [41.6626041, -91.5361008],  [41.6626377, -91.5354813],  [41.6627196, -91.5352943],  [41.6626847, -91.5352829],  [41.6626831, -91.5352856], ];
var line_19 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_19);
      
      var latLngs = [ [41.7040122, -91.610112],  [41.7039626, -91.6099173],  [41.7039325, -91.6099214],  [41.7039404, -91.609903],  [41.7039318, -91.6101198],  [41.7041718, -91.6102239],  [41.7046363, -91.6100582],  [41.704753, -91.6100822],  [41.7048561, -91.6102382],  [41.7049926, -91.6101769],  [41.7053566, -91.6102034],  [41.7055665, -91.6101793],  [41.7056028, -91.6102167],  [41.706057, -91.6102115],  [41.7060944, -91.6101673],  [41.7061445, -91.6101997],  [41.7062027, -91.610187],  [41.7062419, -91.6100878],  [41.706717, -91.6100753],  [41.7071703, -91.6100633],  [41.7076824, -91.6100498],  [41.7081648, -91.6100371],  [41.7084002, -91.6100196],  [41.708435, -91.609386],  [41.708482, -91.6089816],  [41.7084637, -91.6085196],  [41.7083558, -91.6083722],  [41.7083816, -91.6078256],  [41.7084012, -91.6077433],  [41.7084041, -91.6075933],  [41.7084253, -91.6069302],  [41.7084191, -91.6062444],  [41.708413, -91.6055695],  [41.7084091, -91.6051349],  [41.7083314, -91.6050568],  [41.7083132, -91.6049709],  [41.7083503, -91.6049017],  [41.7081273, -91.6047504],  [41.7079369, -91.6043916],  [41.7078866, -91.6041317],  [41.7079017, -91.6040404],  [41.7078828, -91.6039572],  [41.7078352, -91.6036226],  [41.7077424, -91.6034497],  [41.7077033, -91.603264],  [41.7077078, -91.6030806],  [41.7076527, -91.6031177],  [41.7075197, -91.6029934],  [41.7072083, -91.6027261],  [41.7067932, -91.6024147],  [41.7063991, -91.6020779],  [41.7063247, -91.6020151],  [41.7062683, -91.6016933],  [41.7062099, -91.6016387],  [41.7061105, -91.6010604],  [41.7059735, -91.600915],  [41.7058781, -91.6009246],  [41.7055011, -91.6004568],  [41.7051645, -91.5999785],  [41.7050579, -91.5997635],  [41.7050882, -91.5996341],  [41.7050233, -91.5994822],  [41.7049879, -91.5992919],  [41.7048089, -91.5988478],  [41.70472, -91.5985876],  [41.7046683, -91.5985061],  [41.7045355, -91.5978494],  [41.7044754, -91.5974788],  [41.7044925, -91.5973984],  [41.7044229, -91.5971764],  [41.7043955, -91.5969602],  [41.7044078, -91.596885],  [41.7043259, -91.5965832],  [41.7042188, -91.5964707],  [41.7040278, -91.5965174],  [41.7039516, -91.5966067],  [41.70385, -91.5966538],  [41.7036841, -91.5965465],  [41.7036512, -91.596477],  [41.7035911, -91.5964288],  [41.703291, -91.5963723],  [41.7028522, -91.5964369],  [41.7026874, -91.5966834],  [41.7026362, -91.5968049],  [41.7021687, -91.5972483],  [41.7018187, -91.5973291],  [41.7017186, -91.5972199],  [41.7016867, -91.5972291],  [41.7014935, -91.596962],  [41.7014609, -91.596792],  [41.7013906, -91.5967136],  [41.7013005, -91.5966407],  [41.7013127, -91.5966037],  [41.701244, -91.5965133],  [41.7012482, -91.5964521],  [41.7013048, -91.5964164],  [41.7011622, -91.5963083],  [41.701038, -91.5961289],  [41.7010385, -91.5959981],  [41.7009754, -91.595917],  [41.7010181, -91.5958673],  [41.7010155, -91.5958035],  [41.7009495, -91.5958433],  [41.7008988, -91.5957362],  [41.7009076, -91.5956709],  [41.7008878, -91.5955865],  [41.7007125, -91.5955739],  [41.7005952, -91.5954618],  [41.7005186, -91.5953225],  [41.7004883, -91.5951939],  [41.7003717, -91.5949877],  [41.7001976, -91.5948095],  [41.6999882, -91.5947634],  [41.6998044, -91.5945889],  [41.6997286, -91.5942653],  [41.6995938, -91.5940887],  [41.6977537, -91.5928935],  [41.6980826, -91.5941325],  [41.698035, -91.5942475],  [41.6978335, -91.5942839],  [41.6977775, -91.5942434],  [41.6975802, -91.5943827],  [41.6975089, -91.5945033],  [41.6973276, -91.5945727],  [41.6972483, -91.5943112],  [41.6971994, -91.5942859],  [41.6971441, -91.5941916],  [41.6970241, -91.5941411],  [41.6969153, -91.5940693],  [41.6966894, -91.59408],  [41.6964992, -91.5935861],  [41.6962651, -91.5933411],  [41.6961024, -91.5933226],  [41.6959177, -91.5933674],  [41.6958572, -91.5933414],  [41.6956182, -91.5934522],  [41.6955519, -91.5934332],  [41.6955514, -91.5931175],  [41.6954625, -91.592896],  [41.6954351, -91.5929109],  [41.6955009, -91.5930039],  [41.6955404, -91.5931554],  [41.695559, -91.5929986],  [41.6957425, -91.5927913],  [41.6961393, -91.592526],  [41.6962005, -91.5924076],  [41.6962976, -91.5917754],  [41.6963184, -91.5911131],  [41.6963175, -91.5904799],  [41.69631, -91.5897628],  [41.6962464, -91.589155],  [41.696231, -91.5890612],  [41.6962643, -91.5889562],  [41.6962126, -91.5886078],  [41.6961482, -91.5884654],  [41.6960855, -91.5879004],  [41.6959632, -91.5875624],  [41.695911, -91.5875062],  [41.6958964, -91.5874452],  [41.6956983, -91.5871785],  [41.6956849, -91.5871288],  [41.6955571, -91.5869324],  [41.6955477, -91.5867529],  [41.6952148, -91.5863424],  [41.6949369, -91.585938],  [41.6948424, -91.5857137],  [41.6947989, -91.5855695],  [41.6947672, -91.5853929],  [41.6947092, -91.5853144],  [41.6946776, -91.5851505],  [41.6946845, -91.5850519],  [41.6945781, -91.5846169],  [41.6945598, -91.584452],  [41.6946151, -91.584345],  [41.6945977, -91.5840837],  [41.6946341, -91.5840076],  [41.6946011, -91.5838415],  [41.6946797, -91.5838107],  [41.6947036, -91.583602],  [41.6947338, -91.5835617],  [41.6947428, -91.5834354],  [41.6947777, -91.5833325],  [41.6948175, -91.5832977],  [41.6948386, -91.5829496],  [41.6947591, -91.5828603],  [41.6944407, -91.5828285],  [41.693959, -91.5826421],  [41.6934896, -91.5825616],  [41.6929608, -91.5825555],  [41.6924227, -91.5825307],  [41.6918947, -91.5825353],  [41.6913861, -91.5824786],  [41.6909307, -91.582262],  [41.6905133, -91.5820302],  [41.6900424, -91.5818862],  [41.6895686, -91.5818528],  [41.6894987, -91.5819175],  [41.689238, -91.5818147],  [41.6891256, -91.5818708],  [41.6887545, -91.5818236],  [41.6885357, -91.5818285],  [41.6882462, -91.5817241],  [41.6881783, -91.581822],  [41.687969, -91.5817484],  [41.68782, -91.5818001],  [41.6877641, -91.5818523],  [41.6876669, -91.5818744],  [41.6875613, -91.5818388],  [41.687509, -91.5817759],  [41.6869815, -91.5817754],  [41.6868689, -91.5817685],  [41.6867751, -91.5815352],  [41.686257, -91.5813745],  [41.685784, -91.5812216],  [41.6853301, -91.5811504],  [41.6847955, -91.5811035],  [41.684266, -91.581057],  [41.6837295, -91.5809864],  [41.6832579, -91.5809253],  [41.682783, -91.5808633],  [41.6824689, -91.5808016],  [41.6822567, -91.580688],  [41.6821603, -91.5807748],  [41.6817839, -91.5804098],  [41.6816824, -91.5800714],  [41.6814563, -91.5798863],  [41.6813912, -91.5797713],  [41.6813311, -91.579723],  [41.6812468, -91.5797301],  [41.6810464, -91.5794656],  [41.6809628, -91.5791977],  [41.6808993, -91.5785623],  [41.6808453, -91.5780189],  [41.6803469, -91.5780168],  [41.6798768, -91.5780262],  [41.6793653, -91.5780406],  [41.6788987, -91.5780538],  [41.6784376, -91.5780668],  [41.6779608, -91.5780822],  [41.677473, -91.5780982],  [41.6769264, -91.5781161],  [41.676399, -91.5781354],  [41.6758875, -91.5781707],  [41.675428, -91.5782024],  [41.6749665, -91.5782342],  [41.6748127, -91.5782448],  [41.674737, -91.5779537],  [41.6746943, -91.5778939],  [41.6746945, -91.5775119],  [41.6747573, -91.5769183],  [41.6746106, -91.5768405],  [41.6745941, -91.57666],  [41.6746709, -91.5765593],  [41.6746495, -91.5761803],  [41.6745801, -91.5758856],  [41.67458, -91.5757027],  [41.6745335, -91.5750816],  [41.6745318, -91.5749855],  [41.6745693, -91.5749147],  [41.6744938, -91.5746642],  [41.6745278, -91.5744997],  [41.6746854, -91.5742181],  [41.6747061, -91.5741304],  [41.6745697, -91.5739112],  [41.6745159, -91.5734656],  [41.6744536, -91.573367],  [41.6743037, -91.5728],  [41.674274, -91.5724843],  [41.6743013, -91.5722567],  [41.6741987, -91.5716628],  [41.6741708, -91.5712138],  [41.6740479, -91.5711099],  [41.6739925, -91.5705059],  [41.6739368, -91.5698976],  [41.6738752, -91.5692409],  [41.6738095, -91.5686023],  [41.6737396, -91.56791],  [41.6736871, -91.5673135],  [41.6736276, -91.5666064],  [41.6735759, -91.5659613],  [41.6735575, -91.5657318],  [41.6730434, -91.565641],  [41.6725707, -91.565642],  [41.6723597, -91.5655865],  [41.6722963, -91.5654835],  [41.6722417, -91.5654606],  [41.6721136, -91.5655123],  [41.6718905, -91.5654908],  [41.6714113, -91.5655832],  [41.6709523, -91.5655659],  [41.6707512, -91.5656024],  [41.6706719, -91.5655803],  [41.6702023, -91.5655988],  [41.6697457, -91.5655907],  [41.6692797, -91.5655913],  [41.6691666, -91.5656164],  [41.669218, -91.5658693],  [41.669178, -91.5658845],  [41.669204, -91.5657805],  [41.6690982, -91.5654389],  [41.6690818, -91.5653496],  [41.6691145, -91.5653911],  [41.6688715, -91.5655697],  [41.6687804, -91.5655607],  [41.6687118, -91.5654736],  [41.6686353, -91.5651239],  [41.668558, -91.5649887],  [41.6685868, -91.5648802],  [41.6683496, -91.5643188],  [41.6682308, -91.5638512],  [41.6681279, -91.563445],  [41.6679052, -91.5628975],  [41.6678203, -91.562659],  [41.6676376, -91.5624198],  [41.6675924, -91.5621878],  [41.6675248, -91.5621192],  [41.6675247, -91.5620495],  [41.6672846, -91.5615319],  [41.6670464, -91.5609726],  [41.667025, -91.5607735],  [41.6669168, -91.5607168],  [41.6668609, -91.5606513],  [41.6668673, -91.5605818],  [41.6667817, -91.560318],  [41.6667281, -91.5600543],  [41.6665087, -91.5596184],  [41.6665117, -91.5595341],  [41.6663218, -91.5591806],  [41.6662152, -91.5588448],  [41.6662579, -91.5587592],  [41.666225, -91.5587281],  [41.6662264, -91.5586188],  [41.6662047, -91.5585585],  [41.6660904, -91.5584659],  [41.6660388, -91.5583605],  [41.6659085, -91.5579856],  [41.6657974, -91.5577824],  [41.6657393, -91.5575465],  [41.6656497, -91.5574013],  [41.6655638, -91.5570858],  [41.6655233, -91.5569],  [41.665463, -91.5567363],  [41.6654759, -91.5566599],  [41.6653795, -91.5562062],  [41.6654044, -91.5561333],  [41.6653042, -91.5556488],  [41.6652399, -91.5552269],  [41.6651841, -91.5551652],  [41.6650214, -91.554961],  [41.6649592, -91.5547907],  [41.6649449, -91.5547202],  [41.6648928, -91.5546749],  [41.664899, -91.5546341],  [41.6647685, -91.5545198],  [41.6644713, -91.5540493],  [41.6642485, -91.5535061],  [41.6639604, -91.5530536],  [41.6638928, -91.5528282],  [41.6639136, -91.5527629],  [41.6638926, -91.5525765],  [41.6637963, -91.5522768],  [41.6637808, -91.5518727],  [41.6638095, -91.5516495],  [41.663797, -91.5515518],  [41.6638685, -91.5514395],  [41.6640115, -91.5514125],  [41.6637598, -91.5514122],  [41.6636787, -91.5511143],  [41.6636675, -91.5510312],  [41.6635931, -91.5509308],  [41.6634776, -91.5504747],  [41.663231, -91.5501024],  [41.6628289, -91.5497043],  [41.6627482, -91.5496295],  [41.6627416, -91.5494407],  [41.6625158, -91.5491221],  [41.6626633, -91.5485133],  [41.6628663, -91.5479454],  [41.6630542, -91.5473364],  [41.6632288, -91.5466884],  [41.663293, -91.5465324],  [41.6633033, -91.5464311],  [41.6632574, -91.5463405],  [41.6633617, -91.5458633],  [41.6633495, -91.5458066],  [41.6634809, -91.5456985],  [41.6635579, -91.5450512],  [41.663594, -91.5444383],  [41.6635681, -91.5443552],  [41.6635295, -91.5437121],  [41.6634442, -91.5435775],  [41.6631441, -91.543362],  [41.662831, -91.5433181],  [41.6627007, -91.5432659],  [41.6623856, -91.5432779],  [41.6621487, -91.5434173],  [41.6620644, -91.5434147],  [41.6618144, -91.5436801],  [41.6617339, -91.543637],  [41.6615795, -91.5437129],  [41.6614918, -91.5437186],  [41.6613992, -91.5436567],  [41.6612112, -91.5433186],  [41.6611389, -91.5431268],  [41.6612953, -91.5430047],  [41.661256, -91.5422998],  [41.6612643, -91.5416444],  [41.6612664, -91.541378],  [41.6613572, -91.5412825],  [41.6613741, -91.5409007],  [41.6613583, -91.5407883],  [41.6613873, -91.5402468],  [41.6613764, -91.5399182],  [41.661346, -91.5397011],  [41.6613486, -91.5394798],  [41.6612777, -91.5393563],  [41.6612822, -91.5386817],  [41.6612865, -91.5380299],  [41.6612881, -91.5378134],  [41.6613057, -91.5377773],  [41.6617811, -91.5376613],  [41.6619927, -91.537653],  [41.6620369, -91.5377151],  [41.6621142, -91.5376514],  [41.6621352, -91.5375754],  [41.6621629, -91.5376129],  [41.6623774, -91.5375347],  [41.6624411, -91.5375676],  [41.6626192, -91.5379436],  [41.6627279, -91.5379511],  [41.6626921, -91.5378845],  [41.662679, -91.5377615],  [41.6626057, -91.5374709],  [41.6626808, -91.5371177],  [41.6628316, -91.5368154],  [41.6628737, -91.5365906],  [41.6627572, -91.5364459],  [41.6627548, -91.5358788],  [41.6628756, -91.5354878],  [41.662775, -91.5352022],  [41.6625295, -91.5352814],  [41.6625284, -91.5354014],  [41.6625457, -91.5354231],  [41.6625193, -91.5354548],  [41.6625193, -91.5354548], ];
var line_20 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_20);
      
      var latLngs = [ [41.7040359, -91.6100893],  [41.7040817, -91.6100768],  [41.7041274, -91.6101884],  [41.7046152, -91.6100504],  [41.7048814, -91.6099661],  [41.705069, -91.6099489],  [41.705104, -91.609909],  [41.7054401, -91.6098957],  [41.7055395, -91.6100011],  [41.7055948, -91.60999],  [41.7056583, -91.6100322],  [41.7058873, -91.6099974],  [41.7061125, -91.6100285],  [41.7065972, -91.6099541],  [41.7066616, -91.6099333],  [41.7066129, -91.6096976],  [41.7067212, -91.6097465],  [41.7067897, -91.6098215],  [41.7068358, -91.6099606],  [41.7069297, -91.6099881],  [41.7069495, -91.6100283],  [41.7071361, -91.610067],  [41.7074115, -91.610046],  [41.7077233, -91.6100582],  [41.7077868, -91.6100026],  [41.7081016, -91.6100097],  [41.7084231, -91.6100303],  [41.7084326, -91.6094149],  [41.7084815, -91.6089859],  [41.7084857, -91.6083683],  [41.7084636, -91.608371],  [41.708458, -91.6083284],  [41.7084758, -91.6083229],  [41.708417, -91.6083842],  [41.7083024, -91.6078007],  [41.708302, -91.6077233],  [41.7084317, -91.6076402],  [41.7084309, -91.6075576],  [41.708252, -91.6074706],  [41.7082188, -91.607379],  [41.7081282, -91.6072445],  [41.708154, -91.6071029],  [41.7082279, -91.6069051],  [41.7082817, -91.6063138],  [41.7084189, -91.6062193],  [41.7084131, -91.605578],  [41.7084076, -91.6049701],  [41.7084072, -91.6049279],  [41.7082384, -91.6047991],  [41.7081739, -91.6047994],  [41.7080624, -91.604716],  [41.7080194, -91.6045595],  [41.70807, -91.6044749],  [41.7080443, -91.6038571],  [41.7079762, -91.6035443],  [41.7077921, -91.6035588],  [41.707724, -91.6034803],  [41.7077484, -91.6032832],  [41.7073387, -91.6028986],  [41.7069401, -91.6025505],  [41.7065465, -91.6022066],  [41.7063256, -91.6020158],  [41.70622, -91.6013934],  [41.7058978, -91.6009491],  [41.7055401, -91.6005053],  [41.70521, -91.6000664],  [41.7049394, -91.5994587],  [41.70472, -91.5988698],  [41.7046582, -91.598654],  [41.704631, -91.5983019],  [41.7045669, -91.5982546],  [41.704561, -91.5980379],  [41.7046383, -91.5978928],  [41.704644, -91.5972901],  [41.7046359, -91.596697],  [41.7041171, -91.5967127],  [41.703811, -91.5966749],  [41.7035872, -91.5965267],  [41.7034088, -91.5964925],  [41.7028889, -91.5967105],  [41.7028033, -91.5968169],  [41.7027598, -91.5970371],  [41.7026053, -91.5972644],  [41.702427, -91.5974114],  [41.7022234, -91.5974847],  [41.7018571, -91.5974172],  [41.7018434, -91.5972623],  [41.7017161, -91.5970693],  [41.7016786, -91.5968511],  [41.7014893, -91.5964183],  [41.701445, -91.5964084],  [41.7011367, -91.5960437],  [41.7008988, -91.5954171],  [41.7008273, -91.5952117],  [41.7006762, -91.5951104],  [41.7005399, -91.594886],  [41.7004547, -91.5948396],  [41.7003264, -91.5948455],  [41.7002477, -91.594808],  [41.7001314, -91.594659],  [41.6999852, -91.5946892],  [41.6996627, -91.5945757],  [41.6994887, -91.5944513],  [41.6992376, -91.5944682],  [41.6991301, -91.5947137],  [41.6990278, -91.594754],  [41.6985872, -91.5946277],  [41.6985843, -91.594582],  [41.6985431, -91.5944575],  [41.6983142, -91.5943853],  [41.6982686, -91.5944235],  [41.6979473, -91.5942852],  [41.6977828, -91.5942795],  [41.6978002, -91.5943146],  [41.6977739, -91.5942985],  [41.6977819, -91.594262],  [41.6976801, -91.5942315],  [41.6976122, -91.5942481],  [41.6974767, -91.5941998],  [41.6973694, -91.5941951],  [41.697259, -91.5940927],  [41.6971146, -91.5940643],  [41.6971742, -91.5941541],  [41.6973076, -91.594148],  [41.6971628, -91.5940465],  [41.69682, -91.5939174],  [41.6967635, -91.5939422],  [41.6963172, -91.5937077],  [41.6962098, -91.5935277],  [41.6960896, -91.5934808],  [41.6960677, -91.5935254],  [41.695814, -91.5936679],  [41.6955456, -91.5940165],  [41.6955644, -91.5933433],  [41.695845, -91.5928558],  [41.6960956, -91.5925593],  [41.6962452, -91.5922264],  [41.6963024, -91.5916286],  [41.6963187, -91.5909212],  [41.6963169, -91.5902495],  [41.6962982, -91.589603],  [41.6962622, -91.5892522],  [41.6962315, -91.589199],  [41.696231, -91.5890524],  [41.696176, -91.5890346],  [41.6961149, -91.5887918],  [41.6960982, -91.5885484],  [41.6960719, -91.5885713],  [41.695989, -91.5884105],  [41.6959307, -91.588358],  [41.6957494, -91.5877339],  [41.6956712, -91.5873705],  [41.6956814, -91.5873087],  [41.6956498, -91.5873032],  [41.6956523, -91.5872077],  [41.695415, -91.5866888],  [41.6950424, -91.5862758],  [41.6949367, -91.5860873],  [41.6948583, -91.5857763],  [41.6948702, -91.5856799],  [41.6946869, -91.5850415],  [41.6946746, -91.5844017],  [41.6947314, -91.5839863],  [41.6946587, -91.5839168],  [41.6947042, -91.5837446],  [41.6946793, -91.5837288],  [41.6946834, -91.5836207],  [41.6946762, -91.5834525],  [41.6947514, -91.5832276],  [41.694723, -91.5830008],  [41.6943806, -91.5828787],  [41.6940405, -91.582802],  [41.693994, -91.5826261],  [41.6935064, -91.5825306],  [41.6930334, -91.5825253],  [41.6925781, -91.5825293],  [41.6921502, -91.5825331],  [41.6919939, -91.5826414],  [41.691873, -91.5826447],  [41.6917692, -91.5826108],  [41.691378, -91.5826347],  [41.6913162, -91.5825875],  [41.6909675, -91.5824375],  [41.690477, -91.5821726],  [41.6903604, -91.5820731],  [41.6898855, -91.5819862],  [41.6896678, -91.5819573],  [41.6896315, -91.5819231],  [41.6891572, -91.5819811],  [41.6890015, -91.581981],  [41.6889378, -91.5819329],  [41.6888886, -91.5819424],  [41.6889373, -91.5819374],  [41.688571, -91.5819305],  [41.6881579, -91.5818301],  [41.6880231, -91.5817579],  [41.6877661, -91.5817952],  [41.6872528, -91.5816776],  [41.6867897, -91.581539],  [41.6863234, -91.5813957],  [41.6858774, -91.5812476],  [41.6853247, -91.5811499],  [41.6848293, -91.5811065],  [41.6843579, -91.5810651],  [41.6838353, -91.581001],  [41.6833111, -91.5809322],  [41.6828391, -91.5808712],  [41.6823702, -91.5807538],  [41.6822035, -91.5806526],  [41.6821328, -91.5806889],  [41.6818243, -91.580558],  [41.6818345, -91.5803898],  [41.681767, -91.5803409],  [41.6816661, -91.5801314],  [41.6815609, -91.5800291],  [41.6814817, -91.5800456],  [41.6813708, -91.5799736],  [41.6812147, -91.5798496],  [41.6811125, -91.5797368],  [41.6808633, -91.5792183],  [41.6805752, -91.5786454],  [41.6805211, -91.5784298],  [41.6805505, -91.5782758],  [41.6804859, -91.5782086],  [41.6803599, -91.5781781],  [41.6803023, -91.5780498],  [41.6802519, -91.5780128],  [41.6799617, -91.57817],  [41.6798793, -91.5780262],  [41.6793612, -91.5780407],  [41.678855, -91.578055],  [41.6784028, -91.5780677],  [41.6779472, -91.5780827],  [41.6774733, -91.5780982],  [41.67695, -91.5781153],  [41.6764351, -91.5781329],  [41.6759118, -91.578169],  [41.6753864, -91.5782053],  [41.6748729, -91.5782407],  [41.6748453, -91.5782353],  [41.6747722, -91.5781025],  [41.6746586, -91.577423],  [41.6746084, -91.576816],  [41.6745521, -91.5762002],  [41.67449, -91.5755534],  [41.6743277, -91.5754914],  [41.6742204, -91.5752768],  [41.6741896, -91.5750359],  [41.6742464, -91.5749797],  [41.6742779, -91.57484],  [41.6742405, -91.5747613],  [41.6742041, -91.5747374],  [41.6741594, -91.5746162],  [41.674381, -91.5744697],  [41.6743173, -91.5738718],  [41.6742544, -91.5732587],  [41.6741875, -91.5725866],  [41.6741226, -91.5719257],  [41.6740673, -91.5713208],  [41.6740496, -91.5711287],  [41.6738986, -91.5710264],  [41.6738542, -91.5707211],  [41.6738343, -91.5704656],  [41.673781, -91.5703968],  [41.6738263, -91.5702382],  [41.6738006, -91.5701393],  [41.673797, -91.5697877],  [41.6739142, -91.5696516],  [41.6738468, -91.5689645],  [41.673779, -91.5683107],  [41.6737192, -91.5676788],  [41.6736596, -91.5670018],  [41.6736159, -91.5664605],  [41.6733746, -91.5664257],  [41.6733515, -91.5662528],  [41.6733611, -91.5661518],  [41.6733021, -91.565768],  [41.6732438, -91.5657748],  [41.6731315, -91.5656633],  [41.6731161, -91.5656792],  [41.6731112, -91.5656233],  [41.6730611, -91.5655915],  [41.6728953, -91.5656337],  [41.6725613, -91.5656174],  [41.6720694, -91.5656219],  [41.6715518, -91.5656231],  [41.6710998, -91.5656149],  [41.6705652, -91.5656053],  [41.67004, -91.5655959],  [41.6695447, -91.5655872],  [41.6691686, -91.5656152],  [41.668802, -91.566005],  [41.6688448, -91.5659649],  [41.6689456, -91.5660544],  [41.6686899, -91.5655296],  [41.6685643, -91.5653161],  [41.6686949, -91.5651382],  [41.6684472, -91.5645497],  [41.6684056, -91.5644795],  [41.6683415, -91.5644826],  [41.6682965, -91.5643271],  [41.6683066, -91.5642171],  [41.6682479, -91.5640783],  [41.6677563, -91.5643582],  [41.6677456, -91.5642583],  [41.6677141, -91.5642198],  [41.6677004, -91.5640781],  [41.6677156, -91.5638797],  [41.667615, -91.5637253],  [41.6675495, -91.5634487],  [41.6674621, -91.5630699],  [41.6673598, -91.5629384],  [41.6673087, -91.5626995],  [41.6672284, -91.5625516],  [41.6672491, -91.5624042],  [41.6671808, -91.5622354],  [41.6672, -91.5621127],  [41.6671449, -91.5620201],  [41.6670822, -91.5616942],  [41.6669018, -91.5611265],  [41.6668507, -91.5610565],  [41.6667282, -91.5605932],  [41.6665842, -91.560293],  [41.6664146, -91.559891],  [41.6663642, -91.5598381],  [41.6663136, -91.5596851],  [41.6662206, -91.5596978],  [41.6661959, -91.5596023],  [41.6659552, -91.5591501],  [41.6658808, -91.5588764],  [41.6659143, -91.5587758],  [41.665802, -91.5581454],  [41.665766, -91.5579931],  [41.665776, -91.5578915],  [41.6657075, -91.5575415],  [41.665687, -91.5573148],  [41.6655941, -91.5571305],  [41.665623, -91.556902],  [41.6655, -91.5567087],  [41.6653247, -91.5565934],  [41.665289, -91.5564659],  [41.6652777, -91.556223],  [41.6652418, -91.5561632],  [41.6652205, -91.5561672],  [41.6652818, -91.556006],  [41.6652382, -91.5555995],  [41.665193, -91.5555518],  [41.6650722, -91.5550873],  [41.6647287, -91.5546649],  [41.6643752, -91.554217],  [41.6640503, -91.5537759],  [41.663737, -91.5533281],  [41.6635625, -91.5530284],  [41.6635808, -91.5529007],  [41.663559, -91.5528356],  [41.663608, -91.55244],  [41.6635837, -91.5522897],  [41.6637042, -91.5521779],  [41.6635906, -91.5515776],  [41.6634747, -91.5509545],  [41.6633329, -91.5502817],  [41.6632126, -91.5499723],  [41.6628061, -91.5495149],  [41.6625158, -91.5491221],  [41.6626067, -91.5486782],  [41.6628187, -91.5480768],  [41.6630317, -91.5474852],  [41.6630995, -91.5472942],  [41.6630882, -91.5471816],  [41.6631355, -91.5470982],  [41.6631741, -91.5469314],  [41.6631556, -91.5468408],  [41.6632167, -91.5466797],  [41.6632351, -91.5464745],  [41.6632025, -91.5463801],  [41.663028, -91.5462554],  [41.6630454, -91.5462018],  [41.6631525, -91.5461347],  [41.6631947, -91.5460744],  [41.6632256, -91.5457792],  [41.6632483, -91.5457265],  [41.663231, -91.5456415],  [41.6632161, -91.5454211],  [41.6632394, -91.5453517],  [41.6631937, -91.5451346],  [41.6631597, -91.5450932],  [41.663148, -91.5449433],  [41.6631909, -91.5447793],  [41.6633381, -91.5446874],  [41.6633118, -91.5440733],  [41.6632645, -91.5438466],  [41.6631745, -91.5436864],  [41.662682, -91.5437678],  [41.6624992, -91.5438018],  [41.6624181, -91.5436046],  [41.6623769, -91.5438247],  [41.6621658, -91.5438447],  [41.6621377, -91.5439246],  [41.6619886, -91.543884],  [41.6618851, -91.543686],  [41.6617373, -91.5436898],  [41.6615734, -91.5435768],  [41.6612951, -91.5431197],  [41.6612663, -91.5428444],  [41.6609941, -91.5428465],  [41.661096, -91.5426413],  [41.6611277, -91.542527],  [41.66115, -91.5424773],  [41.6611298, -91.5421207],  [41.6612088, -91.5416757],  [41.6611733, -91.541511],  [41.6612215, -91.5411483],  [41.6612688, -91.5410662],  [41.6612729, -91.5404562],  [41.661275, -91.5399393],  [41.6611166, -91.5398243],  [41.6611312, -91.5393757],  [41.661098, -91.539168],  [41.6611109, -91.5390363],  [41.6612805, -91.5389365],  [41.6612848, -91.5382849],  [41.6612891, -91.5376724],  [41.6613763, -91.5375678],  [41.6616156, -91.5376004],  [41.6616824, -91.5376406],  [41.6617284, -91.5376356],  [41.6618955, -91.5375128],  [41.6619697, -91.5375353],  [41.6620224, -91.5375084],  [41.6621335, -91.5375841],  [41.6622073, -91.5375907],  [41.6623439, -91.5377159],  [41.6624497, -91.5377717],  [41.6624734, -91.5375596],  [41.6625199, -91.5375124],  [41.6625194, -91.5373945],  [41.6624951, -91.5373436],  [41.6625119, -91.5371255],  [41.6624898, -91.5370652],  [41.6622761, -91.5370307],  [41.6622242, -91.5369986],  [41.6622999, -91.5367857],  [41.6622995, -91.5366543],  [41.6622554, -91.5366408],  [41.6624761, -91.5361436],  [41.6625019, -91.5361649],  [41.662408, -91.5361506],  [41.6625015, -91.5355537],  [41.6626482, -91.5353802],  [41.6626304, -91.5352674], ];
var line_21 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_21);
      
      var latLngs = [ [41.7040309, -91.6102055],  [41.7039363, -91.6101105],  [41.7038454, -91.6099183],  [41.7040475, -91.6099957],  [41.7040487, -91.610064],  [41.7040629, -91.6100477],  [41.7040957, -91.6101463],  [41.7042645, -91.6101703],  [41.704534, -91.6101231],  [41.7050005, -91.6101301],  [41.7053947, -91.6101123],  [41.7054516, -91.6099407],  [41.7059317, -91.6099058],  [41.7062008, -91.609974],  [41.7062604, -91.6100873],  [41.7066777, -91.6100763],  [41.7067362, -91.6100172],  [41.7072255, -91.6099924],  [41.7077097, -91.6100491],  [41.7082341, -91.6100353],  [41.7084249, -91.6100302],  [41.7084319, -91.609427],  [41.7084822, -91.6089802],  [41.7084094, -91.6088452],  [41.7084534, -91.6086787],  [41.7084165, -91.6084674],  [41.7084243, -91.6083617],  [41.7083912, -91.608268],  [41.708352, -91.6078641],  [41.7083587, -91.6077522],  [41.7083265, -91.6076567],  [41.708326, -91.6069993],  [41.7083461, -91.6063935],  [41.7083552, -91.60618],  [41.7084177, -91.606087],  [41.7084114, -91.6053871],  [41.7084071, -91.6049127],  [41.7080989, -91.60462],  [41.7080606, -91.6040189],  [41.7078286, -91.6038389],  [41.7078173, -91.6036483],  [41.7077794, -91.6035693],  [41.7074254, -91.6031467],  [41.7073605, -91.6031048],  [41.7073642, -91.6029209],  [41.7069681, -91.6025748],  [41.7065863, -91.6022411],  [41.706287, -91.6019925],  [41.7062218, -91.601399],  [41.7058868, -91.6009355],  [41.7055079, -91.600467],  [41.7052557, -91.6001477],  [41.7049851, -91.5995846],  [41.7047857, -91.5990447],  [41.7046781, -91.5987542],  [41.7046113, -91.5982444],  [41.7045683, -91.598189],  [41.7045513, -91.5981107],  [41.7046383, -91.5980181],  [41.704642, -91.5974017],  [41.7046379, -91.5972542],  [41.7043417, -91.5971723],  [41.7041301, -91.5967239],  [41.7041649, -91.5965991],  [41.7041208, -91.596585],  [41.7038578, -91.596706],  [41.7036165, -91.5965956],  [41.703481, -91.5964951],  [41.7034066, -91.596486],  [41.7029707, -91.5966026],  [41.7028798, -91.596716],  [41.702834, -91.59683],  [41.7026955, -91.5969543],  [41.70242, -91.597304],  [41.7021472, -91.5975054],  [41.7020287, -91.5975363],  [41.7017881, -91.5975111],  [41.7016679, -91.5973789],  [41.7016354, -91.5972764],  [41.7015404, -91.5971967],  [41.7014458, -91.5968929],  [41.7014609, -91.5968448],  [41.7013598, -91.5966259],  [41.7013141, -91.5966013],  [41.701331, -91.5965272],  [41.7012462, -91.5963321],  [41.701095, -91.5961951],  [41.701049, -91.5960134],  [41.7010549, -91.5956849],  [41.7010033, -91.595443],  [41.7009223, -91.5952583],  [41.700769, -91.5950721],  [41.7005066, -91.5950813],  [41.7000406, -91.5949301],  [41.6997394, -91.5948042],  [41.6996447, -91.5946624],  [41.6994798, -91.5945046],  [41.6993991, -91.5944952],  [41.699311, -91.5945396],  [41.6992206, -91.594667],  [41.6991475, -91.5946888],  [41.6990629, -91.5946091],  [41.6988301, -91.5941339],  [41.69875, -91.5941133],  [41.6985913, -91.5943491],  [41.6985608, -91.5943293],  [41.6984639, -91.594397],  [41.6983548, -91.5943721],  [41.6983318, -91.5943403],  [41.6982088, -91.5943236],  [41.6981347, -91.5942953],  [41.6981602, -91.5942721],  [41.6976892, -91.5942401],  [41.6973692, -91.5942437],  [41.6969179, -91.5940587],  [41.6967539, -91.5939776],  [41.6965082, -91.5939547],  [41.6960087, -91.5937787],  [41.6960116, -91.5939152],  [41.6958683, -91.5939228],  [41.6960661, -91.5935701],  [41.6959701, -91.5935442],  [41.6959274, -91.5934895],  [41.6955159, -91.5933934],  [41.6954531, -91.5933002],  [41.6956208, -91.5929761],  [41.6958722, -91.5927575],  [41.6959657, -91.5927185],  [41.6961226, -91.5925113],  [41.6962469, -91.5922225],  [41.6963034, -91.5915956],  [41.6963185, -91.5908675],  [41.6963169, -91.5902566],  [41.6963024, -91.5896534],  [41.6962325, -91.5890705],  [41.6961684, -91.5888108],  [41.696166, -91.5886456],  [41.6960593, -91.5882538],  [41.6960132, -91.58819],  [41.6958608, -91.5875798],  [41.6956435, -91.5870144],  [41.6956227, -91.586916],  [41.69526, -91.5865009],  [41.6949408, -91.5860594],  [41.6947699, -91.5858122],  [41.6948603, -91.5856537],  [41.6946937, -91.585075],  [41.6946725, -91.5844208],  [41.6947303, -91.5839934],  [41.6946377, -91.583893],  [41.6946772, -91.5835495],  [41.6947334, -91.583432],  [41.6948262, -91.5831299],  [41.6948634, -91.5830669],  [41.6948223, -91.5829723],  [41.6945835, -91.5828274],  [41.6942845, -91.5827789],  [41.6942033, -91.5826731],  [41.6937023, -91.5825604],  [41.6932293, -91.5825239],  [41.6927364, -91.5825272],  [41.6922498, -91.5825319],  [41.6917578, -91.5825303],  [41.6913225, -91.5824605],  [41.690867, -91.5822277],  [41.6904021, -91.581971],  [41.6899089, -91.5818727],  [41.6894468, -91.5818469],  [41.6891666, -91.5818389],  [41.6890763, -91.5818976],  [41.6887108, -91.581872],  [41.6884749, -91.5818327],  [41.6879498, -91.5818639],  [41.6877823, -91.5818484],  [41.6877045, -91.5817859],  [41.6871768, -91.581656],  [41.6867079, -91.581518],  [41.686207, -91.5813586],  [41.6857051, -91.5811999],  [41.6852284, -91.5811415],  [41.6847014, -91.5810952],  [41.6842404, -91.5810548],  [41.6837831, -91.5809938],  [41.6833207, -91.5809329],  [41.682841, -91.5808703],  [41.6824221, -91.5807809],  [41.6823346, -91.5808931],  [41.6821732, -91.5808108],  [41.6818377, -91.5805861],  [41.681746, -91.5805767],  [41.6815759, -91.5804095],  [41.6815513, -91.5803372],  [41.6814122, -91.5802076],  [41.6814733, -91.5799456],  [41.681136, -91.5796135],  [41.680988, -91.5796728],  [41.6808383, -91.5793749],  [41.6808246, -91.5791444],  [41.6806745, -91.5785616],  [41.6808876, -91.5784447],  [41.6808675, -91.5782418],  [41.6804597, -91.5780201],  [41.6799462, -91.5780292],  [41.6794358, -91.5780429],  [41.6789402, -91.5780561],  [41.6784846, -91.5780682],  [41.6779807, -91.5780836],  [41.6774897, -91.5780988],  [41.6769325, -91.5781162],  [41.6764546, -91.5781358],  [41.6759698, -91.57817],  [41.6754881, -91.5782039],  [41.6750355, -91.5782358],  [41.674813, -91.5782515],  [41.6745263, -91.5783188],  [41.6744728, -91.5778182],  [41.6746882, -91.5776833],  [41.6746166, -91.5769058],  [41.6745605, -91.5762918],  [41.6745037, -91.5756918],  [41.6744383, -91.5750291],  [41.6742932, -91.5749628],  [41.674181, -91.5744364],  [41.6741669, -91.5737722],  [41.6741621, -91.573446],  [41.6742596, -91.5733104],  [41.6741961, -91.5726729],  [41.6741247, -91.5719481],  [41.6740603, -91.5712444],  [41.6739963, -91.5705469],  [41.6739365, -91.5698949],  [41.6738737, -91.5692266],  [41.6738055, -91.5685643],  [41.6737433, -91.5679521],  [41.6736898, -91.5673443],  [41.6736375, -91.56673],  [41.6735853, -91.5660784],  [41.6735541, -91.5656894],  [41.6730363, -91.565663],  [41.6725812, -91.5656423],  [41.6724971, -91.5656736],  [41.6722598, -91.5656456],  [41.6721386, -91.5656821],  [41.6716773, -91.5656222],  [41.6714198, -91.5656748],  [41.6710707, -91.5656372],  [41.6705904, -91.5656709],  [41.6700787, -91.5656239],  [41.6696076, -91.5656247],  [41.6691803, -91.5656069],  [41.6688187, -91.5659752],  [41.6689942, -91.5661513],  [41.6690186, -91.5661344],  [41.6688493, -91.5657626],  [41.6686544, -91.565577],  [41.6686182, -91.5655149],  [41.6684314, -91.5648994],  [41.668285, -91.5648565],  [41.668331, -91.5647639],  [41.6683419, -91.5646813],  [41.6682125, -91.5644315],  [41.6681847, -91.5643283],  [41.6680881, -91.5641724],  [41.6679726, -91.5636455],  [41.6679116, -91.5635621],  [41.6676796, -91.5629319],  [41.6675089, -91.5626362],  [41.6673069, -91.5620959],  [41.6672661, -91.5620323],  [41.6672466, -91.5619239],  [41.6672412, -91.5616978],  [41.6671869, -91.5616374],  [41.6670919, -91.5613792],  [41.6669745, -91.5611715],  [41.6669008, -91.5609032],  [41.666814, -91.5607492],  [41.6667575, -91.5604747],  [41.6666598, -91.5603555],  [41.6665851, -91.5601953],  [41.6665335, -91.560145],  [41.6663943, -91.5598091],  [41.6663054, -91.5596667],  [41.6662804, -91.5595825],  [41.6662151, -91.5595452],  [41.6659315, -91.5591646],  [41.6656564, -91.5592949],  [41.6656391, -91.5592366],  [41.6656642, -91.5591228],  [41.6657095, -91.559043],  [41.6658042, -91.5584248],  [41.6657909, -91.5583434],  [41.6658669, -91.5581941],  [41.6656964, -91.5575848],  [41.6655519, -91.5568898],  [41.6655417, -91.5568283],  [41.6654041, -91.5567811],  [41.6653094, -91.5565696],  [41.6653504, -91.5564454],  [41.6653235, -91.5563223],  [41.6653105, -91.5557551],  [41.6652596, -91.5556439],  [41.6650935, -91.5551442],  [41.6650233, -91.5550168],  [41.664597, -91.5547727],  [41.6642863, -91.5543097],  [41.6640235, -91.5537828],  [41.663853, -91.5531888],  [41.6636861, -91.5528031],  [41.6637982, -91.5526556],  [41.6636675, -91.5519875],  [41.6635559, -91.5519198],  [41.663468, -91.551285],  [41.6633117, -91.5506434],  [41.6632544, -91.5503683],  [41.6630801, -91.550033],  [41.6627802, -91.5497876],  [41.6628141, -91.5495241],  [41.6625165, -91.5491231],  [41.6626799, -91.5484651],  [41.6629002, -91.547853],  [41.6631194, -91.5472379],  [41.663198, -91.5469735],  [41.6631828, -91.5468569],  [41.6632167, -91.5466936],  [41.663211, -91.5466028],  [41.66329, -91.5459772],  [41.6632764, -91.5455154],  [41.66329, -91.5454405],  [41.6632687, -91.5448254],  [41.6632863, -91.5446555],  [41.6632482, -91.5442282],  [41.6633153, -91.5441523],  [41.6632632, -91.5438427],  [41.6632271, -91.5437683],  [41.6631257, -91.5437818],  [41.6629514, -91.5436403],  [41.6624683, -91.5437567],  [41.6620215, -91.5438832],  [41.6618444, -91.543945],  [41.6613927, -91.5438771],  [41.6612683, -91.5437626],  [41.6612474, -91.5436354],  [41.6611415, -91.5435053],  [41.6611131, -91.5432571],  [41.6613106, -91.5430618],  [41.6612537, -91.5424122],  [41.6612631, -91.5417891],  [41.6612663, -91.5413857],  [41.6611044, -91.5412625],  [41.6611558, -91.5409545],  [41.6611555, -91.5406281],  [41.6612726, -91.540536],  [41.6612753, -91.5398698],  [41.6612787, -91.5392019],  [41.661283, -91.5385509],  [41.6612872, -91.5379411],  [41.6612891, -91.5376678],  [41.6617787, -91.5376614],  [41.6618375, -91.5376591],  [41.6619059, -91.5374684],  [41.6620258, -91.5373788],  [41.6620567, -91.5373125],  [41.6621137, -91.5372693],  [41.6621035, -91.5370918],  [41.6620742, -91.5371358],  [41.6621299, -91.5371791],  [41.6621932, -91.5371265],  [41.6622863, -91.5370825],  [41.6622586, -91.537033],  [41.6622425, -91.5370732],  [41.6622917, -91.537206],  [41.6622764, -91.5372099],  [41.6624498, -91.5366251],  [41.6624403, -91.5360325],  [41.6625332, -91.5358076],  [41.6625505, -91.5354237],  [41.662586, -91.5353872],  [41.6625799, -91.5354281],  [41.662593, -91.5353306],  [41.662593, -91.5353306], ];
var line_22 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_22);
      
      var latLngs = [ [41.6623876, -91.5356115],  [41.6624474, -91.5355907],  [41.66254, -91.5355243],  [41.6625843, -91.5355506],  [41.6625489, -91.5355262],  [41.6624778, -91.5355944],  [41.6624935, -91.5357922],  [41.6626208, -91.5355288],  [41.6626187, -91.5364023],  [41.6628475, -91.5363741],  [41.6627157, -91.536091],  [41.6629928, -91.535874],  [41.6629159, -91.5361285],  [41.6629884, -91.5360375],  [41.6630981, -91.5360667],  [41.6630835, -91.5361833],  [41.66356, -91.5364347],  [41.663621, -91.5364408],  [41.6640406, -91.5359486],  [41.6639811, -91.535757],  [41.6639486, -91.5362143],  [41.663798, -91.5368259],  [41.6624207, -91.5379239],  [41.6627171, -91.5378849],  [41.6625764, -91.5379736],  [41.6627221, -91.5373658],  [41.6624901, -91.5379393],  [41.6623318, -91.5376397],  [41.6620682, -91.5382019],  [41.6619732, -91.5378646],  [41.6619988, -91.53764],  [41.6618566, -91.5376646],  [41.6617693, -91.5376017],  [41.6618559, -91.538149],  [41.6618112, -91.5381298],  [41.6614159, -91.5435992],  [41.6614342, -91.5436931],  [41.6619951, -91.544111],  [41.6622222, -91.5442614],  [41.6631853, -91.5436118],  [41.6632018, -91.5436133],  [41.6632024, -91.5439337],  [41.6633029, -91.5452354],  [41.6632772, -91.5460662],  [41.6632699, -91.5461765],  [41.6633771, -91.5467525],  [41.6632218, -91.5473165],  [41.6629825, -91.5478525],  [41.6629332, -91.5479403],  [41.6626139, -91.5482507],  [41.6633737, -91.5504187],  [41.6633925, -91.5504759],  [41.663609, -91.5501818],  [41.6638243, -91.550559],  [41.6636388, -91.5505748],  [41.6637849, -91.5508832],  [41.6638593, -91.5517058],  [41.6642324, -91.5522043],  [41.6641208, -91.5529415],  [41.6641396, -91.5533356],  [41.6643261, -91.5536833],  [41.6647566, -91.5541517],  [41.6650706, -91.5545228],  [41.6655526, -91.5553432],  [41.665566, -91.5555408],  [41.6657971, -91.5566471],  [41.6657824, -91.5567524],  [41.6657156, -91.556857],  [41.6658329, -91.5570078],  [41.6659099, -91.557561],  [41.6653453, -91.5554293],  [41.6656518, -91.5565078],  [41.6658267, -91.5571649],  [41.6665338, -91.5594799],  [41.6664737, -91.5589733],  [41.666342, -91.5585351],  [41.6665123, -91.5591875],  [41.6667355, -91.5597535],  [41.6666799, -91.5597379],  [41.6670592, -91.5606786],  [41.6673419, -91.5612533],  [41.6675806, -91.5614816],  [41.6678876, -91.5624845],  [41.6682414, -91.5629508],  [41.6683787, -91.5631541],  [41.6688215, -91.5642861],  [41.6689328, -91.5644817],  [41.6692259, -91.565233],  [41.6691682, -91.5659974],  [41.6691551, -91.5662451],  [41.6691178, -91.5664409],  [41.6693339, -91.5668045],  [41.6696093, -91.5654894],  [41.6696415, -91.5652533],  [41.6688721, -91.5647596],  [41.6685153, -91.5648391],  [41.6687705, -91.5650378],  [41.6693489, -91.5658028],  [41.6689838, -91.5654082],  [41.6689608, -91.5653871],  [41.6688705, -91.5661216],  [41.6686937, -91.5650981],  [41.6695992, -91.5656215],  [41.6695933, -91.5655683],  [41.6694723, -91.5658328],  [41.6702192, -91.5658327],  [41.6707517, -91.5671439],  [41.6704455, -91.5659139],  [41.6706636, -91.5657275],  [41.6712418, -91.5655553],  [41.6719255, -91.5656104],  [41.6725195, -91.5655302],  [41.6729605, -91.5657592],  [41.6728561, -91.5657196],  [41.6734837, -91.5663445],  [41.6739355, -91.5664227],  [41.674067, -91.5668285],  [41.6739521, -91.5674388],  [41.6737724, -91.5682561],  [41.6736844, -91.568472],  [41.6740124, -91.5683537],  [41.6739106, -91.5687202],  [41.6739467, -91.5703841],  [41.6739945, -91.5717298],  [41.673964, -91.5718768],  [41.6739777, -91.572124],  [41.6740846, -91.5725659],  [41.6741315, -91.5729897],  [41.6742923, -91.5731603],  [41.6741199, -91.5737152],  [41.6746686, -91.5742899],  [41.6747043, -91.5755689],  [41.6747841, -91.5764079],  [41.6744575, -91.5761456],  [41.6743423, -91.5762346],  [41.6747373, -91.5771268],  [41.6746932, -91.5777507],  [41.6748148, -91.5783803],  [41.6749135, -91.5784567],  [41.6750249, -91.5783679],  [41.6755387, -91.5786453],  [41.6764737, -91.5790037],  [41.6766859, -91.5790525],  [41.6773336, -91.5786161],  [41.6773628, -91.5783246],  [41.677759, -91.578211],  [41.6782059, -91.5782983],  [41.6784034, -91.5778607],  [41.6788183, -91.5781131],  [41.6791397, -91.5780422],  [41.6790018, -91.5777982],  [41.6789226, -91.5778868],  [41.6796863, -91.5780932],  [41.6797639, -91.5780657],  [41.6803405, -91.5783399],  [41.6802292, -91.5783391],  [41.6801976, -91.5778584],  [41.6803457, -91.5781818],  [41.6808797, -91.5783102],  [41.681033, -91.5785538],  [41.6810475, -91.5789917],  [41.6808914, -91.57917],  [41.6810668, -91.5794632],  [41.681122, -91.579771],  [41.6811793, -91.579891],  [41.6813318, -91.5800766],  [41.6816977, -91.5804318],  [41.6827349, -91.5800568],  [41.6831214, -91.5805875],  [41.6834615, -91.5804978],  [41.6835342, -91.5807646],  [41.6836281, -91.5807543],  [41.6846467, -91.5809528],  [41.6848034, -91.5809694],  [41.6853494, -91.5811704],  [41.6854077, -91.5812314],  [41.6860069, -91.5813288],  [41.6862914, -91.5814158],  [41.686843, -91.5813853],  [41.6872761, -91.5813961],  [41.6874584, -91.5815176],  [41.6877733, -91.5814985],  [41.6876656, -91.5815308],  [41.6876238, -91.5815933],  [41.6883401, -91.5814161],  [41.688638, -91.5813326],  [41.6892108, -91.5814594],  [41.6894242, -91.5815475],  [41.6905048, -91.5822267],  [41.6912262, -91.5816436],  [41.6912569, -91.5815637],  [41.6911322, -91.5827121],  [41.691132, -91.5828594],  [41.6909033, -91.5831586],  [41.6926404, -91.5816558],  [41.6926901, -91.5816912],  [41.6931146, -91.5824815],  [41.6927947, -91.5828271],  [41.693101, -91.5826289],  [41.6931406, -91.5825247],  [41.6932213, -91.5817619],  [41.6932155, -91.5816577],  [41.694034, -91.5819771],  [41.694669, -91.5828998],  [41.694676, -91.5829331],  [41.6948252, -91.5830077],  [41.6950801, -91.5838268],  [41.6947727, -91.5852124],  [41.6946728, -91.5858758],  [41.6948407, -91.5862545],  [41.6954215, -91.5868699],  [41.6959143, -91.5877356],  [41.6960545, -91.5883468],  [41.6962507, -91.5887577],  [41.6963079, -91.5896979],  [41.6962324, -91.5901234],  [41.6962679, -91.5906647],  [41.6963754, -91.5911908],  [41.6963881, -91.5910554],  [41.6963065, -91.5914256],  [41.6962831, -91.5923276],  [41.6956556, -91.593383],  [41.6954534, -91.5937166],  [41.6955122, -91.5934886],  [41.695695, -91.5932209],  [41.6958366, -91.5932183],  [41.6964519, -91.5927702],  [41.6966377, -91.5928023],  [41.6967076, -91.593044],  [41.6967521, -91.5930026],  [41.6966661, -91.5935489],  [41.6966531, -91.5943386],  [41.6974142, -91.5941872],  [41.6973398, -91.5944071],  [41.697992, -91.5940318],  [41.6986931, -91.5936389],  [41.6992488, -91.594381],  [41.6997898, -91.5943514],  [41.6999854, -91.5944551],  [41.7006118, -91.5946376],  [41.7007248, -91.5946798],  [41.7006096, -91.5954845],  [41.7005921, -91.5955096],  [41.7006308, -91.5959094],  [41.7010431, -91.595911],  [41.7008684, -91.5961039],  [41.7004991, -91.5966359],  [41.7004359, -91.596758],  [41.7008338, -91.5965059],  [41.7007458, -91.5966205],  [41.7048983, -91.6006873],  [41.7049724, -91.6008524],  [41.707815, -91.602025],  [41.7079416, -91.600631],  [41.7080314, -91.5996969],  [41.7077236, -91.6017145],  [41.7076741, -91.6020292],  [41.7077843, -91.6020899],  [41.7077255, -91.6021831],  [41.7081938, -91.6039285],  [41.708438, -91.6048024],  [41.7088159, -91.6056468],  [41.7085359, -91.604853],  [41.7086836, -91.6053514],  [41.7087148, -91.6057667],  [41.7086875, -91.6060176],  [41.7087511, -91.6059411],  [41.7090593, -91.6089832],  [41.7100711, -91.6086843],  [41.7094109, -91.6092009],  [41.7089792, -91.610494],  [41.7089772, -91.6103223],  [41.7075435, -91.6111376],  [41.7072188, -91.6112031],  [41.7079533, -91.6102301],  [41.7080595, -91.6100489],  [41.7075406, -91.6098588],  [41.7070678, -91.6100008],  [41.7057599, -91.6101508],  [41.7056339, -91.6101638],  [41.7055264, -91.6102467],  [41.7054473, -91.6101104],  [41.7053622, -91.6101138],  [41.7051102, -91.6102205],  [41.7045968, -91.6102198],  [41.7043354, -91.6102022],  [41.7041922, -91.6101698],  [41.7041602, -91.6098432],  [41.7041602, -91.6098432], ];
var line_23 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_23);
      
      var latLngs = [ [41.663074, -91.5437207],  [41.6630964, -91.5437108],  [41.6631357, -91.543694],  [41.6629593, -91.543311],  [41.6630381, -91.5434088],  [41.663244, -91.5433826],  [41.6633507, -91.5435601],  [41.6631401, -91.5436286],  [41.6630037, -91.5437892],  [41.6628385, -91.5442772],  [41.6627633, -91.5443354],  [41.6628144, -91.5443968],  [41.6625849, -91.5444253],  [41.6625972, -91.5446333],  [41.6625465, -91.5446504],  [41.6626709, -91.5448152],  [41.6627189, -91.5449197],  [41.6628785, -91.5450056],  [41.6628744, -91.5452045],  [41.6627875, -91.5451645],  [41.66294, -91.545271],  [41.6631554, -91.5455143],  [41.6631661, -91.5455882],  [41.6631279, -91.5457943],  [41.6633612, -91.545862],  [41.6633357, -91.5459275],  [41.6633475, -91.5460455],  [41.6632507, -91.5462275],  [41.6631241, -91.5463818],  [41.6630641, -91.5465647],  [41.6632369, -91.5468111],  [41.6631123, -91.5472581],  [41.6628818, -91.5479042],  [41.6626404, -91.5485795],  [41.662534, -91.5490697],  [41.6628175, -91.549528],  [41.6632125, -91.5499702],  [41.6634145, -91.5502726],  [41.6633547, -91.5503054],  [41.6634207, -91.5502827],  [41.6634551, -91.5505373],  [41.6635295, -91.5505478],  [41.6634618, -91.5506369],  [41.6634532, -91.5507739],  [41.6635544, -91.5508274],  [41.6634976, -91.5509413],  [41.6635274, -91.5511148],  [41.6634416, -91.5510911],  [41.6634612, -91.5512449],  [41.6635107, -91.5511302],  [41.6635188, -91.5513977],  [41.6634677, -91.5515511],  [41.663679, -91.5517306],  [41.663622, -91.5518736],  [41.6635807, -91.5518152],  [41.6636155, -91.5519555],  [41.6636893, -91.5520462],  [41.6637122, -91.5522641],  [41.6636901, -91.5523562],  [41.6637486, -91.5523983],  [41.663706, -91.5524303],  [41.6637987, -91.5526106],  [41.6638059, -91.5527037],  [41.6638379, -91.5527676],  [41.6638043, -91.552801],  [41.6638441, -91.5529001],  [41.6639484, -91.5529942],  [41.6638644, -91.5531377],  [41.6639621, -91.5531768],  [41.6639638, -91.553373],  [41.6640308, -91.5533867],  [41.6639939, -91.5534574],  [41.6641166, -91.5534862],  [41.6641166, -91.5536619],  [41.6641541, -91.5537379],  [41.6643202, -91.5538566],  [41.6643837, -91.5539467],  [41.6645174, -91.5542247],  [41.6649322, -91.5547827],  [41.6652232, -91.5553724],  [41.6655203, -91.5561567],  [41.6655239, -91.5564333],  [41.6655909, -91.5565547],  [41.6657304, -91.5572235],  [41.6658158, -91.5575894],  [41.6659409, -91.5579443],  [41.6660481, -91.5582566],  [41.6662329, -91.5588532],  [41.6664524, -91.5594327],  [41.6665675, -91.5597336],  [41.6665069, -91.5598608],  [41.6667653, -91.5603367],  [41.6669417, -91.5606915],  [41.6671001, -91.5612953],  [41.6673328, -91.561898],  [41.6674247, -91.5621216],  [41.6674886, -91.5623719],  [41.6676112, -91.5626634],  [41.6676705, -91.5627095],  [41.6679115, -91.5633005],  [41.6679723, -91.5634634],  [41.6681184, -91.5639383],  [41.6682, -91.5639652],  [41.6682612, -91.5641097],  [41.6682575, -91.5642013],  [41.6685058, -91.5648116],  [41.6686548, -91.5651122],  [41.6688483, -91.5657064],  [41.6689706, -91.5660057],  [41.6690378, -91.5660366],  [41.6690587, -91.5660999],  [41.6690035, -91.5661077],  [41.6688485, -91.5659435],  [41.6692722, -91.5656672],  [41.6693661, -91.5656041],  [41.6696801, -91.5655231],  [41.6701886, -91.5655747],  [41.6703593, -91.5656074],  [41.6704813, -91.5655259],  [41.6706978, -91.5655808],  [41.6707609, -91.5655579],  [41.6708783, -91.5655948],  [41.6713876, -91.5655679],  [41.6717008, -91.5656333],  [41.6717941, -91.5655789],  [41.6720501, -91.5655882],  [41.6720916, -91.5655687],  [41.6722525, -91.5655944],  [41.6724436, -91.5655779],  [41.6728683, -91.5656529],  [41.6729239, -91.565745],  [41.6731034, -91.565759],  [41.6732978, -91.5657043],  [41.6733525, -91.5657162],  [41.6734607, -91.5658705],  [41.6734627, -91.5660537],  [41.6735152, -91.5665035],  [41.6736216, -91.5665313],  [41.6736767, -91.567196],  [41.6737387, -91.5678995],  [41.6737467, -91.5679903],  [41.6739051, -91.5680632],  [41.6738866, -91.5687242],  [41.6739255, -91.5689064],  [41.6739167, -91.5690128],  [41.6739708, -91.5695055],  [41.6740528, -91.5697058],  [41.6740482, -91.5697809],  [41.6740739, -91.5698358],  [41.6740601, -91.5702646],  [41.6740998, -91.5704253],  [41.6739929, -91.5705102],  [41.6740054, -91.5706468],  [41.6741169, -91.5707222],  [41.6741314, -91.5711467],  [41.6741847, -91.5712836],  [41.674162, -91.5713137],  [41.6741643, -91.5713924],  [41.6742125, -91.571506],  [41.6742794, -91.5721943],  [41.6742939, -91.5722347],  [41.6742814, -91.5723379],  [41.674329, -91.5725079],  [41.6743052, -91.5725085],  [41.6743178, -91.5731222],  [41.6744171, -91.5737462],  [41.6744428, -91.5740318],  [41.6744676, -91.5740959],  [41.6744538, -91.5745203],  [41.6745169, -91.574662],  [41.6745177, -91.5748535],  [41.6745447, -91.5749915],  [41.6745321, -91.5751318],  [41.6745499, -91.5755217],  [41.6746305, -91.5761193],  [41.6746599, -91.576774],  [41.6746131, -91.5768681],  [41.6746676, -91.5775184],  [41.6747125, -91.5775713],  [41.6748056, -91.578055],  [41.6747827, -91.5781458],  [41.6748028, -91.5782176],  [41.6750791, -91.5781861],  [41.6751168, -91.5782057],  [41.6752965, -91.5781301],  [41.67577, -91.5781369],  [41.6758045, -91.5781816],  [41.6762045, -91.5781535],  [41.6766953, -91.578098],  [41.6771734, -91.578054],  [41.67755, -91.5780808],  [41.6776027, -91.5781198],  [41.6778059, -91.5780675],  [41.6782704, -91.5779892],  [41.678736, -91.5779855],  [41.6788889, -91.5779816],  [41.6789757, -91.5779218],  [41.6793837, -91.5779641],  [41.6794765, -91.5779513],  [41.6794751, -91.5780175],  [41.6799002, -91.5779827],  [41.6799679, -91.5780287],  [41.6801615, -91.5780235],  [41.6801894, -91.577938],  [41.6803647, -91.5778992],  [41.6806754, -91.5779324],  [41.6808268, -91.5778447],  [41.680984, -91.5784121],  [41.6810489, -91.5790371],  [41.68108, -91.5794697],  [41.6811583, -91.5795707],  [41.6815784, -91.5799265],  [41.6817277, -91.58007],  [41.6817903, -91.5802515],  [41.6818358, -91.5803146],  [41.682046, -91.5804595],  [41.6822156, -91.5806476],  [41.6823154, -91.5806708],  [41.6824014, -91.5807405],  [41.6828757, -91.5808012],  [41.6830557, -91.5808983],  [41.6835295, -91.5809602],  [41.6839878, -91.5810221],  [41.6845146, -91.5810788],  [41.6850258, -91.5811237],  [41.6855081, -91.5811671],  [41.6856692, -91.5811907],  [41.685746, -91.5811346],  [41.6859954, -91.5811967],  [41.686153, -91.5812709],  [41.6862175, -91.5812305],  [41.6865299, -91.5813053],  [41.6865692, -91.581474],  [41.6869792, -91.5815966],  [41.6870463, -91.5815014],  [41.6874875, -91.5816275],  [41.6879514, -91.581671],  [41.6884378, -91.5817117],  [41.6885639, -91.5817349],  [41.6890318, -91.5818466],  [41.6894926, -91.5818211],  [41.6898153, -91.5818334],  [41.6898733, -91.581811],  [41.6899281, -91.581874],  [41.6903915, -91.5819674],  [41.6908379, -91.582212],  [41.6912376, -91.582423],  [41.6917526, -91.5825298],  [41.6922157, -91.5825322],  [41.6926712, -91.582512],  [41.6931319, -91.5825235],  [41.6935961, -91.5825412],  [41.6936609, -91.5824848],  [41.6940981, -91.5825908],  [41.6945513, -91.5827075],  [41.6947863, -91.5827264],  [41.6949098, -91.5828683],  [41.6948114, -91.5835492],  [41.6947769, -91.5839986],  [41.6946752, -91.5843919],  [41.6946706, -91.5849309],  [41.6948138, -91.5855283],  [41.6950728, -91.586085],  [41.695435, -91.5866254],  [41.695712, -91.5871672],  [41.6958225, -91.5874311],  [41.69599, -91.5880972],  [41.6961512, -91.5887424],  [41.696282, -91.5894102],  [41.6963168, -91.5902224],  [41.6963186, -91.5908843],  [41.696305, -91.5915438],  [41.6962754, -91.5920685],  [41.6964106, -91.5921775],  [41.696408, -91.5923495],  [41.6963312, -91.5924103],  [41.696037, -91.5928101],  [41.695806, -91.5929527],  [41.695794, -91.5930319],  [41.6957438, -91.5931203],  [41.695756, -91.5931876],  [41.6960063, -91.5931759],  [41.6959995, -91.5932269],  [41.695946, -91.5932784],  [41.6959522, -91.5932968],  [41.6959254, -91.5933089],  [41.6963627, -91.5935104],  [41.6967646, -91.5937844],  [41.6971904, -91.5940765],  [41.6973636, -91.5941753],  [41.6977848, -91.5941247],  [41.6982486, -91.5943353],  [41.6987446, -91.5944138],  [41.6992481, -91.5945842],  [41.6997115, -91.5946806],  [41.7000034, -91.5947906],  [41.7004251, -91.5950423],  [41.7007696, -91.5953902],  [41.7008749, -91.595563],  [41.7009842, -91.5961508],  [41.7010614, -91.5963097],  [41.7014709, -91.5964411],  [41.7016099, -91.5966137],  [41.7016564, -91.5966342],  [41.7017045, -91.5969972],  [41.7018559, -91.5973846],  [41.7019473, -91.5974318],  [41.7022925, -91.5973346],  [41.702451, -91.5971838],  [41.7026206, -91.5971783],  [41.7027154, -91.5971113],  [41.7027466, -91.5969874],  [41.7027388, -91.5968252],  [41.7028611, -91.5964976],  [41.7032511, -91.5963795],  [41.7033741, -91.5963437],  [41.7037972, -91.5966241],  [41.7042435, -91.5965236],  [41.704334, -91.5965947],  [41.7044669, -91.5972278],  [41.7046113, -91.59767],  [41.7047328, -91.5981013],  [41.7047933, -91.5984968],  [41.7050278, -91.5990649],  [41.7050696, -91.5993154],  [41.705224, -91.599588],  [41.7052198, -91.5996524],  [41.7054474, -91.6000452],  [41.7056948, -91.6003698],  [41.705825, -91.6005654],  [41.7057622, -91.600781],  [41.7061164, -91.60122],  [41.7061819, -91.60131],  [41.7063121, -91.6012598],  [41.7063882, -91.6018574],  [41.7064145, -91.6020282],  [41.7067509, -91.6022647],  [41.7069215, -91.6024786],  [41.7073051, -91.6027936],  [41.7075032, -91.6029635],  [41.7075902, -91.6030907],  [41.7075547, -91.603114],  [41.7075895, -91.603173],  [41.7079161, -91.6034178],  [41.7080621, -91.6036854],  [41.7081035, -91.6039995],  [41.7080834, -91.6041176],  [41.7080929, -91.6043101],  [41.7080624, -91.6043767],  [41.7080913, -91.6045965],  [41.7082508, -91.6048126],  [41.7084174, -91.6048936],  [41.7084014, -91.6049085],  [41.7087492, -91.6050459],  [41.7087161, -91.6053373],  [41.7087517, -91.6054548],  [41.7087247, -91.6056059],  [41.7085138, -91.6056736],  [41.7085111, -91.6058299],  [41.7087481, -91.6059291],  [41.7087943, -91.6064766],  [41.7087724, -91.6066311],  [41.7088429, -91.6069143],  [41.7088266, -91.6073774],  [41.708775, -91.607427],  [41.7087469, -91.6078931],  [41.7087153, -91.6079278],  [41.7086519, -91.6082561],  [41.7085987, -91.6085611],  [41.7086187, -91.6087628],  [41.7085985, -91.6089344],  [41.7086925, -91.6095788],  [41.7087091, -91.60981],  [41.7086866, -91.6099057],  [41.7084144, -91.610049],  [41.7079501, -91.6100427],  [41.7074311, -91.6100822],  [41.7069171, -91.6100951],  [41.7064075, -91.6101348],  [41.7059046, -91.6101148],  [41.7057039, -91.6101275],  [41.705488, -91.6101089],  [41.7054128, -91.6101369],  [41.7049522, -91.6101124],  [41.7044767, -91.6101519],  [41.7040373, -91.6101759],  [41.7040169, -91.6098949],  [41.7038614, -91.6098784],  [41.7038574, -91.6098687], ];
var line_24 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_24);
      
      var latLngs = [ [41.7039846, -91.60992],  [41.7039514, -91.6099173],  [41.7038849, -91.6099902],  [41.7039777, -91.6101219],  [41.7044279, -91.6100965],  [41.7048191, -91.6100504],  [41.7050264, -91.6100112],  [41.7052655, -91.610146],  [41.7057288, -91.6101013],  [41.7061961, -91.610089],  [41.7066546, -91.6100769],  [41.7066133, -91.610078],  [41.7066436, -91.6100004],  [41.7069254, -91.610025],  [41.707071, -91.610097],  [41.7075343, -91.6101799],  [41.707571, -91.6100527],  [41.7080243, -91.6100408],  [41.7084137, -91.6100134],  [41.7084395, -91.6093407],  [41.7084818, -91.6089833],  [41.7084724, -91.6087659],  [41.7084079, -91.608722],  [41.7083794, -91.6083908],  [41.7083462, -91.6077777],  [41.7083483, -91.6073122],  [41.7082912, -91.6066811],  [41.708309, -91.6061006],  [41.7083347, -91.6060182],  [41.708298, -91.6058496],  [41.7083004, -91.6056768],  [41.7084129, -91.6055572],  [41.7084079, -91.6050048],  [41.7080616, -91.6046049],  [41.7080516, -91.604215],  [41.7080131, -91.6038484],  [41.7079138, -91.6035923],  [41.7079196, -91.6034595],  [41.7075297, -91.6030675],  [41.7074801, -91.6030232],  [41.7073809, -91.6030802],  [41.7069862, -91.6027273],  [41.7068581, -91.6026727],  [41.7067412, -91.60254],  [41.7067563, -91.6023898],  [41.7063297, -91.6020192],  [41.7062864, -91.6019921],  [41.7062423, -91.6014624],  [41.7061911, -91.6013267],  [41.7058447, -91.6008832],  [41.7054741, -91.6004254],  [41.7051312, -91.599915],  [41.7049117, -91.5993863],  [41.7047099, -91.5988428],  [41.7046583, -91.5986542],  [41.7046851, -91.5985434],  [41.70458, -91.5981999],  [41.7046381, -91.5979789],  [41.7046165, -91.5978779],  [41.7046186, -91.5976534],  [41.7044511, -91.5974115],  [41.7043714, -91.597208],  [41.7043189, -91.5971307],  [41.7043014, -91.5970447],  [41.7043161, -91.5969738],  [41.7042444, -91.5967438],  [41.7041569, -91.5966291],  [41.7038321, -91.596743],  [41.7037547, -91.5967094],  [41.7037164, -91.5965451],  [41.7035961, -91.5963901],  [41.7035329, -91.5963703],  [41.7031234, -91.596423],  [41.7027856, -91.596651],  [41.7027034, -91.5967873],  [41.7025521, -91.5971933],  [41.7024268, -91.597404],  [41.7021735, -91.5974473],  [41.7018099, -91.5973429],  [41.701569, -91.5969728],  [41.7014832, -91.5965165],  [41.7013852, -91.5964803],  [41.7011523, -91.5963232],  [41.7011349, -91.5961938],  [41.7010781, -91.5961165],  [41.7010549, -91.5961254],  [41.7010309, -91.5960608],  [41.7010316, -91.5959227],  [41.7008371, -91.5953581],  [41.7006938, -91.5950161],  [41.7006203, -91.5949288],  [41.7005038, -91.5949189],  [41.7004157, -91.5948712],  [41.7001824, -91.5946703],  [41.6999122, -91.5947458],  [41.6993802, -91.5946318],  [41.6989584, -91.5945188],  [41.6989365, -91.5944807],  [41.6988628, -91.5944632],  [41.6987843, -91.5944831],  [41.698667, -91.5944366],  [41.6985924, -91.594493],  [41.6985458, -91.5944592],  [41.6984699, -91.5944893],  [41.6981717, -91.5943887],  [41.697766, -91.5943005],  [41.6975013, -91.5943295],  [41.6971169, -91.5940387],  [41.6968027, -91.5939393],  [41.6964421, -91.5935449],  [41.6963297, -91.5934314],  [41.695969, -91.5932931],  [41.6958153, -91.59327],  [41.6956746, -91.5932576],  [41.695612, -91.5932177],  [41.6955909, -91.5931679],  [41.6956822, -91.5929897],  [41.6960971, -91.5925572],  [41.6962651, -91.5921385],  [41.6963071, -91.5914754],  [41.6963184, -91.5908051],  [41.6963167, -91.5901997],  [41.696295, -91.5895644],  [41.6962319, -91.5890665],  [41.6960641, -91.5883936],  [41.6959444, -91.587873],  [41.6958874, -91.5877372],  [41.6958321, -91.5874082],  [41.6957567, -91.5874119],  [41.695777, -91.5873226],  [41.6955318, -91.5867916],  [41.6952261, -91.5863261],  [41.6949256, -91.5858255],  [41.6947145, -91.5851823],  [41.6946627, -91.5845786],  [41.6946713, -91.5844386],  [41.6946174, -91.5843376],  [41.694644, -91.5841461],  [41.6947872, -91.5835414],  [41.6948517, -91.5833169],  [41.6948499, -91.5830141],  [41.694787, -91.5829541],  [41.6945018, -91.5828745],  [41.6944627, -91.5827328],  [41.6939795, -91.5826216],  [41.6934673, -91.5825276],  [41.6929589, -91.5825251],  [41.6924845, -91.5825297],  [41.6919858, -91.5825344],  [41.6914716, -91.5824983],  [41.6909966, -91.5822975],  [41.6905257, -91.5820374],  [41.6900735, -91.5818905],  [41.6895515, -91.5818519],  [41.6890196, -91.5818358],  [41.6887981, -91.5818344],  [41.6886188, -91.5818954],  [41.6880892, -91.5818694],  [41.6878661, -91.5818707],  [41.6877897, -91.5818198],  [41.6873103, -91.5817106],  [41.687103, -91.5816666],  [41.6865914, -91.581481],  [41.6861285, -91.5813331],  [41.6856316, -91.5811815],  [41.6851361, -91.5811334],  [41.6846334, -91.5810893],  [41.6840381, -91.5810291],  [41.6835516, -91.5809631],  [41.6830694, -91.5809001],  [41.6825918, -91.5808341],  [41.6824695, -91.5808022],  [41.6824348, -91.5808979],  [41.6820166, -91.580648],  [41.6817868, -91.5804774],  [41.6816053, -91.5801526],  [41.681284, -91.5798657],  [41.6809549, -91.5793412],  [41.6809634, -91.5792],  [41.6808951, -91.5785201],  [41.6808455, -91.578021],  [41.6803881, -91.5780207],  [41.679894, -91.5780306],  [41.6794311, -91.578043],  [41.6789444, -91.578056],  [41.6784502, -91.5780692],  [41.6779347, -91.578085],  [41.6773995, -91.5781016],  [41.6769166, -91.5781167],  [41.6763274, -91.5781448],  [41.6758606, -91.5781777],  [41.6753947, -91.5782105],  [41.674938, -91.5782427],  [41.674816, -91.5782513],  [41.6746803, -91.5776208],  [41.6746269, -91.5770191],  [41.6745698, -91.5763944],  [41.6745122, -91.5762841],  [41.6744671, -91.57561],  [41.6744165, -91.5749947],  [41.6744065, -91.574653],  [41.674372, -91.5745811],  [41.6743223, -91.5740529],  [41.6742953, -91.5739434],  [41.674301, -91.5738564],  [41.6742488, -91.5736562],  [41.6742438, -91.5735403],  [41.6742712, -91.5734275],  [41.6742059, -91.5727716],  [41.6741366, -91.572076],  [41.6740757, -91.5714129],  [41.6740125, -91.5707241],  [41.6739489, -91.5700304],  [41.6738889, -91.569375],  [41.673823, -91.5687319],  [41.6737541, -91.5680718],  [41.6736955, -91.5674091],  [41.6736385, -91.566742],  [41.6735848, -91.566072],  [41.6735466, -91.5657565],  [41.6730727, -91.5656647],  [41.673001, -91.565701],  [41.6725154, -91.5656685],  [41.6720632, -91.5656766],  [41.6718442, -91.565676],  [41.6717917, -91.5656274],  [41.6712759, -91.5656181],  [41.6709353, -91.5656119],  [41.6704401, -91.5656562],  [41.6701524, -91.5656394],  [41.6700027, -91.5656821],  [41.6696464, -91.5656748],  [41.6695787, -91.5655878],  [41.6692736, -91.5656076],  [41.6692083, -91.5657119],  [41.6691576, -91.5654792],  [41.6688751, -91.5656998],  [41.668834, -91.5656922],  [41.6687594, -91.5655415],  [41.6687027, -91.5653337],  [41.6685703, -91.565135],  [41.6686338, -91.5649901],  [41.6683985, -91.5644344],  [41.668173, -91.5639013],  [41.6680398, -91.5635862],  [41.6679432, -91.5635286],  [41.6677347, -91.5630212],  [41.6677501, -91.5628991],  [41.6675137, -91.5623358],  [41.6674056, -91.5620751],  [41.6673022, -91.5621194],  [41.6671871, -91.5618698],  [41.6672466, -91.5616882],  [41.6670127, -91.5611192],  [41.6669832, -91.5610474],  [41.6668736, -91.5609937],  [41.6666535, -91.5604184],  [41.6666281, -91.5603354],  [41.6666588, -91.560181],  [41.6664302, -91.5596606],  [41.6661865, -91.5590566],  [41.6659717, -91.5584773],  [41.6657813, -91.5579109],  [41.6656371, -91.5573206],  [41.6655145, -91.5566618],  [41.6654638, -91.5562935],  [41.665476, -91.5561942],  [41.6653615, -91.5558401],  [41.6653313, -91.5556047],  [41.6653526, -91.555416],  [41.6652959, -91.555389],  [41.6651175, -91.5550199],  [41.6650404, -91.5549608],  [41.6648706, -91.554696],  [41.6646847, -91.5545649],  [41.6646449, -91.5544871],  [41.6642823, -91.5541755],  [41.6639978, -91.5537029],  [41.6637804, -91.5533749],  [41.6637171, -91.552767],  [41.6637339, -91.5524676],  [41.6635707, -91.5518891],  [41.6634873, -91.5514661],  [41.6634893, -91.5512286],  [41.6633432, -91.5505756],  [41.6633009, -91.5504599],  [41.6632916, -91.5503369],  [41.6632176, -91.5502112],  [41.6631587, -91.5499783],  [41.6629441, -91.5500289],  [41.6627245, -91.5497696],  [41.6627894, -91.5494957],  [41.6625208, -91.5491296],  [41.6626608, -91.5485205],  [41.6628653, -91.5479498],  [41.6630877, -91.5473275],  [41.6632399, -91.5467984],  [41.6632364, -91.5461311],  [41.6633429, -91.5460711],  [41.6633669, -91.5454491],  [41.66336, -91.545191],  [41.6632222, -91.5451131],  [41.6632298, -91.5449953],  [41.6631969, -91.5449252],  [41.6631857, -91.5446162],  [41.6631604, -91.5444409],  [41.6631584, -91.5438836],  [41.6630963, -91.5438461],  [41.6630105, -91.5437022],  [41.662764, -91.5436734],  [41.6627218, -91.5437182],  [41.6622456, -91.5438436],  [41.6621034, -91.5438441],  [41.6617206, -91.5437571],  [41.661434, -91.5436083],  [41.6611359, -91.5432347],  [41.6613075, -91.5430501],  [41.6612529, -91.542452],  [41.661263, -91.5418051],  [41.661268, -91.5411716],  [41.661192, -91.5410594],  [41.6611993, -91.5406077],  [41.6611708, -91.5402305],  [41.6612018, -91.53998],  [41.6611976, -91.5398448],  [41.6612759, -91.5397328],  [41.6612792, -91.53912],  [41.6612837, -91.5384492],  [41.6612879, -91.5378452],  [41.6612969, -91.5377186],  [41.6617634, -91.537662],  [41.661839, -91.537659],  [41.6619049, -91.537575],  [41.6621194, -91.5375602],  [41.6622892, -91.537599],  [41.6625125, -91.5376326],  [41.6625313, -91.5374342],  [41.6625186, -91.537381],  [41.6625354, -91.5373223],  [41.6624975, -91.536697],  [41.6624682, -91.5362951],  [41.6625172, -91.5358936],  [41.6624261, -91.5355877],  [41.6624184, -91.5354982],  [41.6622027, -91.5354875],  [41.662304, -91.5355931],  [41.6623674, -91.5355596],  [41.6624493, -91.5354466],  [41.6624493, -91.5354466], ];
var line_25 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_25);
      
      var latLngs = [ [41.6627381, -91.5353142],  [41.6627282, -91.5353869],  [41.6626534, -91.5354813],  [41.6626413, -91.5355375],  [41.6626718, -91.535693],  [41.6625946, -91.5360719],  [41.6625257, -91.5360961],  [41.6627482, -91.5360471],  [41.6632332, -91.5359891],  [41.6636025, -91.5360591],  [41.663651, -91.5361106],  [41.6637733, -91.5363726],  [41.6637492, -91.5370891],  [41.6637395, -91.537238],  [41.6636358, -91.5373884],  [41.6636369, -91.5375808],  [41.6632776, -91.5375979],  [41.6631768, -91.5377789],  [41.662794, -91.537797],  [41.6627152, -91.5378238],  [41.6625954, -91.5376288],  [41.6623135, -91.5376404],  [41.6622365, -91.537818],  [41.66184, -91.5377844],  [41.6617793, -91.5376614],  [41.661337, -91.5376694],  [41.6612846, -91.5383135],  [41.6612826, -91.5386226],  [41.6613373, -91.5387194],  [41.6613259, -91.5394099],  [41.6613529, -91.539629],  [41.661394, -91.5397579],  [41.6612975, -91.5398085],  [41.6613329, -91.5399273],  [41.6612748, -91.5400002],  [41.6612723, -91.5406111],  [41.6612717, -91.5407029],  [41.6613137, -91.5408109],  [41.661266, -91.54142],  [41.6612623, -91.5418768],  [41.6613521, -91.5419197],  [41.6613541, -91.542014],  [41.661441, -91.5420766],  [41.6613245, -91.5426545],  [41.6612991, -91.5428324],  [41.661334, -91.5430267],  [41.6614372, -91.5432616],  [41.6617462, -91.5436085],  [41.6622155, -91.5435685],  [41.6626655, -91.5435207],  [41.6628494, -91.5434843],  [41.6631358, -91.5435125],  [41.6631726, -91.543538],  [41.6632161, -91.5435127],  [41.6633297, -91.5438016],  [41.6634009, -91.5441664],  [41.6633842, -91.5444356],  [41.6633998, -91.5445083],  [41.6633357, -91.5446066],  [41.6633622, -91.5452654],  [41.6633636, -91.545757],  [41.6634117, -91.5458814],  [41.6633372, -91.5465864],  [41.6632621, -91.5466805],  [41.6630889, -91.547324],  [41.6628633, -91.5479552],  [41.6626489, -91.548555],  [41.662535, -91.5490631],  [41.6626427, -91.549312],  [41.6630073, -91.5497329],  [41.6632106, -91.549968],  [41.6633998, -91.5505472],  [41.6635098, -91.5511502],  [41.6636214, -91.5517429],  [41.6636727, -91.5520154],  [41.6638797, -91.5527102],  [41.6640212, -91.5532669],  [41.664144, -91.5534758],  [41.66414, -91.5535993],  [41.6644498, -91.5540806],  [41.6648096, -91.5546102],  [41.6650661, -91.5550128],  [41.6653079, -91.555578],  [41.665501, -91.5562256],  [41.6654606, -91.5563195],  [41.6655099, -91.5564689],  [41.6656001, -91.556603],  [41.6657292, -91.5572178],  [41.6658694, -91.5578026],  [41.6659117, -91.5579459],  [41.6659796, -91.5580436],  [41.6659983, -91.5580369],  [41.6659756, -91.5580532],  [41.6661662, -91.5586665],  [41.6663219, -91.5591069],  [41.666363, -91.5591463],  [41.6665757, -91.5597551],  [41.6668076, -91.5603615],  [41.6669795, -91.5609265],  [41.6671607, -91.5614791],  [41.6673983, -91.5620575],  [41.6675615, -91.5624498],  [41.6675376, -91.5625682],  [41.667668, -91.5628744],  [41.6678083, -91.5631091],  [41.6679239, -91.5634629],  [41.6682525, -91.5640892],  [41.6682983, -91.5641976],  [41.6682284, -91.564343],  [41.6685167, -91.5649009],  [41.6686647, -91.5651827],  [41.6687357, -91.5652332],  [41.66897, -91.5658313],  [41.6690891, -91.5661325],  [41.6689358, -91.5661731],  [41.6689339, -91.5661418],  [41.668976, -91.566111],  [41.6689279, -91.5659926],  [41.6692204, -91.5658527],  [41.6694274, -91.5657019],  [41.6694969, -91.5655863],  [41.669903, -91.5655935],  [41.6703617, -91.5656056],  [41.6708294, -91.565622],  [41.6713023, -91.5656058],  [41.671768, -91.5656149],  [41.6722713, -91.5656103],  [41.6724348, -91.565572],  [41.6727303, -91.5655112],  [41.6728643, -91.5656015],  [41.6732197, -91.5655971],  [41.6734429, -91.5656518],  [41.6734603, -91.5656809],  [41.673464, -91.5661309],  [41.6734871, -91.566219],  [41.6736045, -91.5663179],  [41.6736525, -91.5669179],  [41.6736814, -91.567249],  [41.673744, -91.5673481],  [41.6737995, -91.5678512],  [41.6738425, -91.5680651],  [41.6738393, -91.5688911],  [41.6739021, -91.5695189],  [41.6739646, -91.5702015],  [41.6740159, -91.5707612],  [41.6741255, -91.5708034],  [41.6741451, -91.570873],  [41.6742311, -91.5715154],  [41.6742603, -91.5721976],  [41.6743194, -91.5728392],  [41.6743752, -91.5733836],  [41.674277, -91.5734854],  [41.6743592, -91.5742602],  [41.6743864, -91.5745209],  [41.6745386, -91.5745766],  [41.6745756, -91.5752065],  [41.6746369, -91.575894],  [41.6745295, -91.5759531],  [41.6745874, -91.5765871],  [41.6746516, -91.5773343],  [41.6747364, -91.5779506],  [41.6747882, -91.5780899],  [41.6747668, -91.5781014],  [41.6747797, -91.5780825],  [41.6748212, -91.578198],  [41.6749201, -91.5781296],  [41.6752618, -91.5781185],  [41.6753688, -91.5781313],  [41.6754259, -91.5782083],  [41.6759322, -91.5781726],  [41.6761301, -91.5781587],  [41.6761948, -91.5780734],  [41.6765219, -91.5780741],  [41.676599, -91.5781257],  [41.6770748, -91.5781117],  [41.6773364, -91.5781036],  [41.6775096, -91.5780465],  [41.6779812, -91.5780572],  [41.678451, -91.5780214],  [41.678915, -91.5780252],  [41.6791365, -91.5780073],  [41.6792041, -91.578049],  [41.6792593, -91.5780094],  [41.6797185, -91.5779766],  [41.6800912, -91.5780011],  [41.6803825, -91.5779566],  [41.6804236, -91.5779737],  [41.6804769, -91.5779424],  [41.6805775, -91.5779499],  [41.6806661, -91.5779127],  [41.6808695, -91.5782048],  [41.6810083, -91.5787946],  [41.6811604, -91.5793688],  [41.6814929, -91.5798375],  [41.6817158, -91.5800587],  [41.6818068, -91.5803152],  [41.6822448, -91.5806117],  [41.6823886, -91.5806806],  [41.6824143, -91.5807774],  [41.6829372, -91.5808829],  [41.6834101, -91.5809446],  [41.6839335, -91.5810146],  [41.6844504, -91.5810732],  [41.6849678, -91.5811186],  [41.6854417, -91.5811603],  [41.6859188, -91.5812618],  [41.6859591, -91.5812756],  [41.6860332, -91.5811363],  [41.6863226, -91.581282],  [41.6866017, -91.5813566],  [41.6866305, -91.5814935],  [41.6867027, -91.5815165],  [41.6868516, -91.5814398],  [41.6872923, -91.5815796],  [41.6874355, -91.5816068],  [41.6874605, -91.5815818],  [41.6879356, -91.5816826],  [41.6884453, -91.5817156],  [41.6888076, -91.5817719],  [41.6888662, -91.5818348],  [41.6893651, -91.5818447],  [41.6894313, -91.5817539],  [41.6898845, -91.58176],  [41.690392, -91.5818698],  [41.6908195, -91.5821291],  [41.6910268, -91.5822461],  [41.6910791, -91.5823417],  [41.6914669, -91.5824976],  [41.6919685, -91.5824872],  [41.6924666, -91.5824814],  [41.6926919, -91.5824915],  [41.6928142, -91.5824213],  [41.693261, -91.5825206],  [41.6934513, -91.5825763],  [41.6937602, -91.5825976],  [41.6941041, -91.5826896],  [41.6944027, -91.5827208],  [41.6948583, -91.5828202],  [41.6949089, -91.5829012],  [41.6948537, -91.583334],  [41.6947814, -91.583674],  [41.6948377, -91.5838484],  [41.6947155, -91.5845333],  [41.6946628, -91.5848238],  [41.6947712, -91.5854054],  [41.6949949, -91.5859594],  [41.6953071, -91.5864421],  [41.6956365, -91.5869941],  [41.6958236, -91.5874336],  [41.6959963, -91.5881225],  [41.6961713, -91.5888226],  [41.6962868, -91.5894668],  [41.6963167, -91.5901962],  [41.6963185, -91.5908517],  [41.6963126, -91.5912983],  [41.69636, -91.5915536],  [41.696346, -91.5916921],  [41.6963659, -91.5919927],  [41.6963001, -91.5923624],  [41.6961323, -91.5926072],  [41.6957777, -91.5929864],  [41.6956318, -91.5932801],  [41.6956318, -91.5933595],  [41.6957403, -91.5934447],  [41.6958027, -91.5934509],  [41.695823, -91.5935063],  [41.6958294, -91.5934629],  [41.6962723, -91.5936281],  [41.696698, -91.5938295],  [41.697129, -91.5940327],  [41.6975907, -91.5942364],  [41.6980459, -91.5942661],  [41.6984745, -91.5943666],  [41.6987331, -91.5944888],  [41.6992278, -91.5946029],  [41.6996783, -91.5947046],  [41.7001522, -91.5949013],  [41.7003497, -91.595009],  [41.700726, -91.5953524],  [41.7008945, -91.5959186],  [41.7010853, -91.596295],  [41.701347, -91.5963811],  [41.7015186, -91.5965921],  [41.701631, -91.5969857],  [41.7018, -91.5972706],  [41.7021168, -91.597445],  [41.7023505, -91.5974271],  [41.7026271, -91.597292],  [41.7026684, -91.5970623],  [41.7028917, -91.5966482],  [41.7032807, -91.5964383],  [41.7032931, -91.5963964],  [41.7033654, -91.5963832],  [41.7038013, -91.596575],  [41.704068, -91.5966381],  [41.7041855, -91.5965324],  [41.7042986, -91.5965464],  [41.7044603, -91.5971231],  [41.704651, -91.5977439],  [41.7047655, -91.5983797],  [41.7049133, -91.5989786],  [41.7051281, -91.5995201],  [41.7050259, -91.5996889],  [41.7052547, -91.6001461],  [41.7056288, -91.6006163],  [41.7059902, -91.6010635],  [41.7060368, -91.6011214],  [41.7061559, -91.6010919],  [41.7062781, -91.6015402],  [41.7062856, -91.6019805],  [41.7063544, -91.6020155],  [41.7063705, -91.6020604],  [41.7067716, -91.6024165],  [41.7071687, -91.6027501],  [41.7075762, -91.6031104],  [41.7079454, -91.6034892],  [41.7080221, -91.6036921],  [41.7080593, -91.6039918],  [41.7080695, -91.6045877],  [41.7082919, -91.6048428],  [41.7085219, -91.6049507],  [41.7085158, -91.6055582],  [41.7085069, -91.6060719],  [41.7087447, -91.6061475],  [41.7087641, -91.6062891],  [41.7087443, -91.6065467],  [41.7088135, -91.6068347],  [41.70884, -91.6073401],  [41.7088934, -91.6074491],  [41.7088785, -91.6076355],  [41.7087886, -91.6080074],  [41.7087112, -91.6080342],  [41.7086617, -91.6082596],  [41.7086032, -91.6083778],  [41.7085944, -91.6084501],  [41.708623, -91.6085471],  [41.7085903, -91.6091859],  [41.7084486, -91.6092579],  [41.7084248, -91.6099415],  [41.7084165, -91.6102281],  [41.708239, -91.6100821],  [41.7080744, -91.6100821],  [41.7075456, -91.6100534],  [41.7072747, -91.6100606],  [41.7072082, -91.6101108],  [41.7067946, -91.6100741],  [41.7066243, -91.6101286],  [41.7061488, -91.6101462],  [41.7056478, -91.6101612],  [41.7051483, -91.6101972],  [41.7050565, -91.6101276],  [41.704555, -91.6101493],  [41.704098, -91.610176],  [41.7040249, -91.6101808],  [41.7040214, -91.6098756],  [41.7040801, -91.6098292],  [41.7037972, -91.6096764],  [41.7037972, -91.6096764], ];
var line_26 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_26);
      
      var latLngs = [ [41.7039774, -91.6099781],  [41.7039285, -91.609997],  [41.7039103, -91.609974],  [41.7040023, -91.6099496],  [41.7039864, -91.6101112],  [41.7041666, -91.6099353],  [41.7040814, -91.6099815],  [41.7041629, -91.6100914],  [41.7042139, -91.6099789],  [41.7041589, -91.6099592],  [41.704106, -91.6100735],  [41.7041776, -91.6101017],  [41.7041652, -91.6101208],  [41.7041625, -91.6100997],  [41.704638, -91.6100577],  [41.7050572, -91.6100471],  [41.7051781, -91.6100955],  [41.7055659, -91.6100497],  [41.7060519, -91.6100766],  [41.7065236, -91.6100544],  [41.7065984, -91.6100275],  [41.7067565, -91.6100217],  [41.7068596, -91.6099864],  [41.7073665, -91.6100394],  [41.7074869, -91.6100345],  [41.7078706, -91.6100691],  [41.7083446, -91.6100323],  [41.7084063, -91.6100115],  [41.7084345, -91.6093973],  [41.7084821, -91.6089806],  [41.7084661, -91.6085902],  [41.7083936, -91.6085431],  [41.7084167, -91.6080284],  [41.708391, -91.6079499],  [41.7084363, -91.6079217],  [41.7084297, -91.6074219],  [41.7083533, -91.6073251],  [41.7083312, -91.6066644],  [41.7083146, -91.6060389],  [41.7083272, -91.605385],  [41.7083556, -91.6050698],  [41.7080836, -91.6047681],  [41.7080418, -91.6046178],  [41.7079836, -91.6042086],  [41.7079896, -91.603766],  [41.7079121, -91.6035466],  [41.7077432, -91.603334],  [41.7075213, -91.6032409],  [41.7071285, -91.6028583],  [41.7070267, -91.6027552],  [41.7069334, -91.6027427],  [41.7065813, -91.6024381],  [41.706479, -91.6024127],  [41.7062863, -91.6021786],  [41.7062614, -91.6021089],  [41.7062867, -91.6020029],  [41.7062463, -91.6014803],  [41.7061586, -91.6012728],  [41.7058003, -91.6008282],  [41.7054463, -91.6003911],  [41.7051384, -91.5999289],  [41.704889, -91.5993219],  [41.7047911, -91.5990686],  [41.7047889, -91.5989577],  [41.70463, -91.5983114],  [41.7045946, -91.5977336],  [41.7045282, -91.5974951],  [41.704331, -91.5970961],  [41.7041643, -91.596634],  [41.7040722, -91.596601],  [41.7039145, -91.5967393],  [41.7036152, -91.5966836],  [41.7033585, -91.5965816],  [41.7028941, -91.59668],  [41.7027842, -91.5966909],  [41.7026812, -91.5967499],  [41.7026939, -91.5970418],  [41.7027696, -91.5971115],  [41.7026038, -91.5973737],  [41.7023282, -91.5975163],  [41.7020437, -91.5975397],  [41.7018377, -91.5974761],  [41.7016167, -91.5971766],  [41.7014538, -91.5965934],  [41.7011611, -91.5963448],  [41.7010148, -91.5962899],  [41.7009025, -91.5960153],  [41.7007033, -91.5954402],  [41.7003904, -91.595141],  [41.6999073, -91.5948857],  [41.6997156, -91.5948032],  [41.6992506, -91.5946887],  [41.6988013, -91.5945919],  [41.6986703, -91.5945582],  [41.6982082, -91.5944317],  [41.6977545, -91.594298],  [41.6973625, -91.594277],  [41.6969463, -91.5940734],  [41.6968748, -91.5940792],  [41.6965868, -91.5939871],  [41.6961726, -91.5937176],  [41.6958616, -91.5935461],  [41.6957192, -91.593545],  [41.6955673, -91.5934455],  [41.6955352, -91.593393],  [41.695555, -91.593178],  [41.695624, -91.5931834],  [41.6960011, -91.5926796],  [41.6961342, -91.5924903],  [41.6962465, -91.5922235],  [41.6963045, -91.5915607],  [41.6963185, -91.5908784],  [41.6963167, -91.5901979],  [41.6962957, -91.5895737],  [41.6961357, -91.5889505],  [41.6960088, -91.58831],  [41.6958933, -91.5878024],  [41.6958246, -91.5876527],  [41.6958401, -91.5875635],  [41.6956028, -91.58705],  [41.6952901, -91.5865737],  [41.6949628, -91.5861282],  [41.6948965, -91.5860407],  [41.6947214, -91.5854799],  [41.694657, -91.5853335],  [41.6945819, -91.5849498],  [41.6946064, -91.5846028],  [41.6947116, -91.5840163],  [41.6948237, -91.5833993],  [41.6948694, -91.5828868],  [41.6947864, -91.582787],  [41.6947374, -91.5827677],  [41.6945995, -91.5828064],  [41.6941536, -91.5826617],  [41.6936294, -91.5825461],  [41.6931562, -91.5825236],  [41.6926922, -91.5825277],  [41.6921674, -91.5825327],  [41.6918269, -91.5825336],  [41.6917421, -91.5825978],  [41.6914301, -91.5825737],  [41.6913427, -91.58264],  [41.6911654, -91.5826103],  [41.6907237, -91.5823823],  [41.6904541, -91.5822195],  [41.689989, -91.5820649],  [41.6895114, -91.5819789],  [41.6890237, -91.5819372],  [41.6885414, -91.5818992],  [41.6883096, -91.5818634],  [41.6878302, -91.5818136],  [41.6873204, -91.5817695],  [41.6869797, -91.5817349],  [41.6868445, -91.5817534],  [41.6865271, -91.5816359],  [41.6864436, -91.5815808],  [41.6863584, -91.5814069],  [41.685919, -91.5812619],  [41.6853495, -91.5811521],  [41.6848281, -91.5811064],  [41.6843013, -91.5810601],  [41.6838418, -91.5810019],  [41.68333, -91.5809341],  [41.6828308, -91.580869],  [41.6823577, -91.5807471],  [41.6822023, -91.580653],  [41.6820943, -91.5807704],  [41.6818022, -91.5805123],  [41.6818108, -91.5803731],  [41.6816428, -91.580234],  [41.6814803, -91.5800527],  [41.6813536, -91.5800408],  [41.6810101, -91.5795862],  [41.6809116, -91.5793188],  [41.6808395, -91.5786225],  [41.6808035, -91.5782641],  [41.6807512, -91.5781731],  [41.6805052, -91.5781721],  [41.6804323, -91.5780203],  [41.6799527, -91.5780291],  [41.6794413, -91.5780427],  [41.678952, -91.5780558],  [41.6784718, -91.5780686],  [41.6779712, -91.5780839],  [41.6775151, -91.578098],  [41.6769907, -91.5781144],  [41.6764862, -91.5781336],  [41.6760128, -91.578167],  [41.6754984, -91.5782032],  [41.6749978, -91.5782385],  [41.6748131, -91.5782515],  [41.6746778, -91.5776009],  [41.6746362, -91.5771215],  [41.674587, -91.5770117],  [41.674523, -91.5764018],  [41.6745229, -91.5763173],  [41.6744985, -91.5762572],  [41.6744514, -91.5756577],  [41.6744154, -91.5753794],  [41.6744642, -91.5752916],  [41.6744, -91.5746518],  [41.6743075, -91.5737848],  [41.6742428, -91.5731424],  [41.6741791, -91.5725029],  [41.6741135, -91.5718258],  [41.6740537, -91.5711736],  [41.6739984, -91.5705706],  [41.6739414, -91.5699484],  [41.6738725, -91.5692151],  [41.6738523, -91.5690184],  [41.6738, -91.5689312],  [41.6737655, -91.5683718],  [41.6737293, -91.5682902],  [41.6736781, -91.5676413],  [41.6736648, -91.5670743],  [41.6736333, -91.5669944],  [41.6735867, -91.5665323],  [41.6735345, -91.5664867],  [41.6734551, -91.5661144],  [41.6734523, -91.5658787],  [41.6734079, -91.5657641],  [41.6735546, -91.5656949],  [41.6730856, -91.5656478],  [41.6725885, -91.5656426],  [41.672308, -91.5656368],  [41.6722601, -91.5657474],  [41.6717829, -91.5656675],  [41.6716507, -91.5656445],  [41.6712159, -91.5657109],  [41.6710344, -91.5657011],  [41.6709649, -91.5657458],  [41.6707504, -91.5657225],  [41.6705978, -91.5656544],  [41.6704847, -91.5657622],  [41.6700264, -91.5657329],  [41.6698278, -91.5656877],  [41.6693848, -91.5658367],  [41.6692585, -91.5659065],  [41.6690789, -91.5654993],  [41.6690708, -91.5655388],  [41.6689037, -91.5656863],  [41.668763, -91.5656723],  [41.6685188, -91.5651265],  [41.6683377, -91.5647051],  [41.6682901, -91.564658],  [41.668201, -91.5644341],  [41.6681375, -91.5643759],  [41.6680103, -91.564061],  [41.6678633, -91.5637849],  [41.6677429, -91.5633451],  [41.667746, -91.5632246],  [41.6676349, -91.5630203],  [41.667562, -91.5627343],  [41.6674941, -91.562587],  [41.6673124, -91.562019],  [41.6672885, -91.5619378],  [41.6670607, -91.5614645],  [41.6669419, -91.5611003],  [41.6666942, -91.5605424],  [41.6664588, -91.5599262],  [41.6662119, -91.5594108],  [41.6659984, -91.5588213],  [41.6659543, -91.5587093],  [41.6659618, -91.5584908],  [41.6658557, -91.558051],  [41.6656799, -91.5576421],  [41.6655535, -91.5570109],  [41.6655165, -91.556779],  [41.6653953, -91.5563591],  [41.6653994, -91.5562751],  [41.6653084, -91.5559859],  [41.665278, -91.5557644],  [41.6651269, -91.5552242],  [41.6650078, -91.5551776],  [41.6648767, -91.5550174],  [41.6648539, -91.5549561],  [41.6644813, -91.5546091],  [41.6643767, -91.5544709],  [41.6642042, -91.5543078],  [41.6641871, -91.5540654],  [41.6638872, -91.5536402],  [41.6636576, -91.5530825],  [41.6635332, -91.5526849],  [41.663601, -91.5525041],  [41.6635323, -91.5519031],  [41.663631, -91.5517939],  [41.6635162, -91.5511849],  [41.6633955, -91.5505254],  [41.6633515, -91.5503407],  [41.6631705, -91.5503221],  [41.6629972, -91.5500846],  [41.6628494, -91.5499866],  [41.6626559, -91.5497542],  [41.662741, -91.54944],  [41.6625796, -91.5492175],  [41.6625351, -91.5490626],  [41.6626757, -91.5484773],  [41.662883, -91.5479008],  [41.6629395, -91.5477439],  [41.6629711, -91.5474528],  [41.6631547, -91.5468957],  [41.6632536, -91.5463061],  [41.663303, -91.5456488],  [41.6632904, -91.5454302],  [41.6631979, -91.5452313],  [41.663226, -91.5447079],  [41.6631646, -91.5443196],  [41.6630419, -91.5437478],  [41.6628909, -91.5437387],  [41.6626716, -91.5438981],  [41.6625894, -91.5438551],  [41.6624725, -91.5438412],  [41.6622654, -91.5439304],  [41.6622762, -91.5439651],  [41.6620946, -91.5438783],  [41.661912, -91.5438301],  [41.6615075, -91.5435103],  [41.6614323, -91.5434424],  [41.6612611, -91.542794],  [41.6612587, -91.5421679],  [41.6612639, -91.5416866],  [41.6611962, -91.541599],  [41.6612012, -91.540947],  [41.6612466, -91.5402853],  [41.6612477, -91.539888],  [41.6612437, -91.5392572],  [41.6612411, -91.5390646],  [41.6612803, -91.5389667],  [41.6612843, -91.538362],  [41.6612873, -91.537931],  [41.6612544, -91.5379726],  [41.6612426, -91.5378294],  [41.6613079, -91.537746],  [41.6617572, -91.5376622],  [41.661822, -91.5376597],  [41.6622691, -91.5377362],  [41.6623148, -91.5376403],  [41.6625126, -91.5376156],  [41.6624974, -91.5371153],  [41.6625419, -91.5370711],  [41.6625557, -91.5369778],  [41.6624868, -91.5363844],  [41.662494, -91.5361665],  [41.6625705, -91.5355583],  [41.6625215, -91.5352725],  [41.6624789, -91.5353013],  [41.6625735, -91.5353321],  [41.6626276, -91.5352907],  [41.6626064, -91.53525], ];
var line_27 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_27);
      
      var latLngs = [ [41.6624886, -91.5351748],  [41.6625381, -91.5351965],  [41.6626389, -91.5351566],  [41.6626802, -91.535377],  [41.6625492, -91.5355329],  [41.6625415, -91.5355885],  [41.6625842, -91.5356154],  [41.6625729, -91.5358454],  [41.6630363, -91.5358434],  [41.6633909, -91.5359048],  [41.6635057, -91.5364115],  [41.6634618, -91.5368098],  [41.6634707, -91.5369277],  [41.6636341, -91.5370634],  [41.6636368, -91.5375719],  [41.6633681, -91.5376851],  [41.6633762, -91.5377117],  [41.6633439, -91.5376918],  [41.6628861, -91.5377167],  [41.6628137, -91.5376189],  [41.6626937, -91.5376244],  [41.6626569, -91.5378068],  [41.662577, -91.5377444],  [41.6622923, -91.5377564],  [41.6619365, -91.5378307],  [41.6616672, -91.5377988],  [41.6616226, -91.5376675],  [41.6614762, -91.5376732],  [41.6613692, -91.5378666],  [41.6613573, -91.5382759],  [41.6612843, -91.5383676],  [41.6612828, -91.5385887],  [41.6613835, -91.5386925],  [41.6613405, -91.5393622],  [41.6613011, -91.5397471],  [41.6613971, -91.5398708],  [41.6613751, -91.5401641],  [41.6613636, -91.540843],  [41.6613048, -91.5410837],  [41.6613071, -91.5412245],  [41.661267, -91.5412977],  [41.6612634, -91.5418446],  [41.6613002, -91.5419543],  [41.6612896, -91.5421386],  [41.6612327, -91.542343],  [41.6612566, -91.5427535],  [41.6613303, -91.5430901],  [41.6616155, -91.5435734],  [41.6620813, -91.5436158],  [41.6625663, -91.5434916],  [41.6626737, -91.5434916],  [41.6628118, -91.5435586],  [41.6630636, -91.5435441],  [41.6631521, -91.5436331],  [41.6632215, -91.5437698],  [41.6633182, -91.5441446],  [41.663341, -91.5447344],  [41.6634738, -91.5451699],  [41.6634553, -91.5457718],  [41.6634725, -91.5459284],  [41.6633661, -91.546563],  [41.6632466, -91.5471324],  [41.6630545, -91.5477223],  [41.6629048, -91.5480955],  [41.6628071, -91.5485929],  [41.6626785, -91.5490133],  [41.662664, -91.5492914],  [41.6629537, -91.5497694],  [41.6630952, -91.5498711],  [41.6632011, -91.5499969],  [41.6634303, -91.5505089],  [41.6635622, -91.5511147],  [41.66365, -91.551699],  [41.6636795, -91.5517852],  [41.6637903, -91.55243],  [41.6639517, -91.5530305],  [41.6640349, -91.5532868],  [41.6643284, -91.5537552],  [41.6645288, -91.5540614],  [41.6645424, -91.5542192],  [41.6649005, -91.5547381],  [41.665163, -91.555233],  [41.6652996, -91.5555567],  [41.6654042, -91.5561831],  [41.6654359, -91.5563204],  [41.6655664, -91.5564245],  [41.6656954, -91.5570623],  [41.6658373, -91.5576767],  [41.6660376, -91.5583025],  [41.6662369, -91.5588644],  [41.6663474, -91.5591563],  [41.6662276, -91.5593066],  [41.6664918, -91.5598585],  [41.6666536, -91.5602098],  [41.6666684, -91.5602886],  [41.6669091, -91.5608907],  [41.6671081, -91.56144],  [41.6673006, -91.5618499],  [41.6673467, -91.5618941],  [41.6675414, -91.5625157],  [41.6677151, -91.5628911],  [41.6679611, -91.5634001],  [41.668168, -91.5638895],  [41.6680648, -91.5640897],  [41.6681572, -91.5642355],  [41.6682444, -91.5642748],  [41.6684056, -91.5642803],  [41.6684053, -91.5644833],  [41.6686035, -91.5650319],  [41.6688205, -91.5655283],  [41.6687996, -91.5656886],  [41.6688148, -91.5657657],  [41.6687928, -91.5658209],  [41.6689957, -91.5657548],  [41.6690551, -91.5657944],  [41.6691163, -91.5655834],  [41.6691398, -91.5655777],  [41.6691422, -91.565537],  [41.6692735, -91.5657969],  [41.6693426, -91.5658227],  [41.6693859, -91.5658052],  [41.6695537, -91.5656546],  [41.67003, -91.5655031],  [41.6701274, -91.5654679],  [41.670192, -91.5655],  [41.6703144, -91.5655098],  [41.6703911, -91.565555],  [41.6706765, -91.5655787],  [41.670742, -91.5656184],  [41.6712107, -91.565656],  [41.6712814, -91.5656182],  [41.6717627, -91.565617],  [41.6719, -91.5656046],  [41.6721106, -91.5656306],  [41.672585, -91.5657008],  [41.6730596, -91.5656735],  [41.6733597, -91.5657046],  [41.6734928, -91.56584],  [41.673537, -91.5659272],  [41.673503, -91.5660275],  [41.6735165, -91.5663671],  [41.6734939, -91.5664303],  [41.6735953, -91.5666023],  [41.6737302, -91.5672643],  [41.6738162, -91.5679088],  [41.6738472, -91.5679892],  [41.6738431, -91.5684571],  [41.6739421, -91.5687913],  [41.6739945, -91.5688838],  [41.6739943, -91.569057],  [41.6739481, -91.5691488],  [41.6740061, -91.569782],  [41.6740559, -91.5704169],  [41.6741414, -91.5709116],  [41.6741455, -91.5710569],  [41.6741682, -91.5710991],  [41.6741839, -91.571295],  [41.674223, -91.5716034],  [41.6742211, -91.5722457],  [41.6742653, -91.5728868],  [41.6743167, -91.5732321],  [41.6743544, -91.5738422],  [41.6744193, -91.5744771],  [41.6745005, -91.5750764],  [41.6745888, -91.5757379],  [41.6746056, -91.5760791],  [41.6746737, -91.5765934],  [41.6746532, -91.5767081],  [41.67473, -91.5772551],  [41.6747863, -91.5778614],  [41.6748848, -91.5781583],  [41.6749129, -91.578168],  [41.6750314, -91.5781334],  [41.6754911, -91.5781222],  [41.6757398, -91.5780955],  [41.6758709, -91.5781208],  [41.6760208, -91.5780669],  [41.6765039, -91.5780897],  [41.676787, -91.5780583],  [41.6770597, -91.5781195],  [41.6775582, -91.5780644],  [41.6779436, -91.5779954],  [41.6784241, -91.5780733],  [41.6785604, -91.5780773],  [41.6787008, -91.5779652],  [41.67889, -91.5779855],  [41.6789652, -91.5780554],  [41.6793961, -91.5780439],  [41.6794737, -91.5779912],  [41.6799557, -91.5779521],  [41.6801073, -91.5779798],  [41.6801509, -91.5780238],  [41.680641, -91.5780186],  [41.6807284, -91.5780178],  [41.6808372, -91.5782063],  [41.6809321, -91.5785046],  [41.6810262, -91.5791286],  [41.6811665, -91.5795823],  [41.6812579, -91.5796847],  [41.6813333, -91.5797175],  [41.6816814, -91.5801023],  [41.6818176, -91.580311],  [41.682245, -91.5806494],  [41.682522, -91.5808194],  [41.6830137, -91.5808929],  [41.6834797, -91.5809537],  [41.6839997, -91.5810238],  [41.6844761, -91.5810755],  [41.684942, -91.5811163],  [41.6853969, -91.5811563],  [41.6854634, -91.5811625],  [41.6855212, -91.5810731],  [41.6859905, -91.5811591],  [41.686455, -91.5812966],  [41.6869301, -91.5814756],  [41.6873872, -91.5816183],  [41.6878561, -91.5816466],  [41.6879334, -91.5816276],  [41.688007, -91.5815506],  [41.6880966, -91.5816035],  [41.6881715, -91.5815985],  [41.688346, -91.5816947],  [41.6886579, -91.58174],  [41.6887147, -91.5817746],  [41.6888186, -91.5817621],  [41.6888761, -91.5818349],  [41.6890505, -91.581836],  [41.6895204, -91.5817737],  [41.6899793, -91.5818164],  [41.6904793, -91.5819927],  [41.6907629, -91.5821308],  [41.6908335, -91.5821898],  [41.6910144, -91.5822882],  [41.6910698, -91.582276],  [41.6915107, -91.5824125],  [41.6917096, -91.5824701],  [41.6917706, -91.582459],  [41.6922413, -91.582484],  [41.6927245, -91.5824621],  [41.6929714, -91.5824276],  [41.693169, -91.5824585],  [41.6935022, -91.5824223],  [41.6939577, -91.5825314],  [41.6944207, -91.5826798],  [41.6948432, -91.5828318],  [41.6949143, -91.5829854],  [41.6948772, -91.5835132],  [41.6947631, -91.5842096],  [41.6947089, -91.5846186],  [41.6947185, -91.5847389],  [41.6946663, -91.5848784],  [41.6948058, -91.5855059],  [41.6949571, -91.585892],  [41.6953224, -91.5864641],  [41.6956534, -91.58703],  [41.6958251, -91.5874374],  [41.6959867, -91.5880839],  [41.6961743, -91.5888344],  [41.696288, -91.5894816],  [41.6963167, -91.5901831],  [41.6963184, -91.5908148],  [41.6963191, -91.5910724],  [41.6963908, -91.5911509],  [41.6964004, -91.5916847],  [41.6964267, -91.5917565],  [41.6963628, -91.5920359],  [41.6962731, -91.5920931],  [41.6962493, -91.5922115],  [41.6962822, -91.5923423],  [41.6961904, -91.5926104],  [41.6957805, -91.5929703],  [41.6956178, -91.5932778],  [41.6957017, -91.5934244],  [41.6961562, -91.5935179],  [41.6965816, -91.5937462],  [41.6970152, -91.5940014],  [41.6970287, -91.5938651],  [41.6970712, -91.5938612],  [41.6975184, -91.5940897],  [41.6980147, -91.5941423],  [41.6984888, -91.5942649],  [41.6989979, -91.5944117],  [41.699453, -91.5945487],  [41.6999266, -91.5946765],  [41.700358, -91.5949312],  [41.7004297, -91.5949449],  [41.7006367, -91.5952162],  [41.7006986, -91.5952588],  [41.7007367, -91.5953748],  [41.7008082, -91.5954721],  [41.7009847, -91.5960486],  [41.701144, -91.5962808],  [41.7014937, -91.5965133],  [41.7016768, -91.5970142],  [41.7018887, -91.5973006],  [41.7019875, -91.5973627],  [41.7021211, -91.5973443],  [41.7022288, -91.5973716],  [41.7024354, -91.5972866],  [41.7025999, -91.5970494],  [41.7026617, -91.596877],  [41.7030402, -91.5965096],  [41.7034308, -91.5963321],  [41.7034528, -91.596352],  [41.703553, -91.5963179],  [41.7039336, -91.5966502],  [41.7041632, -91.5965324],  [41.7044832, -91.5969538],  [41.7045303, -91.5971446],  [41.7045932, -91.5976021],  [41.7047067, -91.5979758],  [41.7048097, -91.5986135],  [41.7049841, -91.599194],  [41.7051963, -91.5997255],  [41.7055132, -91.600167],  [41.7055749, -91.600269],  [41.7056384, -91.6003107],  [41.7058308, -91.6005633],  [41.7057607, -91.6007791],  [41.7061301, -91.6012369],  [41.7062868, -91.6015511],  [41.7063221, -91.6019184],  [41.7064591, -91.6021131],  [41.7068623, -91.6024824],  [41.7072415, -91.6028137],  [41.7076546, -91.6031886],  [41.7079935, -91.6035866],  [41.7080878, -91.6042236],  [41.7081423, -91.6046616],  [41.7082814, -91.6048901],  [41.7086189, -91.6051593],  [41.7086296, -91.6053288],  [41.7086784, -91.6054732],  [41.7086437, -91.6055201],  [41.7086513, -91.6057479],  [41.708773, -91.6060641],  [41.708772, -91.6065241],  [41.7088777, -91.6071698],  [41.7088662, -91.6075614],  [41.7088059, -91.607947],  [41.7087179, -91.6082243],  [41.7087364, -91.6083276],  [41.7086897, -91.6084532],  [41.7086954, -91.6089243],  [41.7086004, -91.6094119],  [41.7085967, -91.6096242],  [41.7086371, -91.6097417],  [41.7086206, -91.609919],  [41.7084837, -91.6101435],  [41.7083877, -91.6101654],  [41.7078783, -91.6101036],  [41.7073904, -91.6100713],  [41.706934, -91.6100829],  [41.7066318, -91.6100561],  [41.706446, -91.6100854],  [41.7062605, -91.6100483],  [41.7060847, -91.6102274],  [41.7060163, -91.6102239],  [41.7059369, -91.6100958],  [41.7054637, -91.6101098],  [41.7049929, -91.6101305],  [41.7045414, -91.6101489],  [41.7040773, -91.6100786],  [41.7040258, -91.6101807],  [41.7040982, -91.6101605],  [41.7040167, -91.6099138], ];
var line_28 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_28);
      
      var latLngs = [ [41.70394, -91.6101183],  [41.7041107, -91.6100596],  [41.7040454, -91.6099482],  [41.7039747, -91.6100165],  [41.7039188, -91.610026],  [41.7039173, -91.6100851],  [41.7040644, -91.6101835],  [41.7045152, -91.6101232],  [41.7047509, -91.6100548],  [41.7052068, -91.6101314],  [41.7053945, -91.6101643],  [41.7055782, -91.6100695],  [41.7056659, -91.6100629],  [41.7057243, -91.610011],  [41.7059097, -91.6100167],  [41.706365, -91.6099082],  [41.7068285, -91.6099634],  [41.7072835, -91.6099909],  [41.7077559, -91.6100043],  [41.7079243, -91.610042],  [41.7083931, -91.6100311],  [41.7084193, -91.6100141],  [41.708426, -91.6095519],  [41.7083623, -91.6094725],  [41.7083809, -91.608814],  [41.7083969, -91.6083513],  [41.7083295, -91.6080721],  [41.7083053, -91.607665],  [41.7084311, -91.6075783],  [41.7084296, -91.607404],  [41.708326, -91.6073246],  [41.7082994, -91.6066735],  [41.7082709, -91.6060701],  [41.7082858, -91.6054375],  [41.7083043, -91.604964],  [41.7080346, -91.6046986],  [41.7079512, -91.6040335],  [41.70794, -91.6038426],  [41.7079699, -91.6036823],  [41.7079476, -91.6035887],  [41.7076826, -91.6034343],  [41.7073278, -91.6030485],  [41.7069563, -91.6026546],  [41.706536, -91.6023202],  [41.7063612, -91.6021745],  [41.7062393, -91.6019091],  [41.7061527, -91.6013384],  [41.7058449, -91.6008411],  [41.705473, -91.600424],  [41.7051482, -91.5999478],  [41.7048972, -91.59936],  [41.7047178, -91.5987851],  [41.7046113, -91.5982672],  [41.7046067, -91.5978409],  [41.7045738, -91.5977588],  [41.7045143, -91.5974092],  [41.7043552, -91.5970371],  [41.704199, -91.596655],  [41.7041044, -91.5965723],  [41.703752, -91.5966677],  [41.703466, -91.5964435],  [41.7032657, -91.5964577],  [41.7031436, -91.5965509],  [41.7030307, -91.5965921],  [41.7029405, -91.5968757],  [41.7027585, -91.597146],  [41.7026841, -91.5972976],  [41.702517, -91.5973447],  [41.7024058, -91.5974193],  [41.7022862, -91.5974386],  [41.7020577, -91.5974159],  [41.7019551, -91.5973768],  [41.7017632, -91.5971748],  [41.7016798, -91.5970322],  [41.7016018, -91.5969312],  [41.701495, -91.5965878],  [41.7013553, -91.5964458],  [41.7008959, -91.5962817],  [41.7008015, -91.5961118],  [41.7007375, -91.5959071],  [41.7006872, -91.595831],  [41.7006567, -91.5956811],  [41.7005957, -91.5955602],  [41.700457, -91.5952212],  [41.7001618, -91.5950628],  [41.7000842, -91.5949943],  [41.6996563, -91.5948813],  [41.6995841, -91.5948041],  [41.6994007, -91.5947166],  [41.6992469, -91.5946084],  [41.6988103, -91.5944523],  [41.6984501, -91.5943665],  [41.6984626, -91.5945111],  [41.6984437, -91.5944452],  [41.6979463, -91.5943848],  [41.697952, -91.5943362],  [41.6977943, -91.5942744],  [41.6973763, -91.5943354],  [41.6970593, -91.594295],  [41.6972756, -91.5942973],  [41.697068, -91.594161],  [41.6969653, -91.5940577],  [41.6967487, -91.5939929],  [41.6963023, -91.5937924],  [41.695889, -91.593564],  [41.6958203, -91.5934767],  [41.6957412, -91.5934817],  [41.6957104, -91.5934394],  [41.6956586, -91.5934263],  [41.6956287, -91.5933793],  [41.6955818, -91.5933845],  [41.6955085, -91.5933249],  [41.6955331, -91.593212],  [41.6955866, -91.593147],  [41.6956557, -91.5929712],  [41.695743, -91.5929873],  [41.6961243, -91.5924399],  [41.6962922, -91.5918871],  [41.6963029, -91.5916105],  [41.6962577, -91.5913711],  [41.696248, -91.5909166],  [41.6962737, -91.5906877],  [41.6963177, -91.5905786],  [41.6963161, -91.5899766],  [41.6963025, -91.5896539],  [41.6962338, -91.5892941],  [41.6961459, -91.5890993],  [41.6961615, -91.5890428],  [41.6961255, -91.5887931],  [41.6959893, -91.5882482],  [41.6958925, -91.5879923],  [41.6957028, -91.5873782],  [41.6956279, -91.5872166],  [41.6953167, -91.5867233],  [41.6950186, -91.5862696],  [41.6948002, -91.5859858],  [41.6947208, -91.585764],  [41.6948324, -91.5855802],  [41.6946786, -91.5849955],  [41.6946617, -91.5847968],  [41.6945564, -91.5847235],  [41.6945479, -91.5844058],  [41.6945829, -91.5842342],  [41.6947017, -91.5841836],  [41.6947139, -91.5841024],  [41.6946585, -91.5840111],  [41.6947514, -91.5833582],  [41.6947709, -91.5828853],  [41.694748, -91.5828639],  [41.6943937, -91.5828202],  [41.6943481, -91.5827064],  [41.6939042, -91.5826043],  [41.6934101, -91.5825247],  [41.6929173, -91.5825255],  [41.6923973, -91.5825305],  [41.6918846, -91.5825354],  [41.6913687, -91.5824738],  [41.6909123, -91.5822521],  [41.6904423, -91.5819893],  [41.6899296, -91.5818741],  [41.6896383, -91.5818706],  [41.6894345, -91.5819103],  [41.6889826, -91.5819315],  [41.6884613, -91.5819106],  [41.6879711, -91.581862],  [41.6875255, -91.5817552],  [41.687076, -91.5816269],  [41.6865355, -91.5814632],  [41.6860054, -91.5812913],  [41.6855138, -91.5811677],  [41.6850181, -91.581123],  [41.6844764, -91.5810755],  [41.6839955, -91.5810232],  [41.6835071, -91.5809573],  [41.6830355, -91.5808957],  [41.6825668, -91.5808289],  [41.6822573, -91.580688],  [41.6821681, -91.5807352],  [41.681907, -91.5805456],  [41.6818171, -91.5804979],  [41.6816691, -91.580243],  [41.6815839, -91.5801529],  [41.6815637, -91.580097],  [41.6812235, -91.579882],  [41.6810862, -91.5797114],  [41.6808838, -91.5792331],  [41.6808006, -91.5785756],  [41.6807889, -91.5784557],  [41.6808766, -91.5783335],  [41.6808451, -91.578017],  [41.680365, -91.5780209],  [41.6798258, -91.5780325],  [41.679335, -91.5780456],  [41.6788787, -91.5780577],  [41.678427, -91.5780698],  [41.6779478, -91.5780846],  [41.6774756, -91.5780993],  [41.6769354, -91.5781161],  [41.6764536, -91.5781359],  [41.6759499, -91.5781714],  [41.6754735, -91.578205],  [41.6749996, -91.5782384],  [41.6748127, -91.5782515],  [41.674734, -91.5779384],  [41.6747517, -91.5778789],  [41.6746768, -91.577564],  [41.6746217, -91.5769615],  [41.6746047, -91.5767755],  [41.6745289, -91.5767176],  [41.6744733, -91.5760749],  [41.6743992, -91.5754416],  [41.6743389, -91.5748319],  [41.6742884, -91.574177],  [41.6742918, -91.573912],  [41.6742091, -91.5736493],  [41.6741489, -91.5729342],  [41.6741313, -91.5727117],  [41.6741145, -91.5723678],  [41.6739971, -91.571698],  [41.6739442, -91.571578],  [41.6739327, -91.5714653],  [41.6739335, -91.5709054],  [41.6738858, -91.570635],  [41.6738963, -91.5704102],  [41.6738594, -91.5701977],  [41.6739534, -91.5700787],  [41.6738947, -91.5694384],  [41.6738281, -91.5687813],  [41.6737737, -91.5682596],  [41.6736945, -91.5681756],  [41.6736046, -91.5674969],  [41.6736764, -91.5671924],  [41.6735735, -91.5671012],  [41.673582, -91.566925],  [41.6734875, -91.5665817],  [41.6734154, -91.5663273],  [41.6734376, -91.5660144],  [41.6733693, -91.5658576],  [41.6728708, -91.5657398],  [41.6728014, -91.56575],  [41.6725295, -91.5656936],  [41.6720679, -91.5657428],  [41.6716982, -91.5656845],  [41.6716426, -91.5656482],  [41.6713675, -91.5656684],  [41.6708702, -91.5656422],  [41.6703691, -91.5656262],  [41.6699176, -91.5656375],  [41.6696521, -91.5656597],  [41.6695441, -91.5657632],  [41.669465, -91.5657461],  [41.6692989, -91.5658792],  [41.6692385, -91.5658734],  [41.6692012, -91.5656803],  [41.6691287, -91.5654841],  [41.6690559, -91.5655098],  [41.6690724, -91.565524],  [41.6688405, -91.5657375],  [41.6686687, -91.5654748],  [41.6687702, -91.5653159],  [41.6685496, -91.5647919],  [41.6683141, -91.5642348],  [41.6681354, -91.5638123],  [41.667818, -91.5634249],  [41.6677932, -91.5633283],  [41.6676827, -91.5631639],  [41.6675753, -91.5628843],  [41.6674665, -91.5625136],  [41.6674085, -91.5624312],  [41.6672854, -91.5619915],  [41.6671968, -91.5618162],  [41.6671751, -91.5617102],  [41.6670738, -91.561537],  [41.6670304, -91.5613204],  [41.6668907, -91.5610436],  [41.6667614, -91.5606422],  [41.6664825, -91.5600554],  [41.666181, -91.5595206],  [41.6661307, -91.5594326],  [41.6659449, -91.5588599],  [41.6659115, -91.5587375],  [41.6658862, -91.5583769],  [41.6658185, -91.5581592],  [41.6657618, -91.5580846],  [41.6658196, -91.5580512],  [41.6657129, -91.5579186],  [41.6656186, -91.5574321],  [41.6656395, -91.5573316],  [41.6655248, -91.5567274],  [41.6654261, -91.5559982],  [41.6653662, -91.5558423],  [41.6652297, -91.555606],  [41.6651972, -91.5554651],  [41.6651645, -91.5552364],  [41.6650652, -91.5552263],  [41.6650338, -91.5551704],  [41.665007, -91.5550207],  [41.6646825, -91.5545699],  [41.6643388, -91.5541727],  [41.664242, -91.5540483],  [41.6641322, -91.5538256],  [41.6640911, -91.553816],  [41.6639326, -91.5534978],  [41.6638706, -91.5532589],  [41.6637742, -91.553118],  [41.6637233, -91.5528321],  [41.6638053, -91.5526908],  [41.6636809, -91.5520586],  [41.6635633, -91.5514347],  [41.6635132, -91.5511687],  [41.6634207, -91.5510233],  [41.6632938, -91.5504064],  [41.6631983, -91.5503951],  [41.6631041, -91.550131],  [41.6630374, -91.5501005],  [41.6629624, -91.5499856],  [41.6630167, -91.5497434],  [41.6626419, -91.5493106],  [41.6625168, -91.5491237],  [41.6626542, -91.548498],  [41.6628597, -91.5479283],  [41.6629506, -91.5476277],  [41.6630704, -91.5473875],  [41.6632098, -91.5467295],  [41.6632677, -91.5461229],  [41.6632742, -91.5455196],  [41.6631814, -91.5450878],  [41.6633526, -91.5450087],  [41.6633333, -91.5445509],  [41.6631843, -91.5444869],  [41.6632012, -91.5441608],  [41.6631795, -91.5440645],  [41.6631051, -91.5440158],  [41.6630697, -91.5438215],  [41.662924, -91.5436537],  [41.6628048, -91.5436043],  [41.662305, -91.5436525],  [41.6618564, -91.5437542],  [41.6617973, -91.5437819],  [41.661529, -91.5437504],  [41.66145, -91.5436617],  [41.6614019, -91.5435272],  [41.6614266, -91.5433668],  [41.6612624, -91.5428063],  [41.66126, -91.542107],  [41.6611686, -91.5419404],  [41.6611625, -91.5413139],  [41.6611542, -91.5409928],  [41.6611762, -91.5405261],  [41.6611608, -91.5399197],  [41.6612039, -91.5393032],  [41.6611604, -91.5391383],  [41.6611736, -91.5386152],  [41.6612839, -91.5384237],  [41.6612882, -91.5378063],  [41.6612891, -91.537668],  [41.6617972, -91.5376607],  [41.6621492, -91.5376468],  [41.6621881, -91.5375438],  [41.662348, -91.5375225],  [41.6624575, -91.5373864],  [41.6624998, -91.5372196],  [41.6624953, -91.5366029],  [41.662573, -91.5359653],  [41.6625145, -91.5353483],  [41.6625035, -91.535407],  [41.6624982, -91.5354161], ];
var line_29 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_29);
      
      var latLngs = [ [41.7039941, -91.6099641],  [41.704013, -91.6099409],  [41.7041037, -91.6098984],  [41.7041915, -91.6100788],  [41.7043528, -91.610097],  [41.7044365, -91.6101254],  [41.7044947, -91.6100984],  [41.7049576, -91.6100603],  [41.7054298, -91.6100846],  [41.7058474, -91.6100366],  [41.7063216, -91.6100695],  [41.7063679, -91.6097645],  [41.7065195, -91.6100805],  [41.706789, -91.6100744],  [41.7069332, -91.6100079],  [41.7074413, -91.6100562],  [41.7079321, -91.6100432],  [41.7083712, -91.6100187],  [41.7084246, -91.6098579],  [41.7084521, -91.6092285],  [41.7084816, -91.6089845],  [41.7084599, -91.6084094],  [41.7084198, -91.6083467],  [41.7084289, -91.6082731],  [41.7083922, -91.6083202],  [41.708344, -91.6079577],  [41.7083019, -91.607796],  [41.7084322, -91.6076945],  [41.708426, -91.6070111],  [41.7084204, -91.6063833],  [41.7084142, -91.605705],  [41.7084083, -91.6050499],  [41.7084076, -91.6049725],  [41.7081237, -91.6046702],  [41.7080607, -91.6043129],  [41.7080606, -91.6040249],  [41.7080347, -91.6037705],  [41.7079475, -91.6034916],  [41.7075206, -91.6030594],  [41.7070819, -91.6026742],  [41.706662, -91.6023073],  [41.7062876, -91.6019928],  [41.7062461, -91.6014796],  [41.7061774, -91.6013018],  [41.7058171, -91.600849],  [41.7054364, -91.6003788],  [41.7051253, -91.5999036],  [41.7048927, -91.5993341],  [41.7046799, -91.5987601],  [41.7046521, -91.5986189],  [41.7045497, -91.5983714],  [41.7045585, -91.5982712],  [41.7046399, -91.5981756],  [41.7046381, -91.5979902],  [41.7045209, -91.5979125],  [41.7043694, -91.5973396],  [41.7042256, -91.5967464],  [41.7041494, -91.5966319],  [41.7040333, -91.5966485],  [41.7039481, -91.5967251],  [41.7037727, -91.5967138],  [41.703508, -91.5964491],  [41.702933, -91.5966404],  [41.7027519, -91.5968571],  [41.7025808, -91.5972204],  [41.7024381, -91.5974211],  [41.7023529, -91.5974826],  [41.7019909, -91.5974434],  [41.7017905, -91.5973511],  [41.7017016, -91.5972144],  [41.701539, -91.5967148],  [41.7014663, -91.5965722],  [41.701032, -91.5963187],  [41.7008213, -91.595988],  [41.7007809, -91.5957482],  [41.7007922, -91.5955088],  [41.7007468, -91.5953954],  [41.7005451, -91.5952352],  [41.7003925, -91.595054],  [41.6999855, -91.5948513],  [41.6998795, -91.594969],  [41.6998142, -91.5950822],  [41.6996063, -91.5950057],  [41.6991635, -91.5946796],  [41.6990632, -91.5946728],  [41.6986989, -91.5945315],  [41.6986273, -91.5945473],  [41.6985817, -91.594391],  [41.6983495, -91.5943775],  [41.6981759, -91.5943162],  [41.6981481, -91.5942711],  [41.697686, -91.5943256],  [41.6972233, -91.5942434],  [41.6968185, -91.5939279],  [41.6966425, -91.5938198],  [41.6961676, -91.5936274],  [41.6958682, -91.593485],  [41.695708, -91.5935254],  [41.6956051, -91.5934446],  [41.6956019, -91.5934041],  [41.6954749, -91.5933108],  [41.6955802, -91.5931039],  [41.6957621, -91.5929683],  [41.6961343, -91.5924901],  [41.6962457, -91.5922253],  [41.6963038, -91.5915829],  [41.6963186, -91.5908967],  [41.6963169, -91.5902658],  [41.6963001, -91.5896254],  [41.6962333, -91.5890754],  [41.6960694, -91.5884151],  [41.6959148, -91.5877961],  [41.6958256, -91.5874387],  [41.6957166, -91.5871783],  [41.6956284, -91.5871549],  [41.695341, -91.5866504],  [41.6950385, -91.5861947],  [41.6948423, -91.5859154],  [41.6949256, -91.5858256],  [41.6947114, -91.5851685],  [41.6946602, -91.5846431],  [41.6945853, -91.5845716],  [41.6945781, -91.5844799],  [41.6946437, -91.5841011],  [41.694814, -91.5834089],  [41.6948363, -91.5830289],  [41.6947679, -91.5829273],  [41.6946084, -91.5829314],  [41.6943271, -91.5828787],  [41.6942948, -91.5826941],  [41.6938425, -91.5825907],  [41.6933205, -91.5825244],  [41.6928247, -91.5825264],  [41.6923131, -91.5825313],  [41.6918181, -91.5825332],  [41.6914714, -91.5824983],  [41.6909899, -91.5822939],  [41.6905117, -91.5820293],  [41.6900367, -91.5818855],  [41.6895757, -91.5818531],  [41.6894226, -91.5818463],  [41.6893334, -91.5819025],  [41.6889491, -91.5818395],  [41.6884484, -91.5818886],  [41.6880971, -91.5818962],  [41.6875846, -91.5817658],  [41.6870764, -91.581627],  [41.6865637, -91.5814722],  [41.6860559, -91.5813085],  [41.6855118, -91.5811675],  [41.6849749, -91.5811192],  [41.6844526, -91.5810734],  [41.6839096, -91.5810113],  [41.6833862, -91.5809415],  [41.6829008, -91.5808781],  [41.6824684, -91.5808018],  [41.6822372, -91.5808075],  [41.6821826, -91.580741],  [41.6821444, -91.5807364],  [41.682176, -91.5808384],  [41.6821904, -91.5808102],  [41.6819651, -91.5805884],  [41.681714, -91.5804968],  [41.6816977, -91.5803885],  [41.681493, -91.580121],  [41.6815099, -91.5799803],  [41.681121, -91.5795923],  [41.6809632, -91.5791991],  [41.6808953, -91.5785219],  [41.6808579, -91.5781454],  [41.6805375, -91.5780194],  [41.6800719, -91.5780259],  [41.6795673, -91.5780394],  [41.6791042, -91.5780517],  [41.678579, -91.5780657],  [41.678127, -91.578079],  [41.6776278, -91.5780945],  [41.6770975, -91.578111],  [41.6766262, -91.5781249],  [41.6761515, -91.5781572],  [41.675668, -91.5781913],  [41.6751893, -91.578225],  [41.6748115, -91.5782487],  [41.6746782, -91.577604],  [41.6746242, -91.5769895],  [41.6745636, -91.5763265],  [41.674504, -91.5756947],  [41.6744367, -91.5750125],  [41.6744202, -91.574845],  [41.6743596, -91.5747721],  [41.674301, -91.574297],  [41.6743512, -91.5741841],  [41.6742823, -91.5735386],  [41.6742194, -91.5729069],  [41.6741573, -91.5722835],  [41.6740963, -91.571638],  [41.6740355, -91.5709752],  [41.6739734, -91.5702977],  [41.6739086, -91.56959],  [41.673844, -91.5689364],  [41.6737787, -91.568307],  [41.6737139, -91.5676185],  [41.6736563, -91.5669646],  [41.6736084, -91.5663674],  [41.6735569, -91.5657242],  [41.6735544, -91.5656931],  [41.6730851, -91.5656675],  [41.672576, -91.5656422],  [41.6720929, -91.5656329],  [41.6716112, -91.5656242],  [41.6710985, -91.5656149],  [41.6706363, -91.5655967],  [41.6703058, -91.5655362],  [41.67011, -91.5655972],  [41.6696306, -91.5655887],  [41.6694102, -91.5655847],  [41.6693842, -91.5657722],  [41.6693542, -91.5657901],  [41.6692261, -91.5656062],  [41.6691621, -91.5653901],  [41.668957, -91.5656466],  [41.6688211, -91.565726],  [41.6686586, -91.5654418],  [41.6687585, -91.5652879],  [41.6685272, -91.5647389],  [41.6682774, -91.5641482],  [41.6680525, -91.5636164],  [41.6678296, -91.5630887],  [41.6676044, -91.562552],  [41.6673463, -91.5619238],  [41.6671318, -91.5613622],  [41.6670235, -91.5610815],  [41.6668164, -91.560646],  [41.6666244, -91.5601028],  [41.6663634, -91.5595076],  [41.6661363, -91.5589219],  [41.665935, -91.5583781],  [41.6657489, -91.5577915],  [41.6656106, -91.5571968],  [41.6655665, -91.5569771],  [41.6653858, -91.5565162],  [41.6653815, -91.5564266],  [41.6654658, -91.556336],  [41.6654335, -91.5560483],  [41.6653616, -91.5558404],  [41.6653363, -91.5556441],  [41.6651964, -91.555495],  [41.6652325, -91.5553941],  [41.6651424, -91.5551853],  [41.6650913, -91.5551471],  [41.6650328, -91.5549781],  [41.6647998, -91.5547346],  [41.6645769, -91.5544719],  [41.6645591, -91.5544027],  [41.6642044, -91.5539631],  [41.6639028, -91.5534853],  [41.6637643, -91.5529828],  [41.6638288, -91.5528061],  [41.6636928, -91.5521216],  [41.6635793, -91.5515196],  [41.6634544, -91.5508415],  [41.6632866, -91.5501466],  [41.6632144, -91.5499742],  [41.6628219, -91.5495331],  [41.6625192, -91.5491273],  [41.6626629, -91.5485144],  [41.6628807, -91.5479072],  [41.6630874, -91.5473281],  [41.6632518, -91.5467355],  [41.6633393, -91.5461182],  [41.6633441, -91.5460558],  [41.6632334, -91.5459679],  [41.6632809, -91.5453729],  [41.6632511, -91.5450996],  [41.6632828, -91.545049],  [41.6632526, -91.5448675],  [41.6633406, -91.5447235],  [41.6633066, -91.5440227],  [41.663175, -91.5436871],  [41.6630332, -91.5435773],  [41.6629526, -91.5435516],  [41.6624942, -91.5435954],  [41.6620436, -91.5436598],  [41.6617015, -91.5436758],  [41.6614819, -91.5434933],  [41.6611645, -91.543721],  [41.6611848, -91.5436122],  [41.6611953, -91.5434315],  [41.66121, -91.5433539],  [41.6612613, -91.5433234],  [41.6611531, -91.5428728],  [41.6612591, -91.5427744],  [41.6612591, -91.5421527],  [41.6612652, -91.5415241],  [41.6612706, -91.5408413],  [41.6612741, -91.5401785],  [41.6612767, -91.5395294],  [41.6612807, -91.5388983],  [41.6612851, -91.5382392],  [41.6612891, -91.5376693],  [41.6617782, -91.5376614],  [41.6622261, -91.5376438],  [41.6622319, -91.5375694],  [41.6623709, -91.5375635],  [41.6624115, -91.5375212],  [41.6623801, -91.5374893],  [41.6624288, -91.5374636],  [41.6624785, -91.5370518],  [41.6624699, -91.5364485],  [41.6624956, -91.5361511],  [41.6625529, -91.5360161],  [41.662582, -91.5354007],  [41.6624207, -91.5354732], ];
var line_30 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_30);
      
      var latLngs = [ [41.6626173, -91.5355986],  [41.6626275, -91.535619],  [41.6626432, -91.5355932],  [41.6625957, -91.5358123],  [41.6626407, -91.535977],  [41.6626922, -91.5360024],  [41.6627321, -91.5359515],  [41.6628146, -91.5359569],  [41.6628447, -91.5359175],  [41.6628354, -91.535892],  [41.6628562, -91.5358738],  [41.6628196, -91.5355291],  [41.6628811, -91.5355477],  [41.662963, -91.5357612],  [41.663033, -91.5358062],  [41.6630847, -91.5358001],  [41.6633621, -91.5358874],  [41.6634445, -91.5358429],  [41.6635567, -91.5359061],  [41.6635717, -91.5358531],  [41.6636803, -91.5358843],  [41.6637428, -91.5361653],  [41.6637383, -91.5366085],  [41.6637779, -91.5367736],  [41.6637564, -91.5373128],  [41.6636363, -91.5374686],  [41.6636369, -91.5375765],  [41.6635107, -91.5377204],  [41.6630785, -91.5377371],  [41.6627033, -91.5378227],  [41.6626347, -91.5376271],  [41.6621532, -91.5376467],  [41.661661, -91.537666],  [41.6613635, -91.5376705],  [41.6612873, -91.5379196],  [41.6612828, -91.5385916],  [41.6612818, -91.538735],  [41.661359, -91.5387857],  [41.6612814, -91.5394872],  [41.6612744, -91.5401007],  [41.6612717, -91.5407036],  [41.6612668, -91.5413209],  [41.6612618, -91.5419327],  [41.6612811, -91.5425662],  [41.6612556, -91.5427261],  [41.6613277, -91.5430865],  [41.6613744, -91.5431815],  [41.6613761, -91.5432387],  [41.6614492, -91.543319],  [41.6617474, -91.543669],  [41.6621852, -91.5435954],  [41.662235, -91.5435374],  [41.6624489, -91.5434877],  [41.6626374, -91.5435917],  [41.6628889, -91.5436549],  [41.6629467, -91.543567],  [41.6629547, -91.5434384],  [41.6629262, -91.5433604],  [41.6629929, -91.5433317],  [41.6630428, -91.5433991],  [41.6631229, -91.5434107],  [41.6631853, -91.5434757],  [41.6632837, -91.5439437],  [41.6633351, -91.5442093],  [41.6633125, -91.5442958],  [41.6633517, -91.5449881],  [41.6633668, -91.5456375],  [41.6633269, -91.546243],  [41.6632227, -91.5468725],  [41.6630288, -91.5474933],  [41.6628111, -91.5481001],  [41.662618, -91.5486443],  [41.6625327, -91.5490932],  [41.6626715, -91.5493633],  [41.6630298, -91.5497579],  [41.6632122, -91.5499699],  [41.6634533, -91.5504217],  [41.663561, -91.5510099],  [41.6636603, -91.5515454],  [41.6637205, -91.5522686],  [41.6638398, -91.5528604],  [41.6640124, -91.5533931],  [41.6643103, -91.5538687],  [41.664646, -91.5543726],  [41.664976, -91.5548479],  [41.6652253, -91.5553774],  [41.6653073, -91.5555763],  [41.6653892, -91.5560382],  [41.6654289, -91.5563456],  [41.6655759, -91.5564748],  [41.6657016, -91.5570912],  [41.6658395, -91.5576859],  [41.6660254, -91.5582679],  [41.6662254, -91.5588323],  [41.6664595, -91.5594514],  [41.6666774, -91.5600207],  [41.6669109, -91.5606324],  [41.6670732, -91.5612662],  [41.6673172, -91.56186],  [41.6675603, -91.5624469],  [41.667785, -91.5629824],  [41.6680162, -91.5635303],  [41.6682593, -91.5641052],  [41.6685095, -91.5646971],  [41.668761, -91.5652938],  [41.6687966, -91.5653792],  [41.6687447, -91.5655106],  [41.6688119, -91.5656299],  [41.668899, -91.5655062],  [41.6691558, -91.5654506],  [41.6692084, -91.5655409],  [41.6692288, -91.5655255],  [41.6691713, -91.5655306],  [41.6692669, -91.5657577],  [41.6694703, -91.5655689],  [41.6699542, -91.5655001],  [41.6701319, -91.5655727],  [41.6701499, -91.5655438],  [41.6702119, -91.5655912],  [41.6706962, -91.5655948],  [41.6710239, -91.5655929],  [41.6710986, -91.5656215],  [41.6716084, -91.565618],  [41.6721162, -91.5656333],  [41.6727005, -91.5656467],  [41.6730964, -91.5655389],  [41.6733692, -91.5656553],  [41.6735697, -91.5658832],  [41.673621, -91.5665236],  [41.6736729, -91.5671522],  [41.6737293, -91.5677931],  [41.6737919, -91.5684342],  [41.6738613, -91.5691053],  [41.6739276, -91.5697979],  [41.6739858, -91.5704322],  [41.6739908, -91.5704867],  [41.6740631, -91.5704748],  [41.6740572, -91.5706938],  [41.6740194, -91.5707992],  [41.6740866, -91.5715316],  [41.6741596, -91.5723071],  [41.674189, -91.5726017],  [41.6741202, -91.5725824],  [41.6741889, -91.5726933],  [41.6742136, -91.5731071],  [41.674301, -91.5737259],  [41.6743569, -91.5742383],  [41.6744357, -91.574281],  [41.6744519, -91.5745306],  [41.6744455, -91.5747284],  [41.6744933, -91.5753873],  [41.6745559, -91.5762416],  [41.6746123, -91.5768586],  [41.6746679, -91.5775214],  [41.6747081, -91.5778061],  [41.6747659, -91.5778794],  [41.6748067, -91.5780686],  [41.674978, -91.5781415],  [41.6751011, -91.578116],  [41.6752492, -91.5781125],  [41.6753711, -91.5780714],  [41.6754359, -91.5782076],  [41.6756514, -91.5781924],  [41.6757329, -91.5780794],  [41.6760439, -91.5781094],  [41.6761294, -91.5781587],  [41.6766013, -91.5781255],  [41.6770801, -91.5781116],  [41.6775456, -91.5780971],  [41.6775917, -91.5780957],  [41.6776363, -91.5780545],  [41.6780886, -91.5780187],  [41.6785673, -91.5780036],  [41.6790515, -91.5780531],  [41.6795102, -91.5780409],  [41.6799641, -91.5780288],  [41.6804294, -91.5780203],  [41.6807391, -91.5779846],  [41.6808198, -91.5779224],  [41.6808981, -91.5781563],  [41.6809857, -91.5787924],  [41.6810194, -91.5792939],  [41.6810916, -91.5794554],  [41.6812195, -91.5796305],  [41.6812605, -91.5796443],  [41.6816611, -91.5800281],  [41.6817943, -91.5803023],  [41.6820251, -91.580422],  [41.6821583, -91.5805677],  [41.6822748, -91.58063],  [41.6823278, -91.5807304],  [41.682811, -91.5808664],  [41.6832677, -91.580926],  [41.6837619, -91.5809909],  [41.6843024, -91.5810602],  [41.6848156, -91.5811053],  [41.6852863, -91.5811466],  [41.6856304, -91.5811813],  [41.6856901, -91.5810788],  [41.6861323, -91.5812038],  [41.6862409, -91.5812309],  [41.6863066, -91.5812817],  [41.6863839, -91.5812598],  [41.6865527, -91.5813688],  [41.6865978, -91.5814831],  [41.6867059, -91.5815175],  [41.6867856, -91.5814563],  [41.6872565, -91.5815821],  [41.6873998, -91.581607],  [41.6877667, -91.5816252],  [41.6882547, -91.5816913],  [41.6885837, -91.5816945],  [41.6890586, -91.5817425],  [41.689181, -91.5817517],  [41.6892423, -91.5818417],  [41.689735, -91.5818616],  [41.6902003, -91.581912],  [41.6906823, -91.5821268],  [41.6911391, -91.5823727],  [41.6914485, -91.5824931],  [41.6919619, -91.5825347],  [41.6924304, -91.5825302],  [41.6924353, -91.5825093],  [41.6929022, -91.5825257],  [41.6933828, -91.5825246],  [41.6936309, -91.5825463],  [41.6937086, -91.5825201],  [41.6941604, -91.5826632],  [41.6944118, -91.582721],  [41.6947741, -91.5827611],  [41.6948544, -91.5829255],  [41.6948738, -91.5831715],  [41.6947585, -91.5838165],  [41.6946633, -91.5845662],  [41.6946942, -91.5850776],  [41.6948625, -91.5856597],  [41.6951285, -91.5861749],  [41.6954483, -91.5866445],  [41.6957414, -91.5872374],  [41.6958245, -91.5874358],  [41.6959947, -91.588116],  [41.696158, -91.5887693],  [41.696282, -91.5894106],  [41.6963167, -91.5901911],  [41.6963186, -91.5908938],  [41.6963055, -91.5915274],  [41.6962643, -91.5921424],  [41.696056, -91.5926154],  [41.6957608, -91.5929629],  [41.6957772, -91.5930343],  [41.695657, -91.5933897],  [41.6961403, -91.5934437],  [41.6963812, -91.593559],  [41.6964797, -91.5936813],  [41.6968944, -91.5938844],  [41.6973451, -91.5941418],  [41.6976784, -91.5942148],  [41.6977485, -91.5941843],  [41.6978695, -91.5942065],  [41.69808, -91.5940877],  [41.6982195, -91.5941955],  [41.6983724, -91.5943645],  [41.6984391, -91.5943381],  [41.6989768, -91.5945263],  [41.6994431, -91.5946112],  [41.6999498, -91.5946904],  [41.7003798, -91.5949764],  [41.700723, -91.5952707],  [41.7008731, -91.5956283],  [41.7010521, -91.5962053],  [41.701401, -91.5963057],  [41.7015932, -91.5968002],  [41.7016593, -91.5970623],  [41.7017765, -91.5972635],  [41.7019774, -91.5973757],  [41.7022, -91.5973856],  [41.7023178, -91.597358],  [41.702598, -91.5970526],  [41.7028963, -91.5965135],  [41.7029724, -91.5964366],  [41.7032046, -91.5963671],  [41.7032833, -91.596285],  [41.7036608, -91.5963898],  [41.7038933, -91.596632],  [41.7041912, -91.5964765],  [41.7042985, -91.5965705],  [41.70434, -91.5966814],  [41.704464, -91.5972856],  [41.7045747, -91.5975485],  [41.7046083, -91.5975694],  [41.7045908, -91.5976186],  [41.7047154, -91.5980838],  [41.7046397, -91.5981638],  [41.7046563, -91.5986428],  [41.7048659, -91.5992607],  [41.7050913, -91.5998349],  [41.7053847, -91.6003151],  [41.7057417, -91.6007556],  [41.7061112, -91.6012135],  [41.7062587, -91.6015454],  [41.7063655, -91.6019809],  [41.7067602, -91.6022762],  [41.7068647, -91.6023688],  [41.7068758, -91.6024941],  [41.7070162, -91.6026168],  [41.7070982, -91.602578],  [41.7073771, -91.6029052],  [41.7076621, -91.6031809],  [41.7078775, -91.6033279],  [41.7079472, -91.6034603],  [41.7080606, -91.6040036],  [41.7080911, -91.6045956],  [41.7082902, -91.6048415],  [41.7087219, -91.6050344],  [41.7085201, -91.6053096],  [41.7085083, -91.6059886],  [41.7084972, -91.6066296],  [41.7084868, -91.6072352],  [41.7084764, -91.607837],  [41.7084749, -91.607907],  [41.7087295, -91.6079551],  [41.7085822, -91.6083596],  [41.708572, -91.6087663],  [41.7084772, -91.6088717],  [41.7084265, -91.6095328],  [41.708425, -91.6100098],  [41.7079657, -91.6100423],  [41.7074869, -91.610055],  [41.7070018, -91.6100677],  [41.7068784, -91.610071],  [41.7068184, -91.6101106],  [41.7063591, -91.6100886],  [41.7058374, -91.6100984],  [41.7052991, -91.6101166],  [41.704764, -91.6101408],  [41.7043057, -91.6101624],  [41.7039801, -91.6101654],  [41.7039214, -91.6101083],  [41.7039312, -91.6098168],  [41.7039881, -91.6098494],  [41.7039881, -91.6098494], ];
var line_31 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_31);
      
      var latLngs = [ [41.7039557, -91.6099227],  [41.7039713, -91.6100553],  [41.7040753, -91.610153],  [41.7041698, -91.6101502],  [41.7043797, -91.6099738],  [41.7045993, -91.6099781],  [41.7047111, -91.6100399],  [41.7052058, -91.6100223],  [41.7055065, -91.6100172],  [41.705546, -91.6099792],  [41.706016, -91.6099739],  [41.706481, -91.6099712],  [41.7066844, -91.6099675],  [41.7071767, -91.6099842],  [41.7076876, -91.6099618],  [41.7081684, -91.6099404],  [41.7083392, -91.6099774],  [41.7084286, -91.609909],  [41.7084514, -91.6092348],  [41.7084234, -91.6089427],  [41.7084234, -91.608321],  [41.7084067, -91.6083343],  [41.7083546, -91.6080575],  [41.7083552, -91.607411],  [41.7083493, -91.6067671],  [41.7082952, -91.6061109],  [41.7082671, -91.605477],  [41.7083084, -91.6050801],  [41.7082848, -91.6049086],  [41.7082265, -91.604857],  [41.7081347, -91.6048267],  [41.7080587, -91.6046882],  [41.7080235, -91.6044048],  [41.7079835, -91.6037778],  [41.7079551, -91.603596],  [41.7078479, -91.6034403],  [41.7075126, -91.6031694],  [41.7071116, -91.602785],  [41.7067088, -91.6023496],  [41.7063234, -91.6019905],  [41.7062621, -91.6018727],  [41.7061863, -91.6013592],  [41.7059653, -91.6009024],  [41.7055733, -91.6004108],  [41.7051979, -91.5999388],  [41.7050578, -91.5997131],  [41.7050221, -91.5994143],  [41.7048376, -91.5987982],  [41.70464, -91.5981825],  [41.7045994, -91.5977381],  [41.70456, -91.5975701],  [41.7046409, -91.597505],  [41.704642, -91.5974051],  [41.7044604, -91.5973188],  [41.7043802, -91.5971856],  [41.7043097, -91.5966609],  [41.7042322, -91.5966409],  [41.7041921, -91.5965884],  [41.7040964, -91.5965601],  [41.7038439, -91.5966593],  [41.7036126, -91.5963558],  [41.703474, -91.5963104],  [41.7033513, -91.5963911],  [41.7030537, -91.5964876],  [41.702885, -91.5966236],  [41.7028281, -91.5967629],  [41.7027298, -91.5968852],  [41.7026714, -91.5970104],  [41.7026748, -91.5971189],  [41.7024777, -91.5973896],  [41.7022518, -91.597485],  [41.7019336, -91.5973455],  [41.7016777, -91.5970532],  [41.7016034, -91.5967925],  [41.701325, -91.5963745],  [41.701248, -91.5963474],  [41.7011394, -91.5963532],  [41.7010155, -91.5962985],  [41.7008966, -91.595973],  [41.7008081, -91.5956008],  [41.7005242, -91.5950642],  [41.7002267, -91.5948651],  [41.7000946, -91.5948473],  [41.6996258, -91.5946769],  [41.6991474, -91.5945554],  [41.6986502, -91.5944516],  [41.698525, -91.5944563],  [41.6985188, -91.5944111],  [41.6982661, -91.5943682],  [41.6981678, -91.5943037],  [41.6981047, -91.5943143],  [41.698062, -91.5943549],  [41.6975812, -91.5942968],  [41.697329, -91.5942256],  [41.6968816, -91.5939765],  [41.696426, -91.5937103],  [41.6960309, -91.5934082],  [41.6959578, -91.5933665],  [41.6956601, -91.5933083],  [41.6955931, -91.5932107],  [41.6956218, -91.5930355],  [41.6956715, -91.5929715],  [41.6957684, -91.5929525],  [41.6960976, -91.5925565],  [41.696288, -91.5922178],  [41.6962839, -91.5915792],  [41.6962896, -91.5908968],  [41.696289, -91.5902608],  [41.6962887, -91.5899884],  [41.6963161, -91.5899725],  [41.6962932, -91.5895439],  [41.6962252, -91.5894802],  [41.6962349, -91.5894252],  [41.6961234, -91.5888424],  [41.6959567, -91.5882577],  [41.6959128, -91.5879475],  [41.6957374, -91.5875088],  [41.6955068, -91.5869289],  [41.6952131, -91.5864588],  [41.6949009, -91.5859521],  [41.6947287, -91.5856403],  [41.6947984, -91.5854854],  [41.6947012, -91.5851146],  [41.6945982, -91.5850439],  [41.6945516, -91.584579],  [41.6945855, -91.5840993],  [41.6947547, -91.5834993],  [41.6947843, -91.5833574],  [41.6948027, -91.5829147],  [41.6946288, -91.5827798],  [41.6943851, -91.5827742],  [41.6943375, -91.582704],  [41.693841, -91.5825903],  [41.6933268, -91.5825244],  [41.6928074, -91.5825266],  [41.6926757, -91.5825278],  [41.6926034, -91.5826253],  [41.6925219, -91.582606],  [41.6920342, -91.5826337],  [41.6915552, -91.5825942],  [41.6914254, -91.5825835],  [41.6910967, -91.5824594],  [41.6906617, -91.5822454],  [41.6902344, -91.582009],  [41.6897499, -91.581976],  [41.6892314, -91.581939],  [41.6887097, -91.5819072],  [41.6882124, -91.5818998],  [41.6877498, -91.5818657],  [41.6872018, -91.5817673],  [41.6868887, -91.5816446],  [41.6867976, -91.581541],  [41.6862866, -91.581384],  [41.6858153, -91.5812282],  [41.6853103, -91.5811487],  [41.6848106, -91.5811048],  [41.6843184, -91.5810616],  [41.6838232, -91.5809993],  [41.683365, -91.5809387],  [41.682911, -91.5808794],  [41.6824244, -91.580782],  [41.6820147, -91.5805198],  [41.6817657, -91.5803399],  [41.6816883, -91.5801615],  [41.6816216, -91.5800863],  [41.6815331, -91.5800963],  [41.6811631, -91.5797439],  [41.681043, -91.5796116],  [41.6809215, -91.5792723],  [41.6809198, -91.5791652],  [41.6808719, -91.5790123],  [41.6808131, -91.5783602],  [41.6807997, -91.5782351],  [41.6808576, -91.5781431],  [41.6808527, -91.5780929],  [41.680656, -91.5780184],  [41.6802232, -91.5780221],  [41.6801573, -91.5781363],  [41.6799723, -91.5781264],  [41.6799269, -91.5781548],  [41.6793828, -91.5782148],  [41.6790908, -91.5782176],  [41.6790329, -91.5780536],  [41.6785575, -91.5780663],  [41.6781595, -91.578078],  [41.6781002, -91.5781796],  [41.6776363, -91.578257],  [41.6771843, -91.5782751],  [41.6771123, -91.5782772],  [41.6770448, -91.5781127],  [41.6765212, -91.5781311],  [41.6759859, -91.5781689],  [41.6754999, -91.5782031],  [41.675029, -91.5782201],  [41.6748568, -91.5782043],  [41.6748134, -91.5780627],  [41.6747519, -91.5780255],  [41.6746556, -91.5773898],  [41.674604, -91.5767676],  [41.6745429, -91.5761],  [41.6744841, -91.5754937],  [41.6744202, -91.5748451],  [41.6743531, -91.574202],  [41.6743016, -91.5737323],  [41.6742209, -91.5735956],  [41.6741669, -91.57317],  [41.6741537, -91.5728191],  [41.6740789, -91.5721484],  [41.6740412, -91.5720407],  [41.6739936, -91.5713501],  [41.6739462, -91.5706659],  [41.6739946, -91.5705282],  [41.6739742, -91.5703059],  [41.6739174, -91.5702071],  [41.6738794, -91.5696103],  [41.673837, -91.5693965],  [41.673878, -91.5692684],  [41.673809, -91.5685981],  [41.6737973, -91.568486],  [41.6737482, -91.5684226],  [41.6737276, -91.5682003],  [41.673641, -91.5679233],  [41.673595, -91.5672447],  [41.6735493, -91.566855],  [41.673639, -91.5667484],  [41.6735885, -91.5661187],  [41.6735604, -91.5657671],  [41.67307, -91.5656661],  [41.6725971, -91.5656429],  [41.6720859, -91.5656327],  [41.671634, -91.5656246],  [41.6712084, -91.5656169],  [41.6711389, -91.5656564],  [41.6706465, -91.5656555],  [41.6705939, -91.5656149],  [41.6700919, -91.5655982],  [41.6697772, -91.5655998],  [41.6693616, -91.5658041],  [41.6693146, -91.5658877],  [41.6693346, -91.5659075],  [41.6690748, -91.5660237],  [41.6689532, -91.5660954],  [41.6688384, -91.5656745],  [41.6689106, -91.5656517],  [41.6687348, -91.5654831],  [41.6685444, -91.5649174],  [41.6682936, -91.5643764],  [41.6681968, -91.5641368],  [41.6681848, -91.56405],  [41.6679551, -91.5636168],  [41.6680039, -91.5635013],  [41.6679482, -91.5633695],  [41.6677971, -91.5633523],  [41.6676651, -91.5630321],  [41.6677121, -91.5629167],  [41.6676148, -91.5627143],  [41.6676008, -91.5626054],  [41.6673683, -91.5621366],  [41.6672825, -91.5618877],  [41.6672291, -91.5618226],  [41.6670328, -91.5612201],  [41.6668106, -91.56062],  [41.6666476, -91.5602412],  [41.6664332, -91.5597395],  [41.6662651, -91.5594144],  [41.6661733, -91.559159],  [41.6661112, -91.5591332],  [41.6660345, -91.559001],  [41.6659354, -91.5585543],  [41.6659618, -91.5585153],  [41.6659741, -91.5585293],  [41.6657636, -91.5579703],  [41.6655896, -91.5573673],  [41.6653881, -91.5568176],  [41.6653068, -91.556441],  [41.6653333, -91.5563525],  [41.6652992, -91.5558582],  [41.6651672, -91.5553544],  [41.6651694, -91.5552825],  [41.6649059, -91.5548668],  [41.6645005, -91.5545866],  [41.6642343, -91.5543345],  [41.6640126, -91.5537777],  [41.6638165, -91.553379],  [41.6638278, -91.5532221],  [41.6636827, -91.5525818],  [41.6636359, -91.5522909],  [41.6635795, -91.5517836],  [41.663494, -91.5516395],  [41.6635566, -91.5515334],  [41.6634646, -91.5509053],  [41.6633933, -91.5503806],  [41.6631391, -91.5500322],  [41.6627121, -91.5496204],  [41.6626445, -91.5495414],  [41.6625186, -91.5492338],  [41.6625057, -91.5490123],  [41.6625552, -91.5489278],  [41.6627251, -91.5483387],  [41.6628956, -91.5479655],  [41.6629809, -91.5477057],  [41.6631337, -91.5470952],  [41.6631995, -91.5469422],  [41.6632429, -91.5464153],  [41.6633047, -91.5457892],  [41.6632822, -91.5451545],  [41.6632641, -91.5445928],  [41.6633312, -91.5445009],  [41.6632893, -91.5439238],  [41.663174, -91.5436858],  [41.6627611, -91.5437449],  [41.6625629, -91.5438647],  [41.6624882, -91.5435962],  [41.6622882, -91.5436655],  [41.6618302, -91.5436951],  [41.6616561, -91.543651],  [41.6614327, -91.5433777],  [41.6613416, -91.5431669],  [41.6611954, -91.5431396],  [41.6612039, -91.5429347],  [41.6612279, -91.542894],  [41.6611774, -91.5426542],  [41.6611638, -91.5423323],  [41.6611961, -91.5421848],  [41.6612601, -91.5421046],  [41.6612654, -91.5415022],  [41.6612706, -91.5408441],  [41.661274, -91.5401964],  [41.6612768, -91.5395209],  [41.6612808, -91.5388911],  [41.6612848, -91.5382848],  [41.6612929, -91.5376734],  [41.6617873, -91.537661],  [41.6620476, -91.5376508],  [41.6621509, -91.5375775],  [41.6623103, -91.5375654],  [41.6623388, -91.5375231],  [41.6624015, -91.5375521],  [41.6624397, -91.5375277],  [41.6625417, -91.5371627],  [41.6625371, -91.5365623],  [41.6625537, -91.5361148],  [41.6626075, -91.5354952],  [41.6626366, -91.5352582],  [41.6625604, -91.5354146],  [41.6625649, -91.5354246],  [41.6625698, -91.5354357],  [41.6625781, -91.5354497],  [41.6625829, -91.5354522], ];
var line_32 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_32);
      
      var latLngs = [ [41.7039678, -91.6098498],  [41.7039711, -91.6099111],  [41.7039691, -91.6098836],  [41.7039945, -91.6099074],  [41.7039251, -91.6099926],  [41.7040545, -91.6101248],  [41.7045424, -91.610048],  [41.7047313, -91.6100399],  [41.7047462, -91.6099788],  [41.7052219, -91.6100173],  [41.7054599, -91.609993],  [41.7055196, -91.6099571],  [41.7060146, -91.6099298],  [41.706449, -91.6099084],  [41.7065528, -91.6099303],  [41.7070546, -91.6099173],  [41.7072388, -91.6098942],  [41.70732, -91.6097932],  [41.7074065, -91.6098245],  [41.7075191, -91.6097959],  [41.7079684, -91.609868],  [41.7081129, -91.609928],  [41.7083667, -91.6098333],  [41.708381, -91.6091834],  [41.7083981, -91.6085714],  [41.708375, -91.6079637],  [41.7083125, -91.6074194],  [41.708296, -91.6067482],  [41.7082975, -91.6061216],  [41.7083089, -91.6055114],  [41.7083623, -91.6051394],  [41.7083079, -91.6049266],  [41.7082134, -91.6048934],  [41.7079452, -91.6045802],  [41.7080342, -91.604402],  [41.7080567, -91.604175],  [41.7080608, -91.6037708],  [41.7079945, -91.6035054],  [41.7075678, -91.6031957],  [41.7070959, -91.6029079],  [41.7067168, -91.6025326],  [41.7063262, -91.602133],  [41.7062208, -91.6019917],  [41.7061839, -91.6014312],  [41.7059906, -91.6009551],  [41.7058563, -91.6007899],  [41.7057838, -91.6007441],  [41.7054278, -91.6002368],  [41.7051706, -91.599897],  [41.7050456, -91.5996636],  [41.7050314, -91.599555],  [41.7049545, -91.599359],  [41.7047517, -91.5987529],  [41.704623, -91.5983489],  [41.7045704, -91.5976935],  [41.7045116, -91.5974348],  [41.7042759, -91.5971022],  [41.7042221, -91.5968568],  [41.70404, -91.5966555],  [41.7038392, -91.5967728],  [41.7035393, -91.5964636],  [41.7031542, -91.5964859],  [41.7028321, -91.5966365],  [41.7025646, -91.596982],  [41.7023606, -91.5973485],  [41.7022774, -91.5974085],  [41.7020436, -91.5974476],  [41.7018872, -91.5974348],  [41.7017532, -91.5973482],  [41.7016055, -91.5971384],  [41.7015135, -91.5967101],  [41.7013041, -91.5963926],  [41.7009905, -91.5962803],  [41.700871, -91.5959519],  [41.7008382, -91.5956256],  [41.7006649, -91.5955312],  [41.7004795, -91.5952092],  [41.700348, -91.5952166],  [41.7000735, -91.5950041],  [41.699992, -91.5948823],  [41.6998072, -91.5947764],  [41.6993355, -91.5946666],  [41.6990039, -91.5945616],  [41.6986547, -91.5945043],  [41.6985034, -91.5944565],  [41.6985202, -91.5944443],  [41.6983948, -91.5944453],  [41.6983456, -91.5943942],  [41.6979283, -91.5941577],  [41.6974677, -91.5941945],  [41.6970303, -91.5940371],  [41.6965372, -91.5938098],  [41.6961188, -91.5935318],  [41.6960655, -91.5934512],  [41.6956261, -91.5932997],  [41.6955519, -91.5932536],  [41.6956154, -91.5931179],  [41.6956433, -91.5929831],  [41.6960676, -91.5926002],  [41.6962465, -91.5922234],  [41.6963041, -91.5915736],  [41.6963187, -91.5909253],  [41.6963169, -91.5902626],  [41.6962998, -91.5896217],  [41.6961982, -91.5891426],  [41.6960464, -91.5885395],  [41.6959078, -91.5879457],  [41.6957194, -91.5873277],  [41.6956593, -91.5872085],  [41.6956873, -91.5871086],  [41.6954503, -91.5866479],  [41.6953571, -91.5866517],  [41.6950282, -91.58621],  [41.6948824, -91.5859886],  [41.6947694, -91.5857306],  [41.6948345, -91.5855858],  [41.6947405, -91.5853002],  [41.6946345, -91.5852304],  [41.6946076, -91.5850635],  [41.6946235, -91.5849372],  [41.6945857, -91.584633],  [41.6946236, -91.5841131],  [41.694785, -91.5835165],  [41.6948342, -91.5828965],  [41.6947134, -91.5828456],  [41.6945161, -91.582857],  [41.6940132, -91.5827271],  [41.6935348, -91.5825899],  [41.6930612, -91.5825945],  [41.6925653, -91.5826508],  [41.6922406, -91.5826618],  [41.6920756, -91.5826353],  [41.6920033, -91.5826719],  [41.6915073, -91.5826354],  [41.6910478, -91.5824405],  [41.6905938, -91.5822131],  [41.6902646, -91.5820996],  [41.6899361, -91.5819499],  [41.6896194, -91.5819612],  [41.6895493, -91.5819286],  [41.6890434, -91.5819195],  [41.6885338, -91.581915],  [41.6884573, -91.5819124],  [41.6883359, -91.5818563],  [41.6879225, -91.5818977],  [41.6874326, -91.5817899],  [41.68692, -91.5816852],  [41.6867074, -91.5816815],  [41.6865143, -91.5815903],  [41.6864316, -91.5814302],  [41.6859021, -91.5812562],  [41.6853951, -91.5811561],  [41.6849416, -91.5811163],  [41.6844022, -91.581069],  [41.683904, -91.5810105],  [41.6834123, -91.5809449],  [41.6829274, -91.5808816],  [41.6824697, -91.5808022],  [41.6824158, -91.5807781],  [41.68234, -91.5808626],  [41.6821131, -91.5807278],  [41.6819657, -91.5805969],  [41.6818083, -91.5805157],  [41.6817466, -91.5804088],  [41.6814791, -91.5801238],  [41.681507, -91.5799776],  [41.6810964, -91.5795563],  [41.6809629, -91.5791982],  [41.6808946, -91.5785149],  [41.6808453, -91.5780188],  [41.6803736, -91.5780208],  [41.6799025, -91.5780304],  [41.6793843, -91.5780442],  [41.6789232, -91.5780565],  [41.6784333, -91.5780696],  [41.6779049, -91.5780859],  [41.6774445, -91.5781002],  [41.67693, -91.5781163],  [41.6764307, -91.5781375],  [41.6759191, -91.5781736],  [41.6754007, -91.5782101],  [41.6749206, -91.5782439],  [41.6748139, -91.5782396],  [41.6746781, -91.5776032],  [41.6746127, -91.5768628],  [41.6745561, -91.576244],  [41.6744939, -91.5755921],  [41.6744295, -91.5749394],  [41.6743664, -91.5743292],  [41.6742971, -91.5739069],  [41.6742564, -91.5732571],  [41.6741677, -91.5726079],  [41.6741206, -91.571904],  [41.6740921, -91.5715915],  [41.6740486, -91.5714991],  [41.6740031, -91.5708707],  [41.6739285, -91.5702528],  [41.6738882, -91.5697624],  [41.6738779, -91.5692724],  [41.673838, -91.5685924],  [41.6738205, -91.5683921],  [41.6736922, -91.5677534],  [41.6735898, -91.5671369],  [41.6735542, -91.5666627],  [41.6734754, -91.5664018],  [41.6734637, -91.5659152],  [41.6734212, -91.5658595],  [41.6733458, -91.5658696],  [41.672862, -91.5657442],  [41.6724115, -91.565722],  [41.6719115, -91.5656597],  [41.671449, -91.5656473],  [41.6709494, -91.5656407],  [41.6708146, -91.5656448],  [41.6703375, -91.56563],  [41.6698806, -91.5656541],  [41.6694392, -91.5658117],  [41.6692339, -91.5658999],  [41.6691311, -91.5655373],  [41.6688534, -91.5657251],  [41.6687618, -91.5656977],  [41.6686242, -91.5651534],  [41.6683546, -91.5646406],  [41.6681039, -91.5640695],  [41.6680057, -91.563779],  [41.6679579, -91.5637467],  [41.6677539, -91.5631529],  [41.6676899, -91.5630809],  [41.6674863, -91.5625211],  [41.6672245, -91.5619516],  [41.6669809, -91.5613904],  [41.6670527, -91.5612163],  [41.6668092, -91.5606294],  [41.6666034, -91.560055],  [41.66638, -91.5595464],  [41.6662343, -91.5595444],  [41.6659961, -91.5590254],  [41.6659263, -91.5588146],  [41.6659357, -91.5586165],  [41.6659044, -91.5585324],  [41.6659645, -91.5584579],  [41.665744, -91.5577733],  [41.6656462, -91.5573612],  [41.6655552, -91.5573237],  [41.6654613, -91.5570993],  [41.6653301, -91.5570404],  [41.6653835, -91.5569218],  [41.6653539, -91.556799],  [41.6653803, -91.5566343],  [41.6653505, -91.5564959],  [41.6654715, -91.5563742],  [41.6654664, -91.5563403],  [41.6653477, -91.5562499],  [41.6653395, -91.5559778],  [41.6652947, -91.5559673],  [41.6652664, -91.5556928],  [41.6651877, -91.555592],  [41.6649657, -91.5550532],  [41.6646023, -91.5546504],  [41.6643054, -91.5541854],  [41.6640325, -91.5537795],  [41.6638132, -91.5531833],  [41.6637635, -91.5530272],  [41.6638507, -91.5529078],  [41.6636955, -91.552136],  [41.6635744, -91.5514939],  [41.6634651, -91.5509011],  [41.6633261, -91.5502588],  [41.663218, -91.5499827],  [41.6628715, -91.549588],  [41.6625221, -91.5491316],  [41.6626713, -91.5484901],  [41.6628847, -91.5478961],  [41.6631063, -91.547275],  [41.6632312, -91.5468358],  [41.6632985, -91.5464839],  [41.6632603, -91.5463747],  [41.6633, -91.5457625],  [41.6632565, -91.5453566],  [41.6632874, -91.5450645],  [41.6633243, -91.5449931],  [41.6633203, -91.544632],  [41.6632357, -91.5442234],  [41.6631921, -91.5441122],  [41.6631889, -91.5439984],  [41.6629202, -91.5436661],  [41.6626279, -91.5436874],  [41.6625749, -91.5436624],  [41.6621929, -91.5437524],  [41.6621169, -91.5438287],  [41.6618413, -91.5438368],  [41.6617488, -91.543815],  [41.6617372, -91.5436898],  [41.6614976, -91.5434806],  [41.661284, -91.5429514],  [41.6612535, -91.542421],  [41.6611714, -91.5423272],  [41.6611838, -91.5421398],  [41.6612607, -91.5420438],  [41.6612662, -91.5413956],  [41.661271, -91.5407909],  [41.6612744, -91.5401043],  [41.6612769, -91.5394881],  [41.6612812, -91.5388321],  [41.661286, -91.5381109],  [41.661162, -91.5380311],  [41.6611744, -91.5378512],  [41.6614038, -91.5376722],  [41.6617496, -91.5376868],  [41.6622095, -91.5376445],  [41.6624724, -91.5376297],  [41.6624943, -91.5370075],  [41.662497, -91.5363736],  [41.6625483, -91.5357718],  [41.6625282, -91.535319],  [41.6625282, -91.535319], ];
var line_33 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_33);
      
      var latLngs = [ [41.7040283, -91.6099613],  [41.7040351, -91.6099792],  [41.7040113, -91.6101145],  [41.7041966, -91.6102409],  [41.7046542, -91.6101182],  [41.7050511, -91.609998],  [41.7052363, -91.6100397],  [41.7053057, -91.6100928],  [41.7053289, -91.6100381],  [41.7056311, -91.6100396],  [41.7056632, -91.6099942],  [41.7058924, -91.6099476],  [41.7060457, -91.6099641],  [41.7061189, -91.6098812],  [41.7065949, -91.6098593],  [41.7066845, -91.6098676],  [41.7068231, -91.6099202],  [41.7069121, -91.6098805],  [41.7074059, -91.6099477],  [41.7075049, -91.6100545],  [41.7079891, -91.6100417],  [41.7083924, -91.6100311],  [41.7083765, -91.6100136],  [41.7084244, -91.609807],  [41.7084565, -91.6091927],  [41.7084817, -91.608984],  [41.7084631, -91.608501],  [41.7083889, -91.6084625],  [41.7083799, -91.6083584],  [41.7086407, -91.6082682],  [41.708593, -91.6080721],  [41.7086281, -91.6078227],  [41.7086187, -91.6072009],  [41.7085949, -91.6065942],  [41.7085861, -91.6059913],  [41.7085858, -91.6053563],  [41.7085286, -91.6051228],  [41.7083536, -91.6050747],  [41.7080781, -91.6047697],  [41.7080994, -91.6046213],  [41.7080606, -91.6040065],  [41.708009, -91.6036394],  [41.7079476, -91.6034917],  [41.7075018, -91.6030426],  [41.7071141, -91.6027024],  [41.7066851, -91.6023275],  [41.7062866, -91.6019922],  [41.7062425, -91.6014635],  [41.7061005, -91.6014605],  [41.7061913, -91.6013271],  [41.7059191, -91.6009754],  [41.7058627, -91.6007962],  [41.705612, -91.6004773],  [41.7055141, -91.6004747],  [41.7053936, -91.600326],  [41.7053777, -91.6002367],  [41.7051795, -91.6000232],  [41.7049864, -91.5994047],  [41.7047738, -91.5988712],  [41.704788, -91.5987685],  [41.7046474, -91.5982061],  [41.7046182, -91.5978249],  [41.7046265, -91.5974404],  [41.7045167, -91.5971366],  [41.7043084, -91.5967428],  [41.7042729, -91.5966094],  [41.7041708, -91.5965656],  [41.70414, -91.5965205],  [41.7038372, -91.5966381],  [41.7037084, -91.5965845],  [41.7035898, -91.5964827],  [41.7032268, -91.5964503],  [41.7027776, -91.5965001],  [41.7027099, -91.5965828],  [41.7027047, -91.5967258],  [41.7025766, -91.5969997],  [41.7024707, -91.5971055],  [41.7023203, -91.5972027],  [41.7021513, -91.597456],  [41.7020483, -91.5975224],  [41.7017856, -91.597355],  [41.7015999, -91.5970788],  [41.7014352, -91.5965005],  [41.7011942, -91.5962543],  [41.7010348, -91.596235],  [41.7009858, -91.5962042],  [41.7007332, -91.595641],  [41.7004037, -91.5952137],  [41.7001149, -91.5950676],  [41.6996478, -91.594754],  [41.6991496, -91.5945459],  [41.6990653, -91.5945021],  [41.6989658, -91.5945226],  [41.6985115, -91.5944299],  [41.6980836, -91.5943577],  [41.6976169, -91.5942855],  [41.6971427, -91.5941461],  [41.6966856, -91.5939311],  [41.6962468, -91.5936164],  [41.6959594, -91.5934634],  [41.6955034, -91.5932623],  [41.6955419, -91.5931695],  [41.6956251, -91.5931813],  [41.6960252, -91.5926531],  [41.6961348, -91.5924892],  [41.6962462, -91.5922241],  [41.6963031, -91.5916047],  [41.6963186, -91.5908916],  [41.6963168, -91.5902307],  [41.696299, -91.5896131],  [41.6962313, -91.5890629],  [41.6960829, -91.588469],  [41.6959282, -91.5878495],  [41.6958274, -91.5874461],  [41.695596, -91.5869115],  [41.6952938, -91.5864231],  [41.6951942, -91.5862803],  [41.6950126, -91.5861269],  [41.6947275, -91.5855716],  [41.6946324, -91.5853232],  [41.6945933, -91.5849936],  [41.6946182, -91.58446],  [41.6946938, -91.58399],  [41.694672, -91.583931],  [41.6947075, -91.5837733],  [41.6947409, -91.5837204],  [41.6947278, -91.5836835],  [41.6947964, -91.5834656],  [41.6948484, -91.5828787],  [41.6948043, -91.5828259],  [41.6946818, -91.5827938],  [41.6945287, -91.5828209],  [41.6942998, -91.5827752],  [41.6942313, -91.5826795],  [41.6937823, -91.5825777],  [41.6933132, -91.5825243],  [41.6928322, -91.5825263],  [41.6923321, -91.5825311],  [41.6918482, -91.5825346],  [41.691469, -91.582498],  [41.69126, -91.582433],  [41.6911615, -91.5824784],  [41.6907017, -91.5822419],  [41.6902582, -91.5820237],  [41.6898162, -91.5819173],  [41.6893395, -91.5818908],  [41.6888589, -91.5818499],  [41.6883647, -91.5818423],  [41.6878307, -91.5818323],  [41.6873133, -91.5816948],  [41.6868684, -91.5815595],  [41.6863784, -91.5814132],  [41.6859385, -91.5812685],  [41.6854208, -91.5811584],  [41.6849331, -91.5811156],  [41.6844595, -91.581074],  [41.6839595, -91.5810182],  [41.6835035, -91.5809568],  [41.6830535, -91.580898],  [41.6825416, -91.5808237],  [41.6821229, -91.5805966],  [41.6817657, -91.5803399],  [41.6815899, -91.580278],  [41.6814819, -91.5801911],  [41.6815173, -91.5799874],  [41.6812378, -91.5797225],  [41.6810808, -91.5798809],  [41.6809848, -91.5797886],  [41.6808494, -91.5794569],  [41.6809955, -91.5793206],  [41.6809632, -91.5791992],  [41.6807162, -91.5790506],  [41.6805588, -91.5786305],  [41.6805535, -91.578526],  [41.680443, -91.5784056],  [41.6799621, -91.578359],  [41.6795743, -91.5783058],  [41.6794955, -91.5780413],  [41.6789926, -91.5780547],  [41.678524, -91.5780672],  [41.6780549, -91.5780812],  [41.6775939, -91.5780956],  [41.6770915, -91.5781112],  [41.6766169, -91.5781251],  [41.6761336, -91.5781584],  [41.6756686, -91.5781912],  [41.6751894, -91.578225],  [41.6746884, -91.5782749],  [41.6747469, -91.5780046],  [41.6746936, -91.5777167],  [41.6745714, -91.5776534],  [41.6745575, -91.5769985],  [41.6745124, -91.5766553],  [41.6745062, -91.5764067],  [41.6744764, -91.5763433],  [41.6744492, -91.57582],  [41.6743456, -91.5751615],  [41.674301, -91.5750186],  [41.6742752, -91.5743994],  [41.6742718, -91.5743217],  [41.6742035, -91.5741878],  [41.6741921, -91.5737794],  [41.6740853, -91.5732941],  [41.6741096, -91.57294],  [41.6740773, -91.5728515],  [41.674034, -91.5721969],  [41.6739977, -91.5717793],  [41.6739932, -91.5715426],  [41.6740152, -91.5714625],  [41.674012, -91.5710836],  [41.6739796, -91.5709577],  [41.6739853, -91.5708227],  [41.6738896, -91.5703708],  [41.6738476, -91.5702574],  [41.6739475, -91.5700145],  [41.6738927, -91.5694163],  [41.6738233, -91.5687351],  [41.6737536, -91.5680671],  [41.6737008, -91.5674696],  [41.673637, -91.5667233],  [41.6735883, -91.5661159],  [41.6735644, -91.5658172],  [41.67329, -91.5656723],  [41.6728068, -91.5656507],  [41.6723069, -91.5656367],  [41.6719896, -91.5656143],  [41.6718256, -91.5655393],  [41.671587, -91.5655977],  [41.6713799, -91.5655564],  [41.6712384, -91.5656018],  [41.6709028, -91.5655618],  [41.6707196, -91.5655895],  [41.6702597, -91.5655432],  [41.6697886, -91.5655744],  [41.6692544, -91.5655943],  [41.6690563, -91.5656977],  [41.6691627, -91.5658419],  [41.6692065, -91.565943],  [41.6692315, -91.5659329],  [41.6691776, -91.5659124],  [41.6690554, -91.5655658],  [41.6691068, -91.5655458],  [41.6690893, -91.565487],  [41.6691091, -91.5655363],  [41.6687679, -91.5656789],  [41.6685806, -91.565326],  [41.6685719, -91.5651896],  [41.6683953, -91.5646531],  [41.6684261, -91.5644998],  [41.668367, -91.5643601],  [41.6682695, -91.5643443],  [41.6682519, -91.5642713],  [41.6680811, -91.5639534],  [41.6680676, -91.563864],  [41.6681024, -91.5637343],  [41.6680299, -91.5635629],  [41.6679303, -91.5635393],  [41.6678575, -91.5633343],  [41.6678064, -91.5632975],  [41.6676134, -91.5627752],  [41.6675126, -91.5624504],  [41.6675072, -91.5623603],  [41.6674071, -91.5622486],  [41.6674022, -91.5621283],  [41.667234, -91.5616527],  [41.6671129, -91.5614251],  [41.6670544, -91.5612329],  [41.6668114, -91.560662],  [41.6665871, -91.5601901],  [41.6665412, -91.5599443],  [41.6662677, -91.5594189],  [41.6659956, -91.5589703],  [41.6659728, -91.5588173],  [41.6658649, -91.5586868],  [41.6657716, -91.5580865],  [41.6658231, -91.5580624],  [41.6656703, -91.5574685],  [41.665675, -91.557406],  [41.6658808, -91.5573308],  [41.666048, -91.5572134],  [41.665982, -91.5571117],  [41.6656364, -91.5571407],  [41.6655454, -91.5565989],  [41.665381, -91.5564312],  [41.6653369, -91.5563212],  [41.6653195, -91.556008],  [41.6652716, -91.5555684],  [41.6650292, -91.5550014],  [41.6649149, -91.5548404],  [41.6647516, -91.5547363],  [41.6647078, -91.5547598],  [41.6646484, -91.5547143],  [41.664627, -91.5546318],  [41.6644031, -91.5545778],  [41.6640898, -91.554104],  [41.6638602, -91.5535654],  [41.6637548, -91.5532528],  [41.6636689, -91.5526648],  [41.6636158, -91.5524779],  [41.6637354, -91.5523476],  [41.6636138, -91.5517029],  [41.6635612, -91.5514715],  [41.6631413, -91.5516707],  [41.6632537, -91.5514065],  [41.663226, -91.551038],  [41.6632522, -91.5507357],  [41.6631721, -91.5504005],  [41.6630464, -91.5501805],  [41.6630099, -91.5499426],  [41.6628803, -91.5495397],  [41.6628532, -91.5493795],  [41.6626888, -91.5490792],  [41.6625606, -91.5490476],  [41.6625229, -91.5491328],  [41.6626565, -91.5485329],  [41.6628651, -91.5479505],  [41.6630195, -91.5475195],  [41.6629764, -91.5475784],  [41.6632052, -91.5469464],  [41.6632633, -91.5466744],  [41.6631469, -91.5465193],  [41.6631735, -91.5464052],  [41.6631045, -91.5463174],  [41.6632281, -91.5457285],  [41.6632323, -91.545105],  [41.6632353, -91.5444958],  [41.6632059, -91.5442599],  [41.6631395, -91.5441032],  [41.663297, -91.5439616],  [41.6631742, -91.5436861],  [41.6629591, -91.5435532],  [41.6624769, -91.5435977],  [41.6620098, -91.5436654],  [41.6617136, -91.5436806],  [41.6615, -91.5434839],  [41.6613376, -91.5431557],  [41.6611726, -91.5431504],  [41.6611459, -91.5427656],  [41.6611933, -91.5426242],  [41.6611587, -91.5420117],  [41.6612616, -91.541953],  [41.6612666, -91.5413504],  [41.661272, -91.5406664],  [41.6612732, -91.5403777],  [41.6611995, -91.54027],  [41.6612392, -91.5396163],  [41.6612803, -91.5389582],  [41.6612845, -91.5383394],  [41.6612903, -91.5376687],  [41.6617367, -91.537663],  [41.6618147, -91.5375884],  [41.6619574, -91.5376007],  [41.6621849, -91.5376635],  [41.6622045, -91.5376269],  [41.6625112, -91.5376326],  [41.6625571, -91.5375887],  [41.6625681, -91.5369575],  [41.6624579, -91.5364305],  [41.662305, -91.5362816],  [41.6623275, -91.5361744],  [41.6625132, -91.535856],  [41.6625615, -91.5354768],  [41.6625281, -91.5353389],  [41.6625124, -91.5353955],  [41.6625124, -91.5353955], ];
var line_34 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_34);
      
      var latLngs = [ [41.7040575, -91.6098652],  [41.7040458, -91.6098914],  [41.7041464, -91.6100055],  [41.704605, -91.6100194],  [41.7048139, -91.6099665],  [41.7048837, -91.6100053],  [41.7051488, -91.6099888],  [41.7053393, -91.6100056],  [41.7055568, -91.6099545],  [41.7060133, -91.6099706],  [41.7062509, -91.6099904],  [41.706363, -91.609968],  [41.7067113, -91.6099954],  [41.7071871, -91.6099318],  [41.7076475, -91.6099222],  [41.7081214, -91.6099144],  [41.7081861, -91.6099313],  [41.7082517, -91.6100348],  [41.7083604, -91.6100319],  [41.7084246, -91.6096489],  [41.7084029, -91.6095044],  [41.7083986, -91.6089254],  [41.7084301, -91.608539],  [41.7083418, -91.6078691],  [41.7083364, -91.6076921],  [41.7083819, -91.6074796],  [41.7084293, -91.6073754],  [41.7083731, -91.6070752],  [41.7082308, -91.6068828],  [41.7082398, -91.6068248],  [41.7082152, -91.6067453],  [41.708262, -91.6066855],  [41.7083236, -91.6060791],  [41.7082783, -91.6054257],  [41.7082635, -91.6052604],  [41.7082886, -91.6050299],  [41.7082669, -91.604953],  [41.7081388, -91.604821],  [41.7080134, -91.6045383],  [41.707991, -91.6044149],  [41.7079914, -91.604043],  [41.7080512, -91.6038042],  [41.707925, -91.6034657],  [41.7075149, -91.6030543],  [41.7071105, -91.6026992],  [41.7067308, -91.6023674],  [41.706334, -91.6020228],  [41.7062025, -91.6016503],  [41.7061309, -91.6012888],  [41.7057862, -91.6008108],  [41.705434, -91.6003758],  [41.7051284, -91.5999096],  [41.7049102, -91.5993821],  [41.7046963, -91.5988067],  [41.7046431, -91.5985063],  [41.7046384, -91.5978555],  [41.704642, -91.5974012],  [41.7044588, -91.5972861],  [41.7043705, -91.5970541],  [41.7041317, -91.5969649],  [41.7039889, -91.5969499],  [41.7039998, -91.5969748],  [41.7040336, -91.5968728],  [41.7040305, -91.5966688],  [41.7038878, -91.5966614],  [41.7037027, -91.5967567],  [41.7036321, -91.5967184],  [41.7034526, -91.5964455],  [41.7032595, -91.5963051],  [41.7031438, -91.5962924],  [41.7030182, -91.5963294],  [41.7026801, -91.5965157],  [41.7025102, -91.5967711],  [41.7024657, -91.5969323],  [41.7022784, -91.5972482],  [41.7021363, -91.5973758],  [41.7019752, -91.5973818],  [41.7017618, -91.5972669],  [41.7015831, -91.5969248],  [41.7013943, -91.5963651],  [41.7012943, -91.5962199],  [41.7012376, -91.5961823],  [41.7010518, -91.5962091],  [41.7009817, -91.5961924],  [41.7009026, -91.595963],  [41.7005353, -91.5955788],  [41.7003305, -91.5954384],  [41.7000698, -91.5950711],  [41.6997574, -91.5949152],  [41.6996936, -91.5948256],  [41.6992664, -91.5946328],  [41.6989068, -91.5945696],  [41.6985056, -91.5943863],  [41.6984595, -91.594403],  [41.6984179, -91.594363],  [41.6979525, -91.5943127],  [41.6974895, -91.5942385],  [41.6970981, -91.5940988],  [41.6966424, -91.5938398],  [41.6966007, -91.5938384],  [41.6961575, -91.5935377],  [41.6957032, -91.5933151],  [41.6955689, -91.5932422],  [41.6954195, -91.5932372],  [41.6953695, -91.5931693],  [41.6957055, -91.5926928],  [41.6959037, -91.5927867],  [41.6961342, -91.5924902],  [41.6962462, -91.5922241],  [41.6963036, -91.5915878],  [41.6963188, -91.5909813],  [41.6963172, -91.5903712],  [41.6963095, -91.5897469],  [41.6962395, -91.5891138],  [41.6960641, -91.5883936],  [41.6959182, -91.5878096],  [41.6958255, -91.5874384],  [41.6955953, -91.5869099],  [41.6953064, -91.5864411],  [41.695247, -91.5864629],  [41.6949547, -91.5859585],  [41.6947684, -91.5856324],  [41.6946435, -91.5852604],  [41.6947117, -91.58517],  [41.6946645, -91.5845401],  [41.6947718, -91.5837335],  [41.6947787, -91.583691],  [41.6947488, -91.5836271],  [41.6948458, -91.5830388],  [41.6948721, -91.5828063],  [41.6948288, -91.5827466],  [41.6945644, -91.5828238],  [41.6943372, -91.5827492],  [41.6942782, -91.5826903],  [41.6941543, -91.5826618],  [41.6940734, -91.5827166],  [41.6936263, -91.5826116],  [41.6931012, -91.5825734],  [41.6930211, -91.5825245],  [41.6925318, -91.5825292],  [41.6920509, -91.5825338],  [41.6915368, -91.5825056],  [41.6910972, -91.5823511],  [41.6906304, -91.5820982],  [41.6901962, -91.5819111],  [41.6896896, -91.5818591],  [41.6892266, -91.5818414],  [41.6889502, -91.5818353],  [41.6888809, -91.5818869],  [41.6884101, -91.5818897],  [41.6878973, -91.5818541],  [41.6876108, -91.5818448],  [41.6874227, -91.5817878],  [41.6873289, -91.5816993],  [41.6868604, -91.5815571],  [41.6863526, -91.581405],  [41.6858706, -91.5812455],  [41.6854231, -91.5811586],  [41.684917, -91.5811142],  [41.6844003, -91.5810688],  [41.6838954, -91.5810093],  [41.6834256, -91.5809466],  [41.6829445, -91.5808838],  [41.6824913, -91.5808093],  [41.6822408, -91.5806781],  [41.6818143, -91.5804543],  [41.6817543, -91.5803961],  [41.681638, -91.5800474],  [41.6815948, -91.5799892],  [41.6815275, -91.5799971],  [41.6811588, -91.5796394],  [41.681017, -91.5793958],  [41.6809631, -91.5791988],  [41.6809002, -91.5785712],  [41.6808491, -91.5780575],  [41.6803387, -91.5780211],  [41.679819, -91.5780326],  [41.6793507, -91.5780451],  [41.6788811, -91.5780577],  [41.6784015, -91.5780705],  [41.6779419, -91.5780848],  [41.6774401, -91.5781004],  [41.6768955, -91.5781173],  [41.676389, -91.5781405],  [41.6759086, -91.5781743],  [41.6754431, -91.5782071],  [41.6749559, -91.5782414],  [41.6748318, -91.5782419],  [41.6746742, -91.5775723],  [41.6746496, -91.5773062],  [41.6745826, -91.5772348],  [41.6745145, -91.576576],  [41.6744742, -91.5759366],  [41.6744706, -91.5757908],  [41.6744489, -91.5757435],  [41.6744373, -91.5753288],  [41.6744147, -91.575282],  [41.6744075, -91.5751177],  [41.6743511, -91.5749858],  [41.6743418, -91.5743854],  [41.6742776, -91.5739856],  [41.6743184, -91.573882],  [41.6742722, -91.5732821],  [41.6741967, -91.5726797],  [41.6741346, -91.5720559],  [41.6740543, -91.5714014],  [41.6740672, -91.5713194],  [41.6740104, -91.5707007],  [41.6739484, -91.5700242],  [41.6738914, -91.5694021],  [41.6738226, -91.5687278],  [41.6737603, -91.5681313],  [41.673702, -91.567483],  [41.6736484, -91.5668659],  [41.6735965, -91.5662182],  [41.6735486, -91.5656197],  [41.6735525, -91.5656688],  [41.6732924, -91.5656925],  [41.6728161, -91.565651],  [41.6723291, -91.5656371],  [41.671838, -91.5656283],  [41.6713872, -91.5656093],  [41.670879, -91.5655854],  [41.6704277, -91.5656028],  [41.6699258, -91.5655939],  [41.6694664, -91.5655858],  [41.6693313, -91.5655703],  [41.6692328, -91.565597],  [41.6691377, -91.5655508],  [41.6690502, -91.5653933],  [41.6690229, -91.5655476],  [41.6689924, -91.5655732],  [41.6689089, -91.565483],  [41.6686957, -91.5655827],  [41.6686578, -91.5655426],  [41.6685812, -91.5652083],  [41.6683412, -91.564694],  [41.6682451, -91.5645089],  [41.6680216, -91.563939],  [41.6677817, -91.5633536],  [41.6675935, -91.562863],  [41.6676708, -91.5627103],  [41.6674336, -91.5621433],  [41.667201, -91.5615773],  [41.6669842, -91.5610498],  [41.666828, -91.5606723],  [41.6666173, -91.5600865],  [41.6665226, -91.5600536],  [41.6664921, -91.5598734],  [41.6662176, -91.5593062],  [41.6659393, -91.5588295],  [41.6658649, -91.5582342],  [41.6658973, -91.5582254],  [41.6658769, -91.5582971],  [41.6657804, -91.5579832],  [41.6657491, -91.5573551],  [41.6656372, -91.5571586],  [41.6656336, -91.5570019],  [41.6654609, -91.5566438],  [41.6653449, -91.5565391],  [41.6652999, -91.5565313],  [41.6652382, -91.5563138],  [41.6652253, -91.555802],  [41.6651653, -91.5553967],  [41.6649996, -91.5549895],  [41.6648925, -91.5549375],  [41.664643, -91.5544337],  [41.6642565, -91.5541064],  [41.6640206, -91.553582],  [41.6638368, -91.5536732],  [41.6637336, -91.5536299],  [41.6636611, -91.5535039],  [41.6636023, -91.5528652],  [41.6635784, -91.5524582],  [41.6637343, -91.5523418],  [41.6636171, -91.5517203],  [41.6634723, -91.5509415],  [41.6633363, -91.5502918],  [41.6632131, -91.5499711],  [41.6628184, -91.549529],  [41.6625162, -91.5491227],  [41.6626778, -91.5484712],  [41.6628814, -91.5479051],  [41.6631022, -91.5472866],  [41.663268, -91.5466494],  [41.6633469, -91.5460189],  [41.6633662, -91.5454008],  [41.6633416, -91.544747],  [41.6633121, -91.5440882],  [41.6632668, -91.5438533],  [41.6631812, -91.5436958],  [41.6629534, -91.5435518],  [41.6626984, -91.543555],  [41.6622464, -91.5436291],  [41.6617845, -91.5436964],  [41.66166, -91.5436532],  [41.661449, -91.5434064],  [41.661262, -91.5428023],  [41.6612561, -91.5422964],  [41.6610907, -91.5420696],  [41.6611212, -91.541838],  [41.6611501, -91.541152],  [41.6611876, -91.5405346],  [41.6612292, -91.5399993],  [41.661257, -91.5398739],  [41.6613557, -91.5396472],  [41.6613236, -91.5390287],  [41.6613329, -91.5387723],  [41.6614257, -91.5386036],  [41.6614291, -91.5384267],  [41.6612844, -91.5383465],  [41.661289, -91.5376821],  [41.6617396, -91.5376629],  [41.6621822, -91.5376455],  [41.6622954, -91.5375348],  [41.6623912, -91.5375125],  [41.6625702, -91.5372044],  [41.6624917, -91.5366015],  [41.6624862, -91.5363338],  [41.6624461, -91.536236],  [41.6625758, -91.5356347],  [41.6626161, -91.5352964],  [41.6626161, -91.5352964], ];
var line_35 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_35);
      
      var latLngs = [ [41.662636, -91.5352458],  [41.6626817, -91.53528],  [41.6627418, -91.5354308],  [41.6627362, -91.5354895],  [41.6627743, -91.5355323],  [41.6627231, -91.5357142],  [41.6625989, -91.5356798],  [41.6629061, -91.5357086],  [41.6631897, -91.5358546],  [41.6633624, -91.5358423],  [41.6634852, -91.5358965],  [41.6636346, -91.5361385],  [41.6636092, -91.5362226],  [41.6637674, -91.536665],  [41.6636323, -91.5368174],  [41.6636363, -91.5374684],  [41.6636368, -91.5375599],  [41.663168, -91.5376029],  [41.6626547, -91.5376261],  [41.6621634, -91.5376463],  [41.6616956, -91.5376646],  [41.6614821, -91.537673],  [41.6613871, -91.5380486],  [41.6613897, -91.5381258],  [41.6612851, -91.5382477],  [41.6612807, -91.5388992],  [41.6612767, -91.5395353],  [41.661274, -91.5401925],  [41.6612707, -91.5408345],  [41.6612658, -91.5414513],  [41.6612604, -91.5420691],  [41.6612526, -91.5426031],  [41.6613687, -91.5426765],  [41.6614487, -91.5432342],  [41.6614976, -91.5434047],  [41.6615542, -91.5435139],  [41.6620116, -91.543674],  [41.6625029, -91.5436678],  [41.6625687, -91.5436084],  [41.6628463, -91.5436584],  [41.6630395, -91.5436162],  [41.6631395, -91.5436726],  [41.6633369, -91.5440224],  [41.6633782, -91.5441637],  [41.6634715, -91.5442466],  [41.6634657, -91.5443315],  [41.6633282, -91.5444293],  [41.6633548, -91.5450602],  [41.6633644, -91.5457422],  [41.6633043, -91.5464266],  [41.6631741, -91.5470638],  [41.6629759, -91.5476425],  [41.6627576, -91.5482487],  [41.6625681, -91.5488525],  [41.6625342, -91.5490687],  [41.6626415, -91.5493101],  [41.6630063, -91.5497318],  [41.6632125, -91.5499703],  [41.6633993, -91.5505446],  [41.663512, -91.5511626],  [41.6636339, -91.5518095],  [41.6637795, -91.5525641],  [41.6639292, -91.5531703],  [41.6640107, -91.5533885],  [41.6643132, -91.5538732],  [41.6646378, -91.5543605],  [41.6649574, -91.5548184],  [41.6652306, -91.5553896],  [41.6653082, -91.5555788],  [41.6655168, -91.5558929],  [41.6655197, -91.5562269],  [41.6656437, -91.5568247],  [41.6657894, -91.5574818],  [41.6659545, -91.5580673],  [41.6661536, -91.5586307],  [41.6663526, -91.5591701],  [41.6665793, -91.5597643],  [41.666521, -91.5599078],  [41.6665794, -91.5600156],  [41.6666245, -91.5600316],  [41.6668375, -91.5605901],  [41.6670676, -91.5612035],  [41.6672139, -91.5615367],  [41.6674306, -91.5620795],  [41.6675434, -91.5621894],  [41.6676596, -91.5624763],  [41.6677437, -91.5626245],  [41.6677782, -91.5628269],  [41.6679372, -91.5631282],  [41.6679969, -91.5633883],  [41.6680197, -91.5633934],  [41.6680237, -91.563354],  [41.6680717, -91.5634185],  [41.6682455, -91.5637787],  [41.6683746, -91.564316],  [41.6685572, -91.5646629],  [41.6688019, -91.565183],  [41.6689769, -91.5656617],  [41.6689445, -91.5656773],  [41.6689289, -91.5656779],  [41.6693432, -91.5654006],  [41.6696128, -91.5652839],  [41.6698737, -91.5652845],  [41.6699242, -91.5653495],  [41.6703764, -91.5653575],  [41.6708633, -91.5653663],  [41.6713354, -91.5653748],  [41.6716812, -91.565381],  [41.6718462, -91.565373],  [41.6719476, -91.5654756],  [41.6722546, -91.5654979],  [41.6724044, -91.5654689],  [41.6725471, -91.5655394],  [41.6725471, -91.5655875],  [41.6728147, -91.5656459],  [41.6729262, -91.565604],  [41.6733276, -91.5656448],  [41.67343, -91.5657095],  [41.6734567, -91.5656963],  [41.6735681, -91.5658635],  [41.6736178, -91.5664846],  [41.6736747, -91.5671734],  [41.673729, -91.5677891],  [41.6737952, -91.5684653],  [41.6738632, -91.5691245],  [41.6739257, -91.5697773],  [41.6739806, -91.5703758],  [41.6740416, -91.5710415],  [41.6740965, -91.5716402],  [41.6741545, -91.5722562],  [41.6742147, -91.57286],  [41.6742806, -91.5735218],  [41.6743592, -91.5742602],  [41.6744418, -91.5750642],  [41.6745016, -91.5756703],  [41.6745632, -91.576322],  [41.6746234, -91.5769804],  [41.6746783, -91.5776052],  [41.6748067, -91.5782316],  [41.6752927, -91.5782177],  [41.6757645, -91.5781845],  [41.6762253, -91.578152],  [41.6763368, -91.5781276],  [41.6763484, -91.5781036],  [41.6763783, -91.578146],  [41.676382, -91.578112],  [41.6764362, -91.5781508],  [41.676892, -91.57813],  [41.6773567, -91.578103],  [41.6777862, -91.5780896],  [41.6778888, -91.5780631],  [41.6780838, -91.5780924],  [41.6782147, -91.578065],  [41.6783254, -91.5780951],  [41.6783167, -91.5780337],  [41.6787816, -91.5779866],  [41.6789532, -91.5780261],  [41.6790592, -91.5779674],  [41.6791191, -91.5779756],  [41.6791911, -91.5780494],  [41.6796434, -91.5780373],  [41.6801257, -91.5780244],  [41.6804268, -91.578042],  [41.6805108, -91.5780019],  [41.6807928, -91.5780796],  [41.6809035, -91.5782549],  [41.680934, -91.5784689],  [41.6809609, -91.578514],  [41.680951, -91.5786464],  [41.6809667, -91.5787341],  [41.6809867, -91.5793386],  [41.6810934, -91.5795883],  [41.6812649, -91.579751],  [41.6816417, -91.5800985],  [41.6817412, -91.5802762],  [41.6821235, -91.580597],  [41.682493, -91.5808099],  [41.682956, -91.5808853],  [41.6830656, -91.5808385],  [41.6835847, -91.5808911],  [41.683795, -91.5809397],  [41.6838962, -91.5810094],  [41.6843664, -91.5810658],  [41.6848977, -91.5811125],  [41.685362, -91.5811532],  [41.6858253, -91.5812308],  [41.6863004, -91.5813884],  [41.6868349, -91.5815505],  [41.6872979, -91.5816904],  [41.6877663, -91.5817952],  [41.6882614, -91.5818278],  [41.6887121, -91.581834],  [41.6891684, -91.581839],  [41.689644, -91.5818567],  [41.6900936, -91.5818933],  [41.690442, -91.5819892],  [41.6909109, -91.5822513],  [41.6913407, -91.5824669],  [41.6918004, -91.5825323],  [41.6922638, -91.5825318],  [41.6927533, -91.5825271],  [41.6932939, -91.5825427],  [41.6935544, -91.5825044],  [41.6940468, -91.5826403],  [41.6945207, -91.5827461],  [41.6949275, -91.5828658],  [41.6949725, -91.5829204],  [41.6950501, -91.582931],  [41.6950457, -91.5832028],  [41.6950112, -91.5834292],  [41.6949259, -91.5836575],  [41.694773, -91.5837261],  [41.6946814, -91.5843429],  [41.6946636, -91.5848441],  [41.694782, -91.5854388],  [41.6950313, -91.5860182],  [41.6953429, -91.5864934],  [41.695611, -91.5869415],  [41.6958247, -91.5874363],  [41.6959861, -91.5880813],  [41.696167, -91.5888054],  [41.6962865, -91.5894634],  [41.6963167, -91.5901881],  [41.6963184, -91.5908273],  [41.6963071, -91.5914765],  [41.6962736, -91.592087],  [41.696248, -91.5922176],  [41.6959791, -91.5927038],  [41.6956252, -91.593181],  [41.6955569, -91.5939827],  [41.6956511, -91.593978],  [41.6958373, -91.5933895],  [41.696261, -91.5936005],  [41.6967111, -91.5938557],  [41.697057, -91.5939968],  [41.6972165, -91.5940341],  [41.6972657, -91.59409],  [41.6973165, -91.5940798],  [41.6973297, -91.5941413],  [41.6973683, -91.5941412],  [41.6974051, -91.5941785],  [41.6977373, -91.5941885],  [41.697974, -91.5941297],  [41.6982903, -91.5941858],  [41.6985026, -91.5943349],  [41.6989896, -91.59442],  [41.6991324, -91.594431],  [41.6993945, -91.5945626],  [41.6994451, -91.5945475],  [41.6999465, -91.5947287],  [41.7002233, -91.5948936],  [41.7006349, -91.595222],  [41.7007652, -91.5954352],  [41.7009791, -91.5959847],  [41.7011238, -91.5962801],  [41.7014106, -91.5963921],  [41.7015785, -91.5966381],  [41.7016814, -91.5971654],  [41.7017504, -91.5972968],  [41.7020537, -91.5974633],  [41.7021817, -91.5974828],  [41.7024479, -91.5973581],  [41.7026688, -91.5971279],  [41.7027056, -91.5970263],  [41.7027657, -91.5969743],  [41.7027758, -91.5968923],  [41.7028505, -91.5967572],  [41.7028653, -91.5966713],  [41.7029244, -91.5966075],  [41.7033619, -91.5964627],  [41.703809, -91.5965682],  [41.7039829, -91.5966848],  [41.7042969, -91.5965839],  [41.7044407, -91.5966664],  [41.7044365, -91.5967694],  [41.704514, -91.5969001],  [41.7045595, -91.5973832],  [41.7047256, -91.5979152],  [41.7047301, -91.5979989],  [41.7046389, -91.5980754],  [41.7046731, -91.5987316],  [41.7048943, -91.5993386],  [41.705125, -91.5999032],  [41.7054546, -91.6003878],  [41.7057961, -91.600823],  [41.7061574, -91.6012709],  [41.7062542, -91.6015156],  [41.7062862, -91.6019907],  [41.7066778, -91.6023211],  [41.7070753, -91.6026684],  [41.7075127, -91.6030524],  [41.7079093, -91.6034485],  [41.7080221, -91.6036923],  [41.7080606, -91.6040039],  [41.708091, -91.6045954],  [41.7081554, -91.6047106],  [41.7084063, -91.6049115],  [41.7085237, -91.6049513],  [41.7085198, -91.6053225],  [41.7085781, -91.6054099],  [41.7086206, -91.6055823],  [41.7086172, -91.6062446],  [41.7086839, -91.6065723],  [41.70865, -91.606839],  [41.7086663, -91.6069093],  [41.7086739, -91.6071208],  [41.708633, -91.6075336],  [41.7084806, -91.6075942],  [41.7084501, -91.6081158],  [41.7084732, -91.6087848],  [41.7084821, -91.6089792],  [41.7084249, -91.6096184],  [41.7084251, -91.6100192],  [41.7079215, -91.6100435],  [41.707416, -91.6100568],  [41.7069313, -91.6100696],  [41.7064613, -91.610082],  [41.7059924, -91.6100944],  [41.7055182, -91.6101078],  [41.7050393, -91.6101284],  [41.7045667, -91.610149],  [41.7041027, -91.6101757],  [41.703994, -91.6101828],  [41.7039976, -91.6098446],  [41.7040426, -91.6098889], ];
var line_36 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_36);
      
      var latLngs = [ [41.7041465, -91.6099498],  [41.7040748, -91.6099717],  [41.7040915, -91.6099553],  [41.7040437, -91.6100151],  [41.704054, -91.6101585],  [41.7041441, -91.610226],  [41.7042683, -91.6102117],  [41.7043508, -91.6101652],  [41.7045348, -91.6101555],  [41.7045892, -91.6101879],  [41.7049342, -91.6101419],  [41.7052371, -91.610179],  [41.7057265, -91.6101013],  [41.7062225, -91.6100883],  [41.7067055, -91.6100756],  [41.7072134, -91.6100622],  [41.7072844, -91.6100956],  [41.7077423, -91.6100576],  [41.7081216, -91.6100582],  [41.7084038, -91.6100308],  [41.7084386, -91.6093513],  [41.708482, -91.6089819],  [41.7084735, -91.6087919],  [41.7084412, -91.6087461],  [41.7083962, -91.6081699],  [41.7083861, -91.6078045],  [41.7084324, -91.6077231],  [41.7084308, -91.6075427],  [41.7082955, -91.6074516],  [41.7082686, -91.6073459],  [41.7083086, -91.6067232],  [41.708289, -91.6063207],  [41.7083102, -91.6062215],  [41.7083138, -91.6059412],  [41.7082813, -91.6054437],  [41.708344, -91.6051726],  [41.7083532, -91.6049255],  [41.7081557, -91.6048141],  [41.7080397, -91.604301],  [41.7080344, -91.6040348],  [41.708066, -91.6037799],  [41.7079509, -91.6034133],  [41.7075308, -91.6030956],  [41.7074686, -91.603049],  [41.7071493, -91.602667],  [41.7067114, -91.6023312],  [41.7063539, -91.6019337],  [41.7063616, -91.6018819],  [41.7062696, -91.6016474],  [41.7062546, -91.6014944],  [41.7061891, -91.6013403],  [41.7061799, -91.6012633],  [41.7059924, -91.6008877],  [41.7059276, -91.6008257],  [41.7057831, -91.6007672],  [41.705651, -91.6006138],  [41.7055491, -91.6004407],  [41.7054307, -91.6002971],  [41.7054417, -91.6002258],  [41.7051412, -91.5997337],  [41.7049989, -91.5994375],  [41.7049782, -91.5993467],  [41.7047704, -91.5988831],  [41.7047637, -91.5987369],  [41.7047098, -91.5985822],  [41.7047085, -91.5985092],  [41.7047459, -91.5984406],  [41.7047107, -91.5981694],  [41.7047179, -91.5977872],  [41.7046901, -91.5977102],  [41.7046139, -91.597624],  [41.7045476, -91.5974362],  [41.7045961, -91.597362],  [41.7045941, -91.5972186],  [41.7045446, -91.5970525],  [41.7044814, -91.5969778],  [41.7044135, -91.5967664],  [41.7043015, -91.5965775],  [41.7042324, -91.5965254],  [41.7039634, -91.5964635],  [41.7038864, -91.5965334],  [41.7037907, -91.5965367],  [41.7036261, -91.5963636],  [41.7036017, -91.5963095],  [41.7033453, -91.5961986],  [41.7029084, -91.5964314],  [41.7026074, -91.5967366],  [41.702384, -91.5971592],  [41.7020375, -91.5974236],  [41.7018846, -91.5973845],  [41.7017859, -91.5971987],  [41.7015719, -91.5969869],  [41.7014639, -91.5970239],  [41.7014067, -91.5970155],  [41.7014486, -91.5969473],  [41.7013601, -91.5966811],  [41.701382, -91.5966399],  [41.7011996, -91.5962753],  [41.7009497, -91.5962408],  [41.7008492, -91.5960253],  [41.7006892, -91.5954588],  [41.7006443, -91.5953566],  [41.7005684, -91.5952633],  [41.7003294, -91.5950551],  [41.6998466, -91.5948123],  [41.6995898, -91.5947068],  [41.6991486, -91.5946413],  [41.6987729, -91.594614],  [41.6986778, -91.5945261],  [41.6985864, -91.5944913],  [41.6985483, -91.594521],  [41.6984126, -91.5944612],  [41.698355, -91.5943477],  [41.6979009, -91.5942107],  [41.6977827, -91.5942354],  [41.697322, -91.594302],  [41.6969424, -91.5942542],  [41.6965442, -91.5939232],  [41.696126, -91.5935704],  [41.6957371, -91.5933297],  [41.6956469, -91.5931688],  [41.695651, -91.5932609],  [41.6956182, -91.5932307],  [41.6955919, -91.5932431],  [41.6957302, -91.592927],  [41.6958029, -91.5929055],  [41.6960976, -91.5925565],  [41.6962294, -91.5922641],  [41.6963016, -91.5916544],  [41.6963188, -91.5909901],  [41.6963172, -91.5903766],  [41.6963092, -91.5897374],  [41.6962314, -91.5890631],  [41.6960717, -91.5884241],  [41.6958984, -91.5878064],  [41.695883, -91.5875755],  [41.6958067, -91.5875111],  [41.6956395, -91.5872358],  [41.6956357, -91.5870637],  [41.6955223, -91.5869523],  [41.6954795, -91.586823],  [41.6951758, -91.5863564],  [41.6949829, -91.5859547],  [41.6949763, -91.5858568],  [41.6948529, -91.5855259],  [41.6947894, -91.5854602],  [41.6946642, -91.5848525],  [41.694661, -91.584779],  [41.6946177, -91.5846824],  [41.6946412, -91.5841161],  [41.6946675, -91.5840732],  [41.6947013, -91.5838612],  [41.6946783, -91.5838],  [41.6947197, -91.5836233],  [41.6947167, -91.5835534],  [41.694773, -91.5833229],  [41.6947585, -91.5832232],  [41.6948177, -91.582914],  [41.694768, -91.5828136],  [41.6946192, -91.5827406],  [41.6943059, -91.582734],  [41.6938095, -91.5825835],  [41.6932847, -91.5825242],  [41.6927798, -91.5825268],  [41.6922615, -91.5825318],  [41.692096, -91.5825334],  [41.69202, -91.5825749],  [41.6915408, -91.5825521],  [41.6914293, -91.5825657],  [41.6909871, -91.5823349],  [41.6906195, -91.5820947],  [41.6904868, -91.5819629],  [41.6900165, -91.5816821],  [41.6895901, -91.5817222],  [41.689532, -91.5817955],  [41.6894542, -91.5817867],  [41.6893931, -91.5818305],  [41.6888954, -91.5818649],  [41.6885841, -91.5819197],  [41.6884311, -91.5819152],  [41.6883296, -91.5818519],  [41.6878168, -91.5818454],  [41.6873514, -91.5817424],  [41.6869843, -91.5816577],  [41.6867565, -91.581579],  [41.686708, -91.5815181],  [41.6862524, -91.5813731],  [41.6857947, -91.581223],  [41.6853024, -91.581148],  [41.6847807, -91.5811022],  [41.6842681, -91.5810572],  [41.6837926, -91.5809951],  [41.6833124, -91.5809319],  [41.68284, -91.5808702],  [41.6823805, -91.5807594],  [41.682219, -91.5806812],  [41.6821035, -91.5809356],  [41.681964, -91.5808744],  [41.6819709, -91.580857],  [41.6818966, -91.5806541],  [41.6819449, -91.5804703],  [41.6817662, -91.5803403],  [41.681686, -91.5801333],  [41.6813214, -91.57988],  [41.6810196, -91.5794971],  [41.6809869, -91.57942],  [41.680874, -91.5787958],  [41.6807522, -91.578194],  [41.6807268, -91.5781012],  [41.6806456, -91.5780405],  [41.6801094, -91.5780249],  [41.6796453, -91.5780373],  [41.6791598, -91.5780502],  [41.6786993, -91.5780625],  [41.6781748, -91.5780775],  [41.677711, -91.5780919],  [41.6771829, -91.5781084],  [41.6766035, -91.5781254],  [41.6760697, -91.578163],  [41.6755638, -91.5781986],  [41.6750889, -91.5782321],  [41.6748626, -91.578248],  [41.6747472, -91.5780062],  [41.674681, -91.5776267],  [41.6748302, -91.5775212],  [41.674819, -91.5773995],  [41.6747671, -91.5772383],  [41.6746772, -91.5772521],  [41.6747204, -91.5771162],  [41.6745549, -91.576686],  [41.6745504, -91.5765829],  [41.6745787, -91.5764909],  [41.6745701, -91.5763975],  [41.6745226, -91.5763212],  [41.6744417, -91.5756913],  [41.6744634, -91.5756105],  [41.6744109, -91.5754223],  [41.6743679, -91.5753473],  [41.6743096, -91.5750706],  [41.6742923, -91.5745258],  [41.6742874, -91.5741868],  [41.6742187, -91.5738917],  [41.6742075, -91.573394],  [41.6742571, -91.5732853],  [41.6741907, -91.572619],  [41.6741188, -91.571884],  [41.6740516, -91.5711503],  [41.6739885, -91.570462],  [41.6739229, -91.5697466],  [41.6738634, -91.5691261],  [41.6737957, -91.5684705],  [41.6737286, -91.5677849],  [41.6736757, -91.5671846],  [41.6736231, -91.5665497],  [41.6736033, -91.566303],  [41.6736463, -91.5662216],  [41.6736053, -91.5658756],  [41.6733948, -91.5657114],  [41.6730844, -91.5656501],  [41.6725729, -91.565642],  [41.6725476, -91.565623],  [41.6723559, -91.5656376],  [41.6720292, -91.5655585],  [41.671578, -91.5656236],  [41.671114, -91.5655841],  [41.6706496, -91.5656026],  [41.670166, -91.5655982],  [41.6696923, -91.5655898],  [41.6691879, -91.5656035],  [41.6688708, -91.5658932],  [41.6689851, -91.5660691],  [41.6690155, -91.5661224],  [41.6689613, -91.5661341],  [41.6689521, -91.5659942],  [41.6687767, -91.5655091],  [41.6685365, -91.5650649],  [41.6683551, -91.5645939],  [41.6683421, -91.5644933],  [41.6682376, -91.564122],  [41.6680552, -91.5637639],  [41.6679981, -91.5635736],  [41.6680065, -91.5634793],  [41.6678523, -91.5631459],  [41.6677786, -91.5628006],  [41.6675076, -91.5622181],  [41.6672422, -91.5616573],  [41.6670367, -91.5610617],  [41.6667964, -91.5604498],  [41.6667199, -91.5603644],  [41.6664944, -91.5597716],  [41.6663378, -91.5593792],  [41.6662198, -91.5591684],  [41.666117, -91.5589259],  [41.666075, -91.5587808],  [41.6661104, -91.5587497],  [41.6660851, -91.5586827],  [41.6659887, -91.5586936],  [41.6659382, -91.5582531],  [41.66584, -91.5581312],  [41.6657734, -91.5579251],  [41.6657737, -91.5577414],  [41.6656047, -91.5571022],  [41.6654885, -91.556488],  [41.6654496, -91.5561981],  [41.6653866, -91.556018],  [41.6653685, -91.5557139],  [41.6653066, -91.5555746],  [41.6651431, -91.5556552],  [41.6651174, -91.5554309],  [41.6651915, -91.5552991],  [41.6650385, -91.5549569],  [41.6649742, -91.5548817],  [41.6648663, -91.554817],  [41.6647619, -91.5547002],  [41.6647174, -91.5545929],  [41.6647376, -91.5545077],  [41.6647032, -91.5544575],  [41.6646427, -91.5544735],  [41.6646956, -91.5543986],  [41.6643642, -91.5539784],  [41.6641072, -91.5534779],  [41.6638991, -91.5529104],  [41.6639119, -91.552847],  [41.6638948, -91.5527767],  [41.6638132, -91.5527295],  [41.6637343, -91.5523418],  [41.6638269, -91.5521794],  [41.6637813, -91.5518098],  [41.6637333, -91.5516284],  [41.6636765, -91.5515393],  [41.6637, -91.5514692],  [41.663607, -91.5511481],  [41.6635224, -91.5506179],  [41.6633368, -91.5501443],  [41.6632048, -91.5500616],  [41.6628922, -91.5495649],  [41.6627137, -91.5495291],  [41.6626292, -91.5494663],  [41.6626031, -91.5494022],  [41.6626021, -91.5492512],  [41.6625162, -91.5491227],  [41.6626544, -91.548539],  [41.6628721, -91.5479309],  [41.6630868, -91.5473299],  [41.6632478, -91.5467566],  [41.6633369, -91.5461425],  [41.6633673, -91.5454826],  [41.6633467, -91.5448698],  [41.6633207, -91.544261],  [41.6632894, -91.5439242],  [41.6632263, -91.5437667],  [41.6632429, -91.5436253],  [41.6630501, -91.543611],  [41.662955, -91.5435522],  [41.6624669, -91.5435991],  [41.6619933, -91.5436681],  [41.6617003, -91.5436754],  [41.6614509, -91.5434093],  [41.6612656, -91.5428385],  [41.6612595, -91.5421319],  [41.6612658, -91.5414564],  [41.6612705, -91.5408502],  [41.6612739, -91.5402072],  [41.6612765, -91.539587],  [41.6612803, -91.5389629],  [41.6612846, -91.5383133],  [41.6612883, -91.5377921],  [41.6613048, -91.5377586],  [41.6617932, -91.5376608],  [41.6622829, -91.5376416],  [41.6624473, -91.5376229],  [41.6624941, -91.5370022],  [41.6624915, -91.5369143],  [41.6626253, -91.5368773],  [41.6626357, -91.5362746],  [41.6626552, -91.5356574], ];
var line_37 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_37);
      
      var latLngs = [ [41.662601, -91.5354265],  [41.6626255, -91.5354149],  [41.6624744, -91.5359196],  [41.6625188, -91.535943],  [41.6627582, -91.5358149],  [41.6630737, -91.5357336],  [41.6634918, -91.5360191],  [41.663604, -91.5361285],  [41.6636284, -91.536185],  [41.663684, -91.5368135],  [41.6636329, -91.5368432],  [41.6636336, -91.5369798],  [41.6636094, -91.5369717],  [41.6634479, -91.5375902],  [41.6629666, -91.537612],  [41.6625144, -91.5376325],  [41.6620574, -91.5376504],  [41.6616044, -91.5376682],  [41.6614585, -91.5376739],  [41.6612877, -91.5378636],  [41.6612836, -91.5384671],  [41.6612823, -91.538656],  [41.6615192, -91.5387571],  [41.6615199, -91.5392245],  [41.6614506, -91.5397181],  [41.6614798, -91.5403366],  [41.6614191, -91.5409455],  [41.6613846, -91.5416296],  [41.6613735, -91.5419702],  [41.6613327, -91.5419903],  [41.6613381, -91.5419487],  [41.6613561, -91.5419984],  [41.6613883, -91.5419408],  [41.6614681, -91.5423299],  [41.6614665, -91.5429607],  [41.6614974, -91.5431567],  [41.6615339, -91.5431448],  [41.6615619, -91.54317],  [41.6615801, -91.5432474],  [41.66192, -91.5436947],  [41.6620078, -91.5437362],  [41.662449, -91.5435488],  [41.6626274, -91.5434638],  [41.662969, -91.5434415],  [41.6630366, -91.5434593],  [41.6632094, -91.5435892],  [41.6631708, -91.5436822],  [41.6633006, -91.5439789],  [41.6633354, -91.5445994],  [41.6633497, -91.5449395],  [41.6634753, -91.5450354],  [41.6635119, -91.5451278],  [41.6635074, -91.5452248],  [41.6635624, -91.5453095],  [41.6635861, -91.5453981],  [41.6634901, -91.5460666],  [41.6634749, -91.5462655],  [41.6634209, -91.5465108],  [41.663369, -91.5466389],  [41.6633146, -91.5469069],  [41.663312, -91.547042],  [41.6631936, -91.5473432],  [41.6630417, -91.5480006],  [41.6629921, -91.5481839],  [41.6629911, -91.5482689],  [41.6628311, -91.5486161],  [41.6628452, -91.5486913],  [41.6627187, -91.5489983],  [41.6627726, -91.5492939],  [41.6629247, -91.5495795],  [41.6632848, -91.5499636],  [41.6634864, -91.5503357],  [41.6635934, -91.5507996],  [41.6637217, -91.5514192],  [41.6637901, -91.5517642],  [41.6636494, -91.5518918],  [41.6637875, -91.5526032],  [41.6639317, -91.5526398],  [41.6640704, -91.5531028],  [41.6639599, -91.5532526],  [41.6640101, -91.553387],  [41.6643084, -91.5538658],  [41.6646254, -91.5543422],  [41.6649729, -91.5548429],  [41.6652405, -91.5554126],  [41.6653071, -91.5555758],  [41.6651776, -91.5562525],  [41.6652451, -91.5565297],  [41.6652498, -91.5566962],  [41.6656698, -91.5566996],  [41.6658108, -91.5573468],  [41.6659579, -91.5579203],  [41.6659827, -91.5579927],  [41.6659445, -91.5580403],  [41.6661441, -91.558604],  [41.6663493, -91.5591614],  [41.6665711, -91.5597428],  [41.6667785, -91.5602853],  [41.6669889, -91.5609494],  [41.6670371, -91.561159],  [41.6673055, -91.5616942],  [41.6675279, -91.5621019],  [41.6677559, -91.5627077],  [41.6678545, -91.5630151],  [41.6679787, -91.5632258],  [41.6682125, -91.5637688],  [41.6684105, -91.5641034],  [41.6686235, -91.5646266],  [41.6688816, -91.5652153],  [41.6689777, -91.5655966],  [41.6689572, -91.5655948],  [41.6689559, -91.5656529],  [41.6691335, -91.5655298],  [41.6695816, -91.5652082],  [41.6696375, -91.5651678],  [41.6696947, -91.5650692],  [41.6697526, -91.5650334],  [41.66991, -91.5653493],  [41.6703934, -91.5654005],  [41.6708698, -91.5653664],  [41.6713703, -91.5653754],  [41.6715266, -91.5654005],  [41.6717838, -91.5653829],  [41.6722647, -91.565528],  [41.6723883, -91.5655542],  [41.6725101, -91.5654902],  [41.6730065, -91.5655905],  [41.6734927, -91.565727],  [41.6735234, -91.5657319],  [41.6735673, -91.5658675],  [41.6736014, -91.56628],  [41.6735069, -91.5663542],  [41.6735972, -91.5665119],  [41.6736464, -91.566553],  [41.6737011, -91.5667003],  [41.6737086, -91.5667969],  [41.6736499, -91.5668853],  [41.6736753, -91.5671803],  [41.6737532, -91.5672647],  [41.6738522, -91.5679436],  [41.6739244, -91.5685884],  [41.6739541, -91.5687339],  [41.6739948, -91.5693601],  [41.674045, -91.5699761],  [41.6741436, -91.570413],  [41.674114, -91.5704463],  [41.6741508, -91.570756],  [41.6741968, -91.5713826],  [41.6742571, -91.572029],  [41.6743289, -91.5726801],  [41.6743801, -91.5733006],  [41.6743915, -91.5734475],  [41.674282, -91.5735351],  [41.6743614, -91.5742818],  [41.6744389, -91.5750352],  [41.6745047, -91.5757021],  [41.6745642, -91.5763333],  [41.6746251, -91.576999],  [41.6746564, -91.5773997],  [41.6748122, -91.5774405],  [41.6748386, -91.5779117],  [41.6748644, -91.5778837],  [41.6748835, -91.5779196],  [41.6748789, -91.5779879],  [41.6749022, -91.5780153],  [41.6748875, -91.5780928],  [41.6753526, -91.5781519],  [41.67582, -91.5781806],  [41.6763287, -91.5781447],  [41.6769052, -91.578117],  [41.6774105, -91.5781013],  [41.6778618, -91.5780873],  [41.6779069, -91.5780859],  [41.6779592, -91.5781323],  [41.6780545, -91.5781141],  [41.6782242, -91.5781507],  [41.6783584, -91.5780922],  [41.6783482, -91.5780524],  [41.6783883, -91.577997],  [41.6784581, -91.5779808],  [41.678881, -91.5780421],  [41.6789381, -91.5780757],  [41.6794249, -91.5780432],  [41.6796597, -91.5780369],  [41.6797136, -91.5780769],  [41.6798871, -91.5780242],  [41.6803094, -91.5780277],  [41.6804188, -91.5779929],  [41.6807064, -91.577989],  [41.6808766, -91.5781422],  [41.6809344, -91.5782772],  [41.6809907, -91.5789361],  [41.681099, -91.5793894],  [41.6811979, -91.5795258],  [41.6812994, -91.5795857],  [41.6814678, -91.5797824],  [41.6815151, -91.5797889],  [41.6814894, -91.5799609],  [41.681712, -91.5802027],  [41.6818567, -91.5802089],  [41.6819062, -91.5802816],  [41.6819039, -91.5804412],  [41.6823353, -91.5807349],  [41.6828896, -91.5808767],  [41.6833769, -91.5809403],  [41.6838724, -91.5810062],  [41.6843234, -91.5810621],  [41.6848419, -91.5811076],  [41.6853287, -91.5811503],  [41.6853932, -91.5810765],  [41.6855593, -91.581059],  [41.685943, -91.5811343],  [41.6859994, -91.5811675],  [41.6860255, -91.5812981],  [41.6865153, -91.5814568],  [41.6869963, -91.5816023],  [41.6874467, -91.5817328],  [41.6875218, -91.5817542],  [41.687583, -91.5815809],  [41.6876139, -91.5815599],  [41.6877234, -91.5815698],  [41.6878239, -91.5816447],  [41.6882236, -91.5816935],  [41.6887095, -91.5817396],  [41.6889186, -91.5817246],  [41.6892179, -91.5817863],  [41.6892846, -91.5817761],  [41.689351, -91.5818443],  [41.689884, -91.5818711],  [41.6904013, -91.5819707],  [41.6908546, -91.582221],  [41.6913397, -91.5824666],  [41.6918634, -91.5825353],  [41.6923919, -91.5825306],  [41.6928605, -91.5825261],  [41.6933587, -91.5825245],  [41.6936455, -91.5825485],  [41.6937296, -91.5824793],  [41.694185, -91.5825438],  [41.6942711, -91.5825584],  [41.6942675, -91.5826879],  [41.6947468, -91.5827981],  [41.6949663, -91.5828755],  [41.6949887, -91.5829074],  [41.6949119, -91.5834729],  [41.6948109, -91.5835042],  [41.6946994, -91.5842021],  [41.6946611, -91.5847814],  [41.6947106, -91.5851639],  [41.6949091, -91.5857825],  [41.6951838, -91.5862641],  [41.6954961, -91.5867286],  [41.6957678, -91.5873006],  [41.6959383, -91.5878901],  [41.696098, -91.5885297],  [41.6962547, -91.589208],  [41.6963115, -91.5898138],  [41.6963175, -91.5904927],  [41.6963123, -91.5913078],  [41.6962808, -91.5920099],  [41.6962471, -91.5922219],  [41.6959747, -91.5927086],  [41.6956401, -91.5931546],  [41.6955767, -91.5932992],  [41.6960377, -91.5934236],  [41.6964643, -91.5936652],  [41.6968927, -91.5939232],  [41.6973196, -91.5941385],  [41.6977658, -91.5943499],  [41.6981717, -91.5944632],  [41.6983836, -91.5944808],  [41.6986779, -91.5944503],  [41.6987319, -91.5944754],  [41.6987694, -91.5944293],  [41.6988261, -91.5944131],  [41.6993002, -91.5945835],  [41.6994639, -91.5946467],  [41.699913, -91.5947539],  [41.7000899, -91.594788],  [41.7005261, -91.5950773],  [41.7008259, -91.5953836],  [41.7009644, -91.5959631],  [41.7012778, -91.5962942],  [41.7015394, -91.5963991],  [41.7016368, -91.596634],  [41.7017284, -91.5969728],  [41.7017844, -91.5970721],  [41.7021398, -91.5973674],  [41.7022421, -91.5973718],  [41.702335, -91.5972335],  [41.7024441, -91.5972149],  [41.7026417, -91.5969924],  [41.7028035, -91.5966066],  [41.7030521, -91.5963742],  [41.7032546, -91.5963788],  [41.703252, -91.5963022],  [41.7033618, -91.5962828],  [41.703803, -91.5964153],  [41.7040145, -91.5966619],  [41.7042355, -91.5965471],  [41.7043448, -91.5966174],  [41.7043749, -91.5966738],  [41.7044389, -91.5970411],  [41.7046634, -91.5975804],  [41.7047398, -91.5980566],  [41.7047561, -91.5982823],  [41.7048127, -91.5984203],  [41.7049335, -91.5989253],  [41.7051574, -91.599481],  [41.7053914, -91.5999948],  [41.7057513, -91.6004923],  [41.7060925, -91.6009223],  [41.7062643, -91.6011719],  [41.7064044, -91.6017712],  [41.7064352, -91.6019537],  [41.7065196, -91.6020481],  [41.70662, -91.602251],  [41.7068473, -91.6024376],  [41.7068843, -91.6025232],  [41.7072693, -91.602838],  [41.7076564, -91.6031904],  [41.7079748, -91.6035412],  [41.7080605, -91.6040031],  [41.7080738, -91.6045048],  [41.7082415, -91.6045264],  [41.7082628, -91.6046957],  [41.7083663, -91.6048691],  [41.7084156, -91.60486],  [41.7084071, -91.6049119],  [41.7087496, -91.6050461],  [41.7087064, -91.6052619],  [41.7087301, -91.6053273],  [41.7087655, -91.6059848],  [41.7088105, -91.6065875],  [41.7088953, -91.6068578],  [41.7090092, -91.607117],  [41.7090381, -91.6075303],  [41.7090262, -91.6076084],  [41.7086945, -91.6079451],  [41.7086529, -91.6085572],  [41.7086759, -91.6092434],  [41.7086795, -91.6098671],  [41.70868, -91.6099675],  [41.7087132, -91.6100575],  [41.7086844, -91.6101001],  [41.7082169, -91.6100357],  [41.7077622, -91.6100477],  [41.7072657, -91.6100608],  [41.7068114, -91.6100728],  [41.7063547, -91.6100848],  [41.7058965, -91.6100969],  [41.7054301, -91.610111],  [41.705036, -91.6101285],  [41.7049383, -91.6102028],  [41.7044546, -91.6102218],  [41.7040059, -91.6101989],  [41.7039603, -91.6101317],  [41.7040212, -91.609907],  [41.7040048, -91.6098827],  [41.7040319, -91.6098827],  [41.7040299, -91.6098802], ];
var line_38 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_38);
      
      var latLngs = [ [41.7039962, -91.6100457],  [41.7039962, -91.6100457],  [41.7040334, -91.6101609],  [41.7040938, -91.609934],  [41.7040317, -91.609954],  [41.7040563, -91.6101411],  [41.704126, -91.6101828],  [41.7045884, -91.61011],  [41.7046843, -91.6101445],  [41.7047221, -91.6100947],  [41.7051796, -91.6100865],  [41.7056736, -91.6100219],  [41.7059452, -91.6100541],  [41.705987, -91.6100105],  [41.7064516, -91.6100218],  [41.7069364, -91.6100122],  [41.7069942, -91.6100045],  [41.7070601, -91.6100662],  [41.7075452, -91.6100534],  [41.7080274, -91.6100407],  [41.7080908, -91.6099602],  [41.708324, -91.6099514],  [41.7084045, -91.609855],  [41.7083939, -91.609795],  [41.7084528, -91.609223],  [41.7083988, -91.6090631],  [41.7084021, -91.6084355],  [41.7083616, -91.6077909],  [41.7083567, -91.6071299],  [41.7083485, -91.606505],  [41.7083188, -91.605977],  [41.7083221, -91.6053396],  [41.7083282, -91.6050139],  [41.7081294, -91.6048124],  [41.708059, -91.6046837],  [41.7079763, -91.6040273],  [41.7079601, -91.6037048],  [41.7077301, -91.6033719],  [41.7073413, -91.6030516],  [41.7069479, -91.6026844],  [41.7065657, -91.60232],  [41.7062809, -91.6020575],  [41.70617, -91.6013944],  [41.7061594, -91.6012739],  [41.7058262, -91.6008604],  [41.705481, -91.6004338],  [41.7052754, -91.6001766],  [41.7052671, -91.6000871],  [41.7050235, -91.5995794],  [41.7048138, -91.5990116],  [41.7046343, -91.5984237],  [41.7045452, -91.597813],  [41.7043612, -91.5972231],  [41.7042362, -91.596737],  [41.7041517, -91.5966256],  [41.704096, -91.5966082],  [41.7038374, -91.5966925],  [41.7035427, -91.5964428],  [41.7033593, -91.5964118],  [41.7030416, -91.5964859],  [41.7028279, -91.5966077],  [41.702678, -91.5968051],  [41.7024943, -91.5971643],  [41.702323, -91.5973377],  [41.7021121, -91.5974143],  [41.701911, -91.5974099],  [41.7017039, -91.5972564],  [41.7014908, -91.5967045],  [41.7013027, -91.5964166],  [41.7009479, -91.5962707],  [41.7009063, -91.5962276],  [41.7007461, -91.5955921],  [41.7007081, -91.5954658],  [41.7003727, -91.5951442],  [41.699882, -91.5948457],  [41.6993991, -91.5946886],  [41.6989029, -91.5945907],  [41.6985729, -91.5945349],  [41.698198, -91.5943982],  [41.6977452, -91.5942644],  [41.697332, -91.5942516],  [41.6968561, -91.5940295],  [41.6964048, -91.5938315],  [41.6961232, -91.5936333],  [41.6956561, -91.5934589],  [41.6955208, -91.5933764],  [41.6955176, -91.5932308],  [41.6955591, -91.59317],  [41.6956238, -91.5931838],  [41.6959558, -91.5927294],  [41.6961341, -91.5924904],  [41.6962657, -91.5921357],  [41.6963071, -91.591477],  [41.6963184, -91.5908298],  [41.6963167, -91.5901722],  [41.6962902, -91.5895084],  [41.6962312, -91.5890621],  [41.696163, -91.5887892],  [41.6960857, -91.5887547],  [41.6960302, -91.5884503],  [41.6959942, -91.5883871],  [41.695872, -91.5877451],  [41.6958367, -91.5877013],  [41.6956257, -91.5871492],  [41.6953219, -91.5866714],  [41.6949838, -91.5862706],  [41.6947335, -91.5857303],  [41.6946233, -91.585344],  [41.6947247, -91.5852285],  [41.6946606, -91.5846266],  [41.694733, -91.5839756],  [41.694833, -91.5833703],  [41.6948587, -91.5831759],  [41.6948359, -91.583133],  [41.6948495, -91.5829435],  [41.6947378, -91.5828533],  [41.6943503, -91.5828233],  [41.6942932, -91.5826938],  [41.6938324, -91.5825885],  [41.69351, -91.5825307],  [41.6934229, -91.5826218],  [41.692913, -91.5826165],  [41.6924202, -91.5826105],  [41.691912, -91.5826536],  [41.6913923, -91.5826318],  [41.6909277, -91.5823996],  [41.6904879, -91.582163],  [41.6901886, -91.5820447],  [41.6897463, -91.5819256],  [41.689261, -91.5819243],  [41.6887714, -91.5819054],  [41.6883097, -91.5819261],  [41.687808, -91.5818507],  [41.6873112, -91.5817945],  [41.6868861, -91.5816852],  [41.6866865, -91.5815773],  [41.6863876, -91.5814775],  [41.6858994, -91.5812552],  [41.6853939, -91.581156],  [41.6848769, -91.5811106],  [41.6843664, -91.5810658],  [41.6838925, -91.5810089],  [41.683441, -91.5809486],  [41.6829323, -91.5808822],  [41.6824846, -91.5808071],  [41.6820622, -91.5805535],  [41.6817661, -91.5803402],  [41.6816876, -91.5801603],  [41.6812807, -91.5797631],  [41.6810982, -91.5795591],  [41.6809623, -91.5791958],  [41.6809026, -91.5785949],  [41.6808497, -91.5785477],  [41.6805093, -91.5788468],  [41.6809264, -91.5779658],  [41.6804012, -91.5780206],  [41.6801128, -91.5789227],  [41.6793895, -91.5792348],  [41.6791827, -91.5791034],  [41.6790842, -91.5783041],  [41.6787624, -91.5782483],  [41.678294, -91.5782408],  [41.6781676, -91.5782373],  [41.6775494, -91.578097],  [41.6770397, -91.5781128],  [41.6765072, -91.5781321],  [41.6760271, -91.578166],  [41.6755739, -91.5781979],  [41.6750914, -91.5782319],  [41.6748164, -91.5782513],  [41.6746812, -91.5776278],  [41.6746446, -91.5772369],  [41.6745564, -91.5771725],  [41.6745022, -91.5765315],  [41.6744691, -91.5763218],  [41.6744806, -91.5761562],  [41.6744129, -91.5754932],  [41.6743504, -91.5748194],  [41.6743443, -91.5746517],  [41.6743688, -91.5745603],  [41.6742961, -91.573914],  [41.6742514, -91.5733096],  [41.6741625, -91.5726511],  [41.6741119, -91.5718085],  [41.6740475, -91.5711062],  [41.6739918, -91.5704984],  [41.6739263, -91.5697829],  [41.67386, -91.5690927],  [41.6737922, -91.5684369],  [41.6737325, -91.5678297],  [41.6736793, -91.5672254],  [41.6736243, -91.5665656],  [41.6736183, -91.5664905],  [41.6734716, -91.5664191],  [41.6734692, -91.5660639],  [41.6733781, -91.5658088],  [41.6732992, -91.5658276],  [41.6731337, -91.5657476],  [41.6726686, -91.5657154],  [41.6721727, -91.5656994],  [41.6716784, -91.5656813],  [41.6712266, -91.5656891],  [41.6707331, -91.5656717],  [41.670237, -91.5656942],  [41.6697478, -91.5657104],  [41.6693145, -91.5658152],  [41.6690173, -91.5661077],  [41.6689709, -91.5661835],  [41.668758, -91.5656097],  [41.6686149, -91.5652862],  [41.6685656, -91.5652312],  [41.6686648, -91.5650631],  [41.668508, -91.5646934],  [41.6683404, -91.564734],  [41.6680873, -91.5641423],  [41.667836, -91.5635554],  [41.6676003, -91.5629629],  [41.6673619, -91.5623971],  [41.6671215, -91.5618158],  [41.6668868, -91.561268],  [41.6666658, -91.5606811],  [41.6664428, -91.5601511],  [41.6663901, -91.5600926],  [41.6661563, -91.5595149],  [41.6659672, -91.5589239],  [41.6659401, -91.5587486],  [41.6659661, -91.5586734],  [41.6659441, -91.5585162],  [41.665735, -91.5578847],  [41.6656992, -91.5577902],  [41.6657179, -91.5576755],  [41.6655852, -91.5570734],  [41.6654928, -91.5570526],  [41.6655013, -91.5569871],  [41.6654254, -91.5567275],  [41.6653063, -91.5563737],  [41.66529, -91.5561472],  [41.6652454, -91.5560303],  [41.6653662, -91.5558716],  [41.6653617, -91.5558414],  [41.6652227, -91.5557736],  [41.6651293, -91.5554497],  [41.6651388, -91.5553976],  [41.6649579, -91.555046],  [41.6647264, -91.5548514],  [41.6647254, -91.5547723],  [41.6643395, -91.5544549],  [41.664257, -91.5543536],  [41.664093, -91.5539379],  [41.6639038, -91.5537121],  [41.6636802, -91.5531712],  [41.6635971, -91.5530232],  [41.6635745, -91.5527321],  [41.6635513, -91.5520657],  [41.663541, -91.5519848],  [41.6636431, -91.5518583],  [41.6635226, -91.5512188],  [41.6634002, -91.5505493],  [41.6632239, -91.5499967],  [41.6631236, -91.5498652],  [41.6629263, -91.549964],  [41.6627221, -91.5497572],  [41.6625184, -91.5494506],  [41.6625824, -91.5492217],  [41.6625239, -91.5491342],  [41.6626507, -91.5485497],  [41.6628748, -91.5479235],  [41.6631004, -91.5472914],  [41.6632551, -91.5467178],  [41.6633313, -91.5461988],  [41.6632536, -91.5460995],  [41.6632611, -91.5456277],  [41.6631929, -91.5452042],  [41.6632738, -91.5449252],  [41.663204, -91.5445479],  [41.6632263, -91.5443867],  [41.6631367, -91.5440037],  [41.6630462, -91.5439164],  [41.6630515, -91.5438809],  [41.6626172, -91.5437339],  [41.6621816, -91.5438581],  [41.6622043, -91.543963],  [41.6621385, -91.543984],  [41.6616335, -91.5438545],  [41.6615468, -91.5436952],  [41.6613543, -91.5434673],  [41.6612711, -91.543295],  [41.6613383, -91.5431576],  [41.6612518, -91.5425059],  [41.661263, -91.5418048],  [41.6612662, -91.5414055],  [41.6611871, -91.5412902],  [41.6612032, -91.5406316],  [41.6611679, -91.5400077],  [41.661207, -91.5395845],  [41.661277, -91.5394594],  [41.6612815, -91.5387811],  [41.6612822, -91.5386718],  [41.6612327, -91.5385435],  [41.661214, -91.5380243],  [41.6613806, -91.5376219],  [41.6614766, -91.5376521],  [41.6615484, -91.5376399],  [41.6620031, -91.5376526],  [41.6623492, -91.5376549],  [41.6624253, -91.5376108],  [41.6625583, -91.5371625],  [41.6625208, -91.5365456],  [41.6625691, -91.536123],  [41.6626031, -91.5354753],  [41.6626088, -91.5352765],  [41.6625877, -91.5352878], ];
var line_39 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_39);
      
      var latLngs = [ [41.6625468, -91.5351888],  [41.6625278, -91.5351837],  [41.6626151, -91.5352732],  [41.6625619, -91.5359175],  [41.6626479, -91.5360577],  [41.6631094, -91.5360861],  [41.6635684, -91.5360418],  [41.663632, -91.5361265],  [41.6637282, -91.5364823],  [41.6636942, -91.5370126],  [41.6636343, -91.537111],  [41.663626, -91.5375914],  [41.663133, -91.5376045],  [41.662588, -91.5376292],  [41.6620989, -91.5376488],  [41.6616427, -91.5376667],  [41.6612941, -91.5376677],  [41.6612849, -91.5382778],  [41.6612805, -91.5389355],  [41.6612766, -91.539555],  [41.6612739, -91.5402233],  [41.6612707, -91.5408309],  [41.6612659, -91.5414419],  [41.6612604, -91.5420693],  [41.6612568, -91.5422633],  [41.6613412, -91.5423336],  [41.6613378, -91.5429609],  [41.6614373, -91.543267],  [41.6618142, -91.5436124],  [41.6622723, -91.5435445],  [41.6627408, -91.543569],  [41.6630105, -91.5436034],  [41.6630527, -91.5436788],  [41.663136, -91.543646],  [41.663289, -91.5439225],  [41.663324, -91.5445762],  [41.6634136, -91.5449787],  [41.6634189, -91.545419],  [41.6634575, -91.5454989],  [41.6634296, -91.5461585],  [41.6634542, -91.5463605],  [41.6633975, -91.5466163],  [41.6632636, -91.5466726],  [41.6633467, -91.5468005],  [41.6633265, -91.5470069],  [41.6632111, -91.5473989],  [41.6630555, -91.547418],  [41.6628528, -91.5479846],  [41.6626362, -91.5485918],  [41.6625338, -91.5490717],  [41.6627287, -91.5494259],  [41.6631142, -91.5498542],  [41.6632127, -91.5499705],  [41.6633997, -91.5505467],  [41.6635115, -91.5511594],  [41.6636343, -91.5518114],  [41.6637228, -91.5518696],  [41.6637466, -91.5520764],  [41.6637759, -91.552128],  [41.6638956, -91.552747],  [41.6640802, -91.5533151],  [41.6641354, -91.5534648],  [41.6641954, -91.553521],  [41.6644765, -91.5540833],  [41.6644821, -91.5541459],  [41.664521, -91.5542127],  [41.6646544, -91.5541784],  [41.6646721, -91.5544114],  [41.6650153, -91.5549102],  [41.6652741, -91.555491],  [41.6654296, -91.5561667],  [41.6654529, -91.5564291],  [41.6655856, -91.5565263],  [41.6657082, -91.5571213],  [41.6658512, -91.5577332],  [41.6660393, -91.5583073],  [41.6662383, -91.5588681],  [41.6664478, -91.5594207],  [41.6666767, -91.5600187],  [41.6667392, -91.5601824],  [41.6666697, -91.5603147],  [41.6668704, -91.5608467],  [41.6671317, -91.5614268],  [41.6672723, -91.56173],  [41.6675004, -91.5622538],  [41.6676319, -91.5626618],  [41.6678807, -91.5631726],  [41.6681084, -91.5637279],  [41.6683331, -91.5642803],  [41.668552, -91.5648463],  [41.668787, -91.5653835],  [41.6689044, -91.5656377],  [41.6689215, -91.565634],  [41.6693608, -91.5654145],  [41.6695249, -91.5653425],  [41.669591, -91.5653436],  [41.6697682, -91.5652739],  [41.670272, -91.5653161],  [41.6705962, -91.5653032],  [41.6709814, -91.5653482],  [41.6710253, -91.5653328],  [41.6710338, -91.5651694],  [41.6709586, -91.565125],  [41.6707402, -91.5652112],  [41.6705412, -91.5653524],  [41.6704966, -91.5654282],  [41.670484, -91.5655121],  [41.670941, -91.5656434],  [41.6710835, -91.5655496],  [41.671396, -91.5656001],  [41.6718105, -91.5655347],  [41.6721182, -91.5656333],  [41.6723139, -91.5656369],  [41.672779, -91.5657335],  [41.6732679, -91.565783],  [41.6734243, -91.565795],  [41.6734846, -91.5664092],  [41.6736249, -91.5667815],  [41.6737251, -91.5674692],  [41.6738123, -91.5681249],  [41.6738696, -91.5687403],  [41.6739418, -91.5693819],  [41.6739886, -91.5700145],  [41.6740655, -91.5706774],  [41.6741295, -91.5713213],  [41.6741772, -91.571563],  [41.674161, -91.5719397],  [41.6742167, -91.5721145],  [41.6741958, -91.5722542],  [41.6742061, -91.5723433],  [41.6741776, -91.5724873],  [41.6742425, -91.573139],  [41.6743257, -91.5739475],  [41.6743943, -91.5745968],  [41.6744005, -91.5746567],  [41.674456, -91.5747362],  [41.6744157, -91.5748021],  [41.6744777, -91.5754284],  [41.6745544, -91.5762258],  [41.6745706, -91.5764025],  [41.6746602, -91.5769223],  [41.6747421, -91.5775297],  [41.6746805, -91.5776221],  [41.6747853, -91.5781549],  [41.6752453, -91.5781262],  [41.6754935, -91.578127],  [41.6759632, -91.5781543],  [41.6764303, -91.5781375],  [41.6768926, -91.5780926],  [41.6772394, -91.5781296],  [41.6774594, -91.5781186],  [41.6779568, -91.5780842],  [41.6784348, -91.5780516],  [41.6789128, -91.5780467],  [41.6792405, -91.5780395],  [41.6797285, -91.5780623],  [41.6798317, -91.5780558],  [41.6799933, -91.5780048],  [41.6800314, -91.5780154],  [41.6801101, -91.5779729],  [41.6805978, -91.5780251],  [41.6807945, -91.5780561],  [41.6809317, -91.5786683],  [41.6810153, -91.5793123],  [41.6811294, -91.5795504],  [41.6815238, -91.5798815],  [41.6817416, -91.5801263],  [41.6818105, -91.5803099],  [41.6819035, -91.5802972],  [41.6821956, -91.5805743],  [41.6822228, -91.5806672],  [41.6826752, -91.5808487],  [41.6829301, -91.5808819],  [41.6830155, -91.5808211],  [41.6835074, -91.5808875],  [41.6836132, -91.5808968],  [41.6837057, -91.5809832],  [41.6841562, -91.5810454],  [41.6846568, -91.5810913],  [41.6851272, -91.5811326],  [41.685193, -91.5810498],  [41.6856667, -91.5811054],  [41.6859971, -91.5812252],  [41.6860316, -91.5813002],  [41.6863716, -91.581411],  [41.6864385, -91.5813645],  [41.68648, -91.5814456],  [41.6867046, -91.5815171],  [41.6868412, -91.5814682],  [41.6873119, -91.5816116],  [41.6877882, -91.5817227],  [41.6882687, -91.5817095],  [41.688746, -91.581748],  [41.6890544, -91.5817837],  [41.6891134, -91.5818366],  [41.6891667, -91.5818389],  [41.6892124, -91.5817594],  [41.6897035, -91.581778],  [41.6901553, -91.5818422],  [41.6904627, -91.5819432],  [41.6908912, -91.5822028],  [41.6913396, -91.5823798],  [41.691674, -91.5824573],  [41.6921618, -91.5824943],  [41.6926535, -91.5824882],  [41.6931012, -91.5825766],  [41.693148, -91.582613],  [41.693426, -91.5826281],  [41.6935066, -91.5826908],  [41.6939727, -91.5827378],  [41.6940432, -91.5826363],  [41.6945247, -91.582747],  [41.6947362, -91.5827957],  [41.6947608, -91.5828962],  [41.6948404, -91.5829814],  [41.6948282, -91.5834158],  [41.6948897, -91.5835236],  [41.6948342, -91.5838575],  [41.6947368, -91.5839514],  [41.6946612, -91.5846104],  [41.6946783, -91.5849927],  [41.6948261, -91.5855628],  [41.6950938, -91.586119],  [41.6954052, -91.5865827],  [41.6956818, -91.5870958],  [41.6958242, -91.5874352],  [41.6959692, -91.588014],  [41.6961236, -91.5886319],  [41.696267, -91.5892841],  [41.6963144, -91.5899122],  [41.6963177, -91.5905533],  [41.6963118, -91.5913246],  [41.6962844, -91.5919705],  [41.6962474, -91.5922202],  [41.6959648, -91.5927195],  [41.6956305, -91.5931716],  [41.6955866, -91.5933037],  [41.6960516, -91.5934052],  [41.6964649, -91.5936541],  [41.6969027, -91.5939003],  [41.6973329, -91.5941344],  [41.6976169, -91.5942495],  [41.6977788, -91.59419],  [41.6982613, -91.5943057],  [41.6986249, -91.5943946],  [41.6990682, -91.5945475],  [41.6995519, -91.594607],  [41.7000297, -91.5947627],  [41.7004396, -91.5950439],  [41.7007597, -91.5953525],  [41.7009716, -91.5959114],  [41.7010699, -91.5962573],  [41.7014156, -91.5963487],  [41.7014805, -91.596416],  [41.7016124, -91.5967797],  [41.7017014, -91.5971029],  [41.7018875, -91.5973544],  [41.7020843, -91.5974793],  [41.7022973, -91.5974737],  [41.7023917, -91.5974176],  [41.7024356, -91.5972643],  [41.7026997, -91.5967654],  [41.7027353, -91.5966853],  [41.7031534, -91.5964576],  [41.7031938, -91.5964917],  [41.7036136, -91.5963141],  [41.7039628, -91.5965708],  [41.7042485, -91.5965132],  [41.7043732, -91.5968054],  [41.7044232, -91.5972079],  [41.7046409, -91.5978225],  [41.7046645, -91.5979659],  [41.7046557, -91.5986393],  [41.7048461, -91.5992064],  [41.705082, -91.5998153],  [41.7053855, -91.6003161],  [41.7057677, -91.6007878],  [41.7061082, -91.6012098],  [41.7061811, -91.6013084],  [41.7062613, -91.6013326],  [41.7063019, -91.6014649],  [41.7063446, -91.6019044],  [41.7065133, -91.6022144],  [41.7068986, -91.6025581],  [41.7069808, -91.6026301],  [41.7073918, -91.6029451],  [41.7077691, -91.6033042],  [41.7079745, -91.6035406],  [41.7080595, -91.6039942],  [41.708062, -91.6043602],  [41.7081334, -91.6044573],  [41.7081056, -91.6045242],  [41.7081045, -91.604689],  [41.7081683, -91.604823],  [41.7085018, -91.6049439],  [41.7085154, -91.6055783],  [41.7085108, -91.6058436],  [41.7087021, -91.6059302],  [41.7087328, -91.6065892],  [41.7088018, -91.6068489],  [41.7087889, -91.6074782],  [41.7087487, -91.6079484],  [41.7087183, -91.6079455],  [41.7087061, -91.6079861],  [41.7085218, -91.608481],  [41.7085258, -91.6085672],  [41.7084685, -91.6086611],  [41.7084805, -91.6089441],  [41.7085658, -91.609028],  [41.7086251, -91.6096479],  [41.7086171, -91.6098526],  [41.7085166, -91.6100369],  [41.7083196, -91.6101916],  [41.7078578, -91.6101599],  [41.7076246, -91.6101545],  [41.7075492, -91.6100533],  [41.7070578, -91.6100663],  [41.7066014, -91.6100783],  [41.7061397, -91.6100905],  [41.7058688, -91.6100976],  [41.7058166, -91.6102432],  [41.7057496, -91.6102575],  [41.7052948, -91.6101875],  [41.7047996, -91.6101923],  [41.704298, -91.6101687],  [41.7041063, -91.6101515],  [41.7040216, -91.6101676],  [41.7039948, -91.6099399],  [41.7040371, -91.6099362],  [41.704053, -91.6098632],  [41.7039774, -91.6098641],  [41.70397, -91.6098676], ];
var line_40 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_40);
      
      var latLngs = [ [41.7039874, -91.6099311],  [41.7039845, -91.6099088],  [41.7039647, -91.609881],  [41.7040545, -91.6100852],  [41.7045137, -91.6100562],  [41.7049958, -91.6100482],  [41.7054137, -91.6101382],  [41.7054665, -91.6100751],  [41.7055695, -91.6100603],  [41.7060729, -91.6100922],  [41.7065494, -91.6100797],  [41.7070416, -91.6100667],  [41.7075013, -91.6100546],  [41.7079594, -91.6100425],  [41.7083679, -91.6100317],  [41.7084244, -91.6098191],  [41.7084573, -91.6091855],  [41.708482, -91.6089813],  [41.7084564, -91.6083046],  [41.7084513, -91.6081551],  [41.7083753, -91.6080892],  [41.7084306, -91.6075198],  [41.7083573, -91.6074327],  [41.7083099, -91.6067198],  [41.7082658, -91.6060853],  [41.7084166, -91.6059669],  [41.7084108, -91.6053275],  [41.7084073, -91.6049365],  [41.7081279, -91.6046757],  [41.7080792, -91.6045453],  [41.7080498, -91.6039059],  [41.7079762, -91.6035441],  [41.7075769, -91.6031111],  [41.7071699, -91.6027512],  [41.7067762, -91.6024071],  [41.7067005, -91.6024039],  [41.7066026, -91.6023305],  [41.7065431, -91.6023225],  [41.7063881, -91.6021711],  [41.7063423, -91.6020725],  [41.7062428, -91.6019487],  [41.7061713, -91.6015769],  [41.7062216, -91.6014946],  [41.7061986, -91.6013484],  [41.706137, -91.6012062],  [41.7060583, -91.6011454],  [41.7057862, -91.600664],  [41.705725, -91.6005939],  [41.705605, -91.6005868],  [41.7052466, -91.6001323],  [41.7049954, -91.5996117],  [41.7047597, -91.5989756],  [41.7046523, -91.59862],  [41.7046381, -91.5979962],  [41.7046433, -91.5973302],  [41.7046522, -91.5969118],  [41.7046247, -91.5967544],  [41.7042132, -91.5966456],  [41.7040233, -91.5964428],  [41.7039962, -91.5965811],  [41.7039541, -91.5966212],  [41.7038329, -91.596633],  [41.7034704, -91.5964647],  [41.7033621, -91.596491],  [41.7032916, -91.5964688],  [41.7029988, -91.59656],  [41.7028034, -91.5966743],  [41.702624, -91.5968996],  [41.702375, -91.5973198],  [41.7021584, -91.5974844],  [41.7018303, -91.5975707],  [41.7016106, -91.597386],  [41.7015136, -91.5968559],  [41.7015192, -91.5967262],  [41.7014495, -91.5964743],  [41.7011533, -91.5963197],  [41.7010679, -91.5963428],  [41.7009984, -91.5964189],  [41.7009225, -91.5964114],  [41.700697, -91.595849],  [41.7006271, -91.5955876],  [41.7004701, -91.5954022],  [41.7002839, -91.5951433],  [41.6999145, -91.5949193],  [41.6997177, -91.5948708],  [41.6995475, -91.5947306],  [41.6994616, -91.5946976],  [41.6993906, -91.5946153],  [41.6993148, -91.5946409],  [41.6992263, -91.5945888],  [41.6991393, -91.5945877],  [41.6988642, -91.594461],  [41.6983789, -91.5943827],  [41.6981184, -91.5943869],  [41.6980857, -91.5943471],  [41.6977127, -91.5942938],  [41.6976307, -91.5943408],  [41.6973116, -91.5942677],  [41.6969458, -91.5941033],  [41.6962724, -91.593716],  [41.6962305, -91.593644],  [41.6960717, -91.5935166],  [41.6958852, -91.5935049],  [41.6958282, -91.5934572],  [41.6958056, -91.5933797],  [41.6957744, -91.5934087],  [41.6955821, -91.593369],  [41.6955676, -91.5933323],  [41.6956686, -91.5930477],  [41.6960619, -91.5926077],  [41.6962457, -91.5922254],  [41.6963035, -91.5915916],  [41.6963186, -91.5908979],  [41.6963169, -91.5902779],  [41.6963003, -91.5896278],  [41.6962313, -91.5890627],  [41.6960714, -91.5884231],  [41.695928, -91.587849],  [41.6958261, -91.5874406],  [41.6955854, -91.5868902],  [41.6952878, -91.5864145],  [41.694968, -91.5859117],  [41.6947449, -91.5853188],  [41.6946592, -91.5846924],  [41.6947245, -91.5840322],  [41.6947899, -91.5836251],  [41.6947673, -91.5836267],  [41.6948786, -91.5830171],  [41.6948867, -91.5829191],  [41.6946833, -91.5827835],  [41.6942097, -91.5826746],  [41.6937112, -91.5825624],  [41.6932591, -91.5825241],  [41.6927782, -91.5825268],  [41.6923198, -91.5825312],  [41.6920999, -91.5825333],  [41.6920352, -91.582648],  [41.6915483, -91.5826202],  [41.6910877, -91.5824887],  [41.690828, -91.5823061],  [41.6903802, -91.5821392],  [41.6899217, -91.58198],  [41.6896596, -91.5819871],  [41.6894114, -91.5819376],  [41.6889452, -91.5819549],  [41.6884551, -91.581925],  [41.6881565, -91.582045],  [41.688027, -91.5820359],  [41.687956, -91.5820631],  [41.6877044, -91.5823831],  [41.6877075, -91.5824901],  [41.6875608, -91.5825375],  [41.6874323, -91.5827473],  [41.6869683, -91.5826058],  [41.6865626, -91.5828927],  [41.6864436, -91.5828751],  [41.6862365, -91.5826037],  [41.6863081, -91.581977],  [41.6862311, -91.5816132],  [41.6859392, -91.5812688],  [41.6853841, -91.5811551],  [41.6849313, -91.5811154],  [41.6844746, -91.5810753],  [41.6839751, -91.5810204],  [41.6834527, -91.5809502],  [41.6829285, -91.5808817],  [41.682464, -91.5808],  [41.6821704, -91.5806612],  [41.6820421, -91.5805524],  [41.6818559, -91.5809419],  [41.6818458, -91.580901],  [41.6818751, -91.5807559],  [41.6819795, -91.5804948],  [41.6817735, -91.5803457],  [41.6816664, -91.5801318],  [41.6815773, -91.5800442],  [41.6814929, -91.5800449],  [41.6813917, -91.5798684],  [41.6811699, -91.5796511],  [41.6810252, -91.5797458],  [41.6809508, -91.579584],  [41.6808887, -91.578906],  [41.680907, -91.5786392],  [41.6808569, -91.5781352],  [41.680656, -91.5780184],  [41.6800459, -91.5780266],  [41.6795198, -91.5780406],  [41.6790649, -91.5780528],  [41.6784012, -91.5780705],  [41.6779355, -91.578085],  [41.677416, -91.5781011],  [41.6769008, -91.5781172],  [41.6763966, -91.5781399],  [41.6758847, -91.578176],  [41.6754088, -91.5782095],  [41.6749444, -91.5782422],  [41.6748181, -91.5782512],  [41.6746826, -91.577639],  [41.6746149, -91.5768878],  [41.6745602, -91.5762895],  [41.6744992, -91.5756459],  [41.6744346, -91.5749911],  [41.6743676, -91.5743407],  [41.6743015, -91.5737314],  [41.6742297, -91.5730108],  [41.6741678, -91.5723897],  [41.6741016, -91.5716964],  [41.6740452, -91.5710804],  [41.6739835, -91.570408],  [41.6739233, -91.5697504],  [41.6738633, -91.5691256],  [41.6737992, -91.5685037],  [41.6737291, -91.5678497],  [41.6736706, -91.5676359],  [41.6736208, -91.5670366],  [41.6735455, -91.5665385],  [41.6734742, -91.566286],  [41.6734864, -91.5660116],  [41.6734011, -91.5658109],  [41.6732894, -91.5657338],  [41.673216, -91.565736],  [41.6731523, -91.5656749],  [41.6726786, -91.5656459],  [41.6722216, -91.5656352],  [41.6717059, -91.5656259],  [41.6712488, -91.5656176],  [41.6707582, -91.5656087],  [41.6702616, -91.5655999],  [41.6697471, -91.5655908],  [41.6692731, -91.5655921],  [41.6692387, -91.5655499],  [41.6692339, -91.5655968],  [41.6690563, -91.5656976],  [41.6687804, -91.5660438],  [41.6689194, -91.5662088],  [41.6689526, -91.5661791],  [41.6690357, -91.5659913],  [41.6690318, -91.565859],  [41.6687834, -91.5654021],  [41.6685674, -91.5648339],  [41.6683307, -91.564274],  [41.668078, -91.5636766],  [41.6678303, -91.5630903],  [41.6675925, -91.5625237],  [41.6674643, -91.562218],  [41.6674449, -91.5621209],  [41.6671955, -91.5615639],  [41.6670284, -91.5611574],  [41.6668651, -91.5608716],  [41.6667461, -91.5605121],  [41.6664785, -91.5599931],  [41.6662038, -91.559442],  [41.6661139, -91.5592982],  [41.6659766, -91.5589022],  [41.6659626, -91.5585809],  [41.6659559, -91.5584881],  [41.6659061, -91.5584333],  [41.6658525, -91.5580364],  [41.6657272, -91.5575211],  [41.6656934, -91.5572496],  [41.6655724, -91.5569492],  [41.6655109, -91.5565025],  [41.6654244, -91.555987],  [41.6653919, -91.55584],  [41.6654065, -91.5558289],  [41.6652343, -91.5552815],  [41.6651685, -91.5552456],  [41.6649077, -91.5547483],  [41.6648736, -91.5547003],  [41.6648339, -91.5547029],  [41.664809, -91.5546541],  [41.6647599, -91.5546497],  [41.6645983, -91.5543351],  [41.6643442, -91.5545845],  [41.6642649, -91.5543957],  [41.6641211, -91.5538021],  [41.664022, -91.5533618],  [41.6638567, -91.5529897],  [41.6637384, -91.552499],  [41.6637341, -91.5523411],  [41.6636185, -91.5517274],  [41.6634766, -91.5509654],  [41.6633546, -91.5503509],  [41.6632132, -91.5499713],  [41.6628343, -91.5495472],  [41.6625185, -91.5491262],  [41.6626075, -91.5486753],  [41.6628084, -91.5481077],  [41.6630257, -91.5475022],  [41.6632044, -91.5469494],  [41.6633158, -91.5463353],  [41.6633661, -91.5456663],  [41.6633532, -91.545024],  [41.6633272, -91.5444057],  [41.6632912, -91.5439329],  [41.6631763, -91.5436889],  [41.6629527, -91.5435517],  [41.6624468, -91.5436018],  [41.6619334, -91.543678],  [41.6617003, -91.5436753],  [41.6615779, -91.5435812],  [41.6613391, -91.5431597],  [41.6612511, -91.5425433],  [41.6612617, -91.5419406],  [41.6612642, -91.5416505],  [41.6611465, -91.5415416],  [41.661189, -91.5409524],  [41.6612705, -91.5408615],  [41.6612722, -91.5406326],  [41.661134, -91.5405395],  [41.661166, -91.5401005],  [41.6612861, -91.539571],  [41.6612331, -91.5388823],  [41.6613011, -91.538232],  [41.6612891, -91.5376691],  [41.6618441, -91.5376588],  [41.6623022, -91.5376408],  [41.6624215, -91.5376288],  [41.6625031, -91.5373309],  [41.6624846, -91.5366773],  [41.6624846, -91.5362832],  [41.6624234, -91.5362529],  [41.6624951, -91.5356424],  [41.6625828, -91.5350505],  [41.6626352, -91.5351175],  [41.6624513, -91.535163],  [41.662647, -91.535126], ];
var line_41 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_41);
      
      var latLngs = [ [41.6628739, -91.5351114],  [41.6628152, -91.5350877],  [41.662782, -91.5353596],  [41.6627176, -91.5355299],  [41.6626893, -91.5359926],  [41.662968, -91.5360101],  [41.6632297, -91.5357365],  [41.6634131, -91.535497],  [41.663651, -91.5354666],  [41.6635951, -91.5356362],  [41.6636426, -91.5356419],  [41.663537, -91.5356668],  [41.6635821, -91.5358707],  [41.6636505, -91.5359418],  [41.6637408, -91.5363559],  [41.6635534, -91.5369593],  [41.6635023, -91.5370846],  [41.6635129, -91.5375078],  [41.6634813, -91.5376131],  [41.6634351, -91.5376172],  [41.6634008, -91.5376934],  [41.6628144, -91.5376586],  [41.6628698, -91.5377282],  [41.6628025, -91.5377138],  [41.6626126, -91.5377649],  [41.6626031, -91.5378115],  [41.6625365, -91.5378538],  [41.6622218, -91.5378289],  [41.6617581, -91.5379539],  [41.6615464, -91.5379751],  [41.6615144, -91.5382821],  [41.6614804, -91.5383795],  [41.6614774, -91.5384942],  [41.6612826, -91.5386162],  [41.6612782, -91.5392769],  [41.6612753, -91.5398883],  [41.6612727, -91.5405077],  [41.661268, -91.54117],  [41.6612632, -91.5417844],  [41.6612511, -91.5425425],  [41.6613368, -91.543153],  [41.6615677, -91.5435706],  [41.6616549, -91.5436501],  [41.6621203, -91.5435937],  [41.6625821, -91.5435379],  [41.6629457, -91.5436175],  [41.6630026, -91.5435789],  [41.6631149, -91.5436026],  [41.663216, -91.5437053],  [41.6631713, -91.5436828],  [41.663295, -91.543869],  [41.6633446, -91.5440155],  [41.6633472, -91.544345],  [41.6633504, -91.5449557],  [41.6633664, -91.5456556],  [41.6633239, -91.5462706],  [41.6632081, -91.5469356],  [41.6629949, -91.5475889],  [41.6627642, -91.5482303],  [41.6625669, -91.5488582],  [41.6625342, -91.5490685],  [41.6627191, -91.5494139],  [41.6630736, -91.5498065],  [41.6632127, -91.5499705],  [41.6634125, -91.5506149],  [41.6635537, -91.5513838],  [41.6636761, -91.5520334],  [41.6638012, -91.5526707],  [41.6639813, -91.5533098],  [41.6641501, -91.5536155],  [41.6643408, -91.5541204],  [41.6643446, -91.5542006],  [41.6644689, -91.5542645],  [41.6643611, -91.5549616],  [41.66449, -91.5550615],  [41.6646347, -91.5550502],  [41.6646573, -91.5551303],  [41.6647616, -91.5551403],  [41.6649584, -91.5554045],  [41.6650352, -91.5555694],  [41.6653075, -91.555577],  [41.6652029, -91.55612],  [41.6652764, -91.5567268],  [41.6652814, -91.556859],  [41.6653922, -91.5571868],  [41.6654606, -91.5576449],  [41.6655916, -91.5578783],  [41.6655947, -91.5579572],  [41.6657161, -91.5581485],  [41.6657422, -91.5582332],  [41.6658031, -91.5582613],  [41.665841, -91.5583882],  [41.6658727, -91.5584089],  [41.6658991, -91.5585183],  [41.6659463, -91.5585431],  [41.6660199, -91.5589803],  [41.6661277, -91.5591132],  [41.6663516, -91.5596462],  [41.6664577, -91.5598123],  [41.6664863, -91.5598966],  [41.6666268, -91.5598885],  [41.6667167, -91.5601235],  [41.6666794, -91.5602619],  [41.6668915, -91.5608151],  [41.6671352, -91.5613678],  [41.6673464, -91.5619243],  [41.6675562, -91.5624818],  [41.6677702, -91.5630347],  [41.6680059, -91.563631],  [41.6682636, -91.5641904],  [41.6685088, -91.5647821],  [41.6686827, -91.5653566],  [41.668789, -91.5653609],  [41.6689124, -91.565657],  [41.6691451, -91.5654218],  [41.6691487, -91.5654632],  [41.6692313, -91.5656905],  [41.669184, -91.5657629],  [41.6692084, -91.5657882],  [41.6694146, -91.5656866],  [41.6695237, -91.5655886],  [41.6700489, -91.5655462],  [41.6703619, -91.5655564],  [41.6705424, -91.5655244],  [41.6710227, -91.5655251],  [41.6715145, -91.5655581],  [41.6719274, -91.5654417],  [41.6724147, -91.5654634],  [41.6728893, -91.5655315],  [41.6734129, -91.5655912],  [41.6737624, -91.5656702],  [41.6737383, -91.5657884],  [41.6738737, -91.5658332],  [41.6738278, -91.5662959],  [41.6737928, -91.5665526],  [41.6736346, -91.5666937],  [41.6736859, -91.5672997],  [41.6737522, -91.5680529],  [41.6738173, -91.568677],  [41.6738801, -91.5692889],  [41.6739363, -91.5698928],  [41.6739935, -91.5705169],  [41.6740514, -91.5711485],  [41.6741113, -91.5718014],  [41.6741686, -91.5723976],  [41.6741924, -91.572636],  [41.674353, -91.5726848],  [41.6743589, -91.5727991],  [41.674315, -91.5729536],  [41.6743116, -91.5734072],  [41.6743349, -91.5734726],  [41.6743134, -91.5737346],  [41.6743858, -91.5743859],  [41.6744014, -91.5745991],  [41.6744371, -91.5747146],  [41.674423, -91.5748639],  [41.6744514, -91.5751103],  [41.6744774, -91.5751766],  [41.6744595, -91.5752442],  [41.6745187, -91.5758437],  [41.6745809, -91.5765154],  [41.6746357, -91.5771147],  [41.6747064, -91.5777956],  [41.6748113, -91.5782479],  [41.6752755, -91.5782189],  [41.6754211, -91.5782087],  [41.6754801, -91.5781351],  [41.6755277, -91.5781379],  [41.6758522, -91.5780032],  [41.6760421, -91.5780773],  [41.6760429, -91.5780979],  [41.6765403, -91.5780755],  [41.6770089, -91.5780961],  [41.6774699, -91.5781281],  [41.6779305, -91.578044],  [41.6779838, -91.5780343],  [41.6780168, -91.5780695],  [41.6784935, -91.5780791],  [41.6789062, -91.5781154],  [41.6789585, -91.5780556],  [41.6794587, -91.5780422],  [41.6797304, -91.578035],  [41.6797561, -91.5778153],  [41.6798315, -91.5779593],  [41.6802923, -91.5780512],  [41.6804755, -91.5780782],  [41.6805124, -91.5780196],  [41.6807969, -91.5780172],  [41.6808896, -91.5781983],  [41.6809141, -91.5788197],  [41.6809546, -91.5792771],  [41.6811583, -91.5796506],  [41.6812831, -91.579751],  [41.6814151, -91.5799155],  [41.6815638, -91.5800314],  [41.6816189, -91.5799552],  [41.6818283, -91.5803456],  [41.6822298, -91.5806421],  [41.6824949, -91.5808105],  [41.6830368, -91.5808959],  [41.6835573, -91.5809638],  [41.6840954, -91.581037],  [41.6845658, -91.5810833],  [41.6850839, -91.5811288],  [41.6856067, -91.5811773],  [41.686072, -91.5813139],  [41.6865548, -91.5814694],  [41.6870182, -91.5816096],  [41.6874764, -91.5817413],  [41.6875283, -91.5816457],  [41.6879848, -91.5816935],  [41.688107, -91.5816778],  [41.6881042, -91.5816098],  [41.6881245, -91.5815946],  [41.6881749, -91.5816573],  [41.6882855, -91.5816874],  [41.6884145, -91.5816754],  [41.6884759, -91.5816282],  [41.6885743, -91.5816911],  [41.6886216, -91.5816824],  [41.6886681, -91.5816605],  [41.6887265, -91.5818341],  [41.6888559, -91.5818348],  [41.6889317, -91.5817071],  [41.6889744, -91.5816994],  [41.6890363, -91.5818359],  [41.6895637, -91.5818525],  [41.6900322, -91.5818848],  [41.6901259, -91.5817998],  [41.6905073, -91.5818897],  [41.6905944, -91.581806],  [41.6906569, -91.5818498],  [41.6906808, -91.582126],  [41.6911657, -91.5823864],  [41.6914192, -91.582486],  [41.6918862, -91.5825354],  [41.6923592, -91.5825309],  [41.6928704, -91.582526],  [41.6933504, -91.5825245],  [41.6937462, -91.5825699],  [41.6937846, -91.5826896],  [41.6938854, -91.5827083],  [41.6939494, -91.5826147],  [41.6944009, -91.5827185],  [41.6946895, -91.5827849],  [41.6947686, -91.5828922],  [41.6948252, -91.5829085],  [41.6948103, -91.5829259],  [41.6948321, -91.5829749],  [41.6947115, -91.5834692],  [41.6947896, -91.5836267],  [41.6946902, -91.5842737],  [41.6946706, -91.5849306],  [41.6948185, -91.5855416],  [41.6950962, -91.5861228],  [41.6954481, -91.5866441],  [41.6957331, -91.5872176],  [41.6959098, -91.5877758],  [41.6960746, -91.5884357],  [41.6962303, -91.5890583],  [41.6963058, -91.5896941],  [41.6963171, -91.5903531],  [41.6963188, -91.5909851],  [41.6963031, -91.5916062],  [41.6962478, -91.5922184],  [41.6961031, -91.5925466],  [41.6957445, -91.592985],  [41.6955506, -91.5934127],  [41.6957041, -91.59343],  [41.6957592, -91.5932273],  [41.6961997, -91.5934622],  [41.6965972, -91.5937672],  [41.6970241, -91.5940528],  [41.6974846, -91.5942501],  [41.6977544, -91.5943229],  [41.6978983, -91.5941966],  [41.6980047, -91.5940299],  [41.6980885, -91.5940524],  [41.6982261, -91.5940362],  [41.6983305, -91.5940879],  [41.6984714, -91.5941032],  [41.6985175, -91.5942097],  [41.6986331, -91.5942863],  [41.699091, -91.5944055],  [41.6995647, -91.5945754],  [41.6999293, -91.5946495],  [41.7001699, -91.5947688],  [41.7005672, -91.5950564],  [41.7007362, -91.5952152],  [41.7008322, -91.5953569],  [41.7008479, -91.5954779],  [41.7009286, -91.5957217],  [41.7009209, -91.5956333],  [41.7008196, -91.5954596],  [41.700853, -91.5954462],  [41.7010232, -91.5960252],  [41.7014233, -91.5962123],  [41.7015567, -91.5963631],  [41.7016326, -91.5965663],  [41.7016878, -91.5968611],  [41.7018813, -91.5971771],  [41.7019775, -91.5972912],  [41.7023075, -91.5974695],  [41.7023849, -91.5975398],  [41.7024461, -91.5974764],  [41.7025897, -91.5974491],  [41.7025816, -91.5970618],  [41.7026077, -91.5968699],  [41.7027835, -91.5965528],  [41.7030808, -91.5964117],  [41.7032268, -91.5964169],  [41.7032365, -91.5963713],  [41.703286, -91.5963534],  [41.7033349, -91.5962714],  [41.703355, -91.5961241],  [41.7033851, -91.59606],  [41.7037203, -91.5964636],  [41.7039245, -91.596622],  [41.7041862, -91.5965347],  [41.7044179, -91.596842],  [41.7044899, -91.5971131],  [41.7045383, -91.5971548],  [41.7045552, -91.5972378],  [41.7045505, -91.5974443],  [41.7046389, -91.5977079],  [41.7046398, -91.5981715],  [41.7046586, -91.5982573],  [41.7047593, -91.5984399],  [41.7046482, -91.5985878],  [41.7048436, -91.5991995],  [41.7050454, -91.5997368],  [41.7053338, -91.6002511],  [41.7056801, -91.6006795],  [41.7060489, -91.6011363],  [41.7062413, -91.6014594],  [41.7062813, -91.6019122],  [41.7063613, -91.6020453],  [41.7064542, -91.6019372],  [41.7065159, -91.6020034],  [41.7065769, -91.6019941],  [41.7066131, -91.6020233],  [41.7066994, -91.6020082],  [41.7067834, -91.6022138],  [41.7069744, -91.6024403],  [41.707298, -91.6028631],  [41.7078079, -91.6033433],  [41.7079754, -91.6035424],  [41.7080594, -91.6039924],  [41.7080913, -91.6045965],  [41.7081156, -91.6046571],  [41.7082926, -91.6048433],  [41.7083231, -91.6049237],  [41.7083808, -91.6049009],  [41.7086503, -91.6053096],  [41.7087928, -91.6055737],  [41.7087433, -91.6056826],  [41.7087812, -91.6062866],  [41.7088275, -91.6068956],  [41.7088468, -91.6075753],  [41.708814, -91.607859],  [41.708747, -91.6079858],  [41.7086241, -91.6084038],  [41.7086174, -91.6085063],  [41.7084669, -91.6086133],  [41.708482, -91.608977],  [41.7084246, -91.6096467],  [41.7084119, -91.6103227],  [41.7083708, -91.6105604],  [41.707904, -91.6103299],  [41.7076048, -91.6102873],  [41.7074064, -91.6102201],  [41.7073431, -91.6100587],  [41.7068854, -91.6100708],  [41.7063737, -91.6100843],  [41.7058717, -91.6100975],  [41.7054168, -91.6101114],  [41.7049246, -91.6101336],  [41.7042413, -91.6101666],  [41.7039678, -91.6101845],  [41.7039752, -91.6101653],  [41.7038828, -91.6101342],  [41.7038208, -91.6098033],  [41.7040344, -91.6098242], ];
var line_42 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_42);
      
      var latLngs = [ [41.7040185, -91.6098567],  [41.7040247, -91.6098774],  [41.7040617, -91.6098611],  [41.704097, -91.6100858],  [41.7044743, -91.6100461],  [41.7047787, -91.6098716],  [41.7049737, -91.6099166],  [41.7050227, -91.6098694],  [41.7051545, -91.6098862],  [41.7052711, -91.6099434],  [41.7057657, -91.6099556],  [41.7059239, -91.6099811],  [41.7061382, -91.6099622],  [41.7062995, -91.6099874],  [41.7063511, -91.6100849],  [41.706822, -91.6100725],  [41.7073366, -91.6100589],  [41.7078121, -91.6100464],  [41.7082628, -91.6100345],  [41.7084253, -91.6100168],  [41.7084375, -91.6093639],  [41.7084486, -91.6092576],  [41.7084967, -91.609175],  [41.7085109, -91.6089928],  [41.7084932, -91.608887],  [41.7082933, -91.60885],  [41.7083414, -91.6084017],  [41.7083968, -91.6082379],  [41.7083576, -91.607709],  [41.7084316, -91.6076349],  [41.7084309, -91.6075469],  [41.7083278, -91.6074547],  [41.7082756, -91.6071335],  [41.7082711, -91.6064798],  [41.7084203, -91.6063812],  [41.7084148, -91.6057711],  [41.7084091, -91.6051362],  [41.7084071, -91.6049141],  [41.70813, -91.6046784],  [41.7080787, -91.6045434],  [41.7080606, -91.6040062],  [41.7080081, -91.6036359],  [41.7079497, -91.6034955],  [41.7075148, -91.6030542],  [41.7070915, -91.6026826],  [41.7066714, -91.6023155],  [41.7063283, -91.6020181],  [41.7062227, -91.6014017],  [41.7058841, -91.6009321],  [41.7055431, -91.6005105],  [41.7052567, -91.6001492],  [41.7049921, -91.5996031],  [41.7047816, -91.5990337],  [41.7046672, -91.598705],  [41.704746, -91.5985261],  [41.7047072, -91.5983595],  [41.7046409, -91.5982849],  [41.7046228, -91.5978566],  [41.704292, -91.598048],  [41.7043005, -91.5974882],  [41.7042794, -91.5972733],  [41.7043003, -91.5971423],  [41.7041976, -91.596635],  [41.703997, -91.5965142],  [41.703924, -91.5966084],  [41.7036948, -91.5965982],  [41.7034904, -91.596495],  [41.7031638, -91.5965212],  [41.7027955, -91.5967164],  [41.7024824, -91.5972869],  [41.7021569, -91.5974608],  [41.702074, -91.5974058],  [41.7019934, -91.5974094],  [41.70177, -91.5972961],  [41.7016178, -91.5971021],  [41.7015374, -91.5967661],  [41.7015221, -91.5965607],  [41.7015028, -91.5965722],  [41.701494, -91.5965365],  [41.7014411, -91.5964636],  [41.7013207, -91.5963108],  [41.7012975, -91.5964637],  [41.7012228, -91.5964175],  [41.7009499, -91.5958674],  [41.7009014, -91.5957528],  [41.7008308, -91.5956784],  [41.7006703, -91.5953461],  [41.7002222, -91.5949745],  [41.6997183, -91.5947741],  [41.6992334, -91.5946161],  [41.6991787, -91.594552],  [41.6990262, -91.5945243],  [41.6986377, -91.5942992],  [41.6985096, -91.5941232],  [41.6983108, -91.5940602],  [41.6982695, -91.5941612],  [41.6983654, -91.5944124],  [41.6982234, -91.5943285],  [41.698208, -91.5942925],  [41.6981258, -91.5943542],  [41.6976762, -91.5942794],  [41.6972875, -91.5942231],  [41.6968581, -91.594019],  [41.6968003, -91.5940313],  [41.6966012, -91.5939206],  [41.6965563, -91.5938408],  [41.6961423, -91.5935698],  [41.6960179, -91.5934844],  [41.6957562, -91.5934336],  [41.6955953, -91.5933485],  [41.6955634, -91.5932793],  [41.695567, -91.5931809],  [41.6956794, -91.5930157],  [41.6960961, -91.5925588],  [41.6962462, -91.5922241],  [41.6963055, -91.5915288],  [41.6963185, -91.5908592],  [41.6963168, -91.5902196],  [41.6962973, -91.5895927],  [41.696231, -91.5890609],  [41.6960659, -91.588401],  [41.6959191, -91.587813],  [41.6958271, -91.587445],  [41.6955923, -91.5869039],  [41.6953044, -91.5864383],  [41.6952369, -91.5864721],  [41.6949321, -91.5859828],  [41.6948785, -91.5858875],  [41.6948466, -91.5857164],  [41.6947835, -91.5855732],  [41.6947945, -91.5854746],  [41.6946647, -91.584858],  [41.694697, -91.5842206],  [41.6948061, -91.5835936],  [41.6948514, -91.5830363],  [41.6946016, -91.5829127],  [41.6943116, -91.5828493],  [41.6942663, -91.5826876],  [41.6937861, -91.5825785],  [41.6934706, -91.5825278],  [41.6933775, -91.5826542],  [41.6928937, -91.582648],  [41.6925661, -91.5826833],  [41.692115, -91.5826219],  [41.6916556, -91.5825846],  [41.6914145, -91.5825555],  [41.6908955, -91.5823492],  [41.6905421, -91.582111],  [41.6901323, -91.5819321],  [41.6897251, -91.5818955],  [41.6892105, -91.5819128],  [41.6887366, -91.581918],  [41.688259, -91.5819095],  [41.6877991, -91.5819146],  [41.6875099, -91.58186],  [41.6874134, -91.5818051],  [41.6870397, -91.5817878],  [41.6869797, -91.5818122],  [41.6868985, -91.5815696],  [41.6864067, -91.5814222],  [41.6858887, -91.5812516],  [41.6853773, -91.5811546],  [41.6848759, -91.5811106],  [41.6843968, -91.5810685],  [41.683935, -91.5810148],  [41.6834597, -91.5809511],  [41.6829786, -91.5808883],  [41.6825235, -91.5808199],  [41.6824928, -91.5808098],  [41.6824236, -91.5808679],  [41.6820285, -91.5805603],  [41.681835, -91.5804778],  [41.6818019, -91.5803858],  [41.6816187, -91.5801489],  [41.6815981, -91.5800639],  [41.6812286, -91.5797137],  [41.6810476, -91.5794701],  [41.6809628, -91.5791977],  [41.6808935, -91.578504],  [41.6808428, -91.5780473],  [41.6803795, -91.5780208],  [41.6799099, -91.5780302],  [41.679417, -91.5780434],  [41.6789265, -91.5780565],  [41.6784491, -91.5780692],  [41.6779669, -91.578084],  [41.6774374, -91.5781005],  [41.6769786, -91.5781147],  [41.6764018, -91.5781396],  [41.6759463, -91.5781716],  [41.6754844, -91.5782042],  [41.6749831, -91.5782395],  [41.6748134, -91.5782515],  [41.6746828, -91.577641],  [41.6746141, -91.5768788],  [41.6745548, -91.5762295],  [41.6744933, -91.5755869],  [41.6744309, -91.5749539],  [41.6743664, -91.5743299],  [41.6743015, -91.5737312],  [41.6742363, -91.5730771],  [41.6741688, -91.5723995],  [41.6741063, -91.5717472],  [41.6740494, -91.5711258],  [41.6739871, -91.5704471],  [41.6739249, -91.569768],  [41.6738636, -91.5691278],  [41.6737949, -91.5684624],  [41.6737302, -91.5678038],  [41.6737037, -91.5675026],  [41.6736533, -91.5673835],  [41.673648, -91.5670979],  [41.6735707, -91.5669698],  [41.6735318, -91.5664608],  [41.6734183, -91.565967],  [41.6732409, -91.565788],  [41.6729345, -91.5657923],  [41.6725707, -91.5657811],  [41.6725479, -91.5656411],  [41.6720547, -91.5656322],  [41.6715938, -91.5656238],  [41.6711207, -91.5656153],  [41.6706294, -91.5656064],  [41.6701209, -91.5655974],  [41.6696393, -91.5655889],  [41.6692797, -91.5655913],  [41.6690574, -91.5656967],  [41.6688885, -91.5658655],  [41.6688171, -91.565978],  [41.668932, -91.5660504],  [41.6688946, -91.5659525],  [41.6689725, -91.5658389],  [41.6687444, -91.5652539],  [41.668508, -91.5646934],  [41.6682608, -91.5641089],  [41.6680669, -91.5636503],  [41.667836, -91.5636093],  [41.6677777, -91.5636385],  [41.6676435, -91.5630476],  [41.6674015, -91.5624592],  [41.667354, -91.5623917],  [41.6671834, -91.5624152],  [41.6671799, -91.5622179],  [41.6669752, -91.56161],  [41.6668075, -91.5610459],  [41.6667622, -91.5609862],  [41.6665441, -91.5604466],  [41.6663707, -91.5600473],  [41.6661013, -91.559474],  [41.6660568, -91.5593098],  [41.6659644, -91.5591754],  [41.665943, -91.5591066],  [41.6659512, -91.5589589],  [41.6659975, -91.5588816],  [41.6659479, -91.5585749],  [41.6659112, -91.5585043],  [41.6657381, -91.5578915],  [41.6656938, -91.5577355],  [41.6657071, -91.557632],  [41.6655774, -91.5570351],  [41.6654772, -91.5564126],  [41.6654291, -91.5560189],  [41.6652459, -91.5556515],  [41.6652593, -91.5555929],  [41.6651763, -91.5554083],  [41.6651338, -91.5553884],  [41.6651104, -91.5552784],  [41.6650329, -91.5551857],  [41.6650138, -91.555103],  [41.664858, -91.555159],  [41.6646473, -91.5551042],  [41.6642971, -91.5547259],  [41.6641692, -91.5544095],  [41.6640371, -91.5538187],  [41.6637708, -91.5532911],  [41.6636842, -91.5529604],  [41.6636422, -91.5523782],  [41.663653, -91.5520279],  [41.6636225, -91.5517893],  [41.6635603, -91.5516205],  [41.663525, -91.551373],  [41.6634407, -91.5507661],  [41.6633059, -91.5502012],  [41.6632131, -91.549971],  [41.6628497, -91.5495642],  [41.6625161, -91.5491226],  [41.6626765, -91.548475],  [41.6628793, -91.5479109],  [41.6630932, -91.5473118],  [41.6632545, -91.5467211],  [41.6633068, -91.546407],  [41.6632063, -91.5463172],  [41.6632788, -91.5459773],  [41.6632436, -91.545352],  [41.6632222, -91.5451022],  [41.6632344, -91.5447113],  [41.6631943, -91.5444971],  [41.6632055, -91.5442618],  [41.6631885, -91.5441912],  [41.663204, -91.5441436],  [41.6631904, -91.5440724],  [41.6630711, -91.5438946],  [41.6629595, -91.5437898],  [41.6626629, -91.5437571],  [41.6624412, -91.5438346],  [41.6623438, -91.5438166],  [41.6622679, -91.5436262],  [41.6617796, -91.5436959],  [41.6616132, -91.5436163],  [41.6614517, -91.5434105],  [41.6613147, -91.5430771],  [41.6612573, -91.5427565],  [41.6612561, -91.5422962],  [41.6611246, -91.5421455],  [41.6611827, -91.5414644],  [41.6612021, -91.5410069],  [41.66127, -91.5409197],  [41.6612737, -91.5402698],  [41.6612763, -91.5396291],  [41.6612804, -91.5389433],  [41.6612846, -91.5383136],  [41.6612968, -91.5380053],  [41.6614463, -91.5376815],  [41.6616237, -91.5376675],  [41.6616714, -91.5378357],  [41.661905, -91.5378129],  [41.6620745, -91.5378178],  [41.6622994, -91.5378011],  [41.6623941, -91.5378336],  [41.6624435, -91.5376353],  [41.6625119, -91.5376326],  [41.6625031, -91.5373085],  [41.6625778, -91.5372548],  [41.6626179, -91.5370721],  [41.6625967, -91.5370359],  [41.662596, -91.5370717],  [41.6626446, -91.5367287],  [41.6625686, -91.536164],  [41.6625466, -91.5355342],  [41.6626026, -91.5353601],  [41.6626183, -91.5354012],  [41.6625689, -91.5354621],  [41.6625421, -91.5355164],  [41.6625869, -91.5352465],  [41.6625869, -91.5352465], ];
var line_43 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_43);
      
      var latLngs = [ [41.6624577, -91.5359136],  [41.6625259, -91.5361264],  [41.6626365, -91.5361493],  [41.662947, -91.536015],  [41.6630981, -91.5360469],  [41.6632717, -91.536049],  [41.6633192, -91.5360133],  [41.6635151, -91.5359684],  [41.6636067, -91.5363333],  [41.6636182, -91.5366916],  [41.6636942, -91.5369752],  [41.6638058, -91.5371289],  [41.6636356, -91.5373516],  [41.6636369, -91.5375803],  [41.6631359, -91.5376043],  [41.6626856, -91.5376247],  [41.6622065, -91.5376446],  [41.6617234, -91.5376635],  [41.6613336, -91.5376693],  [41.6612845, -91.5383312],  [41.6612799, -91.5390273],  [41.6612759, -91.5397243],  [41.661273, -91.540424],  [41.661269, -91.5410438],  [41.6612636, -91.5417248],  [41.6612487, -91.5420895],  [41.6611003, -91.5422215],  [41.6612291, -91.5424594],  [41.6612586, -91.5425906],  [41.6612302, -91.5426294],  [41.6612095, -91.5428262],  [41.6612619, -91.5430577],  [41.6612906, -91.5430981],  [41.6612617, -91.5432043],  [41.6613632, -91.5433468],  [41.6613702, -91.5434037],  [41.6617122, -91.5437291],  [41.662148, -91.5434909],  [41.662612, -91.5434217],  [41.6627756, -91.543419],  [41.6628853, -91.5434484],  [41.6630604, -91.5435452],  [41.6631737, -91.5437436],  [41.663384, -91.5439321],  [41.6635304, -91.5441811],  [41.6636616, -91.5446132],  [41.663577, -91.5446812],  [41.6633414, -91.5447427],  [41.6633646, -91.5453478],  [41.6633396, -91.5461152],  [41.6632329, -91.5468286],  [41.6630613, -91.5474018],  [41.6628624, -91.5479579],  [41.6626353, -91.5485943],  [41.6625342, -91.5490686],  [41.6626415, -91.5493101],  [41.6627593, -91.5494611],  [41.6627857, -91.5495893],  [41.6628266, -91.5496633],  [41.6631031, -91.5499338],  [41.6632236, -91.5500125],  [41.6634403, -91.5504874],  [41.6635506, -91.551075],  [41.6636311, -91.5515884],  [41.663614, -91.5517039],  [41.6637305, -91.5523218],  [41.6638537, -91.5529211],  [41.6640111, -91.5533897],  [41.6645221, -91.554207],  [41.6645691, -91.5543112],  [41.6649001, -91.5547375],  [41.6651798, -91.555272],  [41.6653167, -91.5556025],  [41.6654314, -91.5562315],  [41.6654646, -91.5563523],  [41.6655132, -91.5568729],  [41.6657258, -91.5569629],  [41.6658154, -91.5573672],  [41.6657775, -91.5574299],  [41.6659544, -91.5580671],  [41.6660411, -91.5583125],  [41.6659989, -91.5584116],  [41.666066, -91.5587383],  [41.6660044, -91.558947],  [41.6660698, -91.559048],  [41.6661341, -91.5593725],  [41.6661755, -91.5594679],  [41.6662553, -91.5593872],  [41.6663288, -91.5595201],  [41.6664715, -91.5594827],  [41.6665366, -91.5596528],  [41.6665083, -91.5597368],  [41.666565, -91.5599772],  [41.6665979, -91.5600073],  [41.6666578, -91.5599749],  [41.6666593, -91.5600744],  [41.6668567, -91.560645],  [41.6670235, -91.5611876],  [41.6670663, -91.5612712],  [41.667191, -91.5616853],  [41.6672919, -91.5619358],  [41.6673742, -91.5620661],  [41.6674859, -91.5623879],  [41.6677214, -91.562927],  [41.6679748, -91.5635317],  [41.6682072, -91.5641154],  [41.6684755, -91.5647034],  [41.6686554, -91.5651219],  [41.6687911, -91.5655585],  [41.6688726, -91.5655615],  [41.6690325, -91.5660207],  [41.6687866, -91.5661775],  [41.6688301, -91.5662273],  [41.6688971, -91.5662382],  [41.668851, -91.5660443],  [41.6689249, -91.566062],  [41.6689677, -91.5660405],  [41.668957, -91.5659837],  [41.6689881, -91.5660668],  [41.6691506, -91.5660136],  [41.669256, -91.5659398],  [41.6693312, -91.5657628],  [41.6696183, -91.5655885],  [41.6700708, -91.5655847],  [41.6705701, -91.5655837],  [41.6710743, -91.5655699],  [41.6715276, -91.5655941],  [41.6718448, -91.5655491],  [41.6723255, -91.5655756],  [41.6723905, -91.5655959],  [41.6724938, -91.5655511],  [41.6724933, -91.5655271],  [41.6725479, -91.565504],  [41.6725477, -91.565456],  [41.6727723, -91.5654296],  [41.6732604, -91.5655007],  [41.6733268, -91.5654805],  [41.6734522, -91.5655755],  [41.6735738, -91.5659345],  [41.6735832, -91.5662435],  [41.673615, -91.5663634],  [41.673636, -91.5667117],  [41.6737017, -91.5668217],  [41.673736, -91.5674675],  [41.6737951, -91.5680878],  [41.6737648, -91.5681739],  [41.6738617, -91.5689391],  [41.6738496, -91.5691523],  [41.673875, -91.5693135],  [41.6738514, -91.569481],  [41.6739376, -91.569895],  [41.6739378, -91.5699758],  [41.6739873, -91.5700383],  [41.6739731, -91.5701375],  [41.6739966, -91.5702212],  [41.6740236, -91.5706111],  [41.6740796, -91.5712546],  [41.6741735, -91.5718884],  [41.6742573, -91.5722702],  [41.6742932, -91.5723534],  [41.6741715, -91.5724261],  [41.6742329, -91.5730426],  [41.6742975, -91.5736913],  [41.6743371, -91.5740486],  [41.6744357, -91.5746921],  [41.6744113, -91.5747599],  [41.674443, -91.5750767],  [41.6745512, -91.5751057],  [41.6745737, -91.5752163],  [41.6745427, -91.5754169],  [41.6745836, -91.5757037],  [41.6745696, -91.5758406],  [41.674594, -91.5759374],  [41.6745876, -91.5760088],  [41.6745437, -91.5761081],  [41.6745987, -91.5767099],  [41.6746074, -91.5768049],  [41.6746843, -91.5769131],  [41.6746299, -91.5770517],  [41.6746877, -91.5776793],  [41.6747665, -91.5780859],  [41.6748435, -91.5781098],  [41.6748406, -91.5781457],  [41.6749252, -91.5781861],  [41.674906, -91.5782064],  [41.6752764, -91.5781126],  [41.6753365, -91.5780039],  [41.6752644, -91.5779041],  [41.6751968, -91.5777443],  [41.6752554, -91.5776417],  [41.6754178, -91.5778147],  [41.6755587, -91.5778722],  [41.6756672, -91.5781913],  [41.6757445, -91.5779024],  [41.6759742, -91.578031],  [41.6760806, -91.578057],  [41.676295, -91.5780661],  [41.6765697, -91.5780205],  [41.6766941, -91.5780502],  [41.6770855, -91.5780201],  [41.6774513, -91.5780578],  [41.677851, -91.5779721],  [41.6778723, -91.5778674],  [41.6778593, -91.5776944],  [41.6779211, -91.5777991],  [41.6781101, -91.5779296],  [41.6781933, -91.5779137],  [41.6785644, -91.578011],  [41.6789235, -91.5779991],  [41.6790299, -91.5780537],  [41.679359, -91.5780449],  [41.6794046, -91.5779931],  [41.6798835, -91.5779682],  [41.6803552, -91.5779716],  [41.680491, -91.5779514],  [41.6805324, -91.5779711],  [41.680729, -91.577977],  [41.6809271, -91.5782127],  [41.6809882, -91.5783625],  [41.6810687, -91.57899],  [41.6810702, -91.5793651],  [41.6813999, -91.5798156],  [41.6816217, -91.5799703],  [41.6818005, -91.5802857],  [41.6818969, -91.5803566],  [41.6819172, -91.5804507],  [41.6823394, -91.5807373],  [41.6828535, -91.5808719],  [41.6833283, -91.5809339],  [41.6838479, -91.5810028],  [41.6843671, -91.5810659],  [41.6848815, -91.581111],  [41.6853358, -91.5811509],  [41.6857963, -91.5812234],  [41.6862621, -91.5813762],  [41.6867017, -91.5815162],  [41.6871613, -91.5816515],  [41.6876524, -91.581778],  [41.6881222, -91.5818235],  [41.6886437, -91.5818336],  [41.6891366, -91.5818372],  [41.6896305, -91.581856],  [41.6901039, -91.5818947],  [41.6906047, -91.5820834],  [41.6910484, -91.5823254],  [41.6914685, -91.582498],  [41.6919206, -91.5825351],  [41.6923753, -91.5825307],  [41.6928259, -91.5825264],  [41.6933244, -91.5825244],  [41.6937148, -91.5825631],  [41.6937899, -91.5824289],  [41.6938486, -91.5824446],  [41.6939087, -91.582508],  [41.6939624, -91.5826177],  [41.6944409, -91.5827277],  [41.6948988, -91.5828331],  [41.6948128, -91.583493],  [41.6947085, -91.5841388],  [41.6946623, -91.584813],  [41.6947415, -91.5853048],  [41.6949543, -91.5858862],  [41.6953356, -91.586483],  [41.6956592, -91.5870433],  [41.6958249, -91.5874368],  [41.6959769, -91.5880447],  [41.6961236, -91.5886321],  [41.6962575, -91.5892253],  [41.6963119, -91.5898285],  [41.6963175, -91.5904735],  [41.6963191, -91.5910847],  [41.6962998, -91.591711],  [41.6962477, -91.5922188],  [41.6960385, -91.5926382],  [41.6956961, -91.593061],  [41.6955814, -91.5933284],  [41.6955727, -91.5939259],  [41.6957294, -91.5940659],  [41.69594, -91.5933894],  [41.6959771, -91.5932327],  [41.6960337, -91.5932245],  [41.6964074, -91.5936201],  [41.6964604, -91.593733],  [41.6966017, -91.5938173],  [41.6966883, -91.5937214],  [41.6971185, -91.5939709],  [41.6975835, -91.5940727],  [41.6979181, -91.5941103],  [41.698085, -91.5940758],  [41.6981712, -91.5940853],  [41.6982255, -91.5940097],  [41.6983868, -91.5941555],  [41.6984334, -91.5941497],  [41.698603, -91.5942742],  [41.6986934, -91.5942999],  [41.6987521, -91.5942833],  [41.6989845, -91.5943832],  [41.6991597, -91.5943833],  [41.699326, -91.5944538],  [41.699443, -91.5943895],  [41.6995331, -91.5943879],  [41.6995715, -91.594441],  [41.6997532, -91.594577],  [41.7001171, -91.5947337],  [41.7001711, -91.5946896],  [41.7002043, -91.5947151],  [41.7002507, -91.5946992],  [41.7005062, -91.5948489],  [41.7006851, -91.5951191],  [41.7008831, -91.5956657],  [41.7008076, -91.5956165],  [41.700803, -91.5956593],  [41.7006146, -91.5957808],  [41.7007467, -91.5956627],  [41.7008072, -91.5958671],  [41.7009988, -91.5961918],  [41.7010416, -91.5962028],  [41.701058, -91.596237],  [41.701099, -91.5961189],  [41.701173, -91.5960994],  [41.7012198, -91.5961413],  [41.7012222, -91.5963168],  [41.7014865, -91.5964495],  [41.7017546, -91.5967388],  [41.7018171, -91.5966926],  [41.7018783, -91.5965599],  [41.7018449, -91.5967907],  [41.7018983, -91.5968849],  [41.7020277, -91.5969834],  [41.7021005, -91.5969952],  [41.7021867, -91.597054],  [41.7023725, -91.5970426],  [41.702556, -91.597244],  [41.7026666, -91.5972787],  [41.7027733, -91.5971408],  [41.7029093, -91.5971005],  [41.7029747, -91.597013],  [41.7030307, -91.596995],  [41.7030272, -91.5970196],  [41.7029271, -91.5970365],  [41.7030367, -91.5967309],  [41.7032347, -91.5966984],  [41.7033208, -91.5964856],  [41.7036992, -91.5965143],  [41.7039279, -91.5967613],  [41.7042086, -91.5966018],  [41.7042874, -91.5966641],  [41.7044176, -91.5970887],  [41.7044472, -91.5973363],  [41.7046414, -91.5978233],  [41.7046441, -91.5985231],  [41.704817, -91.599128],  [41.7050246, -91.5996857],  [41.7052757, -91.600177],  [41.7056427, -91.6006334],  [41.7060014, -91.6010775],  [41.7062028, -91.6013536],  [41.7062857, -91.6019837],  [41.7065659, -91.6022191],  [41.7066373, -91.6020562],  [41.7066548, -91.6021021],  [41.7066917, -91.6020968],  [41.7070299, -91.6025065],  [41.707111, -91.6026093],  [41.7071333, -91.6027191],  [41.7075153, -91.6030546],  [41.7078962, -91.6034347],  [41.7080071, -91.6036323],  [41.7080601, -91.6039994],  [41.7080987, -91.6046195],  [41.7082447, -91.604829],  [41.7085062, -91.6050161],  [41.708513, -91.6057202],  [41.708502, -91.6063535],  [41.7084913, -91.6069726],  [41.7084802, -91.607617],  [41.7084501, -91.6081176],  [41.7084728, -91.6087756],  [41.7084306, -91.6094415],  [41.7084241, -91.6100536],  [41.7084194, -91.6101606],  [41.7082428, -91.610035],  [41.7077771, -91.6100473],  [41.7072774, -91.6100605],  [41.7067807, -91.6100736],  [41.7066947, -91.6100758],  [41.7066316, -91.6101516],  [41.7062844, -91.6101642],  [41.7058179, -91.6101338],  [41.705529, -91.6101523],  [41.7051257, -91.6100889],  [41.704673, -91.6101428],  [41.7042268, -91.6102391],  [41.7041691, -91.6101713],  [41.704029, -91.6101678],  [41.7040274, -91.6098763], ];
var line_44 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_44);
      
      var latLngs = [ [41.7039333, -91.6097588],  [41.7039618, -91.6098075],  [41.703991, -91.6099758],  [41.704204, -91.6101747],  [41.7043467, -91.6104622],  [41.7046176, -91.6103246],  [41.7048263, -91.6103556],  [41.705111, -91.6102409],  [41.7051364, -91.6102995],  [41.7051876, -91.6103015],  [41.7054325, -91.6101996],  [41.7056191, -91.6102991],  [41.7056651, -91.6102577],  [41.7059714, -91.6102633],  [41.7060234, -91.6102026],  [41.7060594, -91.6102282],  [41.7062024, -91.6102097],  [41.706248, -91.6102286],  [41.706456, -91.6101452],  [41.7065287, -91.6101566],  [41.7067209, -91.6099964],  [41.7066575, -91.6100523],  [41.707149, -91.6099846],  [41.7073763, -91.609988],  [41.7074278, -91.6100565],  [41.7078838, -91.6100445],  [41.7081013, -91.6100388],  [41.7081648, -91.6100783],  [41.7082319, -91.6100815],  [41.7083982, -91.6099955],  [41.7084519, -91.6098485],  [41.7084243, -91.6097902],  [41.708458, -91.6091802],  [41.7084796, -91.6090017],  [41.7084581, -91.6089313],  [41.7084907, -91.6089154],  [41.7084692, -91.60882],  [41.7084871, -91.608762],  [41.7084118, -91.6085414],  [41.7084822, -91.6085652],  [41.708441, -91.6079724],  [41.7084182, -91.6078784],  [41.7084282, -91.6072475],  [41.708422, -91.6065688],  [41.7084161, -91.6059089],  [41.7084104, -91.6052837],  [41.7084082, -91.6050357],  [41.7083805, -91.604896],  [41.7081173, -91.6046607],  [41.7080606, -91.6040363],  [41.7079802, -91.603554],  [41.7075868, -91.60318],  [41.7071932, -91.6028216],  [41.7070568, -91.6027232],  [41.7069821, -91.6025871],  [41.706598, -91.6022514],  [41.7063356, -91.6020241],  [41.7062822, -91.6019274],  [41.7062428, -91.6014649],  [41.706192, -91.6013286],  [41.7058107, -91.6008411],  [41.7054461, -91.6003908],  [41.7051239, -91.599901],  [41.7049005, -91.5993556],  [41.7046993, -91.5988148],  [41.7046536, -91.5986277],  [41.7046932, -91.5985085],  [41.7045943, -91.5980604],  [41.7045976, -91.5978582],  [41.7044236, -91.5972934],  [41.7042755, -91.5967423],  [41.7041762, -91.5965937],  [41.7038029, -91.5967049],  [41.7037558, -91.5966899],  [41.7037081, -91.5965904],  [41.7035165, -91.5964272],  [41.7033499, -91.5963641],  [41.7028393, -91.5964801],  [41.7027141, -91.5964885],  [41.702508, -91.5966194],  [41.7024481, -91.5967314],  [41.702437, -91.5969431],  [41.7024008, -91.5970761],  [41.7022459, -91.5972624],  [41.7018974, -91.5973729],  [41.7018295, -91.5972546],  [41.7017138, -91.5972086],  [41.7015298, -91.5966517],  [41.7014145, -91.5963801],  [41.7009955, -91.5962382],  [41.700926, -91.596089],  [41.7007421, -91.5954793],  [41.7005993, -91.59521],  [41.7001464, -91.5949402],  [41.6996949, -91.5947229],  [41.6994406, -91.5946804],  [41.6989283, -91.5945644],  [41.6984585, -91.5944314],  [41.6984401, -91.5943896],  [41.6983847, -91.5943842],  [41.6983151, -91.5944288],  [41.6981727, -91.5943397],  [41.6981264, -91.5943566],  [41.6976606, -91.5942916],  [41.697306, -91.5942252],  [41.6970794, -91.5940828],  [41.6970337, -91.5940233],  [41.6965841, -91.5937907],  [41.6961285, -91.5935047],  [41.6958087, -91.5933571],  [41.6957007, -91.5933981],  [41.6955499, -91.593259],  [41.6955768, -91.5931472],  [41.695661, -91.5931175],  [41.6960387, -91.592638],  [41.6962459, -91.5922249],  [41.6963041, -91.5915712],  [41.6963187, -91.5909484],  [41.696317, -91.5903095],  [41.6963002, -91.5896267],  [41.696231, -91.5890611],  [41.6960641, -91.5883936],  [41.6959067, -91.5877634],  [41.6958749, -91.5876385],  [41.6956138, -91.5871234],  [41.6953465, -91.5866105],  [41.695038, -91.5861525],  [41.6948386, -91.5858324],  [41.6948824, -91.585712],  [41.6947076, -91.5851482],  [41.6946662, -91.5845128],  [41.6947647, -91.5837775],  [41.694857, -91.5831896],  [41.6948851, -91.5829581],  [41.694744, -91.5828013],  [41.6942922, -91.5826936],  [41.6937923, -91.5825798],  [41.6932838, -91.5825242],  [41.6927649, -91.582527],  [41.6922741, -91.5825317],  [41.6919191, -91.5825351],  [41.6918475, -91.5826193],  [41.6917026, -91.5826201],  [41.691639, -91.5825171],  [41.6911302, -91.5823681],  [41.690649, -91.5821084],  [41.6901999, -91.5819119],  [41.6897429, -91.5818621],  [41.6892535, -91.581842],  [41.689071, -91.5818362],  [41.6885888, -91.5818536],  [41.688371, -91.5818187],  [41.6881577, -91.5818449],  [41.6876997, -91.5817777],  [41.6871715, -91.5816545],  [41.686729, -91.5815234],  [41.6861999, -91.5813564],  [41.6857603, -91.5812141],  [41.6852558, -91.5811439],  [41.6847399, -91.5810986],  [41.6842411, -91.5810548],  [41.6837783, -91.5809931],  [41.6833148, -91.5809322],  [41.6828589, -91.5808727],  [41.6824039, -91.5807719],  [41.6819684, -91.580487],  [41.6817678, -91.5803415],  [41.6816704, -91.5801372],  [41.6812886, -91.5797707],  [41.6810289, -91.5794262],  [41.6809626, -91.5791971],  [41.6809008, -91.578577],  [41.6808563, -91.5781294],  [41.6808336, -91.5780715],  [41.6803629, -91.5780209],  [41.6798957, -91.5780306],  [41.6793649, -91.5780448],  [41.6788455, -91.5780586],  [41.6782361, -91.5780756],  [41.6777653, -91.5780903],  [41.6772755, -91.5781055],  [41.6767637, -91.5781214],  [41.676262, -91.5781494],  [41.6757961, -91.5781822],  [41.6753026, -91.578217],  [41.6748171, -91.5782512],  [41.6746799, -91.5776178],  [41.6746163, -91.576903],  [41.6745594, -91.5762806],  [41.6744962, -91.575616],  [41.6744355, -91.5750001],  [41.6743735, -91.5743971],  [41.6743016, -91.5737325],  [41.6742376, -91.5730894],  [41.6741697, -91.5724087],  [41.6741123, -91.5718129],  [41.6740552, -91.5711893],  [41.6739947, -91.5705295],  [41.6739396, -91.5699289],  [41.6738716, -91.5692062],  [41.673804, -91.5685499],  [41.6737298, -91.5677983],  [41.6736654, -91.5670673],  [41.6736125, -91.5664184],  [41.6735695, -91.5658818],  [41.6735059, -91.5657291],  [41.6730527, -91.5656645],  [41.6725849, -91.5656425],  [41.672086, -91.5656327],  [41.6715782, -91.5656236],  [41.6710994, -91.5656149],  [41.6706448, -91.5656067],  [41.6703395, -91.5656012],  [41.6702719, -91.5656612],  [41.6698739, -91.565659],  [41.6698112, -91.5655919],  [41.6693385, -91.5655883],  [41.6691857, -91.5656048],  [41.6688119, -91.5659872],  [41.6688019, -91.5660052],  [41.6689413, -91.5661356],  [41.6689843, -91.5661144],  [41.6687458, -91.5656008],  [41.6685005, -91.5650151],  [41.6682562, -91.564429],  [41.6679927, -91.5638432],  [41.667736, -91.5633308],  [41.6675925, -91.5628161],  [41.6673415, -91.5622753],  [41.6671494, -91.5617115],  [41.6670273, -91.5614062],  [41.6669878, -91.5612414],  [41.6667541, -91.5606768],  [41.6665161, -91.5601415],  [41.6662694, -91.5596101],  [41.6660286, -91.5590461],  [41.665931, -91.558769],  [41.6659181, -91.5584761],  [41.6657375, -91.5579604],  [41.6657685, -91.5578638],  [41.6656285, -91.5572827],  [41.6655093, -91.5566271],  [41.6654637, -91.5562922],  [41.6652306, -91.5561572],  [41.6652351, -91.5560871],  [41.6651003, -91.5554954],  [41.6650635, -91.5553455],  [41.6649865, -91.5552035],  [41.6649492, -91.5550652],  [41.6649531, -91.5549611],  [41.664642, -91.5544706],  [41.6646208, -91.5544147],  [41.6642889, -91.5539789],  [41.6640611, -91.5536127],  [41.6639778, -91.5534195],  [41.6637957, -91.5530839],  [41.6636469, -91.5524664],  [41.6636311, -91.5522903],  [41.6635653, -91.5520222],  [41.6634886, -91.551362],  [41.6634577, -91.5511239],  [41.6633849, -91.5509503],  [41.6634191, -91.550789],  [41.6633662, -91.5504485],  [41.6631265, -91.5500095],  [41.6627088, -91.5496059],  [41.6625704, -91.5494226],  [41.6625909, -91.5492345],  [41.6625203, -91.5491289],  [41.662677, -91.5484734],  [41.6628917, -91.5478765],  [41.6631135, -91.5472545],  [41.6632162, -91.5469004],  [41.6631649, -91.5467739],  [41.66323, -91.5461503],  [41.6632799, -91.5455792],  [41.6632547, -91.5452031],  [41.6633576, -91.5451277],  [41.6633323, -91.5445255],  [41.6632893, -91.5439237],  [41.6631759, -91.5436884],  [41.6629536, -91.5435519],  [41.6625007, -91.5435945],  [41.6620227, -91.5436632],  [41.6617381, -91.5436899],  [41.6615305, -91.5435258],  [41.6613559, -91.5432072],  [41.6612225, -91.5432074],  [41.6612006, -91.543167],  [41.6612381, -91.5429672],  [41.661247, -91.5430412],  [41.6613246, -91.5426277],  [41.6613854, -91.5425408],  [41.661333, -91.5423993],  [41.6613341, -91.5421434],  [41.6612607, -91.542036],  [41.661266, -91.5414274],  [41.6612708, -91.5408205],  [41.6612741, -91.5401706],  [41.6612767, -91.539543],  [41.661281, -91.5388516],  [41.6612854, -91.5381905],  [41.6612946, -91.5377549],  [41.6615052, -91.5376721],  [41.6619866, -91.5376532],  [41.6620186, -91.537652],  [41.6620405, -91.5375935],  [41.662037, -91.5376659],  [41.6621057, -91.5377748],  [41.6621243, -91.5377308],  [41.6621917, -91.5376822],  [41.6623195, -91.5377457],  [41.6624522, -91.5376766],  [41.6624967, -91.5375268],  [41.6626156, -91.5369219],  [41.662583, -91.5363153],  [41.6625689, -91.5362198],  [41.6626412, -91.5359162],  [41.6625809, -91.5353099],  [41.6625501, -91.5352873],  [41.6625862, -91.5352578],  [41.6625862, -91.5352578], ];
var line_45 = L.polyline(latLngs,{
color: '#111',
weight: 1,
opacity: 0.3,
});
      map.addLayer(line_45);
      

      

      

   </script>
</body>" style="width: 100%; height: 510px; border: none"></iframe>
<p>You can barely make out that I changed my path partway through the year to take Old Hospital Road instead of the North Ridge Trail (North boundry of my path).</p>
<p>Folium is cool; you should check it out (really, just use anything made by <a href="https://github.com/wrobstory/">Rob</a>).</p>
]]></content:encoded></item><item><title>Practical Pandas Part 2 - More Tidying, More Data, and Merging</title><link>https://tomaugspurger.github.io/posts/pp02/</link><pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pp02/</guid><description>This is Part 2 in the Practical Pandas Series, where I work through a data analysis problem from start to finish.
It&amp;rsquo;s a misconception that we can cleanly separate the data analysis pipeline into a linear sequence of steps from
data acqusition data tidying exploratory analysis model building production As you work through a problem you&amp;rsquo;ll realize, &amp;ldquo;I need this other bit of data&amp;rdquo;, or &amp;ldquo;this would be easier if I stored the data this way&amp;rdquo;, or more commonly &amp;ldquo;strange, that&amp;rsquo;s not supposed to happen&amp;rdquo;.</description><content:encoded><![CDATA[<p><em>This is Part 2 in the Practical Pandas Series, where I work through a data analysis problem from start to finish.</em></p>
<p>It&rsquo;s a misconception that we can cleanly separate the data analysis pipeline into a linear
sequence of steps from</p>
<ol>
<li>data acqusition</li>
<li>data tidying</li>
<li>exploratory analysis</li>
<li>model building</li>
<li>production</li>
</ol>
<p>As you work through a problem you&rsquo;ll realize, &ldquo;I need this other bit of data&rdquo;, or &ldquo;this would be easier if I stored the data this way&rdquo;, or more commonly &ldquo;strange, that&rsquo;s not supposed to happen&rdquo;.</p>
<p>We&rsquo;ll follow up our <a href="http://tomaugspurger.github.io/blog/2014/08/26/practical-pandas-part-1-reading-the-data/">last post</a> by circling back to cleaning up our data set, and fetching some more data.
Here&rsquo;s a reminder of where we were.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_hdf(<span style="color:#e6db74">&#39;data/cycle_store.h5&#39;</span>, key<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;merged&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Time</th>
      <th>Ride Time</th>
      <th>Ride Time (secs)</th>
      <th>Stopped Time</th>
      <th>Stopped Time (secs)</th>
      <th>Latitude</th>
      <th>Longitude</th>
      <th>Elevation (feet)</th>
      <th>Distance (miles)</th>
      <th>Speed (mph)</th>
      <th>Pace</th>
      <th>Pace (secs)</th>
      <th>Average Speed (mph)</th>
      <th>Average Pace</th>
      <th>Average Pace (secs)</th>
      <th>Ascent (feet)</th>
      <th>Descent (feet)</th>
      <th>Calories</th>
      <th>ride_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-08-01 07:07:10</td>
      <td>2014-09-02 00:00:01</td>
      <td>  1.1</td>
      <td>2014-09-02</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td>2014-09-02 00:20:51</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>2014-09-02 00:00:00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-08-01 07:07:17</td>
      <td>2014-09-02 00:00:08</td>
      <td>  8.2</td>
      <td>2014-09-02</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-09-02 00:20:51</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td>2014-09-02 00:23:27</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-08-01 07:07:22</td>
      <td>2014-09-02 00:00:13</td>
      <td> 13.2</td>
      <td>2014-09-02</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-09-02 00:20:51</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td>2014-09-02 00:26:27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-08-01 07:07:27</td>
      <td>2014-09-02 00:00:18</td>
      <td> 18.2</td>
      <td>2014-09-02</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>2014-09-02 00:09:06</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>2014-09-02 00:12:47</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-08-01 07:07:40</td>
      <td>2014-09-02 00:00:31</td>
      <td> 31.2</td>
      <td>2014-09-02</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>2014-09-02 00:06:19</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>2014-09-02 00:09:26</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
    </tr>
  </tbody>
</table>
</div>
<p>Because of a <a href="https://github.com/pydata/pandas/issues/8189">bug</a> in pandas, we lost our timzone information when we filled in our missing values. Until that&rsquo;s fixed we&rsquo;ll have to manually add back the timezone info and convert.</p>
<p>I like to keep my DataFrame columns as valid python identifiers.
Let&rsquo;s define a helper function to rename the columns. We also have a few redundant columns that we can drop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Ride Time&#39;</span>, <span style="color:#e6db74">&#39;Stopped Time&#39;</span>, <span style="color:#e6db74">&#39;Pace&#39;</span>, <span style="color:#e6db74">&#39;Average Pace&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">renamer</span>(name):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#39;(&#39;</span>, <span style="color:#e6db74">&#39;)&#39;</span>]:
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>replace(char, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>    name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>)
</span></span><span style="display:flex;"><span>    name <span style="color:#f92672">=</span> name<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> name
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>renamer)
</span></span><span style="display:flex;"><span>list(df<span style="color:#f92672">.</span>columns)
</span></span></code></pre></div><pre><code>['time',
 'ride_time_secs',
 'stopped_time_secs',
 'latitude',
 'longitude',
 'elevation_feet',
 'distance_miles',
 'speed_mph',
 'pace_secs',
 'average_speed_mph',
 'average_pace_secs',
 'ascent_feet',
 'descent_feet',
 'calories',
 'ride_id']
</code></pre>
<h3 id="do-you-trust-the-data">Do you trust the data?</h3>
<p>Remember that I needed to manually start and stop the timer each ride, which natuarlly means that I messed this up at least once. Let&rsquo;s see if we can figure out the rides where I messed things up.
The first heuristic we&rsquo;ll use is checking to see if I moved at all.</p>
<p>All of my rides should have take roughly the same about of time. Let&rsquo;s get an idea of how the distribution of ride times look. We&rsquo;ll look at both the ride time and the time I spent stopped.
If I spend a long time in the same place, there&rsquo;s a good chance that I finished my ride and forgot to stop the timer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>time_pal <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>color_palette(n_colors<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Plot it in mintues</span>
</span></span><span style="display:flex;"><span>fig, axes <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(ncols<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># max to get the last observation per ride since we know these are increasing</span>
</span></span><span style="display:flex;"><span>times <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;ride_id&#39;</span>)[[<span style="color:#e6db74">&#39;stopped_time_secs&#39;</span>, <span style="color:#e6db74">&#39;ride_time_secs&#39;</span>]]<span style="color:#f92672">.</span>max()
</span></span><span style="display:flex;"><span>times[<span style="color:#e6db74">&#39;ride_time_secs&#39;</span>]<span style="color:#f92672">.</span>plot(kind<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bar&#39;</span>, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">0</span>], color<span style="color:#f92672">=</span>time_pal[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>axes[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#34;Ride Time&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>times[<span style="color:#e6db74">&#39;stopped_time_secs&#39;</span>]<span style="color:#f92672">.</span>plot(kind<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;bar&#39;</span>, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">1</span>], color<span style="color:#f92672">=</span>time_pal[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>axes[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#34;Stopped Time&#34;</span>)
</span></span></code></pre></div><pre><code>&lt;matplotlib.text.Text at 0x11531f3c8&gt;
</code></pre>
<p><img loading="lazy" src="pp02_files/pp02_7_1.png" alt="png"  />
</p>
<p>Let&rsquo;s dig into that spike in the stopped time. We&rsquo;ll get it&rsquo;s ride id with the <code>Series.argmax</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>idx <span style="color:#f92672">=</span> times<span style="color:#f92672">.</span>stopped_time_secs<span style="color:#f92672">.</span>argmax()
</span></span><span style="display:flex;"><span>long_stop <span style="color:#f92672">=</span> df[df<span style="color:#f92672">.</span>ride_id <span style="color:#f92672">==</span> idx]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> long_stop<span style="color:#f92672">.</span>set_index(<span style="color:#e6db74">&#39;time&#39;</span>)[<span style="color:#e6db74">&#39;distance_miles&#39;</span>]<span style="color:#f92672">.</span>plot()
</span></span><span style="display:flex;"><span>avg_distance <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;ride_id&#39;</span>)<span style="color:#f92672">.</span>distance_miles<span style="color:#f92672">.</span>max()<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#34;Distance (miles)&#34;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>hlines(avg_distance, <span style="color:#f92672">*</span>ax<span style="color:#f92672">.</span>get_xlim())
</span></span></code></pre></div><pre><code>&lt;matplotlib.collections.LineCollection at 0x115004160&gt;
</code></pre>
<p><img loading="lazy" src="pp02_files/pp02_9_1.png" alt="png"  />
</p>
<p>So it looks like I started my timer, sat around for about 15 minutes, and then continued with my normal ride (I verified that by plotting the average distance travelled per ride, and it was right on target).</p>
<p>We can use most of the columns fine, it&rsquo;s just the the <code>time</code> column we need to be careful with. Let&rsquo;s
make an adjusted time column <code>time_adj</code> that accounts for the stopped time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">as_timedelta</span>(x):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> datetime<span style="color:#f92672">.</span>timedelta(<span style="color:#ae81ff">0</span>, x <span style="color:#f92672">//</span> <span style="color:#ae81ff">1</span>, x <span style="color:#f92672">%</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;time_adj&#39;</span>] <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>time <span style="color:#f92672">-</span> df<span style="color:#f92672">.</span>stopped_time_secs<span style="color:#f92672">.</span>apply(as_timedelta)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>time</th>
      <th>ride_time_secs</th>
      <th>stopped_time_secs</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>elevation_feet</th>
      <th>distance_miles</th>
      <th>speed_mph</th>
      <th>pace_secs</th>
      <th>average_speed_mph</th>
      <th>average_pace_secs</th>
      <th>ascent_feet</th>
      <th>descent_feet</th>
      <th>calories</th>
      <th>ride_id</th>
      <th>time_adj</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-08-01 07:07:10</td>
      <td>  1.1</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:10</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-08-01 07:07:17</td>
      <td>  8.2</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:17</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-08-01 07:07:22</td>
      <td> 13.2</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:22</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-08-01 07:07:27</td>
      <td> 18.2</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
      <td>2013-08-01 07:07:27</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-08-01 07:07:40</td>
      <td> 31.2</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
      <td>2013-08-01 07:07:40</td>
    </tr>
  </tbody>
</table>
</div>
<p>When we start using the actual GPS data, we may need to do some smoothing.
These are just readings from my iPhone, which probably aren&rsquo;t that accurate. <a href="http://en.wikipedia.org/wiki/Kalman_filter">Kalman filters</a>, which I learned about in my econometrics class, are commonly used for this purpose.
But I think that&rsquo;s good enough for now.</p>
<h3 id="getting-more-data">Getting More Data</h3>
<p>I&rsquo;m interested in explaining the variation in how long it took me to make the ride.
I hypothesize that the weather may have had something to do with it. We&rsquo;ll fetch data from <a href="http://forecast.io">forecas.io</a> using their <a href="https://developer.forecast.io">API</a> to get the weather conditions at the time of each ride.</p>
<p>I looked at the <a href="https://developer.forecast.io/docs/v2">forecast.io documentation</a>, and noticed that the API will require a timezone. We could proceed in two ways</p>
<ol>
<li>Set <code>df.time</code> to be the index (a DatetimeIndex). Then localize with <code>df.tz_localize</code></li>
<li>Pass <code>df.time</code> through the DatetimeIndex constructor to set the timezone, and set that to be a column in df.</li>
</ol>
<p>Ideally we&rsquo;d go with 1. Pandas has a lot of great additoinal functionality to offer when you have a DatetimeIndex (such as <code>resample</code>).
However, this conflicts with the desire to have a unique index with this specific dataset. The times recorded are at the second frequency, but there are occasionally multiple readings in a second.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># should be 0 if there are no repeats.</span>
</span></span><span style="display:flex;"><span>len(df<span style="color:#f92672">.</span>time) <span style="color:#f92672">-</span> len(df<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>unique())
</span></span></code></pre></div><pre><code>114
</code></pre>
<p>So we&rsquo;ll go with #2, running the <code>time</code> column through the <code>DatetimeIndex</code> constructor, which has a <code>tz</code> (timezone) parameter, and placing that in a &rsquo;time&rsquo; column. I&rsquo;m in the <code>US/Central</code> timezone.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#e6db74">&#39;time&#39;</span>] <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DatetimeIndex(df<span style="color:#f92672">.</span>time, tz<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;US/Central&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>time</th>
      <th>ride_time_secs</th>
      <th>stopped_time_secs</th>
      <th>latitude</th>
      <th>longitude</th>
      <th>elevation_feet</th>
      <th>distance_miles</th>
      <th>speed_mph</th>
      <th>pace_secs</th>
      <th>average_speed_mph</th>
      <th>average_pace_secs</th>
      <th>ascent_feet</th>
      <th>descent_feet</th>
      <th>calories</th>
      <th>ride_id</th>
      <th>time_adj</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2013-08-01 07:07:10-05:00</td>
      <td>  1.1</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:10</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2013-08-01 07:07:17-05:00</td>
      <td>  8.2</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:17</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2013-08-01 07:07:22-05:00</td>
      <td> 13.2</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
      <td>2013-08-01 07:07:22</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2013-08-01 07:07:27-05:00</td>
      <td> 18.2</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
      <td>2013-08-01 07:07:27</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2013-08-01 07:07:40-05:00</td>
      <td> 31.2</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
      <td>2013-08-01 07:07:40</td>
    </tr>
  </tbody>
</table>
</div>
<p>There&rsquo;s nothing specific to pandas here, but knowing the basics of calling an API and parsing the response is still useful.
We&rsquo;ll use <a href="http://docs.python-requests.org/en/latest/">requests</a> to make the
API call. You&rsquo;ll need to register for you own API key. I keep mine in a JSON file in my Dropbox bin folder.</p>
<p>For this specific call we need to give the Latitude, Longitude, and Time that we want the weather for.
We fill in those to a url with the format <code>https://api.forecast.io/forecast/{key}/{Latitude},{Longitude},{Time}</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/Users/tom/Dropbox/bin/api-keys.txt&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    key <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(f)[<span style="color:#e6db74">&#39;forecast.io&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://api.forecast.io/forecast/</span><span style="color:#e6db74">{key}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">{Latitude}</span><span style="color:#e6db74">,</span><span style="color:#e6db74">{Longitude}</span><span style="color:#e6db74">,</span><span style="color:#e6db74">{Time}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vals <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>loc[<span style="color:#ae81ff">0</span>, [<span style="color:#e6db74">&#39;latitude&#39;</span>, <span style="color:#e6db74">&#39;longitude&#39;</span>, <span style="color:#e6db74">&#39;time&#39;</span>]]<span style="color:#f92672">.</span>rename(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>title())<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>vals[<span style="color:#e6db74">&#39;Time&#39;</span>] <span style="color:#f92672">=</span> str(vals[<span style="color:#e6db74">&#39;Time&#39;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;T&#39;</span>)
</span></span><span style="display:flex;"><span>vals[<span style="color:#e6db74">&#39;key&#39;</span>] <span style="color:#f92672">=</span> key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>vals))
</span></span><span style="display:flex;"><span>resp <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>json()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>resp<span style="color:#f92672">.</span>keys()
</span></span></code></pre></div><pre><code>dict_keys(['timezone', 'longitude', 'hourly', 'offset', 'currently', 'daily', 'latitude', 'flags'])
</code></pre>
<p>Here&rsquo;s the plan. For each ride, we&rsquo;ll get the current conditions at the time, latitude, and longitude of departure.
We&rsquo;ll use those values for the entirety of that ride.</p>
<p>I&rsquo;m a bit concerned about the variance of some quantities from the weather data (like the windspeed and bearing). This would be something to look into for a serious analysis. If the quantities are highly variable you would want to take a rolling average over more datapoints. <code>forecast.io</code> limits you to 1,000 API calls per day though (at the free tier), so we&rsquo;ll just stick with one request per ride.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_weather</span>(df, ride_id, key):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Get the current weather conditions for for a ride at the time of departure.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://api.forecast.io/forecast/</span><span style="color:#e6db74">{key}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">{Latitude}</span><span style="color:#e6db74">,</span><span style="color:#e6db74">{Longitude}</span><span style="color:#e6db74">,</span><span style="color:#e6db74">{Time}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    vals <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#34;ride_id == @ride_id&#34;</span>)<span style="color:#f92672">.</span>iloc[<span style="color:#ae81ff">0</span>][[<span style="color:#e6db74">&#39;latitude&#39;</span>,
</span></span><span style="display:flex;"><span>               <span style="color:#e6db74">&#39;longitude&#39;</span>, <span style="color:#e6db74">&#39;time&#39;</span>]]<span style="color:#f92672">.</span>rename(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">.</span>title())<span style="color:#f92672">.</span>to_dict()
</span></span><span style="display:flex;"><span>    vals[<span style="color:#e6db74">&#39;key&#39;</span>] <span style="color:#f92672">=</span> key
</span></span><span style="display:flex;"><span>    vals[<span style="color:#e6db74">&#39;Time&#39;</span>] <span style="color:#f92672">=</span> str(vals[<span style="color:#e6db74">&#39;Time&#39;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;T&#39;</span>)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>vals))
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>json()[<span style="color:#e6db74">&#39;currently&#39;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resp
</span></span></code></pre></div><p>Let&rsquo;s test it out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>get_weather(df, df<span style="color:#f92672">.</span>ride_id<span style="color:#f92672">.</span>unique()[<span style="color:#ae81ff">0</span>], key)
</span></span></code></pre></div><pre><code>{'apparentTemperature': 61.62,
 'precipProbability': 0,
 'summary': 'Clear',
 'cloudCover': 0,
 'windSpeed': 2.77,
 'windBearing': 282,
 'dewPoint': 58.66,
 'pressure': 1017.62,
 'icon': 'clear-day',
 'humidity': 0.9,
 'visibility': 8.89,
 'time': 1375358830,
 'temperature': 61.62,
 'precipIntensity': 0}
</code></pre>
<p>Now do that for each <code>ride_id</code>, and store the result in a DataFrame</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>conditions <span style="color:#f92672">=</span> [get_weather(df, ride_id, key) <span style="color:#66d9ef">for</span> ride_id
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">in</span> df<span style="color:#f92672">.</span>ride_id<span style="color:#f92672">.</span>unique()]
</span></span><span style="display:flex;"><span>weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(conditions)
</span></span><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>Let&rsquo;s fixup the dtype on the <code>time</code> column. We need to convert from the seconds to a datetime.
Then handle the timezone like before. This is returned in &lsquo;UTC&rsquo;, so we&rsquo;ll bring it back to
my local time with <code>.tz_convert</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>weather[<span style="color:#e6db74">&#39;time&#39;</span>] <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DatetimeIndex(pd<span style="color:#f92672">.</span>to_datetime(weather<span style="color:#f92672">.</span>time, unit<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;s&#39;</span>), tz<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTC&#39;</span>)<span style="color:#f92672">.</span>\
</span></span><span style="display:flex;"><span>                     tz_convert(<span style="color:#e6db74">&#39;US/Central&#39;</span>)
</span></span></code></pre></div><p>Now we can merge the two DataFrames <code>weather</code> and <code>df</code>. In this case it&rsquo;s quite simple since the share a single column, <code>time</code>. Pandas behaves exactly as you&rsquo;d expect, merging on the provided column.
We take the <code>outer</code> join since we only have weather information for the first obervation of each ride.
We&rsquo;ll fill those values forward for the entirety of the ride.</p>
<p>I don&rsquo;t just call <code>with_weather.fillna()</code> since the non-weather columns have <code>NaN</code>s that we may want to treat separately.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>with_weather <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(df, weather, on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;time&#39;</span>, how<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;outer&#39;</span>)
</span></span><span style="display:flex;"><span>print(with_weather<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>dtype)
</span></span><span style="display:flex;"><span>with_weather[weather<span style="color:#f92672">.</span>columns] <span style="color:#f92672">=</span> with_weather[weather<span style="color:#f92672">.</span>columns]<span style="color:#f92672">.</span>fillna(method<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;ffill&#39;</span>)
</span></span><span style="display:flex;"><span>print(with_weather<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>dtype)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>with_weather<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>with_weather<span style="color:#f92672">.</span>time<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><p>With that done, let&rsquo;s write <code>with_weather</code> out to disk. We&rsquo;ll get a Performance Warning since some of the columns are text, which are relatively slow for HDF5, but it&rsquo;s not a problem worht worrying about for a dataset this small.
If you needed you could encode the text ones as integers with <code>pd.factorize</code>, write the integers out the the HDF5 store, and store the mapping from integer to text description elsewhere.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>with_weather<span style="color:#f92672">.</span>to_hdf(<span style="color:#e6db74">&#39;data/cycle_store.h5&#39;</span>, key<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;with_weather&#39;</span>, append<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span><span style="display:flex;"><span>weather<span style="color:#f92672">.</span>to_hdf(<span style="color:#e6db74">&#39;data/cycle_store.h5&#39;</span>, key<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;weather&#39;</span>, append<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span></code></pre></div><h3 id="a-bit-of-exploring">A bit of Exploring</h3>
<p>We&rsquo;ve done a lot of data wrangling with a notable lack of pretty pictures to look at. Let&rsquo;s fix that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>puppyplot()
</span></span></code></pre></div><p>For some other (less) pretty pictures, let&rsquo;s visualize some of the weather data we collected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set(style<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;white&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;temperature&#39;</span>, <span style="color:#e6db74">&#39;apparentTemperature&#39;</span>, <span style="color:#e6db74">&#39;humidity&#39;</span>, <span style="color:#e6db74">&#39;dewPoint&#39;</span>, <span style="color:#e6db74">&#39;pressure&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># &#39;pressure&#39;, &#39;windBearing&#39;, &#39;windSpeed&#39;]].reset_index(drop=True))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>PairGrid(weather<span style="color:#f92672">.</span>reset_index()[cols])
</span></span><span style="display:flex;"><span>                          
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map_diag(plt<span style="color:#f92672">.</span>hist)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map_lower(sns<span style="color:#f92672">.</span>kdeplot, cmap<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Blues_d&#34;</span>)
</span></span><span style="display:flex;"><span>g<span style="color:#f92672">.</span>map_upper(plt<span style="color:#f92672">.</span>scatter)
</span></span></code></pre></div><p>Not bad! <a href="http://web.stanford.edu/~mwaskom/software/seaborn/">Seaborn</a> makes exploring these relationships very easy.</p>
<p>Let&rsquo;s also take a look at the wind data. I&rsquo;m not a metorologist, but I saw a plot one time that&rsquo;s like a histogram for wind directions, but plotted on a <a href="http://en.wikipedia.org/wiki/Polar_coordinate_system">polar axis</a> (brings back memories of Calc II). Fortunately for us, matplotlib handles polar plots pretty easily, we just have to setup the
axes and hand it the values as radians.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplot(polar<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_theta_zero_location(<span style="color:#e6db74">&#39;N&#39;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_theta_direction(<span style="color:#e6db74">&#39;clockwise&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bins <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">361</span>, <span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>hist(np<span style="color:#f92672">.</span>radians(weather<span style="color:#f92672">.</span>windBearing<span style="color:#f92672">.</span>dropna()), bins<span style="color:#f92672">=</span>np<span style="color:#f92672">.</span>radians(bins))
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#34;Direction of Wind Origin&#34;</span>)
</span></span></code></pre></div><p><code>windBearing</code> represent the direction the wind is coming <em>from</em> so the most common direction is from the S/SW. It may be clearer to flip that around to represent the wind direction; I&rsquo;m not sure what&rsquo;s standard.</p>
<p>If we were feeling ambitious, we could try to color the wedges by the windspeed. Let&rsquo;s give it a shot!</p>
<p>We&rsquo;ll need to get the average wind speed in each of our <code>bins</code> from above. This is clearly a <code>groupby</code>, but what excatly is the grouper? This is where pandas <code>Catagorical</code> comes in handy. We&rsquo;ll <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html"><code>pd.cut</code></a> the wind direction, and group the wind data by that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>wind <span style="color:#f92672">=</span> weather[[<span style="color:#e6db74">&#39;windSpeed&#39;</span>, <span style="color:#e6db74">&#39;windBearing&#39;</span>]]<span style="color:#f92672">.</span>dropna()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ct <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>cut(wind<span style="color:#f92672">.</span>windBearing, bins)
</span></span><span style="display:flex;"><span>speeds <span style="color:#f92672">=</span> wind<span style="color:#f92672">.</span>groupby(ct)[<span style="color:#e6db74">&#39;windSpeed&#39;</span>]<span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>colors <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>cm<span style="color:#f92672">.</span>BuGn(speeds<span style="color:#f92672">.</span>div(speeds<span style="color:#f92672">.</span>max()))
</span></span></code></pre></div><p>I map the speeds to colors with one of matplotlib&rsquo;s colormaps. It expects values in <code>[0, 1]</code>, so
we normalize the speeds by dividing by the maximum.</p>
<p><code>hist</code> doesn&rsquo;t take a cmap argument, and I couldn&rsquo;t get <code>color</code> to work, so we&rsquo;ll just plot it like before,
and then modify the color of the patches after the fact.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure()
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplot(polar<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_theta_zero_location(<span style="color:#e6db74">&#39;N&#39;</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_theta_direction(<span style="color:#e6db74">&#39;clockwise&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bins <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">360</span>, <span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>hist(np<span style="color:#f92672">.</span>radians(weather<span style="color:#f92672">.</span>windBearing<span style="color:#f92672">.</span>dropna()), bins<span style="color:#f92672">=</span>np<span style="color:#f92672">.</span>radians(bins))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> p, color <span style="color:#f92672">in</span> zip(ax<span style="color:#f92672">.</span>patches, colors):
</span></span><span style="display:flex;"><span>    p<span style="color:#f92672">.</span>set_facecolor(color)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">.</span>set_title(<span style="color:#e6db74">&#34;Direction of Wind Origin&#34;</span>)
</span></span></code></pre></div><p>Colorbars are tricky in matplotlib (at least for me). So I&rsquo;m going to leave it at darker is stronger wind.</p>
<p>That&rsquo;s all for now. Come back next time for some exploratory analysis, and if we&rsquo;re lucky, some maps!</p>
]]></content:encoded></item><item><title>Practical Pandas Part 1 - Reading the Data</title><link>https://tomaugspurger.github.io/posts/pp01/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/pp01/</guid><description>This is the first post in a series where I&amp;rsquo;ll show how I use pandas on real-world datasets.
For this post, we&amp;rsquo;ll look at data I collected with Cyclemeter on my daily bike ride to and from school last year. I had to manually start and stop the tracking at the beginning and end of each ride. There may have been times where I forgot to do that, so we&amp;rsquo;ll see if we can find those.</description><content:encoded><![CDATA[<p>This is the first post in a series where I&rsquo;ll show how I use pandas on real-world datasets.</p>
<p>For this post, we&rsquo;ll look at data I collected with <a href="http://abvio.com/cyclemeter/">Cyclemeter</a> on
my daily bike ride to and from school last year.
I had to manually start and stop the tracking at the beginning and end of each ride. There may
have been times where I forgot to do that, so we&rsquo;ll see if we can find those.</p>
<p>Let&rsquo;s begin in the usual fashion, a bunch of imports and loading our data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> IPython <span style="color:#f92672">import</span> display
</span></span></code></pre></div><p>Each day has data recorded in two formats, CSVs and <a href="https://developers.google.com/kml/">KMLs</a>.
For now I&rsquo;ve just uploaded the CSVs to the <a href="https://github.com/TomAugspurger/PracticalPandas/tree/master/data"><code>data/</code></a> directory.
We&rsquo;ll start with the those, and come back to the KMLs later.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">!</span>ls data <span style="color:#f92672">|</span> head <span style="color:#f92672">-</span>n <span style="color:#ae81ff">5</span>
</span></span></code></pre></div><pre><code>Cyclemeter-Cycle-20130801-0707.csv
Cyclemeter-Cycle-20130801-0707.kml
Cyclemeter-Cycle-20130801-1720.csv
Cyclemeter-Cycle-20130801-1720.kml
Cyclemeter-Cycle-20130805-0819.csv
</code></pre>
<p>Take a look at the first one to see how the file&rsquo;s laid out.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;data/Cyclemeter-Cycle-20130801-0707.csv&#39;</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Time</th>
      <th>Ride Time</th>
      <th>Ride Time (secs)</th>
      <th>Stopped Time</th>
      <th>Stopped Time (secs)</th>
      <th>Latitude</th>
      <th>Longitude</th>
      <th>Elevation (feet)</th>
      <th>Distance (miles)</th>
      <th>Speed (mph)</th>
      <th>Pace</th>
      <th>Pace (secs)</th>
      <th>Average Speed (mph)</th>
      <th>Average Pace</th>
      <th>Average Pace (secs)</th>
      <th>Ascent (feet)</th>
      <th>Descent (feet)</th>
      <th>Calories</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2013-08-01 07:07:10</td>
      <td> 0:00:01</td>
      <td>  1.1</td>
      <td> 0:00:00</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td> 0:20:51</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td> 0:00:00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2013-08-01 07:07:17</td>
      <td> 0:00:08</td>
      <td>  8.2</td>
      <td> 0:00:00</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 0:20:51</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td> 0:23:27</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2013-08-01 07:07:22</td>
      <td> 0:00:13</td>
      <td> 13.2</td>
      <td> 0:00:00</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td> 0:20:51</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td> 0:26:27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2013-08-01 07:07:27</td>
      <td> 0:00:18</td>
      <td> 18.2</td>
      <td> 0:00:00</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td> 0:09:06</td>
      <td>  546</td>
      <td> 4.70</td>
      <td> 0:12:47</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2013-08-01 07:07:40</td>
      <td> 0:00:31</td>
      <td> 31.2</td>
      <td> 0:00:00</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td> 0:06:19</td>
      <td>  379</td>
      <td> 6.37</td>
      <td> 0:09:26</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
    </tr>
  </tbody>
</table>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>info()
</span></span></code></pre></div><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 252 entries, 0 to 251
Data columns (total 18 columns):
Time                   252 non-null object
Ride Time              252 non-null object
Ride Time (secs)       252 non-null float64
Stopped Time           252 non-null object
Stopped Time (secs)    252 non-null float64
Latitude               252 non-null float64
Longitude              252 non-null float64
Elevation (feet)       252 non-null int64
Distance (miles)       252 non-null float64
Speed (mph)            252 non-null float64
Pace                   252 non-null object
Pace (secs)            252 non-null int64
Average Speed (mph)    252 non-null float64
Average Pace           252 non-null object
Average Pace (secs)    252 non-null int64
Ascent (feet)          252 non-null int64
Descent (feet)         252 non-null int64
Calories               252 non-null int64
dtypes: float64(7), int64(6), object(5)
</code></pre>
<p>Pandas has automatically parsed the headers, but it could use a bit of help on some dtypes.
We can see that the <code>Time</code> column is a <code>datetime</code> but it&rsquo;s been parsed as an <code>object</code> dtype.
This is pandas&rsquo; fallback dtype that can store anything, but its operations won&rsquo;t be optimized like
they would on an <code>float</code> or <code>bool</code> or <code>datetime[64]</code>. <code>read_csv</code> takes a <code>parse_dates</code> parameter, which
we&rsquo;ll give a list of column names.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>date_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Time&#34;</span>, <span style="color:#e6db74">&#34;Ride Time&#34;</span>, <span style="color:#e6db74">&#34;Stopped Time&#34;</span>, <span style="color:#e6db74">&#34;Pace&#34;</span>, <span style="color:#e6db74">&#34;Average Pace&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;data/Cyclemeter-Cycle-20130801-0707.csv&#34;</span>,
</span></span><span style="display:flex;"><span>                 parse_dates<span style="color:#f92672">=</span>date_cols)
</span></span><span style="display:flex;"><span>display<span style="color:#f92672">.</span>display_html(df<span style="color:#f92672">.</span>head())
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>info()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Time</th>
      <th>Ride Time</th>
      <th>Ride Time (secs)</th>
      <th>Stopped Time</th>
      <th>Stopped Time (secs)</th>
      <th>Latitude</th>
      <th>Longitude</th>
      <th>Elevation (feet)</th>
      <th>Distance (miles)</th>
      <th>Speed (mph)</th>
      <th>Pace</th>
      <th>Pace (secs)</th>
      <th>Average Speed (mph)</th>
      <th>Average Pace</th>
      <th>Average Pace (secs)</th>
      <th>Ascent (feet)</th>
      <th>Descent (feet)</th>
      <th>Calories</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-08-01 07:07:10</td>
      <td>2014-08-26 00:00:01</td>
      <td>  1.1</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>2014-08-26 00:00:00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-08-01 07:07:17</td>
      <td>2014-08-26 00:00:08</td>
      <td>  8.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td>2014-08-26 00:23:27</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-08-01 07:07:22</td>
      <td>2014-08-26 00:00:13</td>
      <td> 13.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td>2014-08-26 00:26:27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-08-01 07:07:27</td>
      <td>2014-08-26 00:00:18</td>
      <td> 18.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>2014-08-26 00:09:06</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>2014-08-26 00:12:47</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-08-01 07:07:40</td>
      <td>2014-08-26 00:00:31</td>
      <td> 31.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>2014-08-26 00:06:19</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>2014-08-26 00:09:26</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 252 entries, 0 to 251
Data columns (total 18 columns):
Time                   252 non-null datetime64[ns]
Ride Time              252 non-null datetime64[ns]
Ride Time (secs)       252 non-null float64
Stopped Time           252 non-null datetime64[ns]
Stopped Time (secs)    252 non-null float64
Latitude               252 non-null float64
Longitude              252 non-null float64
Elevation (feet)       252 non-null int64
Distance (miles)       252 non-null float64
Speed (mph)            252 non-null float64
Pace                   252 non-null datetime64[ns]
Pace (secs)            252 non-null int64
Average Speed (mph)    252 non-null float64
Average Pace           252 non-null datetime64[ns]
Average Pace (secs)    252 non-null int64
Ascent (feet)          252 non-null int64
Descent (feet)         252 non-null int64
Calories               252 non-null int64
dtypes: datetime64[ns](5), float64(7), int64(6)
</code></pre>
<p>One minor issue is that some of the dates are parsed as <code>datetimes</code> when they&rsquo;re really just <code>times</code>.
We&rsquo;ll take care of that later. Pandas store everything as <code>datetime64</code>. For now we&rsquo;ll keep them as
<code>datetimes</code>, and remember that they&rsquo;re really just <code>times</code>.</p>
<p>Now let&rsquo;s do the same thing, but for all the files.</p>
<p>Use a generator expression to filter down to just csv&rsquo;s that match the simple
condition of having the correct naming style.
I try to use lazy generators instead of lists wherever possible.
In this case the list is so small that it really doesn&rsquo;t matter, but it&rsquo;s
a good habit.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>csvs <span style="color:#f92672">=</span> (f <span style="color:#66d9ef">for</span> f <span style="color:#f92672">in</span> os<span style="color:#f92672">.</span>listdir(<span style="color:#e6db74">&#39;data&#39;</span>) <span style="color:#66d9ef">if</span> f<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;Cyclemeter&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">and</span> f<span style="color:#f92672">.</span>endswith(<span style="color:#e6db74">&#39;.csv&#39;</span>))
</span></span></code></pre></div><p>I see a potential problem: We&rsquo;ll potentailly want to concatenate each csv together
into a single DataFrame. However we&rsquo;ll want to retain some idea of which specific
ride an observation came from. So let&rsquo;s create a <code>ride_id</code> variable, which will
just be an integar ranging from $0 \ldots N$, where $N$ is the number of rides.</p>
<p>Make a simple helper function to do this, and apply it to each csv.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_ride</span>(path_, i):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    read in csv at path, and assign the `ride_id` variable to i.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    date_cols <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Time&#34;</span>, <span style="color:#e6db74">&#34;Ride Time&#34;</span>, <span style="color:#e6db74">&#34;Stopped Time&#34;</span>, <span style="color:#e6db74">&#34;Pace&#34;</span>, <span style="color:#e6db74">&#34;Average Pace&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(path_, parse_dates<span style="color:#f92672">=</span>date_cols)
</span></span><span style="display:flex;"><span>    df[<span style="color:#e6db74">&#39;ride_id&#39;</span>] <span style="color:#f92672">=</span> i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> df
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dfs <span style="color:#f92672">=</span> (read_ride(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;data&#39;</span>, csv), i)
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">for</span> (i, csv) <span style="color:#f92672">in</span> enumerate(csvs))
</span></span></code></pre></div><p>Now concatenate together. The original indicies are meaningless, so we&rsquo;ll ignore them in the concat.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat(dfs, ignore_index<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Time</th>
      <th>Ride Time</th>
      <th>Ride Time (secs)</th>
      <th>Stopped Time</th>
      <th>Stopped Time (secs)</th>
      <th>Latitude</th>
      <th>Longitude</th>
      <th>Elevation (feet)</th>
      <th>Distance (miles)</th>
      <th>Speed (mph)</th>
      <th>Pace</th>
      <th>Pace (secs)</th>
      <th>Average Speed (mph)</th>
      <th>Average Pace</th>
      <th>Average Pace (secs)</th>
      <th>Ascent (feet)</th>
      <th>Descent (feet)</th>
      <th>Calories</th>
      <th>ride_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2013-08-01 07:07:10</td>
      <td>2014-08-26 00:00:01</td>
      <td>  1.1</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703753</td>
      <td>-91.609892</td>
      <td> 963</td>
      <td> 0.00</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 0.00</td>
      <td>2014-08-26 00:00:00</td>
      <td>    0</td>
      <td> 0</td>
      <td>   0</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2013-08-01 07:07:17</td>
      <td>2014-08-26 00:00:08</td>
      <td>  8.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703825</td>
      <td>-91.609835</td>
      <td> 852</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 2.56</td>
      <td>2014-08-26 00:23:27</td>
      <td> 1407</td>
      <td> 0</td>
      <td> 129</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2013-08-01 07:07:22</td>
      <td>2014-08-26 00:00:13</td>
      <td> 13.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703858</td>
      <td>-91.609814</td>
      <td> 789</td>
      <td> 0.01</td>
      <td> 2.88</td>
      <td>2014-08-26 00:20:51</td>
      <td> 1251</td>
      <td> 2.27</td>
      <td>2014-08-26 00:26:27</td>
      <td> 1587</td>
      <td> 0</td>
      <td> 173</td>
      <td> 0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2013-08-01 07:07:27</td>
      <td>2014-08-26 00:00:18</td>
      <td> 18.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.703943</td>
      <td>-91.610090</td>
      <td> 787</td>
      <td> 0.02</td>
      <td> 6.60</td>
      <td>2014-08-26 00:09:06</td>
      <td>  546</td>
      <td> 4.70</td>
      <td>2014-08-26 00:12:47</td>
      <td>  767</td>
      <td> 0</td>
      <td> 173</td>
      <td> 1</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2013-08-01 07:07:40</td>
      <td>2014-08-26 00:00:31</td>
      <td> 31.2</td>
      <td>2014-08-26</td>
      <td> 0</td>
      <td> 41.704381</td>
      <td>-91.610258</td>
      <td> 788</td>
      <td> 0.06</td>
      <td> 9.50</td>
      <td>2014-08-26 00:06:19</td>
      <td>  379</td>
      <td> 6.37</td>
      <td>2014-08-26 00:09:26</td>
      <td>  566</td>
      <td> 0</td>
      <td> 173</td>
      <td> 2</td>
      <td> 0</td>
    </tr>
  </tbody>
</table>
</div>
<p>Great! The data itself is clean enough that we didn&rsquo;t have to do too much munging.</p>
<p>Let&rsquo;s persist the merged <code>DataFrame</code>. Writing it out to a csv would be fine, but I like to use
pandas&rsquo; <code>HDF5</code> integration (via pytables) for personal projects.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df<span style="color:#f92672">.</span>to_hdf(<span style="color:#e6db74">&#39;data/cycle_store.h5&#39;</span>, key<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;merged&#39;</span>,
</span></span><span style="display:flex;"><span>          format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;table&#39;</span>)
</span></span></code></pre></div><p>I used the <code>table</code> format in case we want to do some querying on the HDFStore itself, but we&rsquo;ll save that for next time.</p>
<p>That&rsquo;s it for this post. Next time, we&rsquo;ll do some exploratry data analysis on the data.</p>
]]></content:encoded></item><item><title/><link>https://tomaugspurger.github.io/posts/compat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/compat/</guid><description>Title: Compatibility Code Date: 2019-12-12 Slug: compatibility status: draft
Compatibility Code Most libraries with dependencies will want to support multiple versions of that dependency. But supporting old version is a pain: it requires compatibility code, code that is around solely to get the same output from versions of a library. This post gives some advice on writing compatibility code.
Don&amp;rsquo;t write your own version parser Centralize all version parsing Use consistent version comparisons Use Python&amp;rsquo;s argument unpacking Clean up unused compatibility code 1.</description><content:encoded><![CDATA[<p>Title: Compatibility Code
Date: 2019-12-12
Slug: compatibility
status: draft</p>
<h1 id="compatibility-code">Compatibility Code</h1>
<p>Most libraries with dependencies will want to support multiple versions
of that dependency. But supporting old version is a pain: it requires <em>compatibility code</em>,
code that is around solely to get the same output from versions of a library. This post
gives some advice on writing compatibility code.</p>
<ol>
<li>Don&rsquo;t write your own version parser</li>
<li>Centralize all version parsing</li>
<li>Use consistent version comparisons</li>
<li>Use Python&rsquo;s argument unpacking</li>
<li>Clean up unused compatibility code</li>
</ol>
<h2 id="1-dont-write-your-own-version-parser">1. Don&rsquo;t write your own version parser</h2>
<p>It can be tempting just do something like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> pandas<span style="color:#f92672">.</span>__version__<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#34;25&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span></code></pre></div><p>But that&rsquo;s probably going to break, sometimes in unexpected ways. Use either <code>distutils.version.LooseVersion</code>
or <code>packaging.version.parse</code> which handles all the edge cases.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>PANDAS_VERSION <span style="color:#f92672">=</span> LooseVersion(pandas<span style="color:#f92672">.</span>__version__)
</span></span></code></pre></div><h2 id="2-centralize-all-version-parsing-in-a-_compatpy-file">2. Centralize all version parsing in a <code>_compat.py</code> file</h2>
<p>The first section of compatibility code is typically a version check. It can be tempting
to do the version-check inline with the compatibility code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> LooseVersion(pandas<span style="color:#f92672">.</span>__version__) <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#34;0.25.0&#34;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pandas<span style="color:#f92672">.</span>concat(args, sort<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pandas<span style="color:#f92672">.</span>concat(args)
</span></span></code></pre></div><p>Rather than that, I recommend centralizing the version checks in a central <code>_compat.py</code> file
that defines constants for each library version you need compatibility code for.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># library/_compat.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PANDAS_VERSION <span style="color:#f92672">=</span> LooseVersion(pandas<span style="color:#f92672">.</span>__version__)
</span></span><span style="display:flex;"><span>PANDAS_0240 <span style="color:#f92672">=</span> PANDAS_VERSION <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#34;0.24.0</span>
</span></span><span style="display:flex;"><span>PANDAS_0250 <span style="color:#f92672">=</span> PANDAS_VERSION <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#34;0.25.0</span>
</span></span></code></pre></div><p>This, combined with item 3, will make it easier to clean up your code (see below).</p>
<h2 id="3-use-consistent-version-comparisons">3. Use consistent version comparisons</h2>
<p>Notice that I defined constants for each pandas version, <code>PANDAS_0240</code>,
<code>PANDAS_0250</code>. Those mean &ldquo;the installed version of pandas is at least this
version&rdquo;, since I used the <code>&gt;=</code> comparison. You could instead define constants
like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>PANDAS_LT_0240 <span style="color:#f92672">=</span> PANDAS_VERSION <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#34;0.24.0&#34;</span>
</span></span></code></pre></div><p>That works too, just ensure that you&rsquo;re consistent.</p>
<h2 id="4-use-pythons-argument-unpacking">4. Use Python&rsquo;s argument unpacking</h2>
<p>Python&rsquo;s <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists">argument unpacking</a> helps avoid code duplication when the
signature of a function changes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>    param_grid <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;estimator__alpha&#34;</span>: [<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">10</span>]}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> SK_022:
</span></span><span style="display:flex;"><span>        kwargs <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        kwargs <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;iid&#34;</span>: <span style="color:#66d9ef">False</span>}
</span></span><span style="display:flex;"><span>    gs <span style="color:#f92672">=</span> sklearn<span style="color:#f92672">.</span>model_selection<span style="color:#f92672">.</span>GridSearchCV(clf, param_grid, cv<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, <span style="color:#f92672">**</span>kwargs)
</span></span></code></pre></div><p>Using <code>*args</code>, and <code>**kwargs</code> to pass through version-dependent arguments lets you
have just a single call to the callable when the only difference is the
arguments passed.</p>
<h2 id="5-clean-up-unused-compatibility-code">5. Clean up unused compatibility code</h2>
<p>Actively developed libraries may eventually drop support for old versions
of dependency libraries. At a minimum, this involves removing the old version
from your test matrix and bumping your required version in your dependency list.
But ideally you would also clean up the now-unused compatibility code. The
strategies laid out here intend to make that as easy as possible.</p>
<p>Consider the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># library/core.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ._comapt <span style="color:#f92672">import</span> PANDAS_0250
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(args):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> PANDAS_0250:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> pandas<span style="color:#f92672">.</span>concat(args, sort<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> pandas<span style="color:#f92672">.</span>concat(args)
</span></span></code></pre></div><p>Now suppose it&rsquo;s the future and we want to drop support for pandas older than 0.25.x
Now all the conditions checking <code>if PANDAS_0250</code> are automatically true, so we&rsquo;d</p>
<ol>
<li>Delete <code>PANDAS_0250</code> from <code>_compat.py</code></li>
<li>Remove the import in <code>core.py</code></li>
<li>Remove the <code>if PANDAS_0250</code> check, and always have the True part of that
condition</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># library/core.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(args):
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pandas<span style="color:#f92672">.</span>concat(args, sort<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><p>I acknowledge that <a href="https://matthewrocklin.com/blog/work/2019/06/23/avoid-indirection">indirection can harm readability</a>. In this case
I think it&rsquo;s warranted for actively maintained projects. Using inline version
checks, perhaps with inconsistent comparisons, will make it harder to know when
code is now unused. When integrated over the lifetime of the project, I find the
strategies laid out here more readable.</p>
]]></content:encoded></item><item><title>dplyr and pandas</title><link>https://tomaugspurger.github.io/posts/dplry-pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/dplry-pandas/</guid><description>This notebook compares pandas and dplyr. The comparison is just on syntax (verbage), not performance. Whether you&amp;rsquo;re an R user looking to switch to pandas (or the other way around), I hope this guide will help ease the transition.
We&amp;rsquo;ll work through the introductory dplyr vignette to analyze some flight data.
I&amp;rsquo;m working on a better layout to show the two packages side by side. But for now I&amp;rsquo;m just putting the dplyr code in a comment above each python call.</description><content:encoded><![CDATA[<p>This notebook compares <a href="http://pandas.pydata.org">pandas</a>
and <a href="http://cran.r-project.org/web/packages/dplyr/index.html">dplyr</a>.
The comparison is just on syntax (verbage), not performance. Whether you&rsquo;re an R user looking to switch to pandas (or the other way around), I hope this guide will help ease the transition.</p>
<p>We&rsquo;ll work through the <a href="http://cran.r-project.org/web/packages/dplyr/vignettes/introduction.html">introductory dplyr vignette</a> to analyze some flight data.</p>
<p>I&rsquo;m working on a better layout to show the two packages side by side.
But for now I&rsquo;m just putting the <code>dplyr</code> code in a comment above each python call.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Some prep work to get the data from R and into pandas</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>matplotlib inline
</span></span><span style="display:flex;"><span><span style="color:#f92672">%</span>load_ext rmagic
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> seaborn <span style="color:#66d9ef">as</span> sns
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pd<span style="color:#f92672">.</span>set_option(<span style="color:#e6db74">&#34;display.max_rows&#34;</span>, <span style="color:#ae81ff">5</span>)
</span></span></code></pre></div><pre><code>/Users/tom/Envs/py3/lib/python3.4/site-packages/IPython/extensions/rmagic.py:693: UserWarning: The rmagic extension in IPython is deprecated in favour of rpy2.ipython. If available, that will be loaded instead.
http://rpy.sourceforge.net/
  warnings.warn(&quot;The rmagic extension in IPython is deprecated in favour of &quot;
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#f92672">%%</span>R
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;nycflights13&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">write.csv</span>(flights, <span style="color:#e6db74">&#34;flights.csv&#34;</span>)
</span></span></code></pre></div><h1 id="data-nycflights13">Data: nycflights13</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flights <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#34;flights.csv&#34;</span>, index_col<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># dim(flights)   &lt;--- The R code</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>shape  <span style="color:#75715e"># &lt;--- The python code</span>
</span></span></code></pre></div><pre><code>(336776, 16)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># head(flights)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>head()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 517</td>
      <td> 2</td>
      <td>  830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td> 5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 533</td>
      <td> 4</td>
      <td>  850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td> 5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 542</td>
      <td> 2</td>
      <td>  923</td>
      <td> 33</td>
      <td> AA</td>
      <td> N619AA</td>
      <td> 1141</td>
      <td> JFK</td>
      <td> MIA</td>
      <td> 160</td>
      <td> 1089</td>
      <td> 5</td>
      <td> 42</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 544</td>
      <td>-1</td>
      <td> 1004</td>
      <td>-18</td>
      <td> B6</td>
      <td> N804JB</td>
      <td>  725</td>
      <td> JFK</td>
      <td> BQN</td>
      <td> 183</td>
      <td> 1576</td>
      <td> 5</td>
      <td> 44</td>
    </tr>
    <tr>
      <th>5</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 554</td>
      <td>-6</td>
      <td>  812</td>
      <td>-25</td>
      <td> DL</td>
      <td> N668DN</td>
      <td>  461</td>
      <td> LGA</td>
      <td> ATL</td>
      <td> 116</td>
      <td>  762</td>
      <td> 5</td>
      <td> 54</td>
    </tr>
  </tbody>
</table>
</div>
<h1 id="single-table-verbs">Single table verbs</h1>
<p><code>dplyr</code> has a small set of nicely defined verbs. I&rsquo;ve listed their closest pandas verbs.</p>
<table>
  <tr>
    <td><b>dplyr</b></td>
    <td><b>pandas</b></td>
  </tr>
  <tr>
    <td>filter() (and slice())</td>
    <td>query() (and loc[], iloc[])</td>
  </tr>
  <tr>
    <td>arrange()</td>
    <td>sort()</td>
  </tr>
  <tr>
  <td>select() (and rename())</td>
    <td>\_\_getitem\_\_ (and rename())</td>
  </tr>
  <tr>
  <td>distinct()</td>
    <td>drop_duplicates()</td>
  </tr>
  <tr>
    <td>mutate() (and transmute())</td>
    <td>None</td>
  </tr>
  <tr>
    <td>summarise()</td>
    <td>None</td>
  </tr>
  <tr>
    <td>sample_n() and sample_frac()</td>
    <td>None</td>
  </tr>
</table>
<p>Some of the &ldquo;missing&rdquo; verbs in pandas are because there are other, different ways of achieving the same goal. For example <code>summarise</code> is spread across <code>mean</code>, <code>std</code>, etc. Others, like <code>sample_n</code>, just haven&rsquo;t been implemented yet.</p>
<h1 id="filter-rows-with-filter-query">Filter rows with filter(), query()</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># filter(flights, month == 1, day == 1)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#34;month == 1 &amp; day == 1&#34;</span>)
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1  </th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2  </th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>841</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> AA</td>
      <td> N3EVAA</td>
      <td> 1925</td>
      <td> LGA</td>
      <td> MIA</td>
      <td> NaN</td>
      <td> 1096</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>842</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> B6</td>
      <td> N618JB</td>
      <td>  125</td>
      <td> JFK</td>
      <td> FLL</td>
      <td> NaN</td>
      <td> 1069</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>842 rows × 16 columns</p>
</div>
<p>The more verbose version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># flights[flights$month == 1 &amp; flights$day == 1, ]</span>
</span></span><span style="display:flex;"><span>flights[(flights<span style="color:#f92672">.</span>month <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">&amp;</span> (flights<span style="color:#f92672">.</span>day <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1  </th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2  </th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>841</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> AA</td>
      <td> N3EVAA</td>
      <td> 1925</td>
      <td> LGA</td>
      <td> MIA</td>
      <td> NaN</td>
      <td> 1096</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>842</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> B6</td>
      <td> N618JB</td>
      <td>  125</td>
      <td> JFK</td>
      <td> FLL</td>
      <td> NaN</td>
      <td> 1069</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>842 rows × 16 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># slice(flights, 1:10)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>iloc[:<span style="color:#ae81ff">9</span>]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 517</td>
      <td> 2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td> 5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 533</td>
      <td> 4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td> 5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>8</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 557</td>
      <td>-3</td>
      <td> 709</td>
      <td>-14</td>
      <td> EV</td>
      <td> N829AS</td>
      <td> 5708</td>
      <td> LGA</td>
      <td> IAD</td>
      <td>  53</td>
      <td>  229</td>
      <td> 5</td>
      <td> 57</td>
    </tr>
    <tr>
      <th>9</th>
      <td> 2013</td>
      <td> 1</td>
      <td> 1</td>
      <td> 557</td>
      <td>-3</td>
      <td> 838</td>
      <td> -8</td>
      <td> B6</td>
      <td> N593JB</td>
      <td>   79</td>
      <td> JFK</td>
      <td> MCO</td>
      <td> 140</td>
      <td>  944</td>
      <td> 5</td>
      <td> 57</td>
    </tr>
  </tbody>
</table>
<p>9 rows × 16 columns</p>
</div>
<h1 id="arrange-rows-with-arrange-sort">Arrange rows with arrange(), sort()</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># arrange(flights, year, month, day) </span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>sort([<span style="color:#e6db74">&#39;year&#39;</span>, <span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;day&#39;</span>])
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> 2013</td>
      <td>  1</td>
      <td>  1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 2013</td>
      <td>  1</td>
      <td>  1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>111295</th>
      <td> 2013</td>
      <td> 12</td>
      <td> 31</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> UA</td>
      <td>    NaN</td>
      <td>  219</td>
      <td> EWR</td>
      <td> ORD</td>
      <td> NaN</td>
      <td>  719</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>111296</th>
      <td> 2013</td>
      <td> 12</td>
      <td> 31</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> UA</td>
      <td>    NaN</td>
      <td>  443</td>
      <td> JFK</td>
      <td> LAX</td>
      <td> NaN</td>
      <td> 2475</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 16 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># arrange(flights, desc(arr_delay))</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>sort(<span style="color:#e6db74">&#39;arr_delay&#39;</span>, ascending<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>7073  </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  9</td>
      <td>  641</td>
      <td> 1301</td>
      <td> 1242</td>
      <td> 1272</td>
      <td> HA</td>
      <td> N384HA</td>
      <td>   51</td>
      <td> JFK</td>
      <td> HNL</td>
      <td> 640</td>
      <td> 4983</td>
      <td>  6</td>
      <td> 41</td>
    </tr>
    <tr>
      <th>235779</th>
      <td> 2013</td>
      <td> 6</td>
      <td> 15</td>
      <td> 1432</td>
      <td> 1137</td>
      <td> 1607</td>
      <td> 1127</td>
      <td> MQ</td>
      <td> N504MQ</td>
      <td> 3535</td>
      <td> JFK</td>
      <td> CMH</td>
      <td>  74</td>
      <td>  483</td>
      <td> 14</td>
      <td> 32</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td> MQ</td>
      <td> N511MQ</td>
      <td> 3572</td>
      <td> LGA</td>
      <td> CLE</td>
      <td> NaN</td>
      <td>  419</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>336776</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td>  NaN</td>
      <td> MQ</td>
      <td> N839MQ</td>
      <td> 3531</td>
      <td> LGA</td>
      <td> RDU</td>
      <td> NaN</td>
      <td>  431</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 16 columns</p>
</div>
<h1 id="select-columns-with-select-">Select columns with select(), []</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># select(flights, year, month, day) </span>
</span></span><span style="display:flex;"><span>flights[[<span style="color:#e6db74">&#39;year&#39;</span>, <span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;day&#39;</span>]]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
    </tr>
    <tr>
      <th>336776</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 3 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># select(flights, year:day) </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># No real equivalent here. Although I think this is OK.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Typically I&#39;ll have the columns I want stored in a list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># somewhere, which can be passed right into __getitem__ ([]).</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># select(flights, -(year:day)) </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Again, simliar story. I would just use</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flights.drop(cols_to_drop, axis=1)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or fligths[flights.columns.difference(pd.Index(cols_to_drop))]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># point to dplyr!</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># select(flights, tail_num = tailnum)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;tailnum&#39;</span>: <span style="color:#e6db74">&#39;tail_num&#39;</span>})[<span style="color:#e6db74">&#39;tail_num&#39;</span>]
</span></span></code></pre></div><pre><code>1    N14228
...
336776    N839MQ
Name: tail_num, Length: 336776, dtype: object
</code></pre>
<p>But like Hadley mentions, not that useful since it only returns the one column. <code>dplyr</code> and <code>pandas</code> compare well here.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># rename(flights, tail_num = tailnum)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;tailnum&#39;</span>: <span style="color:#e6db74">&#39;tail_num&#39;</span>})
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tail_num</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N511MQ</td>
      <td> 3572</td>
      <td> LGA</td>
      <td> CLE</td>
      <td> NaN</td>
      <td>  419</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>336776</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N839MQ</td>
      <td> 3531</td>
      <td> LGA</td>
      <td> RDU</td>
      <td> NaN</td>
      <td>  431</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 16 columns</p>
</div>
<p>Pandas is more verbose, but the the argument to <code>columns</code> can be any mapping. So it&rsquo;s often used with a function to perform a common task, say <code>df.rename(columns=lambda x: x.replace('-', '_'))</code> to replace any dashes with underscores. Also, <code>rename</code> (the pandas version) can be applied to the Index.</p>
<h1 id="extract-distinct-unique-rows">Extract distinct (unique) rows</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># distinct(select(flights, tailnum))</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>tailnum<span style="color:#f92672">.</span>unique()
</span></span></code></pre></div><pre><code>array(['N14228', 'N24211', 'N619AA', ..., 'N776SK', 'N785SK', 'N557AS'], dtype=object)
</code></pre>
<p>FYI this returns a numpy array instead of a Series.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># distinct(select(flights, origin, dest))</span>
</span></span><span style="display:flex;"><span>flights[[<span style="color:#e6db74">&#39;origin&#39;</span>, <span style="color:#e6db74">&#39;dest&#39;</span>]]<span style="color:#f92672">.</span>drop_duplicates()
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>origin</th>
      <th>dest</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> EWR</td>
      <td> IAH</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> LGA</td>
      <td> IAH</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>255456</th>
      <td> EWR</td>
      <td> ANC</td>
    </tr>
    <tr>
      <th>275946</th>
      <td> EWR</td>
      <td> LGA</td>
    </tr>
  </tbody>
</table>
<p>224 rows × 2 columns</p>
</div>
<p>OK, so <code>dplyr</code> wins there from a consistency point of view. <code>unique</code> is only defined on Series, not DataFrames. The original intention for <code>drop_duplicates</code> is to check for records that were accidentally included twice. This feels a bit hacky using it to select the distinct combinations, but it works!</p>
<h1 id="add-new-columns-with-mutate">Add new columns with mutate()</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># mutate(flights,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   gain = arr_delay - dep_delay,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   speed = distance / air_time * 60)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;gain&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>arr_delay <span style="color:#f92672">-</span> flights<span style="color:#f92672">.</span>dep_delay
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;speed&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>distance <span style="color:#f92672">/</span> flights<span style="color:#f92672">.</span>air_time <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span>
</span></span><span style="display:flex;"><span>flights
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
      <th>gain</th>
      <th>speed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
      <td>  9</td>
      <td> 370.044053</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
      <td> 16</td>
      <td> 374.273128</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N511MQ</td>
      <td> 3572</td>
      <td> LGA</td>
      <td> CLE</td>
      <td> NaN</td>
      <td>  419</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>        NaN</td>
    </tr>
    <tr>
      <th>336776</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N839MQ</td>
      <td> 3531</td>
      <td> LGA</td>
      <td> RDU</td>
      <td> NaN</td>
      <td>  431</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>        NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 18 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># mutate(flights,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   gain = arr_delay - dep_delay,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   gain_per_hour = gain / (air_time / 60)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># )</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;gain&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>arr_delay <span style="color:#f92672">-</span> flights<span style="color:#f92672">.</span>dep_delay
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;gain_per_hour&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>gain <span style="color:#f92672">/</span> (flights<span style="color:#f92672">.</span>air_time <span style="color:#f92672">/</span> <span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>flights
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
      <th>gain</th>
      <th>speed</th>
      <th>gain_per_hour</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 517</td>
      <td>  2</td>
      <td> 830</td>
      <td> 11</td>
      <td> UA</td>
      <td> N14228</td>
      <td> 1545</td>
      <td> EWR</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1400</td>
      <td>  5</td>
      <td> 17</td>
      <td>  9</td>
      <td> 370.044053</td>
      <td> 2.378855</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 2013</td>
      <td> 1</td>
      <td>  1</td>
      <td> 533</td>
      <td>  4</td>
      <td> 850</td>
      <td> 20</td>
      <td> UA</td>
      <td> N24211</td>
      <td> 1714</td>
      <td> LGA</td>
      <td> IAH</td>
      <td> 227</td>
      <td> 1416</td>
      <td>  5</td>
      <td> 33</td>
      <td> 16</td>
      <td> 374.273128</td>
      <td> 4.229075</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N511MQ</td>
      <td> 3572</td>
      <td> LGA</td>
      <td> CLE</td>
      <td> NaN</td>
      <td>  419</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>        NaN</td>
      <td>      NaN</td>
    </tr>
    <tr>
      <th>336776</th>
      <td> 2013</td>
      <td> 9</td>
      <td> 30</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> NaN</td>
      <td>NaN</td>
      <td> MQ</td>
      <td> N839MQ</td>
      <td> 3531</td>
      <td> LGA</td>
      <td> RDU</td>
      <td> NaN</td>
      <td>  431</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>        NaN</td>
      <td>      NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 19 columns</p>
</div>
<p><code>dplyr's</code> approach may be nicer here since you get to refer to the variables in subsequent statements within the <code>mutate()</code>. To achieve this with pandas, you have to add the <code>gain</code> variable as another column in <code>flights</code>. If I don&rsquo;t want it around I would have to explicitly drop it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># transmute(flights,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   gain = arr_delay - dep_delay,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   gain_per_hour = gain / (air_time / 60)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># )</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;gain&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>arr_delay <span style="color:#f92672">-</span> flights<span style="color:#f92672">.</span>dep_delay
</span></span><span style="display:flex;"><span>flights[<span style="color:#e6db74">&#39;gain_per_hour&#39;</span>] <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>gain <span style="color:#f92672">/</span> (flights<span style="color:#f92672">.</span>air_time <span style="color:#f92672">/</span> <span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>flights[[<span style="color:#e6db74">&#39;gain&#39;</span>, <span style="color:#e6db74">&#39;gain_per_hour&#39;</span>]]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>gain</th>
      <th>gain_per_hour</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1     </th>
      <td>  9</td>
      <td> 2.378855</td>
    </tr>
    <tr>
      <th>2     </th>
      <td> 16</td>
      <td> 4.229075</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>336775</th>
      <td>NaN</td>
      <td>      NaN</td>
    </tr>
    <tr>
      <th>336776</th>
      <td>NaN</td>
      <td>      NaN</td>
    </tr>
  </tbody>
</table>
<p>336776 rows × 2 columns</p>
</div>
<h1 id="summarise-values-with-summarise">Summarise values with summarise()</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>dep_delay<span style="color:#f92672">.</span>mean()
</span></span></code></pre></div><pre><code>12.639070257304708
</code></pre>
<h1 id="randomly-sample-rows-with-sample_n-and-sample_frac">Randomly sample rows with sample_n() and sample_frac()</h1>
<p>There&rsquo;s an open PR on <a href="https://github.com/pydata/pandas/pull/7274">Github</a> to make this nicer (closer to <code>dplyr</code>). For now you can drop down to numpy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># sample_n(flights, 10)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>loc[np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>choice(flights<span style="color:#f92672">.</span>index, <span style="color:#ae81ff">10</span>)]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
      <th>gain</th>
      <th>speed</th>
      <th>gain_per_hour</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>316903</th>
      <td> 2013</td>
      <td>  9</td>
      <td>  9</td>
      <td> 1539</td>
      <td>-6</td>
      <td> 1650</td>
      <td>-43</td>
      <td> 9E</td>
      <td> N918XJ</td>
      <td> 3459</td>
      <td> JFK</td>
      <td> BNA</td>
      <td>  98</td>
      <td> 765</td>
      <td> 15</td>
      <td> 39</td>
      <td>-37</td>
      <td> 468.367347</td>
      <td>-22.653061</td>
    </tr>
    <tr>
      <th>105369</th>
      <td> 2013</td>
      <td> 12</td>
      <td> 25</td>
      <td>  905</td>
      <td> 0</td>
      <td> 1126</td>
      <td> -7</td>
      <td> FL</td>
      <td> N939AT</td>
      <td>  275</td>
      <td> LGA</td>
      <td> ATL</td>
      <td> 117</td>
      <td> 762</td>
      <td>  9</td>
      <td>  5</td>
      <td> -7</td>
      <td> 390.769231</td>
      <td> -3.589744</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>82862 </th>
      <td> 2013</td>
      <td> 11</td>
      <td> 30</td>
      <td> 1627</td>
      <td>-8</td>
      <td> 1750</td>
      <td>-35</td>
      <td> AA</td>
      <td> N4XRAA</td>
      <td>  343</td>
      <td> LGA</td>
      <td> ORD</td>
      <td> 111</td>
      <td> 733</td>
      <td> 16</td>
      <td> 27</td>
      <td>-27</td>
      <td> 396.216216</td>
      <td>-14.594595</td>
    </tr>
    <tr>
      <th>190653</th>
      <td> 2013</td>
      <td>  4</td>
      <td> 28</td>
      <td>  748</td>
      <td>-7</td>
      <td>  856</td>
      <td>-24</td>
      <td> MQ</td>
      <td> N520MQ</td>
      <td> 3737</td>
      <td> EWR</td>
      <td> ORD</td>
      <td> 107</td>
      <td> 719</td>
      <td>  7</td>
      <td> 48</td>
      <td>-17</td>
      <td> 403.177570</td>
      <td> -9.532710</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 19 columns</p>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># sample_frac(flights, 0.01)</span>
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>iloc[np<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, len(flights),
</span></span><span style="display:flex;"><span>                               <span style="color:#ae81ff">.1</span> <span style="color:#f92672">*</span> len(flights))]
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th>dep_time</th>
      <th>dep_delay</th>
      <th>arr_time</th>
      <th>arr_delay</th>
      <th>carrier</th>
      <th>tailnum</th>
      <th>flight</th>
      <th>origin</th>
      <th>dest</th>
      <th>air_time</th>
      <th>distance</th>
      <th>hour</th>
      <th>minute</th>
      <th>gain</th>
      <th>speed</th>
      <th>gain_per_hour</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>188581</th>
      <td> 2013</td>
      <td>  4</td>
      <td> 25</td>
      <td> 1836</td>
      <td> -4</td>
      <td> 2145</td>
      <td> 7</td>
      <td> DL</td>
      <td> N398DA</td>
      <td> 1629</td>
      <td> JFK</td>
      <td> LAS</td>
      <td> 313</td>
      <td> 2248</td>
      <td> 18</td>
      <td> 36</td>
      <td> 11</td>
      <td> 430.926518</td>
      <td>  2.108626</td>
    </tr>
    <tr>
      <th>307015</th>
      <td> 2013</td>
      <td>  8</td>
      <td> 29</td>
      <td> 1258</td>
      <td>  5</td>
      <td> 1409</td>
      <td>-4</td>
      <td> EV</td>
      <td> N12957</td>
      <td> 6054</td>
      <td> EWR</td>
      <td> IAD</td>
      <td>  46</td>
      <td>  212</td>
      <td> 12</td>
      <td> 58</td>
      <td> -9</td>
      <td> 276.521739</td>
      <td>-11.739130</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>286563</th>
      <td> 2013</td>
      <td>  8</td>
      <td>  7</td>
      <td> 2126</td>
      <td> 18</td>
      <td>    6</td>
      <td> 7</td>
      <td> UA</td>
      <td> N822UA</td>
      <td>  373</td>
      <td> EWR</td>
      <td> PBI</td>
      <td> 138</td>
      <td> 1023</td>
      <td> 21</td>
      <td> 26</td>
      <td>-11</td>
      <td> 444.782609</td>
      <td> -4.782609</td>
    </tr>
    <tr>
      <th>62818 </th>
      <td> 2013</td>
      <td> 11</td>
      <td>  8</td>
      <td> 1300</td>
      <td>  0</td>
      <td> 1615</td>
      <td> 5</td>
      <td> VX</td>
      <td> N636VA</td>
      <td>  411</td>
      <td> JFK</td>
      <td> LAX</td>
      <td> 349</td>
      <td> 2475</td>
      <td> 13</td>
      <td>  0</td>
      <td>  5</td>
      <td> 425.501433</td>
      <td>  0.859599</td>
    </tr>
  </tbody>
</table>
<p>33677 rows × 19 columns</p>
</div>
<h1 id="grouped-operations">Grouped operations</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># planes &lt;- group_by(flights, tailnum)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># delay &lt;- summarise(planes,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   count = n(),</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   dist = mean(distance, na.rm = TRUE),</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   delay = mean(arr_delay, na.rm = TRUE))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># delay &lt;- filter(delay, count &gt; 20, dist &lt; 2000)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>planes <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#34;tailnum&#34;</span>)
</span></span><span style="display:flex;"><span>delay <span style="color:#f92672">=</span> planes<span style="color:#f92672">.</span>agg({<span style="color:#e6db74">&#34;year&#34;</span>: <span style="color:#e6db74">&#34;count&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;distance&#34;</span>: <span style="color:#e6db74">&#34;mean&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;arr_delay&#34;</span>: <span style="color:#e6db74">&#34;mean&#34;</span>})
</span></span><span style="display:flex;"><span>delay<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#34;year &gt; 20 &amp; distance &lt; 2000&#34;</span>)
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>arr_delay</th>
      <th>distance</th>
    </tr>
    <tr>
      <th>tailnum</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>N0EGMQ</th>
      <td> 371</td>
      <td>  9.982955</td>
      <td> 676.188679</td>
    </tr>
    <tr>
      <th>N10156</th>
      <td> 153</td>
      <td> 12.717241</td>
      <td> 757.947712</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>N999DN</th>
      <td>  61</td>
      <td> 14.311475</td>
      <td> 895.459016</td>
    </tr>
    <tr>
      <th>N9EAMQ</th>
      <td> 248</td>
      <td>  9.235294</td>
      <td> 674.665323</td>
    </tr>
  </tbody>
</table>
<p>2961 rows × 3 columns</p>
</div>
<p>For me, dplyr&rsquo;s <code>n()</code> looked is a bit starge at first, but it&rsquo;s already growing on me.</p>
<p>I think pandas is more difficult for this particular example.
There isn&rsquo;t as natural a way to mix column-agnostic aggregations (like <code>count</code>) with column-specific aggregations like the other two. You end up writing could like <code>.agg{'year': 'count'}</code> which reads, &ldquo;I want the count of <code>year</code>&rdquo;, even though you don&rsquo;t care about <code>year</code> specifically.
Additionally assigning names can&rsquo;t be done as cleanly in pandas; you have to just follow it up with a <code>rename</code> like before.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># destinations &lt;- group_by(flights, dest)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># summarise(destinations,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   planes = n_distinct(tailnum),</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   flights = n()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># )</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>destinations <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;dest&#39;</span>)
</span></span><span style="display:flex;"><span>destinations<span style="color:#f92672">.</span>agg({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;tailnum&#39;</span>: <span style="color:#66d9ef">lambda</span> x: len(x<span style="color:#f92672">.</span>unique()),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;year&#39;</span>: <span style="color:#e6db74">&#39;count&#39;</span>
</span></span><span style="display:flex;"><span>    })<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;tailnum&#39;</span>: <span style="color:#e6db74">&#39;planes&#39;</span>,
</span></span><span style="display:flex;"><span>                       <span style="color:#e6db74">&#39;year&#39;</span>: <span style="color:#e6db74">&#39;flights&#39;</span>})
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>flights</th>
      <th>planes</th>
    </tr>
    <tr>
      <th>dest</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>ABQ</th>
      <td>  254</td>
      <td> 108</td>
    </tr>
    <tr>
      <th>ACK</th>
      <td>  265</td>
      <td>  58</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>TYS</th>
      <td>  631</td>
      <td> 273</td>
    </tr>
    <tr>
      <th>XNA</th>
      <td> 1036</td>
      <td> 176</td>
    </tr>
  </tbody>
</table>
<p>105 rows × 2 columns</p>
</div>
<p>Similar to how <code>dplyr</code> provides optimized C++ versions of most of the <code>summarise</code> functions, pandas uses <a href="http://cython.org">cython</a> optimized versions for most of the <code>agg</code> methods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># daily &lt;- group_by(flights, year, month, day)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (per_day   &lt;- summarise(daily, flights = n()))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>daily <span style="color:#f92672">=</span> flights<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;year&#39;</span>, <span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;day&#39;</span>])
</span></span><span style="display:flex;"><span>per_day <span style="color:#f92672">=</span> daily[<span style="color:#e6db74">&#39;distance&#39;</span>]<span style="color:#f92672">.</span>count()
</span></span><span style="display:flex;"><span>per_day
</span></span></code></pre></div><pre><code>year  month  day
2013  1      1      842
...
2013  12     31     776
Name: distance, Length: 365, dtype: int64
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># (per_month &lt;- summarise(per_day, flights = sum(flights)))</span>
</span></span><span style="display:flex;"><span>per_month <span style="color:#f92672">=</span> per_day<span style="color:#f92672">.</span>groupby(level<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;year&#39;</span>, <span style="color:#e6db74">&#39;month&#39;</span>])<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>per_month
</span></span></code></pre></div><pre><code>year  month
2013  1        27004
...
2013  12       28135
Name: distance, Length: 12, dtype: int64
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># (per_year  &lt;- summarise(per_month, flights = sum(flights)))</span>
</span></span><span style="display:flex;"><span>per_year <span style="color:#f92672">=</span> per_month<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>per_year
</span></span></code></pre></div><pre><code>336776
</code></pre>
<p>I&rsquo;m not sure how <code>dplyr</code> is handling the other columns, like <code>year</code>, in the last example. With pandas, it&rsquo;s clear that we&rsquo;re grouping by them since they&rsquo;re included in the groupby. For the last example, we didn&rsquo;t group by anything, so they aren&rsquo;t included in the result.</p>
<h1 id="chaining">Chaining</h1>
<p>Any follower of Hadley&rsquo;s <a href="https://twitter.com/hadleywickham/">twitter account</a> will know how much R users <em>love</em> the <code>%&gt;%</code> (pipe) operator. And for good reason!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># flights %&gt;%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   group_by(year, month, day) %&gt;%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   select(arr_delay, dep_delay) %&gt;%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   summarise(</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     arr = mean(arr_delay, na.rm = TRUE),</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#     dep = mean(dep_delay, na.rm = TRUE)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   ) %&gt;%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   filter(arr &gt; 30 | dep &gt; 30)</span>
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>flights<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;year&#39;</span>, <span style="color:#e6db74">&#39;month&#39;</span>, <span style="color:#e6db74">&#39;day&#39;</span>])
</span></span><span style="display:flex;"><span>    [[<span style="color:#e6db74">&#39;arr_delay&#39;</span>, <span style="color:#e6db74">&#39;dep_delay&#39;</span>]]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>mean()
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;arr_delay &gt; 30 | dep_delay &gt; 30&#39;</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th></th>
      <th>arr_delay</th>
      <th>dep_delay</th>
    </tr>
    <tr>
      <th>year</th>
      <th>month</th>
      <th>day</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="5" valign="top">2013</th>
      <th rowspan="2" valign="top">1 </th>
      <th>16</th>
      <td> 34.247362</td>
      <td> 24.612865</td>
    </tr>
    <tr>
      <th>31</th>
      <td> 32.602854</td>
      <td> 28.658363</td>
    </tr>
    <tr>
      <th>1 </th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">12</th>
      <th>17</th>
      <td> 55.871856</td>
      <td> 40.705602</td>
    </tr>
    <tr>
      <th>23</th>
      <td> 32.226042</td>
      <td> 32.254149</td>
    </tr>
  </tbody>
</table>
<p>49 rows × 2 columns</p>
</div>
<h1 id="other-data-sources">Other Data Sources</h1>
<p>Pandas has tons <a href="http://pandas.pydata.org/pandas-docs/version/0.15.0/io.html">IO tools</a> to help you get data in and out, including SQL databases via <a href="http://www.sqlalchemy.org">SQLAlchemy</a>.</p>
<h1 id="summary">Summary</h1>
<p>I think pandas held up pretty well, considering this was a vignette written for dplyr. I found the degree of similarity more interesting than the differences. The most difficult task was renaming of columns within an operation; they had to be followed up with a call to <code>rename</code> <em>after</em> the operation, which isn&rsquo;t that burdensome honestly.</p>
<p>More and more it looks like we&rsquo;re moving towards future where being a language or package partisan just doesn&rsquo;t make sense. Not when you can load up a <a href="http://jupyter.org">Jupyter</a> (formerly IPython) notebook to call up a library written in R, and hand those results off to python or Julia or whatever for followup, before going back to R to make a cool <a href="http://shiny.rstudio.com">shiny</a> web app.</p>
<p>There will always be a place for your &ldquo;utility belt&rdquo; package like dplyr or pandas, but it wouldn&rsquo;t hurt to be familiar with both.</p>
<p>If you want to contribute to pandas, we&rsquo;re always looking for help at <a href="https://github.com/pydata/pandas/">https://github.com/pydata/pandas/</a>.
You can get ahold of me directly on <a href="https://twitter.com/tomaugspurger">twitter</a>.</p>
]]></content:encoded></item><item><title>Organizing Papers</title><link>https://tomaugspurger.github.io/posts/organizing-papers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/organizing-papers/</guid><description>As a graduate student, you read a lot of journal articles&amp;hellip; a lot. With the material in the articles being as difficult as it is, I didn&amp;rsquo;t want to worry about organizing everything as well. That&amp;rsquo;s why I wrote this script to help (I may have also been procrastinating from studying for my qualifiers). This was one of my earliest little projects, so I&amp;rsquo;m not claiming that this is the best way to do anything.</description><content:encoded><![CDATA[<p>As a graduate student, you read a lot of journal articles&hellip; <em>a lot</em>.
With the material in the articles being as difficult as it is, I didn&rsquo;t want to worry about organizing everything as well.
That&rsquo;s why I wrote <a href="https://gist.github.com/TomAugspurger/8976751">this script</a> to help (I may have also been procrastinating from studying for my qualifiers). This was one of my earliest little projects, so I&rsquo;m not claiming that this is the best way to do anything.</p>
<p>My goal was to have a central repository of papers that was organized by an author&rsquo;s last name. Under each author&rsquo;s name would go all of their papers I had read or planned to read.
I needed it to be portable so that I could access any paper from my computer or iPad, so Dropbox was a necessity. I also needed to organize the papers by subject. I wanted to easily get to all the papers on Asset Pricing, without having to go through each of the authors separately.
<a href="http://en.wikipedia.org/wiki/Symbolic_link">Symbolic links</a> were a natural solution to my problem.
A canonical copy of each paper would be stored under <code>/Drobox/Papers/&lt;author name&gt;</code>, and I could refer that paper from <code>/Macro/Asset Pricing/</code> with a symbolic link. Symbolic links avoid the problem of having multiple copies of the same paper. Any highlighting or notes I make on a paper is automatically spread to anywhere that paper is linked from.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> subprocess
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pathlib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Parser</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, path,
</span></span><span style="display:flex;"><span>                 repo<span style="color:#f92672">=</span>pathlib<span style="color:#f92672">.</span>PosixPath(<span style="color:#e6db74">&#39;/Users/tom/Economics/Papers&#39;</span>)):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>repo <span style="color:#f92672">=</span> repo
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>path <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>path_parse(path)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>exists <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>check_existance(self<span style="color:#f92672">.</span>path)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>is_full <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>check_full(path)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>check_type(self<span style="color:#f92672">.</span>path)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>added <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">path_parse</span>(self, path):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Ensures a common point of entry to the functions.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns a pathlib.PosixPath object
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> isinstance(path, pathlib<span style="color:#f92672">.</span>PosixPath):
</span></span><span style="display:flex;"><span>            path <span style="color:#f92672">=</span> pathlib<span style="color:#f92672">.</span>PosixPath(path)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> path
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_existance</span>(self, path):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> path<span style="color:#f92672">.</span>exists():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">OSError</span>(<span style="color:#e6db74">&#39;The supplied path does not exist.&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_type</span>(self, path):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>is_dir():
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>is_dir <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>is_file <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>is_file <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>is_dir <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_full</span>(self, path):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> path<span style="color:#f92672">.</span>parent()<span style="color:#f92672">.</span>as_posix() <span style="color:#f92672">in</span> path<span style="color:#f92672">.</span>as_posix():
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parser</span>(self, f):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;The parsing logic to find authors and paper name from a file.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        f is a full path.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            file_name <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>parts[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>file_name <span style="color:#f92672">=</span> file_name
</span></span><span style="display:flex;"><span>            r <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39; \([\d-]{0,4}\)&#39;</span>)
</span></span><span style="display:flex;"><span>            sep_authors <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39; &amp; |, | and&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            all_authors, paper <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>split(r, file_name)
</span></span><span style="display:flex;"><span>            paper <span style="color:#f92672">=</span> paper<span style="color:#f92672">.</span>lstrip(<span style="color:#e6db74">&#39; - &#39;</span>)
</span></span><span style="display:flex;"><span>            authors <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>split(sep_authors, all_authors)
</span></span><span style="display:flex;"><span>            authors <span style="color:#f92672">=</span> [author<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;&amp; &#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;and &#39;</span>) <span style="color:#66d9ef">for</span> author <span style="color:#f92672">in</span> authors]
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>authors, self<span style="color:#f92672">.</span>paper <span style="color:#f92672">=</span> authors, paper
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (authors, paper)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">&#39;Missed on </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(file_name))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">make_dir</span>(self, authors):
</span></span><span style="display:flex;"><span>        repo <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>repo
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> author <span style="color:#f92672">in</span> authors:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                os<span style="color:#f92672">.</span>mkdir(repo[author]<span style="color:#f92672">.</span>as_posix())
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">copy_and_link</span>(self, authors, f, replace<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>        repo <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>repo
</span></span><span style="display:flex;"><span>        file_name <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>parts[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> author <span style="color:#f92672">in</span> authors:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> author <span style="color:#f92672">==</span> authors[<span style="color:#ae81ff">0</span>]:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                    subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;cp&#34;</span>, f<span style="color:#f92672">.</span>as_posix(),
</span></span><span style="display:flex;"><span>                                    repo[author]<span style="color:#f92672">.</span>as_posix()])
</span></span><span style="display:flex;"><span>                    success <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                    success <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ln&#34;</span>, <span style="color:#e6db74">&#34;-s&#34;</span>,
</span></span><span style="display:flex;"><span>                                repo[authors[<span style="color:#ae81ff">0</span>]][file_name]<span style="color:#f92672">.</span>as_posix(),
</span></span><span style="display:flex;"><span>                                repo[author]<span style="color:#f92672">.</span>as_posix()])
</span></span><span style="display:flex;"><span>                success <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> replace <span style="color:#f92672">and</span> author <span style="color:#f92672">==</span> authors[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">and</span> success:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                    f<span style="color:#f92672">.</span>unlink()
</span></span><span style="display:flex;"><span>                    subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ln&#34;</span>, <span style="color:#e6db74">&#34;-s&#34;</span>,
</span></span><span style="display:flex;"><span>                                    repo[authors[<span style="color:#ae81ff">0</span>]][file_name]<span style="color:#f92672">.</span>as_posix(),
</span></span><span style="display:flex;"><span>                                    f<span style="color:#f92672">.</span>parts[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>as_posix()])
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">OSError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>(self, f):
</span></span><span style="display:flex;"><span>        authors, paper <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>parser(f)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>make_dir(authors)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>copy_and_link(authors, f)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>exists <span style="color:#f92672">and</span> self<span style="color:#f92672">.</span>is_full:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>is_dir:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> f <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>path:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> f<span style="color:#f92672">.</span>parts[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> <span style="color:#f92672">or</span> f<span style="color:#f92672">.</span>is_symlink():
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                            self<span style="color:#f92672">.</span>main(f)
</span></span><span style="display:flex;"><span>                            self<span style="color:#f92672">.</span>added<span style="color:#f92672">.</span>append(f)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                            print(<span style="color:#e6db74">&#39;Failed on </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> str(f))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>main(self<span style="color:#f92672">.</span>path)
</span></span><span style="display:flex;"><span>                self<span style="color:#f92672">.</span>added<span style="color:#f92672">.</span>append(self<span style="color:#f92672">.</span>path)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>added:
</span></span><span style="display:flex;"><span>                print(item<span style="color:#f92672">.</span>parts[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> pathlib<span style="color:#f92672">.</span>PosixPath(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        repo <span style="color:#f92672">=</span> pathlib<span style="color:#f92672">.</span>PosixPath(sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        repo <span style="color:#f92672">=</span> pathlib<span style="color:#f92672">.</span>PosixPath(<span style="color:#e6db74">&#39;/Users/tom/Economics/Papers&#39;</span>)
</span></span><span style="display:flex;"><span>    print(p)
</span></span><span style="display:flex;"><span>    obj <span style="color:#f92672">=</span> Parser(p, repo)
</span></span><span style="display:flex;"><span>    obj<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>The script takes two arguments, the folder to work on and the folder to store the results (defaults to <code>/Users/tom/Economics/Papers</code>). Already a could things jump out that I should update. If I ever wanted to add more sophisticated command line arguments I would want to switch to something like <a href="http://docs.python.org/dev/library/argparse.html"><code>argparse</code></a>. I also shouldn&rsquo;t have something like <code>/Users/tom</code> anywhere. This kills portability since it&rsquo;s specific to my computer (use <code>os.path.expanduser('~')</code> instead).</p>
<p>I create a <code>Parser</code> which finds every paper in the directory given by the first argument. I had to settle on a standard naming for my papers. I chose <code>Author1, Author2, ... and AuthorN (YYYY) - Paper Title</code>. Whenever <code>Parser</code> find that pattern, it splits off the Authors from the title of the paper, and stores the location of the file.</p>
<p>After doing this for each paper in the directory, it&rsquo;s time to copy and link the files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> author <span style="color:#f92672">in</span> authors:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> author <span style="color:#f92672">==</span> authors[<span style="color:#ae81ff">0</span>]:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;cp&#34;</span>, f<span style="color:#f92672">.</span>as_posix(),
</span></span><span style="display:flex;"><span>                            repo[author]<span style="color:#f92672">.</span>as_posix()])
</span></span><span style="display:flex;"><span>            success <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>            success <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        subprocess<span style="color:#f92672">.</span>call([<span style="color:#e6db74">&#34;ln&#34;</span>, <span style="color:#e6db74">&#34;-s&#34;</span>,
</span></span><span style="display:flex;"><span>                        repo[authors[<span style="color:#ae81ff">0</span>]][file_name]<span style="color:#f92672">.</span>as_posix(),
</span></span><span style="display:flex;"><span>                        repo[author]<span style="color:#f92672">.</span>as_posix()])
</span></span><span style="display:flex;"><span>        success <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span></code></pre></div><p>Since I just one one actual copy of the paper on file, I only copy the paper to the first author&rsquo;s sub-folder. Thats the <code>if author == authors[0]</code>. Every other author just links to the copy stored in the first author&rsquo;s folder. The wiser me of today would use something like <a href="http://docs.python.org/2/library/shutil.html"><code>shutil</code></a> to copy the files instead of <code>subprocess</code>, but I was still new to python.</p>
<iframe src="https://www.flickr.com/photos/81581328@N02/12501636805/player/3eb021f38a" height="509" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>
<p>The biggest drawback is that I can&rsquo;t differentiate multiple authors with the same last name that well. I need to edit the original names to include the first initials (<code>C. Romer and D. Romer (2010)</code>). But overall I&rsquo;m pleased with the results.</p>
]]></content:encoded></item><item><title>Tidy Data in Action</title><link>https://tomaugspurger.github.io/posts/tidy-data-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/tidy-data-in-action/</guid><description>Hadley Whickham wrote a famous paper (for a certain definition of famous) about the importance of tidy data when doing data analysis. I want to talk a bit about that, using an example from a StackOverflow post, with a solution using pandas. The principles of tidy data aren&amp;rsquo;t language specific.
A tidy dataset must satisfy three criteria (page 4 in Whickham&amp;rsquo;s paper):
Each variable forms a column. Each observation forms a row.</description><content:encoded><![CDATA[<p><a href="http://had.co.nz">Hadley Whickham</a> wrote a famous paper (for a certain definition of famous) about the importance of <a href="http://vita.had.co.nz/papers/tidy-data.pdf">tidy data</a> when doing data analysis.
I want to talk a bit about that, using an example from a StackOverflow post, with a solution using <a href="http://pandas.pydata.org">pandas</a>. The principles of tidy data aren&rsquo;t language specific.</p>
<p>A tidy dataset must satisfy three criteria (page 4 in <a href="http://vita.had.co.nz/papers/tidy-data.pdf">Whickham&rsquo;s paper</a>):</p>
<ol>
<li>Each variable forms a column.</li>
<li>Each observation forms a row.</li>
<li>Each type of observational unit forms a table.</li>
</ol>
<p>In this <a href="http://stackoverflow.com/questions/22695680/python-pandas-timedelta-specific-rows">StackOverflow post</a>, the asker had some data NBA games, and wanted to know the number of days since a team last played. Here&rsquo;s the example data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> datetime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame({<span style="color:#e6db74">&#39;HomeTeam&#39;</span>: [<span style="color:#e6db74">&#39;HOU&#39;</span>, <span style="color:#e6db74">&#39;CHI&#39;</span>, <span style="color:#e6db74">&#39;DAL&#39;</span>, <span style="color:#e6db74">&#39;HOU&#39;</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">&#39;AwayTeam&#39;</span> : [<span style="color:#e6db74">&#39;CHI&#39;</span>, <span style="color:#e6db74">&#39;DAL&#39;</span>, <span style="color:#e6db74">&#39;CHI&#39;</span>, <span style="color:#e6db74">&#39;DAL&#39;</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">&#39;HomeGameNum&#39;</span>: [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">&#39;AwayGameNum&#39;</span> : [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>],
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">&#39;Date&#39;</span> : [datetime<span style="color:#f92672">.</span>date(<span style="color:#ae81ff">2014</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">11</span>), datetime<span style="color:#f92672">.</span>date(<span style="color:#ae81ff">2014</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">12</span>),
</span></span><span style="display:flex;"><span>                             datetime<span style="color:#f92672">.</span>date(<span style="color:#ae81ff">2014</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">14</span>), datetime<span style="color:#f92672">.</span>date(<span style="color:#ae81ff">2014</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">15</span>)]})
</span></span><span style="display:flex;"><span>df
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>AwayGameNum</th>
      <th>AwayTeam</th>
      <th>Date</th>
      <th>HomeGameNum</th>
      <th>HomeTeam</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 1</td>
      <td> CHI</td>
      <td> 2014-03-11</td>
      <td> 1</td>
      <td> HOU</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 1</td>
      <td> DAL</td>
      <td> 2014-03-12</td>
      <td> 2</td>
      <td> CHI</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 3</td>
      <td> CHI</td>
      <td> 2014-03-14</td>
      <td> 2</td>
      <td> DAL</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 3</td>
      <td> DAL</td>
      <td> 2014-03-15</td>
      <td> 2</td>
      <td> HOU</td>
    </tr>
  </tbody>
</table>
<p>4 rows × 5 columns</p>
</div>
<p>I want to focus on the second of the three criteria: <em>Each observation forms a row.</em>
Realize that the structure your dataset should take reflects the question you&rsquo;re trying to answer.
For the SO question, we want to answer &ldquo;How many days has it been since this team&rsquo;s last game?&rdquo;
Given this context what is an observation?</p>
<hr>
<p>We&rsquo;ll define an observation as a team playing on a day.
Does the original dataset in <code>df</code> satisfy the criteria for tidy data?
No, it doesn&rsquo;t since each row contains <strong>2</strong> observations, one for the home team and one for the away team.</p>
<p>Let&rsquo;s tidy up the dataset.</p>
<ul>
<li>I repeat each row (once for each team) and drop the game numbers (I don&rsquo;t need them for this example)</li>
<li>Select just the new rows (the one with odd indicies, <code>%</code> is the <a href="http://en.wikipedia.org/wiki/Modulo_operation">modulo operator</a> in python)</li>
<li>Overwrite the value of <code>Team</code> for the new rows, keeping the existing value for the old rows</li>
<li>rename the <code>HomeTeam</code> column to <code>is_home</code> and make it a boolen column (True when the team is home)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>s <span style="color:#f92672">=</span> df[[<span style="color:#e6db74">&#39;Date&#39;</span>, <span style="color:#e6db74">&#39;HomeTeam&#39;</span>, <span style="color:#e6db74">&#39;AwayTeam&#39;</span>]]<span style="color:#f92672">.</span>reindex_axis(df<span style="color:#f92672">.</span>index<span style="color:#f92672">.</span>repeat(<span style="color:#ae81ff">2</span>))<span style="color:#f92672">.</span>reset_index(drop<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;AwayTeam&#39;</span>: <span style="color:#e6db74">&#39;Team&#39;</span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>new <span style="color:#f92672">=</span> s[(s<span style="color:#f92672">.</span>index <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span>)<span style="color:#f92672">.</span>astype(bool)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s<span style="color:#f92672">.</span>loc[new<span style="color:#f92672">.</span>index, <span style="color:#e6db74">&#39;Team&#39;</span>] <span style="color:#f92672">=</span> new<span style="color:#f92672">.</span>loc[:, <span style="color:#e6db74">&#39;HomeTeam&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;HomeTeam&#39;</span>: <span style="color:#e6db74">&#39;is_home&#39;</span>})
</span></span><span style="display:flex;"><span>s[<span style="color:#e6db74">&#39;is_home&#39;</span>] <span style="color:#f92672">=</span> s[<span style="color:#e6db74">&#39;Team&#39;</span>] <span style="color:#f92672">==</span> s[<span style="color:#e6db74">&#39;is_home&#39;</span>]
</span></span><span style="display:flex;"><span>s
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>is_home</th>
      <th>Team</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2014-03-11</td>
      <td> False</td>
      <td> CHI</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2014-03-11</td>
      <td>  True</td>
      <td> HOU</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2014-03-12</td>
      <td> False</td>
      <td> DAL</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2014-03-12</td>
      <td>  True</td>
      <td> CHI</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2014-03-14</td>
      <td> False</td>
      <td> CHI</td>
    </tr>
    <tr>
      <th>5</th>
      <td> 2014-03-14</td>
      <td>  True</td>
      <td> DAL</td>
    </tr>
    <tr>
      <th>6</th>
      <td> 2014-03-15</td>
      <td> False</td>
      <td> DAL</td>
    </tr>
    <tr>
      <th>7</th>
      <td> 2014-03-15</td>
      <td>  True</td>
      <td> HOU</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 3 columns</p>
</div>
<p>Now that we have a 1:1 correspondance between rows and observations, answering the question is simple.</p>
<p>We&rsquo;ll just group by each team and find the difference between each consecutive <code>Date</code> for that team.
Then subtract one day so that back to back games reflect 0 days of rest.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>s[<span style="color:#e6db74">&#39;rest&#39;</span>] <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Team&#39;</span>)[<span style="color:#e6db74">&#39;Date&#39;</span>]<span style="color:#f92672">.</span>diff() <span style="color:#f92672">-</span> datetime<span style="color:#f92672">.</span>timedelta(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>s
</span></span></code></pre></div><div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>is_home</th>
      <th>Team</th>
      <th>rest</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2014-03-11</td>
      <td> False</td>
      <td> CHI</td>
      <td>   NaT</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2014-03-11</td>
      <td>  True</td>
      <td> HOU</td>
      <td>   NaT</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2014-03-12</td>
      <td> False</td>
      <td> DAL</td>
      <td>   NaT</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2014-03-12</td>
      <td>  True</td>
      <td> CHI</td>
      <td>0 days</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2014-03-14</td>
      <td> False</td>
      <td> CHI</td>
      <td>1 days</td>
    </tr>
    <tr>
      <th>5</th>
      <td> 2014-03-14</td>
      <td>  True</td>
      <td> DAL</td>
      <td>1 days</td>
    </tr>
    <tr>
      <th>6</th>
      <td> 2014-03-15</td>
      <td> False</td>
      <td> DAL</td>
      <td>0 days</td>
    </tr>
    <tr>
      <th>7</th>
      <td> 2014-03-15</td>
      <td>  True</td>
      <td> HOU</td>
      <td>3 days</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 4 columns</p>
</div>
<p>I planned on comparing that one line solution to the code needed with the messy data.
But honestly, I&rsquo;m having trouble writing the messy data version.
You don&rsquo;t really have anything to group on, so you&rsquo;d need to keep track of the row where you last saw this team (either in <code>AwayTeam</code> or <code>HomeTeam</code>).
And then each row will have two answers, one for each team.
It&rsquo;s certainly possible to write the necessary code, but the fact that I&rsquo;m struggling so much to write the messy version is pretty good evidence for the importance of tidy data.</p>
]]></content:encoded></item><item><title>Using Python to tackle the CPS</title><link>https://tomaugspurger.github.io/posts/tackling-the-cps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/tackling-the-cps/</guid><description>The Current Population Survey is an important source of data for economists. It&amp;rsquo;s modern form took shape in the 70&amp;rsquo;s and unfortunately the data format and distribution shows its age. Some centers like IPUMS have attempted to put a nicer face on accessing the data, but they haven&amp;rsquo;t done everything yet. In this series I&amp;rsquo;ll describe methods I used to fetch, parse, and analyze CPS data for my second year paper.</description><content:encoded><![CDATA[<p>The <a href="http://www.census.gov/cps/">Current Population Survey</a> is an important source of data for economists. It&rsquo;s modern form took shape in the 70&rsquo;s and unfortunately the data format and distribution shows its age. Some centers like <a href="https://cps.ipums.org/cps/">IPUMS</a> have attempted to put a nicer face on accessing the data, but they haven&rsquo;t done everything yet. In this series I&rsquo;ll describe methods I used to fetch, parse, and analyze CPS data for my second year paper. Today I&rsquo;ll describe fetching the data. Everything is available at the paper&rsquo;s <a href="https://github.com/TomAugspurger/dnwr-zlb">GitHub Repository</a>.</p>
<p>Before diving in, you should know a bit about the data. I was working with the monthly microdata files from the CPS. These are used to estimate things like the unemployment rate you see reported every month. Since around 2002, about 60,000 households are interviewed 8 times each over a year. They&rsquo;re interviewed for 4 months, take 4 months off, and are interviewed for 4 more months after the break. Questions are asked about demographics, education, economic activity (and more).</p>
<h2 id="fetching-the-data">Fetching the Data</h2>
<p>This was probably the easiest part of the whole project.
The <a href="http://www.nber.org/data/cps_basic.html">CPS website</a> has links to all the monthly files and some associated data dictionaries describing the layout of the files (more on this later).</p>
<p>In <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/monthly_data_downloader.py"><code>monthly_data_downloader.py</code></a> I fetch files from the CPS website and save them locally.  A common trial was the CPS&rsquo;s inconsistency. Granted, consistency and backwards compatibility are difficult, and sometimes there are valid reasons for making a break, but at times the changes felt excessive and random. Anyway for January 1976 to December 2009 the URL pattern is <code>http://www.nber.org/cps-basic/cpsb****.Z</code>, and from January 2010 on its <code>http://www.nber.org/cps-basic/jan10</code>.</p>
<p>If you&rsquo;re curious the python regex used to match those two patterns is <code>re.compile(r'cpsb\d{4}.Z|\w{3}\d{2}pub.zip|\.[ddf,asc]$')</code>. Yes that&rsquo;s much clearer.</p>
<p>I used python&rsquo;s builtin <a href="http://docs.python.org/2/library/urllib2.html"><code>urllib2</code></a> to fetch the site contents and parse with <code>lxml</code>. You should <em>really</em> just use <a href="http://docs.python-requests.org/en/latest/">requests</a>, instead of <code>urllib2</code> but I wanted to keep dependencies for my project slim (I gave up on this hope later).</p>
<p>A common pattern I used was to parse all of the links on a website, filter out the ones I don&rsquo;t want, and do something with the ones I do want. Here&rsquo;s an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> link <span style="color:#f92672">in</span> ifilter(partial_matcher, root<span style="color:#f92672">.</span>iterlinks()):
</span></span><span style="display:flex;"><span>    _, _, _fname, _ <span style="color:#f92672">=</span> link
</span></span><span style="display:flex;"><span>    fname <span style="color:#f92672">=</span> _fname<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    existing <span style="color:#f92672">=</span> _exists(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(out_dir, fname))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> existing:
</span></span><span style="display:flex;"><span>        downloader(fname, out_dir)
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#39;Added </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(fname))
</span></span></code></pre></div><p><code>root</code> is just the parsed html from <code>lxml.parse</code>. <code>iterlinks()</code> returns an iterable, which I filter through <code>partial_matcher</code>, a function that matches the filename patterns I described above. Iterators are my favorite feature of Python (not that they are exclusive to Python; I just love easy and flexible they are). The idea of having a list, filtering it, and applying a function to the ones you want is so simple, but so generally applicable. I could have even been a bit more functional and written it as <code>imap(downloader(ifilter(existing, ifilter(partial_matcher, root.iterlinks()))</code>. Lovely in its own way!</p>
<p>I do some checking to see if the file exists (so that I can easily download new months). If it is a new month, the filename gets passed to <code>downloader</code>:</p>
<pre tabindex="0"><code>def downloader(link, out_dir, dl_base=&#34;http://www.nber.org/cps-basic/&#34;):
    &#34;&#34;&#34;
    Link is a str like cpsmar06.zip; It is both the end of the url
    and the filename to be used.
    &#34;&#34;&#34;
    content = urllib2.urlopen(dl_base + link)
    with open(out_dir + link, &#39;w&#39;) as f:
        f.write(content.read())
</code></pre><p>This reads the data from at url and write writes it do a file.</p>
<p>Finally, I run <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/renamer.py"><code>renamer.py</code></a> to clean up the file names. Just because the CPS is inconsistent doesn&rsquo;t mean that we have to be.</p>
<p>In the <a href="http://tomaugspurger.github.io/blog/2014/02/04/tackling%20the%20cps%20(part%202)/">next post</a> I&rsquo;ll describe parsing the files we just downloaded.</p>
]]></content:encoded></item><item><title>Using Python to tackle the CPS (Part 2)</title><link>https://tomaugspurger.github.io/posts/tackling-the-cps-part-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/tackling-the-cps-part-2/</guid><description>Last time, we used Python to fetch some data from the Current Population Survey. Today, we&amp;rsquo;ll work on parsing the files we just downloaded.
We downloaded two types of files last time:
CPS monthly tables: a fixed-width format text file with the actual data Data Dictionaries: a text file describing the layout of the monthly tables Our goal is to parse the monthly tables. Here&amp;rsquo;s the first two lines from the unzipped January 1994 file:</description><content:encoded><![CDATA[<p><a href="http://tomaugspurger.github.io/blog/2014/01/27/tackling%20the%20cps/">Last time</a>, we used Python to fetch some data from the <a href="http://www.census.gov/cps/">Current Population Survey</a>. Today, we&rsquo;ll work on parsing the files we just downloaded.</p>
<hr>
<p>We downloaded two types of files last time:</p>
<ul>
<li>CPS monthly tables: a fixed-width format text file with the actual data</li>
<li>Data Dictionaries: a text file describing the layout of the monthly tables</li>
</ul>
<p>Our goal is to parse the monthly tables. Here&rsquo;s the first two lines from the unzipped January 1994 file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/V/H/U/t/D/C/monthly head -n <span style="color:#ae81ff">2</span> cpsb9401
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">881605952390</span> <span style="color:#ae81ff">2</span>  286-1 2201-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 1-1 <span style="color:#ae81ff">1</span> 5-1-1-1  <span style="color:#ae81ff">22436991</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">194</span> 2A61 -1 <span style="color:#ae81ff">2</span> 2-1-1-1-1 <span style="color:#ae81ff">363</span> 1-15240115 3-1 <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">0</span> 1-1 <span style="color:#ae81ff">2</span> 1-1660 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">236</span> <span style="color:#ae81ff">2</span> 8-1 <span style="color:#ae81ff">0</span> 1-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">1</span> 0-1 <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">5</span> 3-1-1 2-1-1-1-1-1 2-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1 -1-1  169-1-1-1-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 2-1 <span style="color:#ae81ff">0</span> 4-1-1-1-1-1-1 -1-1-1 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> 2-1-1-1-1-1-1-1-1-1 -1 -1-1-1 -1 -1-1-1 0-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 0-1-1-1-1-1  -1  -1  -1  0-1-1      0-1-1-1      -1      0-1-1-1-1-1-1-1-1 2-1-1-1-1  <span style="color:#ae81ff">22436991</span>        -1         <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">22436991</span>  22422317-1         <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> 0-1 <span style="color:#ae81ff">050</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">011</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> 0-1-1-1-1 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> 0-1-1-1-1-1-1 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 1-1-1-1
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">881605952390</span> <span style="color:#ae81ff">2</span>  286-1 2201-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 1-1 <span style="color:#ae81ff">1</span> 5-1-1-1  <span style="color:#ae81ff">22436991</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">194</span> 2A61 -1 <span style="color:#ae81ff">2</span> 2-1-1-1-1 <span style="color:#ae81ff">363</span> 1-15240115 3-1 <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">0</span> 1-1 <span style="color:#ae81ff">2</span> 3-1580 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">239</span> <span style="color:#ae81ff">2</span> 8-1 <span style="color:#ae81ff">0</span> 2-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">57</span> <span style="color:#ae81ff">1</span> 0-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 2-140-1-1 40-1-1-1-1 2-1 2-140-1 40-1   -1 <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">5</span> 5-1 <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">5</span> 2-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 1-118 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 4-1-1-1 -1 1-1 <span style="color:#ae81ff">1</span> 2-1-1-1-1-1-1-1 <span style="color:#ae81ff">4</span> 1242705-1-1-1 -1  3-1-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> 4-1 <span style="color:#ae81ff">1</span> 6-1 6-136-1 <span style="color:#ae81ff">1</span> 4-110-1 <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> 0-1-1-1-1  -1-1  -1  -1  0-1-1      0-1-1-1            -10-1-1-1-1-1-1-1-1-1-1-1-1-1  <span style="color:#ae81ff">22436991</span>        -1         <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">31870604</span>  25650291-1         <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> 0-1 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> 0-1-1-1-1 <span style="color:#ae81ff">0</span> 0-1 <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> 0-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1
</span></span></code></pre></div><p>Clearly, we&rsquo;ll need to parse the data dictionaries before being able to make sense of that.</p>
<p>Keeping with the CPS&rsquo;s tradition of consistently being inconsistent, the data dictionaries don&rsquo;t have a consistent schema across the years. Here&rsquo;s a typical example for some years (this one is from January 2003):</p>
<pre tabindex="0"><code>NAME         SIZE  DESCRIPTION                          LOCATION

HRHHID          15     HOUSEHOLD IDENTIFIER   (Part 1)             (1 - 15)

                   EDITED UNIVERSE: ALL HHLD&#39;s IN SAMPLE

                   Part 1. See Characters 71-75 for Part 2 of the Household Identifier.
                   Use Part 1 only for matching backward in time and use in combination
                   with Part 2 for matching forward in time.
</code></pre><p>My goal was to extract 4 fields (<code>name</code>, <code>size</code>, <code>start</code>, <code>end</code>). Name and size could be taken directly (<code>HRHHID</code>, and <code>15</code>). <code>start</code> and <code>end</code> would be pulled from the <code>LOCATION</code> part.</p>
<p>In <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/generic_data_dictionary_parser.py"><code>generic_data_dictionary_parser</code></a>, I define a class do this. The main object <code>Parser</code>, takes</p>
<ul>
<li><code>infile</code>: the path to a data dictionary we downloaded</li>
<li><code>outfile</code>: path to an <a href="http://pandas.pydata.org/pandas-docs/dev/io.html#hdf5-pytables">HDF5</a> file</li>
<li><code>style</code>: A string representing the year of the data dictionary. Different years are formatted differently, so I define a style for each (3 styles in all)</li>
<li><code>regex</code>: This was mostly for testing. If you don&rsquo;t pass a <code>regex</code> it will be inferred from the style.</li>
</ul>
<p>The heart of the parser is a regex that matches on lines like <code>HRHHID          15     HOUSEHOLD IDENTIFIER   (Part 1)             (1 - 15)</code>, but nowhere else. After many hours, failures, and false positives, I came up with something roughly like <code>ur'[\x0c]{0,1}(\w+)[\s\t]*(\d{1,2})[\s\t]*(.*?)[\s\t]*\(*(\d+)\s*-\s*(\d+)\)*$'</code> <a href="http://regex101.com/r/uH5iH7">Here&rsquo;s</a> an explanation, but the gist is that</p>
<ul>
<li><code>\w+</code> matches words (like <code>HRHHID</code>)</li>
<li>there&rsquo;s some spaces or tabs <code>[\s\t]*</code> (yes the CPS mixes spaces and tabs) between that and&hellip;</li>
<li>size <code>\d{1,2}</code> which is 1 or two columns digits</li>
<li>the description which we don&rsquo;t really care about</li>
<li>the start and end positions <code>(*(\d+)\s*-\s*(\d+)\)*$</code> broken into two groups.</li>
</ul>
<p>Like I said, that&rsquo;s the heart of the parser. Unfortunately I had to pad the file with some 200+ more lines of code to handle special cases, formatting, and mistakes in the data dictionary itself.</p>
<p>The end result is a nice <code>HDFStore</code>, with a parsed version of each data dictionary looking like:</p>
<pre tabindex="0"><code>         id  length  start  end
0    HRHHID      15      1   15
1   HRMONTH       2     16   17
2   HRYEAR4       4     18   21
3  HURESPLI       2     22   23
4   HUFINAL       3     24   26
         ...     ...    ...  ...
</code></pre><p>This can be used as an argument pandas&rsquo; <a href="http://pandas.pydata.org/pandas-docs/dev/io.html#files-with-fixed-width-columns"><code>read_fwf</code></a> parser.</p>
<p>Next time I&rsquo;ll talk about actually parsing the tables and wrangling them into a usable structure. After that, we will finally get to actually analyzing the data.</p>
]]></content:encoded></item><item><title>Using Python to tackle the CPS (Part 3)</title><link>https://tomaugspurger.github.io/posts/tackling-the-cps-part-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/tackling-the-cps-part-3/</guid><description>In part 2 of this series, we set the stage to parse the data files themselves.
As a reminder, we have a dictionary that looks like
id length start end 0 HRHHID 15 1 15 1 HRMONTH 2 16 17 2 HRYEAR4 4 18 21 3 HURESPLI 2 22 23 4 HUFINAL 3 24 26 ... ... ... ... giving the columns of the raw CPS data files. This post (or two) will describe the reading of the actual data files, and the somewhat tricky process of matching individuals across the different files.</description><content:encoded><![CDATA[<p>In <a href="http://tomaugspurger.github.io/blog/2014/02/04/tackling%20the%20cps%20(part%202)/">part 2</a> of this series, we set the stage to parse the data files themselves.</p>
<p>As a reminder, we have a dictionary that looks like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>         id  length  start  end
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>    HRHHID      <span style="color:#ae81ff">15</span>      <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">15</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>   HRMONTH       <span style="color:#ae81ff">2</span>     <span style="color:#ae81ff">16</span>   <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>   HRYEAR4       <span style="color:#ae81ff">4</span>     <span style="color:#ae81ff">18</span>   <span style="color:#ae81ff">21</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>  HURESPLI       <span style="color:#ae81ff">2</span>     <span style="color:#ae81ff">22</span>   <span style="color:#ae81ff">23</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>   HUFINAL       <span style="color:#ae81ff">3</span>     <span style="color:#ae81ff">24</span>   <span style="color:#ae81ff">26</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">...</span>     <span style="color:#f92672">...</span>    <span style="color:#f92672">...</span>  <span style="color:#f92672">...</span>
</span></span></code></pre></div><p>giving the columns of the raw CPS data files. This post (or two) will describe the reading of the actual data files, and the somewhat tricky process of matching individuals across the different files. After that we can (finally) get into analyzing the data. The old joke is that statisticians spend 80% of their time munging their data, and 20% of their time complaining about munging their data. So 4 posts about data cleaning seems reasonable.</p>
<p>The data files are stored in fixed width format (FWF), one of the least human friendly ways to store data.
We want to get to an <a href="http://www.hdfgroup.org/HDF5/">HDF5</a> file, which is extremely fast and convinent with pandas.</p>
<p>Here&rsquo;s the first line of the raw data:</p>
<pre tabindex="0"><code>head -n 1 /Volumes/HDD/Users/tom/DataStorage/CPS/monthly/cpsb9401
881605952390 2  286-1 2201-1 1 1 1-1 1 5-1-1-1  22436991 1 2 1 6 194 2A61 -1 2 2-1-1-1-1 363 1-15240115 3-1 4 0 1-1 2 1-1660 1 2 2 2 6 236 2 8-1 0 1-1 1 1 1 2 1 2 57 57 57 1 0-1 2 5 3-1-1 2-1-1-1-1-1 2-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1 -1-1  169-1-1-1-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 -1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 2-1 0 4-1-1-1-1-1-1 -1-1-1 0 1 2-1-1-1-1-1-1-1-1-1 -1 -1-1-1 -1 -1-1-1 0-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 0-1-1-1-1-1  -1  -1  -1  0-1-1      0-1-1-1      -1      0-1-1-1-1-1-1-1-1 2-1-1-1-1  22436991        -1         0  22436991  22422317-1         0 0 0 1 0-1 050 0 0 0 011 0 0 0-1-1-1-1 0 0 0-1-1-1-1-1-1 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 1 1 1 1 1 1 1 1 1 1 1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1-1 1 1 1-1-1-1
</code></pre><p>We&rsquo;ll use pandas&rsquo; <a href="http://pandas.pydata.org/pandas-docs/version/0.13.0/generated/pandas.io.parsers.read_fwf.html#pandas.io.parsers.read_fwf"><code>read_fwf</code></a> parser, passing in the widths we got from last post.
One note of warning, the <code>read_fwf</code> function is slow. It&rsquo;s written in plain python, and really makes you appreciate <a href="http://wesmckinney.com/blog/?p=543">all the work</a> Wes (the creater or pandas) put into making <code>read_csv</code> fast.</p>
<p>Start by looking at the <code>__main__</code> <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_hdf_store.py#L786">entry point</a>. The basic idea is to call <code>python make_hdf.py</code> with an optional argument giving a file with a specific set of months you want to process. Otherwise, it processes every month in your data folder. There&rsquo;s a bit of setup to make sure everything is order, and then we jump to the <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_hdf_store.py#L813">next important line</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> month <span style="color:#f92672">in</span> months:
</span></span><span style="display:flex;"><span>    append_to_store(month, settings, skips, dds, start_time<span style="color:#f92672">=</span>start_time)
</span></span></code></pre></div><p>I&rsquo;d like to think that <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_hdf_store.py#L725">this function</a> is fairly straightforward. We generate the names I use internally (<code>name</code>), read in the data dictionary that we parsed last time (<code>dd</code> and <code>widths</code>), and get to work reading the actual data with</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_fwf(name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;.gz&#39;</span>, widths<span style="color:#f92672">=</span>widths,
</span></span><span style="display:flex;"><span>                 names<span style="color:#f92672">=</span>dd<span style="color:#f92672">.</span>id<span style="color:#f92672">.</span>values, compression<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;gzip&#39;</span>)
</span></span></code></pre></div><p>Rather than stepping through every part of the processing (checking types, making sure indexes are unique, handling missing values, etc.) I want to focus on one specific issue: handling special cases. Since the CPS data aren&rsquo;t consistent month to month, I needed a way transform the data for certain months differently that for others. The design I came up with worked pretty well.</p>
<p>The solution is in <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_hdf_store.py#L603"><code>special_by_dd</code></a>. Basically, each data dictionary (which describes the data layout for a month) has its own little quirks.
For example, the data dictionary starting in January 1989 spread the two digits for age across two fields. The fix itself is extremely simple: <code>df[&quot;PRTAGE&quot;] = df[&quot;AdAGEDG1&quot;] * 10 + df[&quot;AdAGEDG2&quot;]</code>, but knowing when to apply this fix, and how to apply several of these fixes is the interesting part.</p>
<p>In <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_hdf_store.py#L603"><code>special_by_dd</code></a>, I created a handful of closures (basically just functions inside other functions), and a dictionary mapping names to those functions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>func_dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;expand_year&#34;</span>: expand_year, <span style="color:#e6db74">&#34;combine_age&#34;</span>: combine_age,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#34;expand_hours&#34;</span>: expand_hours, <span style="color:#e6db74">&#34;align_lfsr&#34;</span>: align_lfsr,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#34;combine_hours&#34;</span>: combine_hours}
</span></span></code></pre></div><p>Each one of these functions takes a DataFrame and returns a DataFrame, with the fix applied. The example above is <code>combine_age</code>.
In a settings file, I had a JSON object mapping the data dictionary name to special functions to apply. For example, January 1989&rsquo;s special case list was:</p>
<pre tabindex="0"><code>&#34;jan1989&#34;: [&#34;expand_year&#34;, &#34;combine_age&#34;, &#34;align_lfsr&#34;, &#34;expand_hours&#34;, &#34;combine_hours&#34;]
</code></pre><p>I get the necessary special case functions and apply each with</p>
<pre tabindex="0"><code>specials = special_by_dd(settings[&#34;special_by_dd&#34;][dd_name])
for func in specials:
    df = specials[func](df, dd_name)
</code></pre><p><code>specials</code> is just <code>func_dict</code> from above, but filtered to be only the functions specified in the settings file.
We select the function from the dictionary with <code>specials[func]</code> and then directly call it with <code>(df, dd_name)</code>.
Since functions are objects in python, we&rsquo;re able to store them in dictionaries and pass them around like just about anything else.</p>
<p>This method gave a lot of flexibility. When I discovered a new way that one month&rsquo;s layout differed from what I wanted, I simply wrote a function to handle the special case, added it to <code>func_dict</code>, and added the new special case to that month&rsquo;s speical case list.</p>
<p>There&rsquo;s a bit more standardization and other boring stuff that gets us to a good place: each month with the same layout. Now we get get to the tricky alignment, which I&rsquo;ll save for another post.</p>
]]></content:encoded></item><item><title>Using Python to tackle the CPS (Part 4)</title><link>https://tomaugspurger.github.io/posts/tackling-the-cps-part-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomaugspurger.github.io/posts/tackling-the-cps-part-4/</guid><description>Last time, we got to where we&amp;rsquo;d like to have started: One file per month, with each month laid out the same.
As a reminder, the CPS interviews households 8 times over the course of 16 months. They&amp;rsquo;re interviewed for 4 months, take 8 months off, and are interviewed four more times. So if your first interview was in month $m$, you&amp;rsquo;re also interviewed in months $$m + 1, m + 2, m + 3, m + 12, m + 13, m + 14, m + 15$$.</description><content:encoded><![CDATA[<p>Last time, we got to where we&rsquo;d like to have started: One file per month, with each month laid out the same.</p>
<p>As a reminder, the CPS interviews households 8 times over the course of 16 months. They&rsquo;re interviewed for 4 months, take 8 months off, and are interviewed four more times. So if your first interview was in month $m$, you&rsquo;re also interviewed in months $$m + 1, m + 2, m + 3, m + 12, m + 13, m + 14, m + 15$$.</p>
<p>I stored the data in <a href="http://pandas-docs.github.io/pandas-docs-travis/dsintro.html#panel">Panels</a>, the less well-known, higher-dimensional cousin of the <a href="http://pandas.pydata.org/pandas-docs/version/0.13.1/generated/pandas.DataFrame.html">DataFrame</a>. Panels are 3-D structures, which is great for this kind of data. The three dimensions are</p>
<ol>
<li>items: Month in Survey (0 - 7)</li>
<li>fields: Things like employment status, earnings, hours worked</li>
<li>id: An identifier for each household</li>
</ol>
<p>Think of each item as a 2-D slice (a DataFrame) into the 3-D Panel. So each household is described by a single Panel (or 8 DataFrames).</p>
<p>The actual panel construction occurs in <a href="https://github.com/TomAugspurger/dnwr-zlb/blob/master/data_wrangling/cps_wrangling/panel_construction/make_panel.py#L151"><code>make_full_panel</code></a>. Given a starting month, it figures out the months needed to generate that wave&rsquo;s Panel ($m, m + 1, m + 2, \ldots$), and stores these in an iterator called <code>dfs</code>.
Since each month on disk contains people from 8 different waves (first month, second month, &hellip;), I filter down to just the people in their $i^{th}$ month in the survey, where $i$ is the month I&rsquo;m interested in.
Everything up until this point is done lazily; nothing has actually be read into memory yet.</p>
<p>Now we&rsquo;ll read in each month, storing each month&rsquo;s DataFrame in a dictionary, <code>df_dict</code>. We take the first month as is.
Each subsequent month has to be matched against the first month.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>    df_dict <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>: df1}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i, dfn <span style="color:#f92672">in</span> enumerate(dfs, <span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>        df_dict[i] <span style="color:#f92672">=</span> match_panel(df1, dfn, log<span style="color:#f92672">=</span>settings[<span style="color:#e6db74">&#39;panel_log&#39;</span>])
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Lose dtype info here if I just do from dict.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># to preserve dtypes:</span>
</span></span><span style="display:flex;"><span>    df_dict <span style="color:#f92672">=</span> {k: v <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> df_dict<span style="color:#f92672">.</span>iteritems() <span style="color:#66d9ef">if</span> v <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>}
</span></span><span style="display:flex;"><span>    wp <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Panel<span style="color:#f92672">.</span>from_dict(df_dict, orient<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;minor&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wp
</span></span></code></pre></div><p>In an ideal world, we just check to see if the indexes match (the unique identifier). However, the unique ID given by the Census Bureau isn&rsquo;t so unique, so we use some heuristics to guess if the person is actually the same as the one interviewed next week. <code>match_panel</code> basically checks to see if a person&rsquo;s race and gender hasn&rsquo;t changed, and that their age has changed by less than a year or so.</p>
<p>There&rsquo;s a bit more code that handles special cases, errors, and the writing of the output.
I was especially interested in earnings data, so I wrote that out separately.
But now we&rsquo;re finally to the point where we can do some analysis:</p>
]]></content:encoded></item></channel></rss>